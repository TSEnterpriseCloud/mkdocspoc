{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The TSE in Cloud API is a RESTful API Client Libraries. The API exposes most of the features available in the TSE in Cloud Web interface.</p> <p> API vs SDK</p> <p>If you need more information about what APIs and SDKs are, you can watch this video.</p>","tags":["getting started","introduction"]},{"location":"#how-can-i-start","title":"How can I start?","text":"<p>In this documentation, you will find three modalities you can use to start developing your TSE in Cloud integration.</p>","tags":["getting started","introduction"]},{"location":"#step-by-step-guide","title":"Step-by-step Guide","text":"<p>The Step-by-step page is a guide that will tell you exactly what to do to be ready to develop in no time, including some tricky procedures such as the app configuration and the permission request. You can find most of the steps under the Basics category. If you don't know a lot about TSE in Cloud, or you are uncertain about which option to select, then we strongly suggest you start from here!</p>","tags":["getting started","introduction"]},{"location":"#quickstarts","title":"Quickstarts","text":"<p>If you prefer actions over words, and you feel pretty confident about your knowledge of Token authentication then probably you would prefer to start developing immediately, following one of our Quickstarts. Even so, we don't assure you that you will never have to explore the Basics category! </p>","tags":["getting started","introduction"]},{"location":"#guides","title":"\ud83d\udee0\ufe0f Guides","text":"<p>If you want to focus on your specific use case from the first moment, you can check our Guides. Here we explained how to implement our customer's most common use cases, and yours could be already included there too! Please, notice that you will most probably need to start with one of the previous options to be ready to follow our guides because they are more focused on the final result rather than on helping you get started.</p>","tags":["getting started","introduction"]},{"location":"#faqs","title":"FAQs","text":"<p>In the FAQs section we collected the most common questions we received from the other developers. In most of the cases, this will be enough to help you overcome your issues!</p>","tags":["getting started","introduction"]},{"location":"#can-you-help-me","title":"Can you help me?","text":"<p>Sure! Please, check the Support page to discover the available options!</p>","tags":["getting started","introduction"]},{"location":"basics/","title":"Basics","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>This category offers you all you need to start interacting with TSE in Cloud APIs.</p> <p>The easiest way to learn from scratch is to follow our Step-by-step guide, but you can also jump to one of the other pages if you prefer </p> <p>These are the available guides:</p>","tags":["basics"]},{"location":"basics/debug-your-integration/","title":"Debug your integration","text":"<p>If you are struggling while trying to use our APIs using one of our SDKs or your custom code here you can find simple steps to successfully resolve the issues you are experiencing.</p> <p>Danger</p> <p>It is always suggested to try using the API reference or Postman before trying to use the API, to be faster while implementing the needed methods with custom code or SDKs. !!! </p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#permission-errors","title":"Permission errors","text":"<p>If you are getting 401 Unauthorized or 403 Forbidden http status codes there are a few things you have to check:</p> <ul> <li> <p>401 Unauthorized: This error is returned when there is some problem with the Access Token (it could be missing or invalid) or with the Company Id (it could be invalid, or the Access Token could have been issued for a different company). Be sure to set up the token correctly, and check if the Company Id is valid using our List User Companies method.</p> </li> <li> <p>403 Forbidden: It means that you are trying to access some resource without having the proper permissions, most probably because your token is missing the correct scopes for the action you're trying to perform.</p> </li> </ul>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#memo-print-the-request-json","title":":memo:\u00a0 Print the request JSON","text":"<p>The most common issues the developers report to us are related to POST and PUT requests, and usually are due to errors while composing the request body.</p> <p>First, be sure to provide your payload correctly to the API invocation: we had many cases of customers sending us an empty request because they didn't pass the parameter correctly in their code.</p> <p>Then, check the request validity: since the body structure can be really big and complicated, it is really easy to put a parameter in the wrong position while composing the payload by hand; using the models included in our SDKs should prevent this kind of issue.</p> <p>If you still want to avoid our SDKs, then we suggest you use at least a JSON Marshaller: this will help you to generate valid JSON strings. If you are brave enough to compose your JSON by hand, then we suggest you at least check the body validity using a JSON Validator: you could have missed a comma somewhere.</p> <p>Next, you should check if the structure of the body reflects the Schema published in our API reference. If you're experiencing this kind of issue while using our SDKs, you can check the generated JSON by printing it as explained in the Use raw JSON as request body\u200b section included on every SDK introduction page. If you want to be sure that your JSON is valid, you can always try to send a request using our API Reference: if you obtain a valid response then your JSON is 100% valid.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#check-the-documentation","title":"Check the documentation","text":"<p>Here in our Developers Hub, you can find several complete examples for many languages and API methods, most notably in the create an invoice. If you can't find what you need, we provide a Search Box to help you with the research. If you are using one of our SDKs, then you can also check the GitHub repository of the SDK: in the README you can find the description of every available method implemented in our libraries. Additionally, you can check the Test files to check some examples of the SDK usage.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#nuclear-option","title":"Nuclear option","text":"<p>If at this point you're still facing the same issue, then we suggest you contact us. The problem could be related to your environment, or there could be an actual bug in our SDKs or APIs, so it requires further investigation.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/errors/","title":"Errors","text":"<p>In this page we'll explain how to manage the errors that could arise while using our APIs. Our APIs use conventional HTTP status codes to indicate the result of a request.</p> <p>The request codes can be categorized in this way:</p> <ul> <li>2xx codes indicate success</li> <li>4xx codes indicate a client error</li> <li>5xx codes indicate a server error</li> </ul> <p>Each error comes with a payload that describes what has occurred. The response body may be structured in different ways, depending on the error type.</p> <p>Below you can find a list of the error codes used by the TSE in Cloud APIs:</p> Code Title Meaning 401 Unauthorized The token is missing, invalid or expired. To fix this, you should re-authenticate. 403 Forbidden The user or the token you\u2019re using does not have the right permissions to fulfill the request. This can also happen if the license is expired or if you\u2019ve reached the API usage limits. 404 Not Found The resource you are looking for does not exist. 409 Conflict Cannot perform the operation. 422 Unprocessable Entity The request is invalid. This can happen if the body of the request does not pass validation. 429 Too Many Requests Your application is making too many requests and has exceeded the quotas. You should wait for the number of seconds specified in the Retry-After response header before trying again. 5xx Server Errors An error occured on TSE in Cloud\u2019s servers. These errors are rare. If you encounter one of these, please contact us.","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#no_good_man-authentication-errors","title":":no_good_man:\u00a0 Authentication errors","text":"<p>Gli errori di autorizzazione sono di seguito elencati per le rispettive categorie di status code.</p> <p>Access Token Request Errors</p> <p>400 Bad Request</p> Scope Response grant_type - missing <code>http {\"errors\":[{\"errorType\":\"invalid_request\",\"message\":\"Missing \u2018grant_type\u2019 parameter value.\"}],\"success\":false}</code> grant_type - invalid <code>http {\"errors\":[{\"errorType\":\"unsupported_grant_type\", \"message\":\"The authorization grant_type is not supported.\"}],\"success\":false}</code> <p>401 Unauthorized</p> Scope Response authorization header - missing <code>http {'errors': [{'errorType': invalid_client, 'message': 'Authorization header required.' }], \"success\": false}</code> authorization header invalid <code>http [{'errorType': invalid_client, \"message\": \"Invalid authorization header format.\"}], \"success\": false}</code> client_id - missing <code>http {\"errors\":[{\"errorType\":\"invalid_client\",\"message\": Invalid authorization header format.\"}],\"success\":false}</code> client_id - invalid <code>http{\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header. Client id invalid.\"}],\"success\":false}</code> client_secret - missing <code>http {\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header format.\"}],\"success\":false}}</code> client_secret - invalid <code>{\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header. Client secret invalid.\"}],\"success\":false}</code>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#raising_hand_man","title":":raising_hand_man:","text":"<p>Other errors that do not involve authorization or permissions, for example as a result of an invalid request or due to a non-existent resource, generate a response with an error object containing all the parameters useful to resolve the issue. This object contains a message and may contain a code parameters. Errors due to validation issues will include the validation_result object, which contains the list of the fields that generated the error and an explanatory message.</p> <pre><code>HTTP/1.0 404 Not Found\n{\n  \"error\": {\n    \"message\": \"La risorsa richiesta non esiste.\"\n  }\n}\n</code></pre>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#additional-resources","title":"Additional Resources","text":"<ul> <li>HTTP Status Codes</li> <li>List of HTTP status codes</li> <li>OAuth 2.0 Authorization Code - Possible Errors</li> <li>OAuth 2.0 Authorization Code - The Authorization Response</li> <li>OAuth 2.0 Device Authorization Flow - Token Request</li> </ul>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/limits-and-quotas/","title":"Limits and Quotas","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>To prevent abuse, avoid slowdowns, and ensure that all users make responsible use of our APIs, we enforce quota limits. If you perform too many requests you may exceed your quota; in this case, you will receive an error as a response until when your quota will be restored.</p> <p>We enforce two different kinds of limits, based on the time range that they apply to.</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#long-term-usage-limits","title":"Long-term usage limits","text":"<p>Long-term usage limits are meant to avoid improper usage of the APIs, by setting a limit on the maximum amount of requests in a certain period.</p> <p>!!! note Long-term Usage quotas are different based on the app visibility!</p> <p>If the app is public every user that has access to a specific company through a specific app shares (and consumes) the same quotas as other users that have access to the same company through the same app, if the app is private the quotas are no more related to the app but only to the company, this means that creating a new private app won't increase your quotas.</p> <p>!!! </p> <p>The quota limits are the following:</p> API limit type Limit Requests per hour 1.000 requests per hour on a company-app couple Requests per month 40.000 requests per month on a company-app couple for public apps Requests per month 40.000 requests per month per company for private apps <p>Long-term limits use fixed time windows: these quotas are reset at the beginning of a new hour or month.</p> <p>If the limit is exceeded, the API returns a 403 Forbidden HTTP status code; the response also includes a Retry-After header, indicating how long you should wait before retrying the request (in seconds).</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#short-term-rate-limits","title":"Short-term rate limits","text":"<p>Short-term rate limits are meant to avoid usage spikes that could affect the system availability, by preventing applications from sending too many requests in a short-time interval.</p> <p>!!! note Short-term Usage quotas are company-related!!! </p> <p>This means that every app and user that has access to a specific company shares (and consumes) the same quotas with other apps and users that have access to the same company.</p> <p>!!! </p> <p>The quota limit is the following:</p> API limit type Limit Requests every 5 minutes 300 requests every 5 minutes <p>Short-term usage limits use a sliding-window algorithm, check the additional resources for further info.</p> <p>If the limit is exceeded, the API returns a 429 Too Many Requests HTTP status code. The response also includes a Retry-After header, indicating how long you should wait before the request (in seconds).</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#http-headers-and-response-codes","title":"HTTP Headers and response codes","text":"<p>Every response contains several HTTP headers containing info about long-term usage limits.</p> Header Description RateLimit-HourlyRemaining The number of requests remaining for the current hour. RateLimit-HourlyLimit The maximum number of requests you are permitted to make per hour. RateLimit-MonthlyRemaining The number of requests remaining for the current month. RateLimit-MonthlyLimit The maximum number of requests you are permitted to make per month. <p>Here you can find an example of the HTTP response:</p> <pre><code>HTTP/1.1 200 OK\nDate: Tue, 05 May 2020 17:27:06 GMT\nStatus: 200 OK\nRateLimit-HourlyRemaining: 840\nRateLimit-HourlyLimit: 1000\nRateLimit-MonthlyRemaining: 1430\nRateLimit-MonthlyLimit: 20000\n</code></pre>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#is-it-still-not-enough","title":"Is it still not enough?","text":"<p>We designed our quotas to be able to satisfy the needs of the majority of the use cases. Nevertheless, in some cases, the default quotas could prove to be scarce, and in this situation, the only way is to increment the quota limit.</p> <p>If you think that your use case requires a higher quota, you can try to request us additional quota. It isn't automatic though, you'll have to explain your use case in detail to our team and demonstrate why our quotas are not sufficient to resolve it.</p> <p>We can increment only the long-term usage limits.</p> <p>!!! danger Short-term rate quotas can't be incremented!</p> <p>If you're facing an issue with short-term rate quota, e.g. you're obtaining a 429 Too Many Requests error response, it means that you're not managing our APIs correctly. If that's the case, we'll reject every additional quota request we'll receive, and you should instead read the next section.</p> <p>!!! </p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#massage_man-keep-calm-and-deal-with-quotas","title":":massage_man:\u00a0 Keep calm and deal with quotas!","text":"<p>As explained above, if the rate limit will be exceeded you'll receive a 429 response to your requests. This is not a fatal error and we expect you to retry the request after a short interval; if the requests will keep arriving too quickly, your requests will result in another error result, and so on.</p> <p>It is then important to gradually increase the delay between requests to overcome this issue, this is usually done by applying exponential back-off to your requests.</p> <p>Here you can find some code examples that you can use to introduce exponential back-off on your code:</p> <pre><code>// We apply exponential backoff to our C# SDK\n// https://github.com/fattureincloud/fattureincloud-csharp-sdk/\n\n// We suppose to use the http://www.thepollyproject.org\n// and the https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry libraries\n// to implement the exponential back-off\n// to install them using the .Net cli:\n// dotnet add package Polly\n// dotnet add package Polly.Contrib.WaitAndRetry\n\nusing System;\nusing Polly;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Polly.Contrib.WaitAndRetry;\n\nnamespace Backoff\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ProductsApi(config);\n            var companyId = 11;\n\n            var maxRetryAttempts = 5;\n            var pauseBetweenFailures = Backoff.ExponentialBackoff(TimeSpan.FromSeconds(2), retryCount: maxRetryAttempts);\n\n            var retryPolicy = Policy\n                .WaitAndRetry(pauseBetweenFailures);\n\n            retryPolicy.Execute(() =&gt;\n            {\n                ListProductsResponse result = apiInstance.ListProducts(companyId);\n                Console.Write(\"\\n successful\");\n                Console.Write(result);\n            });\n        }\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk/\n\n// We suppose to use the https://pkg.go.dev/github.com/cenkalti/backoff/v4 library\n// to implement the exponential back-off\n// to install it:\n// go get github.com/cenkalti/backoff/v4\n\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    backoff \"github.com/cenkalti/backoff/v4\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nvar (\n    companyId     = int32(2)\n    auth          = context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration = fattureincloudapi.NewConfiguration()\n    apiClient     = fattureincloudapi.NewAPIClient(configuration)\n)\n\nfunc main() {\n    operation := func() error {\n        resp, _, err := apiClient.ProductsAPI.ListProducts(auth, companyId).Execute()\n        if resp != nil {\n            json.NewEncoder(os.Stdout).Encode(resp)\n        } else {\n            fmt.Println(err)\n        }\n        return err\n    }\n    err := backoff.Retry(operation, backoff.NewExponentialBackOff())\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error %v\\n\", err)\n        return\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our Java SDK\n// https://github.com/fattureincloud/fattureincloud-java-sdk/\n\n// We suppose to use the https://resilience4j.readme.io library to implement the exponential back-off\n// to install it see: https://search.maven.org/artifact/io.github.resilience4j/resilience4j-retry/1.7.1/jar\n\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.github.resilience4j.retry.Retry;\nimport io.github.resilience4j.retry.RetryConfig;\nimport io.github.resilience4j.retry.RetryRegistry;\nimport io.vavr.CheckedFunction0;\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.ProductsApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListProductsResponse;\n\npublic class Application {\n\n    public static void main(String[] args) throws Throwable {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n        defaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJoMWJVQWJiVmpDT3ZqWmliYXlhOGMzcEQ2aEVEeENPcSIsImV4cCI6MTY0MjA4NDgzNH0.mBOAhimqtRV6WurlfVWNj9Sq7zOBZvGqSzV1swG0AN4\");\n\n        RetryConfig config = RetryConfig.custom()\n                .maxAttempts(10)\n                .retryExceptions(ApiException.class)\n                .intervalFunction(IntervalFunction.ofExponentialBackoff(1000, 2))\n                .build();\n\n        RetryRegistry registry = RetryRegistry.of(config);\n        Retry retry = registry.retry(\"listProducts\", config);\n\n        Retry.EventPublisher publisher = retry.getEventPublisher();\n        publisher.onRetry(event -&gt; System.out.println(event.toString()));\n\n        ProductsApi apiInstance = new ProductsApi(defaultClient);\n\n           Retry.decorateCheckedSupplier(retry,\n               () -&gt; apiInstance.listProducts(2, null, null, null, null, null));\n\n        System.out.println(retryingListSuppliers.apply().getData());\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our JavaScript SDK\n// https://github.com/fattureincloud/fattureincloud-js-sdk/\n\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet productsApiInstance = new fattureInCloudSdk.ProductsApi();\n\nvar companyId = 16;\nvar opts = {};\n\nconst delay = (retryCount) =&gt;\n  new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\nconst getProd = async (retryCount = 0, lastError = null) =&gt; {\n  if (retryCount &gt; 20) throw new Error(lastError);\n  try {\n    return await productsApiInstance.listProducts(companyId, opts);\n  } catch (e) {\n    await delay(retryCount);\n    return getProd(retryCount + 1, e);\n  }\n};\n\nconsole.log(await getProd());\n</code></pre> <pre><code>// We apply exponential backoff to our PHP SDK\n// https://github.com/fattureincloud/fattureincloud-php-sdk/\n\n// We suppose to use the https://github.com/stechstudio/backoff library\n// to implement the exponential back-off\n// to install: composer require stechstudio/backoff\n\n$backoff = new Backoff(10, 'exponential', 10000, true);\n\n$accessToken = \"YOUR_ACCESS_TOKEN\";\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken($accessToken);\n$service = new UserApi(new Client(), $config);\n\n$result = $backoff-&gt;run(function() {\n  return $this-&gt;service-&gt;listUserCompanies();\n});\nreturn $result; // it contains the result of the closure\n</code></pre> <pre><code># We apply exponential backoff to our Python SDK\n# https://github.com/fattureincloud/fattureincloud-python-sdk/\n\n# We suppose to use the https://github.com/litl/backoff library to implement the exponential back-off\n# to install: pip install backoff\n\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import products_api\nfrom fattureincloud_python_sdk.exceptions import ApiException\nimport backoff\nimport collections\ncollections.Callable = collections.abc.Callable # needed if you are using python &gt; 3.10\n\n@backoff.on_exception(backoff.expo, ApiException, max_tries=10)\ndef get_products(configuration, company_id):\n        with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n            products_api_instance = products_api.ProductsApi(api_client)\n            products_api_instance.list_products(company_id)\n        return\n\n\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\nconfiguration.retries = 0 # needed to implement custom backoff\n\ncompany_id = 11\nget_products(configuration, company_id)\n</code></pre> <pre><code># We apply exponential backoff to our Ruby SDK\n# https://github.com/fattureincloud/fattureincloud-ruby-sdk/\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n# Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.access_token = \"YOUR_TOKEN\"\nend\nsuppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\n\nretries = 0\nmax_retries = 20\ncompany_id = 2\n\nbegin\n    company_suppliers = suppliers_api_instance.list_suppliers(company_id)\n    puts company_suppliers\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  if retries &lt;= max_retries\n    retries += 1\n    sleep 2 ** retries\n    retry\n  else\n    raise \"Giving up on the server after #{retries} retries. Got error: #{e.message}\"\n  end\nend\n</code></pre> <pre><code>// We apply exponential backoff to our TypeScript SDK\n// https://github.com/fattureincloud/fattureincloud-ts-sdk/\n\nimport {\n  Configuration,\n  ProductsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet productsApiInstance = new ProductsApi(apiConfig);\n\nvar companyId = 2;\nvar opts = {};\n\nconst delay = (retryCount: number) =&gt;\n  new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\nconst getProd: any = async (retryCount = 0, lastError?: string) =&gt; {\n  if (retryCount &gt; 20) throw new Error(lastError);\n  try {\n    return await productsApiInstance.listProducts(companyId);\n  } catch (e: any) {\n    await delay(retryCount);\n    return getProd(++retryCount, e.message);\n  }\n};\n\nconsole.log(await getProd());\n</code></pre> <p>Alternatively, you can use the Retry-After header to wait the right amount of time before sending your request again.</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#additional-resources","title":"Additional Resources","text":"<ul> <li>Rate limiting using the Fixed Window algorithm</li> <li>Rate limiting using the Sliding Window algorithm</li> <li>Exponential Backoff</li> <li>Exponential Backoff And Jitter</li> <li>Better Retries with Exponential Backoff and Jitter for Java</li> <li>Retry-After Header</li> <li>403 Forbidden</li> <li>429 Too Many Requests</li> <li>Windowing examples in the Apache Beam documentation</li> <li>Retry with resilience4j</li> </ul>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/scopes/","title":"Scopes","text":"<p>Scope  Le applicazioni devono richiedere i permessi esclusivamente per le risorse a cui intendono accedere. I sistemi di autorizzazione supportati, riferiscono a tali permessi come scopes. Tutti gli endpoints di Enterprise WebAPI richiedono uno scope, al fine di riferire correttamente ad uno specifico ambiente di lavoro definito per il gestionale.</p> <p>Le applicazioni devono specificare lo scope nella richiesta di autenticazione. I\u2019access token rilasciato conterr\u00e0 solo gli scopes (al momento solo uno) che l\u2019applicativo ha richiesto.</p> Scope Description Webapi_admin Questo scope permette di accedere alle api di richiesta su ambienti disponibili. Permette di avere un token anche non conoscendo l'ambiente di riferimento a priori, perch\u00e9 magari non ancora richiesto all'utente. Tipicamente con questo tipo di token si eseguono interrogazioni di tipo amministrativo, come la GetAmbienti [ambiente] Rappresenta l\u2019ambiente di lavoro Enterprise a cui le API devono accedere","tags":["basics","authorization","oauth","scopes","permissions","forbidden","no_permission",403]},{"location":"basics/scopes/#additional-resources","title":"Additional resources","text":"<ul> <li>JWT Token</li> <li>Query String</li> <li>URL Encoding</li> <li>Whitelist</li> </ul>","tags":["basics","authorization","oauth","scopes","permissions","forbidden","no_permission",403]},{"location":"basics/additional-capabilities/","title":"Additional Capabilities","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Some of our GET and LIST methods offer a set of additional capabilities.</p> <p>These functionalities are mostly optional, but they can be really helpful to adapt the result of a GET method to your needs.</p> <p>The additional capabilities are:</p>","tags":["basics","additional capabilities","customize","optional"]},{"location":"basics/additional-capabilities/customize-response/","title":"Customize response","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of the TSE in Cloud resources are huge, including a wide range of fields; in most cases, you won't be interested in the whole representation of a particular resource, but you would prefer to extract only a certain subset of the fields because other ones could be unuseful for the specific operation that you are trying to implement.</p> <p>Response Customization lets you define the set of fields that you desire to retrieve, making the responses much lighter and manageable. This can be done in two ways, using two different parameters to be set in query string:</p> Parameter Description fields This is the more granular way to customize the response. You can define the exact set of fields that must be retrieved, by providing the fields that you want to retrieve as a comma-separated list. fieldset TSE in Cloud provides some pre-defined sets of fields that can be used to customize the response without having to define every single field. In the next section, you can check the list of fieldsets and the list of fields that they include for each resource. <p>If these two fields are not specified, we use default fieldsets for the methods that provide response customization. See below for further info.</p> <p>!!! warning This is not for everyone...</p> <p>Please, notice that not all the requests support response customization. Usually, all the List and Get methods that return resources representations provide this functionality, while some other methods don't. You can check the API Reference section to find out if a method supports response customization: for example, List Suppliers supports it, while Get User Info doesn't.</p> <p>!!! </p> <p>This is a response customization example:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?fields=type,description&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/received_documents?type=expense&amp;fields=type,description\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"fields\", \"type,description\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"fields\", \"type,description\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"fields\", \"type,description\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  fields: \"type,description\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'fields' =&gt; 'type,description',\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'fields': 'type,description',\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'fields': 'type,description',\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  fields: \"type,description\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>This request will list all the expenses, showing only the type and description fields as in the following example:</p> <pre><code>{\n  \"current_page\": 1,\n  \"data\": [\n    {\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Maracaibo\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Acquisto smartphone\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Assicurazione RCA\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\"\n    }\n  ],\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=1\",\n  \"from\": 1,\n  \"last_page\": 8,\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=8\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=2\",\n  \"path\": \"https://api-v2.fattureincloud.it/c/2/received_documents\",\n  \"per_page\": 4,\n  \"prev_page_url\": null,\n  \"to\": 4,\n  \"total\": 31\n}\n</code></pre> <p>!!! info Lower the pages number!</p> <p>Using the response customization you can lower the size of each item of the list, making it easier to manage pages with a wider page size. Feel free to increment the number of items per page!</p> <p>!!! </p>","tags":["basics","additional capabilities","customize","optional","list","get","filter","fieldset","fields","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/customize-response/#available-fieldsets","title":"Available fieldsets","text":"<p>Here you can find a list of the fieldsets:</p> <p>!!! tip Check the default!</p> <p>For the methods where the response customization is available, the basic is the default field set for the LIST methods, while the GET methods use the detailed fieldset as default. !!! </p> Resource Type Fieldset Fields ArchiveDocument basic id, date, category, description ArchiveDocument detailed id, date, category, description, attachment_url CashbookEntry basic id, date, amount_in, payment_accounts_in, amount_out, payment_account_out, description, kind, document CashbookEntry detailed id, date, amount_in, payment_accounts_in, amount_out, payment_account_out, description, kind, document Currency basic id, symbol, html_symbol, exchange_rate Client basic id, name, code, vat_number, tax_code, address_city, address_province, country Client detailed id, name, code, type, first_name, last_name, contact_person, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, address_extra, country, email, certified_email, phone, fax, notes, default_vat, default_payment_terms, default_payment_terms_type, default_payment_method, bank_name, bank_iban, bank_swift_code, shipping_address, e_invoice, ei_code, default_discount, discount_highlight, created_at, updated_at Supplier basic id, name, code, vat_number, tax_code, address_city, address_province, country Supplier detailed id, code, name, type, first_name, last_name, contact_person, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, address_extra, country, email, certified_email, phone, fax, notes, created_at, updated_at F24 basic id, due_date, status, amount, description, attachment_url F24 detailed id, due_date, status, payment_account, amount, description, attachment_url IssuedDocument basic id, type, entity, date, number, numeration, amount_net, amount_vat, amount_gross, amount_due_discount, subject, visible_subject, next_due_date, url IssuedDocument detailed id, type, entity, date, number, numeration, currency, language, subject, visible_subject, rc_center, notes, year, stamp_duty, payment_method, use_split_payment, use_gross_prices, merged_in, original_document, e_invoice, items_list, payments_list, extra_data, amount_net, amount_vat, amount_gross, amount_due_discount, rivalsa, amount_rivalsa, amount_rivalsa_taxable, rivalsa_taxable, cassa, cassa2, amount_global_cassa_taxable, global_cassa_taxable, amount_cassa, amount_cassa_taxable, cassa_taxable, amount_cassa2, amount_cassa2_taxable, cassa2_taxable, withholding_tax, amount_withholding_tax, withholding_tax_taxable, amount_withholding_tax_taxable, other_withholding_tax, amount_other_withholding_tax, other_withholding_tax_taxable, amount_other_withholding_tax_taxable, amount_enasarco_taxable, seen_date, next_due_date, template, h_margins, v_margins, show_payment_method, show_payments, show_totals, show_notification_button, show_tspay_button, url, dn_url, ai_url, is_marked, attachment_url, delivery_note, accompanying_invoice, dn_template, dn_date, dn_number, ai_template, dn_ai_packages_number, dn_ai_weight, dn_ai_causal, dn_ai_destination, dn_ai_transporter, dn_ai_notes, ei_data, ei_raw, ei_ts_data, ei_status, locked, has_ts_pay_pending_payment, ei_cassa_type, ei_cassa2_type, ei_withholding_tax_causal, ei_other_withholding_tax_causal, ei_other_withholding_tax_type, created_at, updated_at PaymentAccount basic id, name PaymentAccount detailed id, name, type, sia, iban, cuc, virtual PaymentMethod basic id, name, is_default, default_payment_account PaymentMethod detailed id, name, is_default, details, default_payment_account, type Product basic id, name, code, use_gross_price, net_price, gross_price, default_vat, net_cost, measure, description, category, in_stock Product detailed id, name, code, use_gross_price, net_price, gross_price, default_vat, net_cost, measure, description, category, notes, in_stock, stock_initial, stock_current, average_cost, average_price, extra_document, created_at, updated_at Receipt basic id, date, type, number, numeration, amount_net, amount_vat, amount_gross, description, payment_account, rc_center Receipt detailed id, date, type, number, numeration, amount_net, amount_vat, amount_gross, use_gross_prices, description, payment_account, rc_center, items_list, created_at, updated_at ReceivedDocument basic id, type, description, entity, date, next_due_date, amount_net, amount_vat, amount_gross, url, is_marked ReceivedDocument detailed id, type, description, entity, date, next_due_date, currency, amount_net, amount_vat, amount_gross, amount_withholding_tax, amount_other_withholding_tax, category, is_marked, is_detailed, tax_deductibility, vat_deductibility, amortization, rc_center, invoice_number, items_list, payments_list, attachment_url, attachment_preview_url, e_invoice, extra_data, created_at, updated_at Solicit basic id, amount_greater_than, expire_delta_days, doc_types, created_at Solicit detailed id, amount_greater_than, expire_delta_days, doc_types, localizations Template basic id, name, support_custom_taxable Template detailed id, name, support_custom_taxable VatType basic id, value, description, is_disabled VatType detailed id, value, description, notes, e_invoice, ei_type, ei_description, editable, is_disabled","tags":["basics","additional capabilities","customize","optional","list","get","filter","fieldset","fields","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/","title":"Filter Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that the returned response could be potentially huge, involving a high number of complex resources, making the response difficult to manage and send to your application. For this reason, you should filter the results to get only the data you need.</p> <p>Info</p> <p>Our APIs let you apply a filter only on a certain set of fields. Please check the table below for the available fields for each method.</p> <p>!!! </p> <p>To filter the returned resources, all you have to do is to add the \"q\" parameter to the query string, containing the desired query filter. This parameter must be provided as an URL-encoded string to avoid issues related to special characters in the string.</p> <p>For example, this request will filter all the clients, returning only the client with the specified vat_number. The query parameter value is the following:</p> Original value URL-encoded value vat_number = '11553420156' vat_number%20%3D%20%2711553420156%27 <p>This translates to the following code:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/entities/clients?q=vat_number%20%3D%20%2711553420156%27' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/entities/clients?q=vat_number%20%3D%20%2711553420156%27\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"q\", \"vat_number = '11553420156'\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/entities/clients\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"q\", \"vat_number = '11553420156'\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/entities/clients\")\n                .addQueryParameter(\"q\", \"vat_number='11553420156\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  q: \"vat_number = '11553420156'\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/entities/clients\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'q' =&gt; \"vat_number = '11553420156'\"\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/entities/clients\". '?' . $query;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    \"q\": \"vat_number = '11553420156'\"\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/entities/clients\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    \"q\": \"vat_number = '11553420156'\"\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/entities/clients\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  q: \"vat_number = '11553420156'\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/entities/clients?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>Here you can find an example response:</p> <pre><code>{\n  \"current_page\": 1,\n  \"data\": [\n    {\n      \"id\": 25330671,\n      \"code\": \"\",\n      \"name\": \"ACEA S.P.A.\",\n      \"vat_number\": \"2711553420156\",\n      \"tax_code\": \"\",\n      \"address_city\": \"Marioloso\",\n      \"address_province\": \"RM\",\n      \"country\": \"Italia\"\n    }\n  ],\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/c/2/entities/clients?q=vat_number+%3D+%2707305361003%27&amp;page=1\",\n  \"from\": 1,\n  \"last_page\": 1,\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/c/2/entities/clients?q=vat_number+%3D+%2707305361003%27&amp;page=1\",\n  \"next_page_url\": null,\n  \"path\": \"https://api-v2.fattureincloud.it/c/2/entities/clients\",\n  \"per_page\": 50,\n  \"prev_page_url\": null,\n  \"to\": 1,\n  \"total\": 1\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#building-a-query","title":"Building a query","text":"<p>Our API uses a SQL-like query language, which means that it is a subset of the where clause of the SQL language and can be used in a similar way to build the filter string.</p> <p>The string is based on triplets: field op value</p> <p>The field is a lowercase string, with dots and underscores, containing the name of the field the filter applies to; all the fields used in a single query must be included in the list of the authorized fields for the specific request type that is going to be performed, otherwise, an error will be returned. Check below for the list of authorized fields.</p> <p>The op is one of the following (unquoted):</p> Operator Symbol Equal '=' Greater than '&gt;' Greater than or equal to '&gt;=' Less than '&lt;' Less than or equal to '&lt;=' Not equal '&lt;&gt;', '!=' <p>Some additional operators are available to match a string against a Pattern (unquoted), they can't be used on another kind of parameters:</p> Operator Symbol Like 'like', 'LIKE' Not like 'not like', 'NOT LIKE' Contains 'contains', 'CONTAINS' Not contains 'not contains', 'NOT CONTAINS' Starts with 'starts with', 'STARTS WITH' Ends with 'ends with', 'ENDS WITH' <p>The value can be one of the following types:</p> Type Example String 'value' Boolean true, false Int 46 Double 12.34 <p>Additionally, it is possible to check if a field has a value or not, using NULL:</p> Type Value <p>You can combine multiple triplets to compose a more complex filter, using the following boolean operators and using parenthesis to define the order of the composition.</p> Operator Symbol Conjunction 'and', 'AND' Disjunction 'or', 'OR' <p>Here you can find some syntactically-valid queries (the field names used in the examples could not exist in our API):</p> <pre><code>vat_number = '11553420156'\n\nage &lt; 30\n\ncredit &gt;= 123.45\n\ndev = true\n\nsurname is not null\n\nemployer starts with 'Fatture'\n\nname like '%Pier%'\n\nsurname = 'Rossi' and name contains 'Luca'\n\ncity = 'Bergamo' and (age &lt; 30 or (dev = true and (name = 'Giorgio' and surname is not null) or employer starts with 'Fatture'))\n</code></pre> <p>Once the query is composed, it must be URL-encoded before using it in a query; most HTTP frameworks perform this step automatically while composing the request, otherwise, you can use dedicated libraries to apply the encoding explicitly.</p>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#filterable-fields","title":"Filterable fields","text":"<p>Here you can find the list of fields that can be used to filter the result for each List method:</p> Method Fields listClients id, code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, imported, atoka_show, e_invoice, ei_code, created_at, updated_at listSuppliers id, code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, imported, atoka_show, e_invoice, ei_code, created_at, updated_at listProducts id, name, code, net_price, gross_price, net_cost, description, category, notes, in_stock, created_at, updated_at listIssuedDocuments type, entity.id, entity.name, entity.vat_number, entity.tax_code, entity.city, entity.province, entity.country, date, number, numeration, any_subject, amount_net, amount_vat, amount_gross, next_due_date, created_at, updated_at listReceivedDocuments id, type, category, description, entity.id, entity.name, date, next_due_date, amount_gross, amount_net, amount_vat, invoice_number, created_at, updated_at listReceipts date, type, description, rc_center, created_at, updated_at listF24 due_date, status, amount, description listArchiveDocuments date, category, description","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>Percent Encoding (also known as URL-encoding)</li> <li>HTTP Request</li> <li>Query string</li> <li>HTML Url Encoding Reference</li> <li>SQL (Structured Query Language)</li> <li>SQL Tutorial</li> <li>Online URL Decoder/Encoder (for testing purposes)</li> </ul>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/paginate-results/","title":"Paginate results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that the returned response could be potentially huge, involving a high number of complex resources, making the response difficult to manage and send to your application. For this reason, we paginate the results to make sure responses are easier to handle.</p> <p>In general, asking for a list of resources will result in a paginated response; this means that the resources will be divided into multiple pages, each of those containing a subset of the entire result.</p> <p>Please note that Pagination is strictly related to the Sorting functionality: contiguous pages will always contain contiguous elements with respect to the ordering rules defined through the sort parameter.</p> <p>The pagination parameters are the following, and must be passed in query string:</p> Request parameters Description Info page The page number you want to retrieve. Default: 1 per_page The number of items per page. Default: 50 Max: 100 <p>The response to a paginated request will contain additional information to help you navigate through the list:</p> Response parmeter Description current_page Current page number. last_page Last page number of the list. per_page Number of items per page. from Number of the first item of the current page. to Number of the last item of the current page. total Total number of items. path Current endpoint. first_page_url Link to get the first page of the list. last_page_url Link to get the last page of the list. prev_page_url Link to get the previous page of the list. next_page_url Link to get the next page of the list. <p>Here you can find an example of a request:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?page=2&amp;per_page=5&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET  https://api-v2.fattureincloud.it/c/{companyId}/received_documents?page=2&amp;per_page=5&amp;type=expense\n</code></pre> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"page\", \"2\");\n            query.Add(\"per_page\", \"5\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"page\", \"2\")\n    values.Add(\"per_page\", \"5\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"page\", \"2\")\n                .addQueryParameter(\"per_page\", \"5\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  page: 2,\n  per_page: 5,\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'page' =&gt; 2,\n  'per_page' =&gt; 5,\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'page': 2,\n    'per_page': 5,\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'page': 2,\n    'per_page': 5,\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  page: \"2\",\n  per_page: \"5\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>!!! info It's easier with our SDKs!</p> <p>The SDK methods include the pagination parameters as function arguments, taking care of building the query string for you!</p> <p>!!! </p> <p>The example request will retrieve the second page of the expenses list, with a page size of 5 items. An example result could be the following:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": 251,\n      \"type\": \"expense\",\n      \"description\": \"Catene auto\",\n      \"amount_net\": 68.03,\n      \"amount_vat\": 14.97,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 109,\n        \"name\": \"Catene e catenacci S.r.l.\"\n      },\n      \"date\": \"2013-12-23\",\n      \"next_due_date\": \"2013-12-23\",\n      \"amount_gross\": 83\n    },\n    {\n      \"id\": 104328,\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Telefonica\",\n      \"amount_net\": 20,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 35,\n        \"name\": \"Maracaibo Mobile S.p.a.\"\n      },\n      \"date\": \"2014-08-01\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 20\n    },\n    {\n      \"id\": 134828,\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\",\n      \"amount_net\": 592,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": -1,\n        \"name\": \"Hotel Paradiso\"\n      },\n      \"date\": \"2014-10-29\",\n      \"next_due_date\": \"2014-10-29\",\n      \"amount_gross\": 592\n    },\n    {\n      \"id\": 134830,\n      \"type\": \"expense\",\n      \"description\": \"SmartPhone Y\",\n      \"amount_net\": 130,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 130\n    },\n    {\n      \"id\": 134832,\n      \"type\": \"expense\",\n      \"description\": \"BestBook Pro 2020\",\n      \"amount_net\": 430,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-05-29\",\n      \"next_due_date\": \"2014-05-29\",\n      \"amount_gross\": 430\n    }\n  ],\n  \"current_page\": 2,\n  \"last_page\": 67,\n  \"per_page\": \"5\",\n  \"from\": 6,\n  \"to\": 10,\n  \"total\": 335,\n  \"path\": \"https://api-v2.fattureincloud.it/received_documents\",\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\",\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=67\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=3\",\n  \"prev_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\"\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","pagination","chunks","page","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/paginate-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>REST API Design: Filtering, Sorting, and Pagination</li> </ul>","tags":["basics","additional capabilities","customize","optional","pagination","chunks","page","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/","title":"Sort Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that a certain order is established between them and that your application could take advantage of a certain order.</p> <p>Sorting lets you choose the rule that must be used to order the returned resources, delegating this task to our APIs.</p> <p>!!! warning Check the fields!</p> <p>Our APIs let you apply an ordering rule only on a certain set of fields. Please check the table below for the available fields for each method.</p> <p>!!! </p> <p>To order the returned resources, all you have to do is to add the sort parameter to the query string, containing a comma-separated set of the fields that define the sorting rule. The default order for each field is the ascending order, which doesn't require any prefix, while the descending order can be selected by adding the prefix \"-\" to the field name.</p> <p>For example, this request will sort all the expenses first by the \"date\" field in descending order and then by the \"amount_net\" field in ascending order.</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?sort=-date,amount_net&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/received_documents?sort=-date,amount_net&amp;type=expense\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"sort\", \"-date,amount_net\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"sort\", \"-date,amount_net\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"sort\", \"-date,net_amount\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  sort: \"-date,net_amount\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'sort' =&gt; '-date,amount_net',\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'sort': '-date,net_amount',\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'sort': '-date,net_amount',\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  sort: \"-date,net_amount\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>Here you can find an example response, please note that sorting is strictly related to the Pagination functionality:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": 251,\n      \"type\": \"expense\",\n      \"description\": \"Catene auto\",\n      \"amount_net\": 68.03,\n      \"amount_vat\": 14.97,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 109,\n        \"name\": \"Catene e catenacci S.r.l.\"\n      },\n      \"date\": \"2021-12-23\",\n      \"next_due_date\": \"2013-12-23\",\n      \"amount_gross\": 83\n    },\n    {\n      \"id\": 104328,\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Telefonica\",\n      \"amount_net\": 20,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 35,\n        \"name\": \"Maracaibo Mobile S.p.a.\"\n      },\n      \"date\": \"2021-08-01\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 20\n    },\n    {\n      \"id\": 134828,\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\",\n      \"amount_net\": 592,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": -1,\n        \"name\": \"Hotel Paradiso\"\n      },\n      \"date\": \"2014-10-29\",\n      \"next_due_date\": \"2020-10-29\",\n      \"amount_gross\": 592\n    },\n    {\n      \"id\": 134830,\n      \"type\": \"expense\",\n      \"description\": \"SmartPhone Y\",\n      \"amount_net\": 130,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"2020-09-01\",\n      \"amount_gross\": 130\n    },\n    {\n      \"id\": 134832,\n      \"type\": \"expense\",\n      \"description\": \"BestBook Pro 2020\",\n      \"amount_net\": 430,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"2020-05-29\",\n      \"amount_gross\": 430\n    }\n  ],\n  \"current_page\": 2,\n  \"last_page\": 67,\n  \"per_page\": \"5\",\n  \"from\": 6,\n  \"to\": 10,\n  \"total\": 335,\n  \"path\": \"https://api-v2.fattureincloud.it/received_documents\",\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\",\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=67\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=3\",\n  \"prev_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\"\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/#sortable-fields","title":"Sortable fields","text":"<p>Here you can find the list of fields that can be used to order the result for each List method; for every field, it is possible to use the ascending or descending order.</p> Method Fields listClients code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, e_invoice, ei_code, created_at, updated_at listSuppliers code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, e_invoice, ei_code, created_at, updated_at listProducts name, code, net_price, gross_price, net_cost, description, category, notes, in_stock, created_at, updated_at listIssuedDocuments entity.id, entity.name, entity.vat_number, entity.tax_code, entity.city, entity.province, entity.country, date, number, numeration, amount_net, amount_vat, amount_gross, next_due_date, created_at, updated_at listReceivedDocuments id, category, entity.id, entity.name, date, next_due_date, amount_gross, amount_net, amount_vat, created_at, updated_at listReceipts date, rc_center, created_at, updated_at listF24 due_date, status, amount, description listArchiveDocuments date, category, description","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>Descending Order VS Ascending Order \u2013 What Does it Mean?</li> <li>REST API Design: Filtering, Sorting, and Pagination</li> </ul>","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"legal/","title":"Legal","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Here you can find all the legal resources needed to integrate your app with TSE in Cloud.</p>","tags":["legal"]},{"location":"legal/marketing-resources-and-identity-guidelines/","title":"Marketing Resources and Identity Guidelines","text":"<p>In this page you will find useful resources for marketing and promoting your apps that work with TSE in Cloud.</p> <p>Before you proceed reading this guide download our TSE in Cloud Brand Kit, it contains all the resources we will talk about in the next sections.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#tse-in-cloud-badge","title":"TSE in Cloud Badge","text":"<p>Include TSE in Cloud badge in all digital and printed marketing materials as a clear call to action to get your app on the TSE in Cloud App Store.</p> <p>Remember:</p> <ul> <li>Use the badges as provided. The badge artwork should not be modified.</li> <li>Use the preferred blue badge in all marketing communications promoting your app.</li> <li>The alternative light badge is designed to give you greater versatility and can be used when the preferred blue badge appears visually heavy in the layout or difficult to insert. The alternative badge is suitable when it complements the colors used in the layout.</li> <li>There must be clear space surrounding the badge equal to one-quarter the height of the badge.</li> <li>The badge must be large enough that all of the text is legible.</li> <li>The TSE in Cloud badge should be the same size or larger than other application store badges.</li> <li>Badges must be shown on a solid colored background or a simple background image that does not obscure the badge.</li> <li>Any online use of the badge must link to the public page of the app on TSE in Cloud App Store.</li> <li>The badge can only be used to promote content available on TSE in Cloud App Store.</li> <li>Use of the TSE in Cloud badge must be reviewed and approved by the TSE in Cloud Marketing team if the badge will be in:</li> <li>a national or international TV commercial;</li> <li>an out-of-home marketing campaign;</li> <li>a marketing campaign that will count over 1 million impressions.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#preferred-badge","title":"Preferred badge","text":"<p>We provide two formats of the preferred badge, PNG and SVG, you can find them in the Badge/Preferred badge folder in the TSE in Cloud Brand Kit, for each format we also provide two different sizes.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#alternative-badge","title":"Alternative badge","text":"<p>We provide two formats of the alternative badge, PNG and SVG, you can find them in the Badge/Alternative badge folder in the TSE in Cloud Brand Kit, for each format we also provide two different sizes.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#tse-in-cloud-login-and-connect-buttons","title":"TSE in Cloud Login and Connect Buttons","text":"<p>You can use TSE in Cloud API to:</p> <ul> <li>connect your app to a customer's account</li> <li>login on your app with TSE in Cloud credentials</li> </ul> <p>We provide you with two specific buttons in two different styles.</p> <p>Remember:</p> <ul> <li>Use the buttons as provided. Never alter the buttons.</li> <li>Use the preferred blue buttons on your site.</li> <li>The alternative light buttons are designed to give you greater versatility and can be used when the preferred blue buttons appear visually heavy in the layout or difficult to insert. The alternative buttons are suitable when it complements the colors used in the layout.</li> <li>There must be clear space surrounding the buttons equal to the height of the buttons.</li> <li>Never use the buttons on ads or to promote your app. Buttons are meant to be function-only content. Use the badge instead.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#login-button","title":"Login Button","text":"<p>The login button shows the text Accedi con TSE in Cloud and you can find it in two versions, Preferred and Alternative, each version comes in two formats, PNG and SVG, and two different sizes, you can find them under the Button/Login folder in the TSE in Cloud Brand Kit.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#connect-button","title":"Connect Button","text":"<p>The connect button shows the text Connetti con TSE in Cloud and you can find it in two versions, Preferred and Alternative, each version comes in two formats, PNG and SVG, and two different sizes, you can find them under the Button/Connect folder in the TSE in Cloud Brand Kit.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#communication-ads-style","title":"Communication, Ads &amp; Style","text":"<p>When promoting your app, your headline and copy should focus on your app, not on TSE in Cloud features and plus. Use clear, simple messaging. Always include a call to action to find your app on TSE in Cloud App Store.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#referring-to-tse-in-cloud","title":"Referring to TSE in Cloud","text":"<p>Use TSE in Cloud in a referential phrase to indicate that your app is compatible with the software.</p> <p>Example:</p> <ul> <li>\u00a0 \u201capp name\u201d for TSE in Cloud or \u201capp name\u201d integrated with TSE in Cloud;</li> <li>\u00a0 TSE in Cloud \u201capp name\u201d.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#spelling-and-language","title":"Spelling and Language","text":"<p>Always use the correct names with the correct capitalization:</p> <ul> <li>TSE in Cloud</li> <li>TSE in Cloud App Store</li> </ul> <p>Never typeset names using all uppercase letters.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/policy-acceptable-use/","title":"Policy di Acceptable Use","text":"<p>Le seguenti norme, cos\u00ec come le condizioni generali di utilizzo API MadBit, regolano l'utilizzo delle API dei software di titolarit\u00e0 di MadBit Entertainment S.r.l. a socio unico.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#1-identificazione","title":"1. Identificazione","text":"<p>Per accedere ai dati degli utenti di MadBit \u00e8 necessario fornire agli stessi ed a MadBit informazioni chiare e accurate sull'utilizzo che si far\u00e0 degli stessi e delle API; ci\u00f2 include, a titolo esemplificativo:</p> <ul> <li>Chi richiede i dati?\u00a0Tutte le richieste di autorizzazione devono rappresentare accuratamente l'identit\u00e0 dell'applicativo integrato che cerca di accedere ai dati dell'utente.\u00a0Se hai ottenuto le chiavi dell\u2019utente per accedere ai servizi API di MadBit, mantieni queste chiavi riservate.</li> <li>Quali dati vengono richiesti?\u00a0\u00c8 necessario fornire informazioni chiare e accurate che spieghino i tipi di dati richiesti.\u00a0\u00c8 necessario mantenere costantemente aggiornata la privacy policy e chiedere all'utente di acconsentire a qualsiasi modifica si voglia apportare alla tipologia di dati trattati o al trattamento stesso prima di porlo in essere.</li> <li>Perch\u00e9 vengono richiesti i dati utente?\u00a0\u00c8 richiesta trasparenza con gli utenti quando viene spiegato lo scopo per cui l\u2019applicativo integrato richiede i dati utente ed \u00e8 vietato l\u2019utilizzo degli stessi per scopi ulteriori. In generale, gli utenti dovrebbero essere in grado di comprendere prontamente il valore di fornire i dati richiesti dall'applicativo integrato nonch\u00e9 le conseguenze della condivisione di tali dati con l'applicativo integrato.</li> </ul>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#2-trasparenza-e-privacy-policy","title":"2. Trasparenza e Privacy Policy","text":"<p>\u00c8 necessario pubblicare un'informativa sulla privacy che documenti completamente il modo in cui l\u2019applicativo integrato interagisce con i dati dell'utente. \u00c8 necessario rendere disponibile tale informativa quando l'applicazione viene resa disponibile al pubblico.</p> <p>L\u2019informativa deve essere accurata, completa e facilmente accessibile.; descrivendo in modo preciso il modo in cui l\u2019applicativo integrato accede, utilizza, archivia o condivide i dati utente. </p> <p>Prima di modificare il modo in cui l\u2019applicativo integrato utilizza i dati utente \u00e8 obbligatorio chiedere sempre l\u2019assenso dell\u2019utente.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#3-minimizzazione-e-adeguatezza","title":"3. Minimizzazione e adeguatezza","text":"<p>Le richieste di autorizzazione devono essere limitate alle sole informazioni necessarie per implementare l'applicativo integrato.</p> <p>Non va richiesto l'accesso a informazioni superflue e/o che non servono; l'accesso deve essere circoscritto all'ambito di accesso minimo e tecnicamente necessario per implementare funzionalit\u00e0 o servizi esistenti nell'applicativo integrato e l'accesso limitato alla quantit\u00e0 minima di dati necessari. </p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#4-uso-ingannevole","title":"4. Uso ingannevole","text":"<p>\u00c8 severamente vietato intraprendere qualsiasi attivit\u00e0 che possa ingannare gli utenti o MadBit in merito all'utilizzo delle API di MadBit.\u00a0Ci\u00f2 include, a titolo esemplificativo, i seguenti requisiti:</p> <ul> <li>Chiarezza su quali dati vengono raccolti e cosa viene fatto con essi. \u00c8 necessario rendere noti tutti i dati utente ai quali si accede, che si utilizza, memorizza, elimina o che vengono condivisi, nonch\u00e9 qualsiasi azione intrapresa per conto di un utente. Non \u00e8 consentito accedere, aggregare o analizzare i dati degli utenti di MadBit con il fine di visualizzarli, venderli o distribuirli in altro modo a terze parti. Nel complesso, non dovrebbero esserci sorprese per gli utenti di MadBit: funzionalit\u00e0 nascoste, servizi o azioni non coerenti con lo scopo commercializzato dell\u2019applicativo integrato potrebbero indurre MadBit ad interdire l\u2019accesso e l\u2019utilizzo delle API</li> <li>Divieto di utilizzo di API non documentate senza espressa autorizzazione. \u00c8 vietato il reverse engineering delle API di MadBit non documentate o tentare in altro modo di derivare o utilizzare il codice sorgente sottostante alle API di MadBit non documentate.\u00a0</li> <li>\u00c8 vietato rilasciare dichiarazioni false o fuorvianti sull\u2019identit\u00e0 di chi gestisce l\u2019applicativo integrato. \u00c8 necessario rappresentare accuratamente l'azienda, l'organizzazione o la persona che gestisce l'applicazione.\u00a0Fornire false dichiarazioni sulla propria identit\u00e0 a MadBit o agli utenti di MadBit \u00e8 motivo di interdizione all\u2019accesso e utilizzo delle API.</li> </ul>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#5-sicurezza","title":"5. Sicurezza","text":"<p>\u00c8 necessario adottare misure ragionevoli e appropriate per proteggere tutte le applicazioni o i sistemi che utilizzano le API di MadBit contro l'accesso, l'uso, la distruzione, la perdita, l'alterazione o la divulgazione non autorizzati o illegali.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#6-divieti-di-utilizzo","title":"6. Divieti di utilizzo","text":"<p>\u00c8 vietato utilizzare i dati delle API di MadBit per scopi pubblicitari, inclusa la pubblicit\u00e0 personalizzata, re-targeting e basata sugli interessi e la misurazione della pubblicit\u00e0.</p> <p>\u00c8 vietato utilizzare le API di MadBit per creare, addestrare o migliorare (direttamente o indirettamente) un prodotto o servizio simile o concorrente ad un software di titolarit\u00e0 di MadBit.</p> <p>\u00c8 vietato accedere, memorizzare nella cache, copiare, analizzare o eseguire qualsiasi azione che coinvolga i dati dell'utente a meno che non sia espressamente consentito dall\u2019utente stesso.</p> <p>\u00c8 vietato effettuare attacchi informatici di ogni tipo verso le API di MadBit.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#7-limiti-di-utilizzo","title":"7. Limiti di utilizzo","text":"<p>\u00c8 necessario sviluppare l\u2019applicativo tenendo conto dei limiti di utilizzo specificati nella documentazione API. MadBit si riserva la possibilit\u00e0 di modificare questi limiti a propria discrezione.</p> <p>Il reiterato superamento di questi limiti \u00e8 motivo di interdizione all\u2019accesso e utilizzo delle API.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#8-marchi-e-segni-distintivi","title":"8. Marchi e segni distintivi","text":"<p>\u00c8 possibile utilizzare il logo o i segni distintivi di MadBit e dei software di sua titolarit\u00e0 solo come prescritto nelle\u00a0Brand Guidelines for FICdevs disponibili all\u2019interno dell\u2019area riservata allo Sviluppatore.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/terms/","title":"Condizioni generali di utilizzo delle API MadBit","text":"","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#definizioni","title":"Definizioni","text":"<p>Nelle presenti CONDIZIONI GENERALI DI CONTRATTO (il \u201cContratto\u201d) i termini e le espressioni di seguito elencati, quando riportati con iniziale maiuscola, devono intendersi con il significato ad essi attribuito nel presente paragrafo. I termini indicati al singolare si intendono anche al plurale e viceversa.</p> <p>API: indica le application programming interface pubblicamente disponibili relative a uno o pi\u00f9 Software e che espongono determinate funzionalit\u00e0 di questi ultimi, allo scopo di consentire a soggetti terzi di sviluppare soluzioni applicative interoperabili con i Software cui le API si riferiscono.</p> <p>Applicativo Integrato: indica il software applicativo realizzato dallo Sviluppatore e integrato con il Software attraverso le API.</p> <p>Codice di Condotta Anti-Corruzione: significa il codice di condotta anti-corruzione adottato dal Gruppo TeamSystem e consultabile al sito teamsystem.com.</p> <p>Codice Etico: significa il codice etico adottato dal Gruppo TeamSystem e consultabile al sito teamsystem.com.</p> <p>Comunicazione di Ritiro: ha il significato di cui al paragrafo 10.2.</p> <p>Dati Personali: ha il significato di cui all\u2019art. 4, n. 1 del Regolamento (UE) 2016/679 (\u201cGDPR\u201d).</p> <p>Documentazione: indica la documentazione tecnica e le istruzioni relative all\u2019utilizzo delle API.</p> <p>Gruppo TeamSystem: indica la societ\u00e0 TeamSystem S.p.A. (con C.F. e P. IVA n. 01035310414) e tutte le societ\u00e0 direttamente o indirettamente controllate da, o collegate a, TeamSystem S.p.A. ai sensi dell\u2019art. 2359 c.c.</p> <p>Licenza: ha il significato di cui al paragrafo 2.1. </p> <p>Madbit: significa la societ\u00e0 TeamSystem S.p.A. societ\u00e0 con socio unico soggetta all\u2019attivit\u00e0 di direzione e coordinamento di TeamSystem Holdco S.p.A.(C.F. e P. IVA n. 03881520161), con sede in Sede Legale e Amministrativa: Via Sandro Pertini, 88 - 61122 Pesaro (PU) , titolare del Software cui le API si riferiscono.</p> <p>Normativa sulla Protezione dei Dati Personali: indica, congiuntamente, il GDPR, il d.lgs. 196/2003 e successive modifiche e i provvedimenti delle autorit\u00e0 competenti in materia.</p> <p>Nuovo Prodotto: ha il significato di cui al paragrafo 10.2.</p> <p>Parti: indica, congiuntamente, Madbit e lo Sviluppatore.</p> <p>Policy di Acceptable Use: indica la policy di acceptable use delle API contenente le specifiche normative tecniche di utilizzo delle API, allegata al presente Contratto e sempre consultabile all\u2019interno dell\u2019area riservata allo Sviluppatore, che lo Sviluppatore dichiara espressamente di aver visionato e di accettare e che costituisce parte integrante del Contratto. Madbit si riserva il diritto di modificare in qualsiasi momento e senza alcun preavviso la Policy di Acceptable use a cui lo Sviluppatore dovr\u00e0 tempo per tempo attenersi. </p> <p>Prodotto Obsoleto: ha il significato di cui al paragrafo 10.2.</p> <p>Propriet\u00e0 Intellettuale: indica ogni diritto di propriet\u00e0 intellettuale e/o industriale, registrato o non registrato, in tutto o in parte, ovunque nel mondo, quali - a titolo esemplificativo e non esaustivo - marchi, brevetti, modelli di utilit\u00e0, disegni e modelli, nomi a dominio, know-how, opere coperte dal diritto d\u2019autore, database e software (ivi inclusi, ma non limitatamente a, le sue derivazioni, il codice sorgente, il codice oggetto e le interfacce).</p> <p>Software: indica il software applicativo di titolarit\u00e0 di Madbit cui le API si riferiscono.</p> <p>Sviluppatore: indica il soggetto che sottoscrive il presente Contratto.</p> <p>Utenti Finali: indica i clienti finali dello Sviluppatore e licenziatari degli Applicativi Integrati. </p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#1-ambito-di-applicazione","title":"1. Ambito di applicazione","text":"<p>1.1. Oggetto del Contratto. Il presente Contratto disciplina i termini e le condizioni applicabili al rapporto tra Madbit e lo Sviluppatore avente ad oggetto l\u2019utilizzo delle API da parte dello Sviluppatore, per finalit\u00e0 di sviluppo di Applicativi Integrati.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#2-licenza-duso-delle-api-e-obblighi-dello-sviluppatore","title":"2. Licenza d\u2019uso delle API e obblighi dello Sviluppatore","text":"<p>2.1. Licenza d\u2019uso delle API. Con il presente Contratto Madbit concede allo Sviluppatore una licenza d\u2019uso non esclusiva, non cedibile, non sub-licenziabile, temporanea e revocabile delle API e della relativa Documentazione, al solo e limitato scopo di consentire allo Sviluppatore di utilizzare le API e la Documentazione per realizzare Applicativi Integrati (\u201cLicenza\u201d). Lo Sviluppatore \u00e8 inoltre consapevole che la Licenza d\u2019uso delle API concessa con il Contratto non si estende anche al Software cui l\u2019API si riferisce.</p> <p>2.2. Limitazioni d\u2019uso. Lo Sviluppatore si impegna a utilizzare le API nei limiti della Licenza, in conformit\u00e0 alle normative tempo per tempo applicabili e nei limiti della Policy di Acceptable Use. Lo Sviluppatore \u00e8 consapevole che ogni utilizzo delle API per finalit\u00e0 diverse da quelle contemplate al paragrafo 2.1 \u00e8 severamente vietato e legittimer\u00e0 Madbit alla risoluzione del Contratto in conformit\u00e0 al successivo paragrafo 8.1, fermo restando il risarcimento del danno.</p> <p>2.3. Requisiti tecnici e di sicurezza. Lo Sviluppatore si impegna a utilizzare le API nel rispetto dei requisiti tecnici e di sicurezza di cui alla Policy di Acceptable Use nonch\u00e9 quelli presenti nella documentazione o che saranno indicati tempo per tempo da Madbit. Su richiesta di Madbit, lo Sviluppatore fornir\u00e0 a Madbit tutte le informazioni, i dati e le prove relative al rispetto dei predetti requisiti tecnici e di sicurezza. In generale, le attivit\u00e0 di sviluppo ed erogazione agli Utenti Finali degli Applicativi Integrati da parte dello Sviluppatore dovranno essere svolte in modo da evitare qualunque azione, o da prevenire qualunque omissione, che possa danneggiare o alterare il funzionamento dei Software e/o dell\u2019infrastruttura informatica su cui questi risiedono, o che possa comportare la perdita o il danneggiamento di dati e/o di informazioni del Gruppo TeamSystem o di terzi, ivi inclusi senza limitazione gli Utenti Finali.</p> <p>2.4. Aggiornamenti. Madbit si riserva il diritto di apportare aggiornamenti e modifiche alle API e/o ai Software in qualsiasi momento e a propria esclusiva discrezione. Fermo restando quanto precede, qualora le modifiche siano suscettibili di impattare sul corretto funzionamento degli Applicativi Integrati, Madbit comunicher\u00e0 allo Sviluppatore il rilascio previsto di aggiornamenti e modifiche alle API e/o ai Software con anticipo adeguato rispetto alla modifica da apportare allo scopo di consentire allo Sviluppatore di adeguare tempestivamente gli Applicativi Integrati. Resta inteso che ogni tempestiva modifica e aggiornamento degli Applicativi Integrati, anche eventualmente in conseguenza di quanto previsto al paragrafo 10.2, spetter\u00e0 esclusivamente allo Sviluppatore, restando espressamente esclusa qualsiasi responsabilit\u00e0 di Madbit in tal senso.</p> <p>2.5. Assistenza. Madbit si impegna a mettere a disposizione dello Sviluppatore un servizio di Assistenza esclusivamente relativo alle API, in conformit\u00e0 alle tempistiche e alle modalit\u00e0 pubblicate sul sito internet di Madbit. Lo Sviluppatore prende atto ed accetta che il servizio di assistenza verr\u00e0 erogato esclusivamente da remoto.</p> <p>2.6. Accordi con gli Utenti Finali. Lo Sviluppatore sar\u00e0 esclusivo responsabile del rapporto con gli Utenti Finali con riferimento agli Applicativi Integrati, ivi inclusa senza limitazioni la relativa contrattualizzazione. Lo Sviluppatore assume pertanto direttamente ogni responsabilit\u00e0 per condotte da parte degli Utenti Finali che possano comportare la violazione di quanto previsto nel presente Contratto o, comunque, arrecare danno a Madbit e/o a qualsiasi altra societ\u00e0 appartenente al Gruppo TeamSystem. Lo Sviluppatore accetta inoltre che gli Applicativi Integrati potranno essere distribuiti, concessi in licenza e/o comunque messi a disposizione esclusivamente a favore di Utenti Finali che utilizzeranno l\u2019Applicativo Integrato esclusivamente nell\u2019ambito della propria attivit\u00e0 imprenditoriale, artigianale, commerciale o professionale, con espressa esclusione dei soggetti qualificabili come consumatori in conformit\u00e0 alla normativa tempo per tempo applicabile.</p> <p>2.7. Poteri e destinazione d\u2019uso. Lo Sviluppatore dichiara di (a) avere tutti i diritti e poteri necessari per concludere e dare esecuzione piena ed efficace al Contratto, e di (b) voler utilizzare le API e la relativa Documentazione nell\u2019ambito della propria attivit\u00e0 imprenditoriale, artigianale, commerciale o professionale e che, pertanto, non si applicano nei suoi confronti le disposizioni della normativa tempo per tempo applicabile a tutela dei consumatori.</p> <p>2.8. Dipendenti e collaboratori. Lo Sviluppatore si impegna a far s\u00ec che le disposizioni del Contratto siano rispettate anche dai propri dipendenti e/o collaboratori. Anche ai sensi dell\u2019art. 1381 c.c., lo Sviluppatore \u00e8 considerato esclusivo responsabile dell\u2019operato di tali soggetti e garantisce altres\u00ec il rispetto di tutte le normative applicabili, ivi incluse quelle in materia fiscale e civile.</p> <p>2.9. Utilizzi vietati. \u00c8 fatto espresso divieto allo Sviluppatore di utilizzare le API al fine di depositare, conservare, inviare, pubblicare, trasmettere e/o condividere dati, applicazioni o documenti informatici (o di consentire a terzi, ivi inclusi gli Utenti Finali, di depositare, conservare, inviare, pubblicare, trasmettere e/o condividere) che: (a) siano in contrasto o violino i diritti di Propriet\u00e0 Intellettuale di titolarit\u00e0 di Madbit e/o di terzi; (b) abbiano contenuti discriminatori, diffamatori, calunniosi o minacciosi; (c) contengano materiali pornografico, pedopornografico, osceno o comunque contrario alla pubblica morale; (d) contengano virus, malware, worm, trojan horse o, comunque, altri elementi informatici di contaminazione o distruzione; (e)    costituiscano attivit\u00e0 di spamming, phishing e/o simili; (f)    siano in ogni caso in contrasto con le disposizioni normative e/o regolamentari applicabili.</p> <p>2.10. Partner. Madbit, nell\u2019adempiere alle proprie obbligazioni di cui al Contratto, potr\u00e0 avvalersi, a propria insindacabile discrezione, della cooperazione tecnica, organizzativa e commerciale di propri partner, ai quali potr\u00e0 affidare la prestazione di alcune o tutte le attivit\u00e0 elencate nel presente Contratto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#3-proprieta-intellettuale","title":"3. Propriet\u00e0 Intellettuale","text":"<p>3.1. Propriet\u00e0 Intellettuale sulle API e sui Software. Tutti i diritti di Propriet\u00e0 Intellettuale sulle API, sui relativi Software e sulla Documentazione sono e rimangono di esclusiva titolarit\u00e0 di Madbit e/o di altra societ\u00e0 appartenente al Gruppo TeamSystem. Fatti salvi i limitati diritti concessi allo Sviluppatore a titolo di Licenza, nulla nel presente Contratto pu\u00f2 essere inteso o interpretato quale cessione, totale o parziale, di alcun diritto sulle API e sui relativi Software.</p> <p>3.2. Utilizzo delle API e diritti di terzi. Lo Sviluppatore si impegna ad utilizzare le API e la Documentazione esclusivamente per le finalit\u00e0 di cui al presente Contratto e nel pieno rispetto dei diritti di Propriet\u00e0 Intellettuale del Gruppo TeamSystem e/o di terzi. In particolare, lo Sviluppatore garantisce di essere in possesso di tutti i diritti e le autorizzazioni per il lecito sviluppo degli Applicativi Integrati e che questi ultimi (ivi incluso il relativo utilizzo da parte degli Utenti Finali) non violeranno, nemmeno in parte, diritti di Propriet\u00e0 Intellettuale del Gruppo TeamSystem e/o di terzi.</p> <p>3.3. Rinuncia alla contestazione. Lo Sviluppatore rinuncia irrevocabilmente e definitivamente a contestare, in qualunque sede, la validit\u00e0 e la titolarit\u00e0 dei diritti di Propriet\u00e0 Intellettuale di Madbit e/o di altra societ\u00e0 appartenente al Gruppo TeamSystem sulle API, sui relativi Software e sulla Documentazione.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#4-manleva","title":"4. Manleva","text":"<p>4.1. Obbligo di manleva. Lo Sviluppatore si impegna a manlevare e tenere indenne Madbit e/o ciascuna societ\u00e0 appartenente al Gruppo TeamSystem in relazione a qualsiasi danno (diretto o indiretto), spesa, costo e/o onere che Madbit e/o ciascuna societ\u00e0 appartenente al Gruppo TeamSystem dovessero subire o sopportare in conseguenza dell\u2019inadempimento o del non corretto adempimento, da parte dello Sviluppatore, anche a solo una delle seguenti previsioni di cui al Contratto: 2.2, 2.3, 2.6, 2.9 (Obblighi dello Sviluppatore), 3 (Propriet\u00e0 Intellettuale), 5 (Responsabilit\u00e0), 12 (Riservatezza) .</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#5responsabilita","title":"5.Responsabilit\u00e0","text":"<p>5.1. Limitazione generale di responsabilit\u00e0. Madbit, salvo il caso di dolo o colpa grave, non potr\u00e0 essere ritenuta responsabile per danni diretti o indiretti, di qualsiasi natura ed entit\u00e0, che dovessero derivare allo Sviluppatore e/o agli Utenti Finali e/o a terzi in conseguenza dell\u2019uso (o del mancato uso) delle API e della Documentazione, ovvero per il relativo uso non conforme a quanto previsto dal Contratto e/o dalle leggi vigenti.</p> <p>5.2. Adeguatezza allo scopo. Madbit non rilascia dichiarazioni e garanzie espresse o implicite sul fatto che le API, la Documentazione e i Software siano adatti a soddisfare le esigenze dello Sviluppatore e/o degli Utenti Finali, che siano esenti da errori o che abbiano funzionalit\u00e0 non previste nelle specifiche tecniche e nella Documentazione.</p> <p>5.3. Responsabilit\u00e0 in relazione agli Applicativi Integrati. Fermo restando quanto previsto al paragrafo 6, Madbit \u00e8 del tutto estranea al rapporto tra lo Sviluppatore e l\u2019Utente Finale con riferimento all\u2019utilizzo degli Applicativi Integrati. Madbit, pertanto, non potr\u00e0 in alcun modo essere ritenuta responsabile in conseguenza dell\u2019uso o del mancato uso degli Applicativi Integrati da parte dell\u2019Utente Finale e/o, in generale, di qualsiasi danno, diretto o indiretto, spesa, costo e/o onere subito o sopportato da ciascun Utente Finale in conseguenza di eventuali malfunzionamenti degli Applicativi Integrati. </p> <p>5.4. Software e funzionamento degli Applicativi Integrati. Lo Sviluppatore \u00e8 consapevole che l\u2019esistenza di un valido diritto dell\u2019Utente Finale a utilizzare i Software, cui le API che consentono l\u2019interoperabilit\u00e0 con gli Applicativi Integrati si riferiscono, costituisce presupposto inderogabile per il corretto funzionamento degli Applicativi Integrati medesimi. Madbit non assume pertanto alcuna responsabilit\u00e0 in relazione all\u2019impossibilit\u00e0 di fruizione degli Applicativi Integrati da parte degli Utenti Finali derivanti dall\u2019assenza di un valido diritto di questi ultimi a utilizzare i relativi Software.</p> <p>5.5. Incidenti di sicurezza. Madbit, fatti salvi gli inderogabili limiti di legge, non potr\u00e0 in nessun caso essere ritenuta responsabile per qualsiasi danno (diretto o indiretto), costo, perdita e/o spesa che lo Sviluppatore e/o gli Utenti Finali e/o terzi dovessero subire in conseguenza di attacchi informatici, attivit\u00e0 di\u00a0hacking\u00a0e, in generale, accessi abusivi e non autorizzati da parte di terzi agli Applicativi Integrati, alle API, ai Software e all\u2019infrastruttura informatica su cui questi risiedono, dai quali possano derivare, senza pretesa di esaustivit\u00e0, le seguenti conseguenze: (i) mancata fruizione degli Applicativi Integrati; (ii) perdite di dati di titolarit\u00e0 o comunque nella disponibilit\u00e0 dello Sviluppatore e/o degli Utenti Finali e/o di terzi; e (iii) danneggiamento dei sistemi dello Sviluppatore e/o degli Utenti Finali e/o di terzi.</p> <p>5.6. Danni indiretti. Madbit non potr\u00e0 essere ritenuta responsabile per eventuali danni da lucro cessante, mancato guadagno o danni indiretti, perdita o danneggiamento di dati, fermo fabbrica, perdita di opportunit\u00e0 commerciali o di benefici di altro genere, pagamento di penali, ritardi o altre responsabilit\u00e0 dello Sviluppatore e/o degli Utenti Finali che dovessero derivare, in tutto o in parte dall\u2019uso o dal mancato uso delle API, della Documentazione e/o dei Software.</p> <p>5.7. Cap. Salvo il caso di dolo o colpa grave, la responsabilit\u00e0 di Madbit non potr\u00e0 mai eccedere Euro 300,00.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#6-sospensione-e-interruzione","title":"6. Sospensione e interruzione","text":"<p>6.1. Sospensione temporanea per motivi tecnici. Madbit compir\u00e0 ogni ragionevole sforzo per garantire la massima disponibilit\u00e0 delle API. Lo Sviluppatore, tuttavia, prende atto ed accetta che Madbit potr\u00e0 sospendere e/o interrompere la disponibilit\u00e0 alle API, previa comunicazione scritta allo Sviluppatore ove possibile, qualora si dovessero rendere necessari interventi di manutenzione ordinaria o straordinaria all\u2019infrastruttura informatica sulla quale le API e i Software risiedono. In tali casi, Madbit si impegna a ripristinare la disponibilit\u00e0 delle API nel minor tempo possibile.</p> <p>6.2. Sospensione per ordine dell\u2019autorit\u00e0. Madbit si riserva il diritto di sospendere o interrompere l\u2019accesso alle API qualora venga avanzata espressa richiesta in tal senso da un organo giurisdizionale o amministrativo in base alle norme vigenti o qualora la sospensione o interruzione siano richieste dalla normativa applicabile. In tal caso, Madbit provveder\u00e0 a comunicare allo Sviluppatore le motivazioni dell\u2019adozione della sospensione o interruzione, fatta salva in ogni caso la facolt\u00e0 di risolvere il Contratto nelle modalit\u00e0 di legge.</p> <p>6.3. Sospensione per motivi diversi. Madbit si riserva altres\u00ec la facolt\u00e0 di sospendere o interrompere l\u2019accesso alle API: (a) in caso di mancato adempimento da parte dello Sviluppatore a una qualsiasi delle previsioni che legittimerebbero Madbit a risolvere il Contratto ai sensi del paragrafo 8.1; (b) qualora ricorrano ragioni di sicurezza e/o riservatezza; (c) in caso di violazione, da parte dello Sviluppatore e/o dell\u2019Utente Finale, agli obblighi di legge in materia di utilizzo dei servizi informatici e della rete internet; (d) nel caso in cui si verifichino problematiche all\u2019infrastruttura informatica ove risiedono i Software e le API che non siano rimediabili senza sospendere il relativo accesso, ivi inclusa l\u2019ipotesi di relativa sostituzione e/o migrazione anche parziale, in ogni caso previo avviso scritto allo Sviluppatore circa le ragioni della sospensione e le tempistiche di intervento previste; (e) in caso di violazione, da parte dello Sviluppatore, della Policy di Acceptable Use delle API, (f) nel caso in cui l\u2019efficacia dell\u2019eventuale contratto concluso fra lo Sviluppatore e Madbit avente ad oggetto la pubblicazione degli Applicativi Integrati sullo store di Madbit sia sospesa o cessi a causa dell\u2019inadempimento da parte dello Sviluppatore degli impegni ivi assunti.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#7-durata-recesso-e-cessazione","title":"7. Durata, recesso e cessazione","text":"<p>7.1. Durata. Fatto salvo quanto eventualmente e diversamente pattuito per iscritto tra le Parti, il Contratto ha durata indeterminata a decorrere dalla sua conclusione. Ciascuna Parte avr\u00e0 diritto di recedere dal presente Contratto in ogni momento, con comunicazione da inviarsi all\u2019altra Parte con almeno 60 giorni di preavviso.</p> <p>7.2. Recesso in conseguenza di inadempimento ad altri contratti con Madbit. Madbit si riserva altres\u00ec il diritto di recedere dal Contratto anche nell\u2019ipotesi in cui lo Sviluppatore sia gravemente inadempiente con riferimento ad uno qualsiasi degli eventuali ulteriori contratti conclusi tra il medesimo Sviluppatore e Madbit, ovvero tra lo Sviluppatore e una qualsiasi delle societ\u00e0 appartenenti al Gruppo TeamSystem</p> <p>7.3. Effetti della cessazione. In caso di cessazione dell\u2019efficacia del Contratto, per qualsiasi ragione intervenuta, Madbit interdir\u00e0 immediatamente allo Sviluppatore e a ciascun Utente Finale di quest\u2019ultimo l\u2019accesso e l\u2019utilizzo delle API e interromper\u00e0 la prestazione di qualsiasi attivit\u00e0 ai sensi del Contratto. </p> <p>7.4. Sopravvivenza. Le seguenti previsioni sopravvivranno alla cessazione dell\u2019efficacia del presente Contratto, per qualsiasi ragione intervenuta: 2.6 (Accordi con gli Utenti Finali), 3 (Propriet\u00e0 Intellettuale), 4 (Manleva), 5 (Responsabilit\u00e0), 12 (Riservatezza), 13 (Legge applicabile e foro esclusivo), 14.3, 14.4, 14.5 (Tolleranza e invalidit\u00e0 e inefficacia parziale e comunicazioni) .</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#8-risoluzione","title":"8. Risoluzione","text":"<p>8.1. Clausola risolutiva espressa. Fatto salvo il risarcimento del danno, Madbit si riserva il diritto di risolvere il Contratto ai sensi dell\u2019art. 1456 c.c. a seguito di invio di semplice comunicazione scritta in caso di mancato adempimento da parte dello Sviluppatore anche a una sola delle seguenti previsioni: 2.3, 2.6, 2.7, 2.9 (Obblighi dello Sviluppatore), 3 (Propriet\u00e0 Intellettuale).</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#9-modifiche-unilaterali","title":"9. Modifiche unilaterali","text":"<p>9.1. Diritto di modifica unilaterale del Contratto. Considerata l\u2019elevata complessit\u00e0 tecnica e normativa del settore in cui Madbit opera e dei prodotti e servizi offerti da quest\u2019ultima, considerato altres\u00ec che tale settore \u00e8 caratterizzato da continue evoluzioni tecnologiche, normative e delle esigenze di mercato, e considerato infine che, in conseguenza di quanto sopra, sorge periodicamente la necessit\u00e0 che Madbit adegui la propria organizzazione e/o la struttura tecnica e funzionale dei prodotti e servizi offerti alla propria clientela (anche nell\u2019interesse di quest\u2019ultima), lo Sviluppatore accetta che il Contratto potr\u00e0 essere modificato da Madbit in qualsiasi momento, dandone semplice comunicazione scritta allo Sviluppatore (anche via e-mail o con l\u2019ausilio di programmi informatici). Le modifiche potranno consistere in: (i) modifiche connesse agli adeguamenti apportati alla struttura tecnica e/o funzionale dei prodotti e servizi offerti; (ii) modifiche connesse agli adeguamenti apportati alla struttura organizzativa di Madbit.</p> <p>9.2. Effetti. In caso di esercizio del diritto di modifica unilaterale del Contratto di cui al precedente paragrafo, lo Sviluppatore avr\u00e0 la facolt\u00e0 di recedere dal Contratto con comunicazione scritta da inviarsi a Madbit nel termine perentorio di 15 (quindici) giorni dal ricevimento della comunicazione scritta da parte di Madbit riguardante la variazione contrattuale. In difetto, le modifiche al Contratto si intenderanno definitivamente conosciute e accettate e diverranno definitivamente efficaci e vincolanti.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#10-ritiro-e-sostituzione","title":"10. Ritiro e sostituzione","text":"<p>10.1. Prodotti Obsoleti e ritiro. Lo Sviluppatore prende atto che i Software, le relative API e gli ambienti nei quali essi operano sono soggetti, per loro natura, ad una costante evoluzione tecnologica che pu\u00f2 determinare la loro obsolescenza e, in alcuni casi, l\u2019opportunit\u00e0 di un ritiro dal mercato e, eventualmente, di una sostituzione con nuove soluzioni tecnologiche. </p> <p>10.2. Procedura di ritiro o sostituzione. Madbit potrebbe decidere, a suo insindacabile giudizio, nel corso della durata del presente Contratto, di ritirare dal mercato i Software e/o le relative API (eventualmente sostituendoli con nuove soluzioni). In tal caso: (a) Madbit comunicher\u00e0 per iscritto (anche a mezzo email) allo Sviluppatore, con idoneo preavviso, l\u2019intenzione di ritirare dal mercato uno o pi\u00f9 Software e/o le relative API (ciascuno di essi il \u201cProdotto Obsoleto\u201d); (b) la comunicazione che precede (\u201cComunicazione di Ritiro\u201d) conterr\u00e0 una descrizione dell\u2019eventuale nuovo Software e/o API (il \u201cNuovo Prodotto\u201d) che sostituir\u00e0 ciascun Prodotto Obsoleto, restando inteso che il Nuovo Prodotto potr\u00e0 basarsi su tecnologie diverse rispetto a quelle del Prodotto Obsoleto; (c) laddove il Prodotto Obsoleto non fosse sostituito da alcun Nuovo Prodotto, il Contratto cesser\u00e0 di produrre effetti con riferimento al Prodotto Obsoleto nella data che sar\u00e0 indicata da Madbit nella Comunicazione di Ritiro; a partire da tale data, il Prodotto Obsoleto cesser\u00e0 di essere fornito; (d) laddove il Prodotto Obsoleto fosse sostituito con un Nuovo Prodotto, lo Sviluppatore avr\u00e0 il diritto, esercitabile entro 15 (quindici) giorni dalla data della Comunicazione di Ritiro, di recedere dal Contratto con riferimento al solo Prodotto Obsoleto, restando inteso che, in caso contrario, il Contratto continuer\u00e0 ad esplicare i propri effetti (fatta espressa eccezione per quanto specificatamente indicato nella Comunicazione di Ritiro) con riferimento al Nuovo Prodotto e ogni riferimento al Prodotto Obsoleto dovr\u00e0 intendersi riferito al Nuovo Prodotto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#11-trattamento-dei-dati-personali","title":"11. Trattamento dei Dati Personali","text":"<p>11.1. Ferme restando le previsioni di cui ai successivi paragrafi, per l\u2019esecuzione delle attivit\u00e0 inerenti al presente Contratto, le Parti si impegnano al rispetto della Normativa sulla Protezione dei Dati Personali, come di volta in volta aggiornata.  </p> <p>11.2. Le Parti si danno reciprocamente atto che le attivit\u00e0 connesse all\u2019utilizzo delle API da parte dello Sviluppatore finalizzate allo sviluppo di Applicativi Integrati, oggetto del presente Contratto, non comportano alcun trattamento di dati personali dell\u2019Utente Finale n\u00e9 da parte di Madbit, n\u00e9 da parte dello Sviluppatore. </p> <p>11.3. Madibit non \u00e8 coinvolta, n\u00e9 si assume alcuna responsabilit\u00e0 con riferimento all\u2019eventuale trattamento di dati personali dell\u2019Utente Finale effettuato dallo Sviluppatore nell\u2019ambito delle attivit\u00e0 di sviluppo e/o erogazione degli Applicativi Integrati, che lo Sviluppatore effettua in qualit\u00e0 di titolare autonomo del trattamento.  </p> <p>11.4. Lo Sviluppatore si obbliga a tenere Madbit e il Gruppo Teamsystem manlevato da qualunque danno, comprese eventuali sanzioni delle autorit\u00e0 competenti, che possano derivare dal trattamento dei dati effettuato dallo Sviluppatore e/o dai soggetti che trattano i dati per conto dello Sviluppatore.</p> <p>Ciascuna Parte prende atto che i dati personali relativi all'altra Parte, nonch\u00e9 i dati personali (es. nominativi, indirizzo email aziendale, ecc.) di propri dipendenti/collaboratori, coinvolti nelle attivit\u00e0 di cui al presente Contratto, saranno trattati dall'altra Parte in qualit\u00e0 di titolare per finalit\u00e0 funzionali alla instaurazione e all'esecuzione del Contratto stesso, e in ogni caso in conformit\u00e0 con l'informativa resa da ciascuna di esse ai sensi e per gli effetti di cui all'articolo 13 del GDPR.  L\u2019informativa fornita da Madbit \u00e8 allegata al presente Contratto e sar\u00e0 sempre disponibile all\u2019interno dell\u2019area riservata allo Sviluppatore</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#12-riservatezza","title":"12. Riservatezza","text":"<p>12.1. Obbligo di riservatezza. \u00c8 tassativamente vietata allo Sviluppatore ogni forma di comunicazione e/o divulgazione o comunque di utilizzazione, anche per interposta persona e/o ente, di qualsiasi notizia, informazione e documentazione comunque appresa e ottenuta in occasione dell\u2019esecuzione del Contratto e che Madbit abbia classificato come \u201criservata\u201d o \u201cconfidenziale\u201d, anche ove non si tratti di veri e propri segreti commerciali, e fermo restando che tutte le informazioni relative alle API sono da considerarsi sin d\u2019ora come espressamente qualificate come riservate e confidenziali. Quanto precede non trova applicazione qualora la comunicazione e/o divulgazione di informazioni riservate sia espressamente richiesto e necessario per la corretta esecuzione del Contratto, ovvero dietro espressa autorizzazione scritta di Madbit in tal senso, ovvero qualora lo Sviluppatore sia a ci\u00f2 obbligato per legge o per ordine dell\u2019autorit\u00e0,  a condizione che la richiesta da parte di tale organismo statale o autorit\u00e0 o tribunale sia notificata senza indugio per iscritto a Madbit, ove possibile, prima di dare esecuzione all\u2019ordine ricevuto, ovvero tempestivamente successivamente all\u2019esecuzione dell\u2019ordine ricevuto, affinch\u00e9 Madbit possa individuare e attuare le misure che riterr\u00e0 pi\u00f9 opportune per mantenere la riservatezza delle informazioni confidenziali, chiedendone eventualmente la segretazione. Tale notifica deve includere, senza limitazione, l\u2019identificazione delle informazioni da divulgare ed una copia dell\u2019ordine. In ogni caso, lo Sviluppatore dovr\u00e0 divulgare solo le informazioni strettamente necessarie ad adempiere agli obblighi ad essa imposta e prender\u00e0 tutti i provvedimenti che si renderanno opportuni per limitare l\u2019ulteriore divulgazione delle informazioni in questione da parte del suddetto organismo statale o Autorit\u00e0 o Tribunale, fermo restando che gli obblighi di segretezza in virt\u00f9 del presente Contratto per tali informazioni non verranno meno.</p> <p>12.2. Durata dell\u2019obbligo di riservatezza. L\u2019obbligo di riservatezza previsto al presente articolo rimarr\u00e0 valido ed efficace anche successivamente alla cessazione del Contratto, fino a che le informazioni confidenziali non siano divenute di pubblico dominio per motivo diverso dall\u2019inadempimento di quanto qui previsto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#13-legge-applicabile-e-foro-esclusivo","title":"13. Legge applicabile e foro esclusivo","text":"<p>13.1. Legge applicabile. Il presente Contratto \u00e8 regolato e deve essere interpretato in conformit\u00e0 alla legge italiana.</p> <p>13.2. Foro esclusivo. Qualsiasi controversia tra le Parti in relazione al presente Contratto, ivi incluse, senza limitazione, le controversie relative alla sua interpretazione, validit\u00e0, efficacia, risoluzione, esecuzione e/o scioglimento, sar\u00e0 devoluta alla competenza esclusiva del Foro di Milano.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#14-clausole-finali","title":"14. Clausole finali","text":"<p>14.1. Codice Etico e Codice di Condotta Anti-corruzione. Lo Sviluppatore dichiara di essere a conoscenza delle disposizioni di cui al Decreto Legislativo 8 giugno 2001 n. 231, e successive integrazioni in materia di responsabilit\u00e0 amministrativa degli enti, nonch\u00e9 delle norme del Codice Etico e del Codice di Condotta Anti-corruzione adottati dal Gruppo TeamSystem e si impegna a rispettarne i contenuti, per quanto applicabili alla propria attivit\u00e0, e ad astenersi da comportamenti ad essi contrari. L\u2019inosservanza da parte dello Sviluppatore dell\u2019obbligo assunto ai sensi del presente paragrafo, ovvero la non correttezza o veridicit\u00e0 delle dichiarazioni ivi contenute, determinano un inadempimento grave, in presenza del quale TeamSystem avr\u00e0 il diritto di risolvere il presente Contratto ai sensi dell\u2019art. 1456 c.c.</p> <p>14.2. Cessione del Contratto. Salvo preventiva e specifica autorizzazione scritta di Madbit, \u00e8 fatto divieto allo Sviluppatore di cedere, in tutto o in parte, il Contratto.</p> <p>14.3. Effetto novativo. \u00c8 escluso qualsiasi rilievo di eventuali precedenti accordi individuali tra le Parti relativamente a quanto forma oggetto del Contratto, che si intendono assorbiti ed esaustivamente superati dalla disciplina del Contratto. Lo Sviluppatore acconsente sin da ora, anche ai sensi e per gli effetti dell\u2019art. 1407 c.c., che MadBit ceda il presente Contratto a terzi selezionati a esclusiva discrezione di Madbit stessa.</p> <p>14.4. Tolleranza. L\u2019eventuale omissione di far valere uno o pi\u00f9 dei diritti previsti dal Contratto non potr\u00e0 comunque essere intesa come definitiva rinuncia a tali diritti e non impedir\u00e0, quindi, di esigerne in qualsiasi altro momento il puntuale e rigoroso adempimento.</p> <p>14.5. Invalidit\u00e0 e inefficacia parziale. L\u2019eventuale invalidit\u00e0 o inefficacia di una qualsiasi delle pattuizioni del Contratto lascer\u00e0 intatte le altre pattuizioni giuridicamente e funzionalmente indipendenti, salvo quanto previsto dall\u2019art. 1419, primo comma, c.c.</p> <p>14.6. Comunicazioni. Tutte le comunicazioni allo Sviluppatore inerenti al Contratto potranno essere effettuate all\u2019indirizzo email utilizzato dallo Sviluppatore in sede di creazione dell\u2019account relativo al Software. Resta inteso che sar\u00e0 cura e responsabilit\u00e0 dello Sviluppatore comunicare ogni variazione in relazione al predetto indirizzo email.</p> <p>* * * * *</p> <p>[Ai sensi e per gli effetti degli articoli 1341 e 1342 c.c., lo Sviluppatore dichiara di aver letto, esaminato e di approvare specificamente le seguenti clausole del presente Contratto:</p> <p>2.2, 2.3, 2.4 (Limitazioni d\u2019uso della Licenza, obblighi dello Sviluppatore in merito ai requisiti tecnici e di sicurezza, aggiornamenti apportati unilateralmente da Madbit)</p> <p>2.6 (Limitazione di responsabilit\u00e0 di Madbit rispetto ai rapporti con gli Utenti Finali)</p> <p>2.8 (Responsabilit\u00e0 dello Sviluppatore per l\u2019operato dei propri dipendenti e collaboratori)</p> <p>2.10 (Diritto di Madbit di avvalersi di Partner)</p> <p>3 (Limitazioni dello Sviluppatore relative alla Propriet\u00e0 Intellettuale)</p> <p>5 (Limitazioni di responsabilit\u00e0 di Madbit)</p> <p>6 (Diritto di sospensione e interruzione dell\u2019accesso alle API)</p> <p>7.1, 7.2 (Recesso di Madbit)</p> <p>8 (Clausola risolutiva espressa)</p> <p>9 (Modifiche unilaterali)</p> <p>10 (Ritiro e sostituzione)</p> <p>13.2 (Foro esclusivo)</p> <p>14.1 (Codice Etico e Codice di Condotta Anti-corruzione)</p> <p>14.2 (Divieto di cessione del contratto)]</p>","tags":["legal","terms and conditions","contract"]},{"location":"reference/","title":"Api Reference","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>In this section we collected a set of useful guides meant to explain you how to implement the most common use cases using our APIs.</p> <p>Below you can find the list of the available guides:</p>","tags":["api","use cases"]},{"location":"reference/api-reference-co/","title":"Common api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-co/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the CO dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory. </p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-fi/","title":"Finance api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-fi/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the FI dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory.</p> <p></p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-mg/","title":"Warehouse api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-mg/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the MG dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory. </p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference/","title":"Use the API Reference","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#lets-do-our-housework-first","title":"Let's do our housework first","text":"<p>The API Reference's main objective is to show you how the different parts of the API requests must be defined to obtain a proper response. Since our API respects the REST Architectural Style, we suggest you check the dedicated page first if you don't know what we're talking about, and maybe also check out the Additional Resources on that page, to discover more about the HTTP protocol.</p> <p>Additionally, we suggest you check our pages dedicated to OAuth 2.0 and the authentication methods supported by the TSE in Cloud APIs.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the dedicated section, to do so you have two options:</p> <ul> <li> <p>OAuth (OAuth2AuthenticationCodeFlow): In this case, you'll perform the OAuth2.0 Authorization Code Flow directly inside our API reference, without having to write a single line of code beforehand. To use the OAuth2 option, you just have to select the required scopes and insert your app credentials (Client ID and Client Secret); the tool will then redirect you to the TSE in Cloud page and fetch the token for you.</p> </li> <li> <p>HTTP Bearer: You can use this option to test a token you retrieved in other ways. For example, you could insert the Manual Token you obtained from the TSE in Cloud page, or you could try to implement an OAuth2 flow and then test the retrieved token. In this case, you must insert the Access Token directly in the text box. Please, note that the tool will add the \"Bearer\" prefix for you, so you must not add it.</p> </li> </ul> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#call-the-method","title":"Call the method","text":"<p>Once the access token has been set you can make all the calls you want according to the scopes you specified when creating the access token.</p> <p>When you have identified the method you need to accomplish the wanted action, you can just scroll down to the method section and then fill the request as explained in the next paragraphs.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#path-parameters","title":"Path Parameters","text":"<p>Most of our methods require some Path Parameters, e.g. the parameters that must be inserted as part of the URL that must be contacted by the REST call. The parameters marked with * are mandatory but sometimes you can also find optional ones, in most cases the only one required is the company_id, if you don't know your company's identifier you can just retrieve it using the List User Companies method.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#query-string-parameters","title":"Query String Parameters","text":"<p>When you are making a GET call you will also have the possibility to set some Query String Parameters. These parameters must be defined at the end of the URL and make it possible to define some additional parameters to the request. Most of these kind of parameters are explained here.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#request-response-body","title":"Request &amp; Response Body","text":"<p>For all our POST or PUT methods, you will always need to set a JSON Request Body, that will contain the core of the request. In every section, you will find a prefilled body example that you must modify to make the request work, plus the schema that the request body must respect. Please, keep in mind that in the majority of the cases the examples will not work as-they-are, because they contain some invalid example data that were inserted just to show you the format of the request. The most common examples are the identifiers of the resources related to your account. To obtain a successful response, you must modify these parameters accordingly to what are the resources you own. Every method includes also a Response section, where you'll find an example response in JSON format and the related schema.</p> <p>When you'll perform the request, the actual response obtained from the server will be shown on the page, so you'll be able to write the proper code to manage the results of your API calls.</p> <p>Sometimes you will need to expand the field description to get all the information like allowed values in enums, to do it you will only need to click the Multi-line description placed at the top of the section. The fields marked with * are mandatory.</p> <p>The fields marked with * are mandatory.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"scenario/","title":"Scenario","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Elenco scenari di utilizzo supportati.:</p>","tags":["guides","use cases"]},{"location":"scenario/anagrafiche/","title":"Anagrafiche","text":"<p>Elenco casi d'uso disponibili:</p> <p>Clienti/Fornitori:</p> <ul> <li> <p>Ricerca di un cliente/fornitore per codice fiscale e/o partita iva (dato presenti in anagrafica generale) con un'unica interrogazione;  </p> </li> <li> <p>Inserimento/Modifica/Cancellazione di una anagrafica generale;  </p> </li> <li> <p>Inserimento di un cliente/fornitore in riferimento ad una anagrafica generale con le seguenti entit\u00e0 collegate disponibili:</p> </li> <li>Condizioni di pagamento;</li> <li>Destinatari;</li> <li>Spese;</li> <li>Valute;</li> <li>Banche Clienti;</li> <li>Banche Aziendali;</li> <li>Agenti;</li> </ul> <p>Articoli:</p> <ul> <li>Inserimento/Modifica/Cancellazione di una anagrafica articolo e delle seguenti entit\u00e0 collegate disponibili:</li> <li>Agenti</li> <li>Magazzini  </li> </ul> <p>Qui trovi i riferimenti alla versione rilascio;</p> <p>Anagrafiche Comuni:</p> <ul> <li>Inserimento/Modifica delle seguenti anagrafiche comuni: \u00a0</li> <li>Codici IVA: versione rilascio</li> <li>Nazioni;</li> <li>Lingue;</li> <li>Banche e Agenzie (ABI/CAB);  </li> </ul> <p>Qui trovi i riferimenti alla\u00a0versione rilascio;</p> <p>Anagrafica Azienda:</p> <ul> <li>Inserimento/Modifica delle seguenti anagrafiche comuni:</li> <li>Sezionali: versione rilascio;</li> <li>Sedi aziendali: versione rilascio;</li> </ul> <p>Qui trovi i riferimenti delle\u00a0api reference e gli esempi di utilizzo.</p> <p></p> <p>Accedi alla modalit\u00e0 di selezione della sezione</p> <p></p>","tags":["guides"]},{"location":"scenario/client-creation/","title":"Client creation","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>In this guide, you will learn how to successfully create Clients and Suppliers from scratch. We'll build the request step by step, so wait until the end of the guide to send your first request!</p> <p>You can find the technical documentation of this API method in the Create Client section of the API Reference.</p> <p>Note</p> <p>The models for Clients and Suppliers differ only for a small subset of parameters; this guide will show in detail how to create a new Client, but it can be used in both cases. In the Suppliers case, you will need to use the Create Supplier method. !!! </p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>!!! warning Are you using Zapier?</p> <p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them! For example, while creating a new Client the Document ID must be left blank!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p> <p>!!! </p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-zero-the-client-type","title":"Step Zero: The Client Type","text":"<p>TSE in Cloud lets you to define four different types of clients.</p> <p>The available types are:</p> <ul> <li>company: in an electronic document Denominazione will be automatically set</li> <li>person: in an electronic document Nome and Cognome will be automatically set</li> <li>pa: in an electronic document the flag Pubblica Amministrazione and Split payment will be automatically set</li> <li>condo</li> </ul> <p>In the next step we'll suppose to create a company, but the procedure is the same for the other clients types too.</p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-one-the-client-data","title":"Step One: The Client Data","text":"<p>Every Client can be defined by a set of basic values, here you can find a list of the main ones:</p> <ul> <li> <p>name: [required] the client denomination.</p> </li> <li> <p>vat_number: the client P.IVA.</p> </li> <li> <p>tax_code: the client codice fiscale.</p> </li> <li> <p>code: your internal client code.</p> </li> <li> <p>ei_code: client SDI code.</p> </li> <li> <p>email: the client email.</p> </li> <li> <p>certified_email: the client PEC.</p> </li> <li> <p>phone: the client's phone number.</p> </li> <li> <p>address_*: the client address fields.</p> </li> <li> <p>notes: the client extra notes.</p> </li> <li> <p>country: optional client country (eg. Repubblica Ceca).</p> </li> <li> <p>country_iso: optional client country ISO-3166 (eg. CZ).</p> </li> </ul> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"company\",\n    \"name\": \"Mario Rossi\",\n    \"vat_number\": \"47803200154\",\n    \"tax_code\": \"RSSMRA91M20B967Q\",\n    \"address_street\": \"Via Italia, 66\",\n    \"address_postal_code\": \"20900\",\n    \"address_city\": \"Milano\",\n    \"address_province\": \"MI\"\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nModelClient entity = new ModelClient(\n    type: ClientType.Company,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\"\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\n\nentity := *fattureincloud.NewClient().\n    SetType(fattureincloud.ClientTypes.COMPANY).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"47803200154\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\")\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nClient entity = new Client()\n        .type(ClientType.COMPANY)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\");\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Client;\n$entity\n    -&gt;setType(ClientType::COMPANY)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\");\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Client();\nentity.type = new fattureInCloudSdk.ClientType().company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Client(\n    type = ClientType(\"company\"),\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\"\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Client.new(\n  type: FattureInCloud_Ruby_Sdk::ClientType::COMPANY,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\"\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nlet entity: Client = {};\nentity.type = ClientType.Company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n</code></pre> <p>In Zapier, first, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu. </p> <p>Next, you must set the Client Type we described in the previous step, you just need to select the correct value in the available list.</p> <p></p> <p>Then you must set up the request as explained above. The fields' codes start with the \"data\" prefix.</p> <p>Remember: in this example, you must insert values only in the fields we are suggesting to you! In the image below we can't show all the fields you must fill, so you must search them all as shown before.  Here you can find the list of all the fields and values you must fill for this example:</p> Field Name Field Code Value Notes The ID of the company - 12345 Select it from the dropdown menu Client type data.type company Client Name data.name Mario Rossi Client vat number data.vat_number 47803200154 Client tax code data.tax_code RSSMRA91M20B967Q Client address street data.address_street Via Italia, 66 Client address postal code data.address_postal_code 20900 Client address city data.address_city Milano Client address province data.address_province MI","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-two-advanced-options","title":"Step Two: Advanced Options","text":"<p>In addition to the basic data explained in the previous step, some advanced fields can be used:</p> <ul> <li> <p>default_*: all the default fields will not be set automatically when creating a document, however, you can save the defaults, retrieve them before creating the document and insert them with the other fields when creating a document.</p> </li> <li> <p>bank_*: client bank details.</p> </li> <li> <p>has_intent_declaration: flag that adds Lettera d'intento fields to the electronic document, intent_declaration_protocol_number and intent_declaration_protocol_date also need to be set.</p> </li> </ul>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#client-uniqueness","title":"Client uniqueness","text":"<p>We have strong checks to ensure clients' uniqueness. The applied rule differs based on the defined fields:</p> <ul> <li>if you are only setting the client's name, then you will receive an error if a client with the same name already exists.</li> <li>if you are setting code, vat_number, and tax_code, these values must be unique for all your clients.</li> </ul>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#create-the-client","title":"Create the client!","text":"<p>Now we are ready to create a client, so let's create a client using the request we just built:</p> <pre><code>POST /c/1235/entities/clients HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 200\n\n{\"data\":{\"name\":\"Mario Rossi\",\"vat_number\":\"47803200154\",\"tax_code\":\"RSSMRA91M20B967Q\",\"address_street\":\"Via Italia, 66\",\"address_postal_code\":\"20900\",\"address_city\":\"Milano\",\"address_province\":\"MI\"}}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ClientsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is a complete request, but please customize it!!! \n            // In the next step we'll explain how to perform the request to the API.\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            ModelClient entity = new ModelClient(\n                type: ClientType.Company,\n                name: \"Mario Rossi\",\n                vatNumber: \"47803200154\",\n                taxCode: \"RSSMRA91M20B967Q\",\n                addressStreet: \"Via Italia, 66\",\n                addressPostalCode: \"20900\",\n                addressCity: \"Milano\",\n                addressProvince: \"MI\"\n            );\n\n            // Here we put our entity in the request object\n            CreateClientRequest createClientRequest = new CreateClientRequest(\n                data: entity\n            );\n\n            // Now we are all set for the final call\n            // Create the client: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ClientsApi.md#createclient\n            try {\n                CreateClientResponse result = apiInstance.CreateClient(companyId, createClientRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling ClientsApi.CreateClient: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    entity := *fattureincloud.NewClient().\n        SetType(fattureincloud.ClientTypes.COMPANY).\n        SetName(\"Mario Rossi\").\n        SetVatNumber(\"47803200154\").\n        SetTaxCode(\"RSSMRA91M20B967Q\").\n        SetAddressStreet(\"Via Italia, 66\").\n        SetAddressPostalCode(\"20900\").\n        SetAddressCity(\"Milano\").\n        SetAddressProvince(\"MI\")\n\n    // Here we put our entity in the request object\n    createClientRequest := *fattureincloud.NewCreateClientRequest().SetData(entity)\n\n    // Now we are all set for the final call\n    // Create the client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsAPI.md#createclient\n    resp, r, err := apiClient.ClientsAPI.CreateClient(auth, companyId).CreateClientRequest(createClientRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `ClientsAPI.CreateClient``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.ClientsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        ClientsApi apiInstance = new ClientsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is a complete request, but please customize it!!! \n        // In the next step we'll explain how to perform the request to the API.\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        Client entity = new Client()\n                .type(ClientType.COMPANY)\n                .name(\"Mario Rossi\")\n                .vatNumber(\"47803200154\")\n                .taxCode(\"RSSMRA91M20B967Q\")\n                .addressStreet(\"Via Italia, 66\")\n                .addressPostalCode(\"20900\")\n                .addressCity(\"Milano\")\n                .addressProvince(\"MI\");\n\n        // Here we put our entity in the request object\n        CreateClientRequest createClientRequest = new CreateClientRequest()\n                .data(entity);\n\n        // Now we are all set for the final call\n        // Create the client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#createclient\n        try {\n            CreateClientResponse result = apiInstance.createClient(companyId, createClientRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling ClientsApi#createClient\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n&lt;?php\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\ClientsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n$entity = new FattureInCloud\\Model\\Client;\n$entity\n    -&gt;setType(FattureInCloud\\Model\\Client::COMPANY)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\");\n\n// Here we put our entity in the request object\n$create_client_request = new FattureInCloud\\Model\\CreateClientRequest;\n$create_client_request-&gt;setData($entity);\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#createclient\ntry {\n    $result = $apiInstance-&gt;createClient($company_id, $create_client_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ClientsApi-&gt;createClient: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.ClientsApi();\n//set your company id\nlet companyId = 12345;\n\nlet entity = new fattureInCloudSdk.Client();\nentity.type = new fattureInCloudSdk.ClientType().company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n\n// Here we put our entity in the request object\nlet createClientRequest = new fattureInCloudSdk.CreateClientRequest();\ncreateClientRequest.data = entity;\n\nlet opts = {\n  createClientRequest: createClientRequest,\n};\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#createClient\napiInstance.createClient(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import clients_api\nfrom fattureincloud_python_sdk.models.client import Client\nfrom fattureincloud_python_sdk.models.client_type import ClientType\nfrom fattureincloud_python_sdk.models.create_client_request import CreateClientRequest\nfrom fattureincloud_python_sdk.models.create_client_response import CreateClientResponse\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Client(\n    type = ClientType(\"company\"),\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\"\n)\n\n# Here we put our entity in the request object\ncreate_client_request = CreateClientRequest(\n    data = entity\n)\n\n# Now we are all set for the final call\n# Create the client: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#create_client\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = clients_api.ClientsApi(api_client)\n    try:\n        api_response = api_instance.create_client(company_id, create_client_request=create_client_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling ClientsApi-&gt;create_client: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::ClientsApi.new\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Client.new(\n  type: FattureInCloud_Ruby_Sdk::ClientType::COMPANY,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\"\n)\n\n# Here we put our entity in the request object\nopts = {\n  create_client_request: FattureInCloud_Ruby_Sdk::CreateClientRequest.new(data: entity)\n}\n# Now we are all set for the final call\n# Create the client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#create_client\nbegin\n  result = api_instance.create_client(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling ClientsApi-&gt;create_client: #{e}\"\nend\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  ClientsApi,\n  Client,\n  ClientType,\n  CreateClientRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new ClientsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet entity: Client = {};\nentity.type = ClientType.Company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n\n// Here we put our entity in the request object\nlet createClientRequest: CreateClientRequest = {\n  data: entity,\n};\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#createClient\napiInstance.apiInstance.createClient(companyId, createClientRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>Once you filled all the fields you need, you can click the \"Continue\" button and follow the wizard to create your Zap!</p> <p>You just created your first client. Congratulations!</p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/e-invoice-management/","title":"E-Invoice management","text":"<p>When you need to deal with an e-invoice, we provide a handful of methods that you can use to fulfill your needs: you can verify the XML of your e-invoice, download it, send it to the SDI and eventually obtain the rejection reason.</p> <p>!!! info Create your e-invoice first!</p> <p>In this guide, we suppose you already created your e-invoice in TSE in Cloud, and you just need to send it to the SDI. If this is not the case, please check this guide to create your first invoice.</p> <p>!!! </p> <p>!!! danger I already have an e-invoice XML, can't I just send it to the SDI?</p> <p>Unfortunately, no. TSE in Cloud lets you send documents to the SDI only if they were created through the TSE in Cloud functionalities, so if you have an XML you can't just send it to the SDI using our APIs. Please, check this guide for a more detailed explanation.</p> <p>!!! </p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#verify-the-e-invoice-xml","title":"Verify the E-Invoice XML","text":"<p>With the Verify e-invoice XML method, you can verify your e-invoice XML before sending it to the SDI. If your XML contains an error or it is missing some fields, you can patch it by editing the invoice. A list of the most common validation errors can be found here.</p> <p>Below you can find an example of a failed XML verification:</p> <pre><code>{\n  \"error\": {\n    \"message\": \"Validation XML\",\n    \"validation_result\": [\n      \"Nei dati generali del documento, il contenuto \\\"0000-00-00\\\" del campo Data non \u00e8 nel formato valido\"\n    ]\n  }\n}\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#download-the-e-invoice-xml","title":"Download the E-Invoice XML","text":"<p>With the Get e-invoice XML method you can download your e-invoice XML if you need to.</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/xml;charset=UTF-8\n\n\n&lt;p:FatturaElettronica xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:p=\"http://ivaservizi.agenziaentrate.gov.it/docs/xsd/fatture/v1.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" versione=\"FPR12\"&gt;\n  &lt;FatturaElettronicaHeader&gt;\n        ...\n  &lt;/FatturaElettronicaHeader&gt;\n  &lt;FatturaElettronicaBody&gt;\n        ...\n  &lt;/FatturaElettronicaBody&gt;\n&lt;/p:FatturaElettronica&gt;\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#send-the-e-invoice","title":"Send the E-Invoice","text":"<p>If your e-invoice XML is valid you can now send it to the SDI using the Send e-invoice method.</p> <p>After the invoice has been sent, you can check its status by making a Get Issued Document request: the ei_status field will contain the status of your e-invoice.</p> <p>!!! info Check your fieldset!</p> <p>To show the ei_status field, you need to customize the response, selecting the detailed fieldset or including it in the fields list.</p> <p>!!! </p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#pirate_flag-the-dry-run-flag","title":":pirate_flag:\u00a0 The Dry-Run Flag","text":"<p>If you are developing an integration and you want to test the Send e-invoice method without actually sending the invoice to the SDI we offer a proper field for this purpose, the options.dry_run flag.</p> <pre><code>{\n    \"data\": {\n        ...\n    },\n    \"options\": {\n        \"dry_run\": true\n    }\n}\n</code></pre> <p>The flag is optional, and the default is false; if you use it and you set it as true, all the e-invoice checks will be run but the actual dispatch.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#get-the-e-invoice-rejection-reason","title":"Get the E-Invoice rejection reason","text":"<p>If your e-invoice gets rejected by the SDI, you can check the rejection reason with the Get rejection reason method. The list of the most common rejection reasons can be found here.</p> <p>For example, you could get an error like the following one:</p> <pre><code>{\n  \"data\": {\n    \"reason\": \"Il Codice Fiscale del cliente risulta sbagliato.\",\n    \"code\": \"0036\",\n    \"date\": \"2022-02-22\"\n  }\n}\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-xml-customisation/","title":"E-Invoice XML customization","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>While creating an e-invoice you could need to have more control over the XML that is generated through our APIs. On this page, we'll explain how to set up the e-invoice advanced attributes.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#the-official-xml-structure","title":"The Official XML Structure","text":"<p>The Official e-invoice XML structure is directly defined by the Italian Public Administration, and can be found here. This structure is subject to changes over time, and that's why we decided to manage some of these fields in a different way.</p> <p>If you want to know which additional attributes we support you can also read this page. The TSE in Cloud Web App lets you define these fields through dedicated components, so you can also check it to discover which attributes we support; we'll show you how to do it in the following sections.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#the-ei_raw-flavours","title":"The ei_raw flavours","text":"<p>If you already are familiar with creating e-invoices from our Web App, you already know that you can set advanced attributes in three different entities:</p> <ul> <li>E-invoice body</li> <li>Items list</li> <li>Payments list</li> </ul> <p>While using our Create Issued Document and Modify Issued Document API methods, the fields provided by our model don't let you define all the fields available through our Web App: these advanced fields can instead be managed using the ei_raw params.</p> <p>!!! warning Strings everywhere!</p> <p>Keep in mind that every field in ei_raw is always managed as a String! This means, for example, that even numbers must be inserted in String format (eg. \"NumItem\": \"5\")</p> <p>!!! </p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#e-invoice-body","title":"E-invoice body","text":"<p>In our Web Interface, you can add your custom XML fields here:</p> <p></p> <p>In our API, that section corresponds to the data.ei_raw field. Let's try to set up one of these attributes.</p> <p>For this example, we'll suppose to need to manage the NumItem field (2.1.5.4).</p> <p>This is the structure declared by the Official Structure:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 root DatiGenerali 2.1 &lt;1,1&gt; DatiRicezione 2.1.5 &lt;0,N&gt; NumItem 2.1.5.4 &lt;0,1&gt; <p>This is the final XML that we want to obtain:</p> <p>The ei_raw field uses JSON instead of XML but uses a similar structure.</p> <p>While mapping the XML structure to our JSON, you have to keep in mind a few things:</p> <ul> <li>The FatturaElettronicaBody tag is the root of our ei_raw field, and we accept only one instance of that in our e-invoices</li> <li>For the root subfields, you need to check if the field is mandatory and its occurrences (check the Obbligatoriet\u00e0 e occorrenze field in the official structure); if the field can have more than one occurrence then it must be represented as a JSON list. For example, DatiRicezione is &lt;0, N&gt;: it means that it isn't mandatory and that it must be represented as a JSON list.</li> </ul> <p>Mapping the XML shown above to our ei_raw JSON format we will obtain the following result:</p> <pre><code>\"ei_raw\": {\n  \"FatturaElettronicaBody\": {\n    \"DatiGenerali\": {\n      \"DatiRicezione\": [\n        {\n          \"NumItem\": \"5\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    eiRaw: new {\n        FatturaElettronicaBody = new {\n            DatiGenerali = new {\n                DatiRicezione = new [] {\n                    new {\n                        NumItem = \"5\"\n                    }\n                }\n            }\n        }\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"FatturaElettronicaBody\": map[string]interface{}{\n            \"DatiGenerali\": map[string]interface{}{\n                \"DatiRicezione\": []interface{}{\n                    map[string]interface{}{\n                        \"NumItem\": \"5\",\n                    },\n                },\n            },\n        },\n    },\n)\n</code></pre> <pre><code>    \"FatturaElettronicaBody\", Map.of(\n        \"DatiGenerali\", Map.of(\n            \"DatiRicezione\",\n            Arrays.asList(\n                Map.of(\n                    \"NumItem\", \"5\"\n                )\n            )\n        )\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .eiRaw(eiRaw);\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.ei_raw = {\n  FatturaElettronicaBody: {\n    DatiGenerali: {\n      DatiRicezione: [\n        {\n          NumItem: \"5\",\n        },\n      ],\n    },\n  },\n};\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice\n  -&gt;setType(IssuedDocumentType::INVOICE);\n  -&gt;setEiRaw(\n    [\n        \"FatturaElettronicaBody\" =&gt; [\n            \"DatiGenerali\" =&gt; [\n                \"DatiRicezione\" =&gt; [\n                    [\"NumItem\" =&gt; \"5\"]\n                ]\n            ]\n        ]\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    ei_raw ={\n        \"FatturaElettronicaBody\": {\n            \"DatiGenerali\": {\n                \"DatiRicezione\": [\n                    {\n                        \"NumItem\": \"5\"\n                    }\n                ]\n            }\n        }\n    }\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n    ei_raw: {\n        FatturaElettronicaBody: {\n            DatiGenerali: {\n                DatiRicezione: [\n                    {\n                        NumItem: \"5\"\n                    }\n                ]\n            }\n        }\n    }\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  ei_raw: {\n    FatturaElettronicaBody: {\n      DatiGenerali: {\n        DatiRicezione: [\n          {\n            NumItem: \"5\",\n          },\n        ],\n      },\n    },\n  },\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#items-list","title":"Items list","text":"<p>In our web interface, you can define advanced attributes for each of the inserted items:</p> <p></p> <p>This section is mapped in our API methods in the data.items_list.ei_raw field. This field's behavior is similar to what was explained in the previous section, but in this case, the root tag is DettaglioLinee (2.2.1); this means that this is the first tag that we must represent in the item (you must ignore the parent nodes) and that there can be only one root tag per item.</p> <p>In the following example, we suppose that we need to set the TipoDato field (2.2.1.16.2); the following table contains the Official XML Structure for the field:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 DatiBeniServizi 2.2 DettaglioLinee 2.2.1 root AltriDatiGestionali 2.2.1.16 &lt;0,N&gt; TipoDato 2.2.1.16.2 &lt;1,1&gt; <p>This is the final XML that we want to obtain:</p> <p>While mapping this XML to our JSON, we have to keep in mind two things:</p> <ul> <li>The root is the DettaglioLinee tag, so its parents must be omitted;</li> <li>As explained before, AltriDatiGestionali can appear more than once, so it must be represented as a JSON list.</li> </ul> <p>The resulting JSON will be the following one:</p> <pre><code>\"ei_raw\": {\n  \"DettaglioLinee\": {\n    \"AltriDatiGestionali\": [\n      {\n        \"TipoDato\": \"TIPO_DATO\"\n      }\n    ]\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        },\n        \"ei_raw\": {\n          \"DettaglioLinee\": {\n            \"AltriDatiGestionali\": [\n              {\n                \"TipoDato\": \"TIPO_DATO\"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            eiRaw: new {\n                DettaglioLinee = new {\n                    AltriDatiGestionali = new [] {\n                        new {\n                            TipoDato = \"TIPO DATO\"\n                        }\n                    }\n                }\n            }\n        )\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"ei_raw\": map[string]interface{}{\n            \"DettaglioLinee\": map[string]interface{}{\n                \"AltriDatiGestionali\": []interface{}{\n                    map[string]interface{}{\n                        \"TipoDato\": \"TIPO_DATO\",\n                    },\n                },\n            },\n        },\n    },\n)\n</code></pre> <pre><code>    \"DettaglioLinee\", Map.of(\n        \"AltriDatiGestionali\",\n        Arrays.asList(\n            Map.of(\n                \"TipoDato\", \"TIPO DATO\"\n            )\n        )\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n    .addItemsListItem(\n        new IssuedDocumentItemsListItem()\n            .productId(4)\n            .eiRaw(eiRaw)\n    );\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.items_list = [\n  {\n    product_id: 4,\n    ei_raw: {\n      DettaglioLinee: {\n        AltriDatiGestionali: [\n          {\n            TipoDato: \"TIPO_DATO\",\n          },\n        ],\n      },\n    },\n  },\n];\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice-&gt;setItemsList(\n    [\n        new IssuedDocumentItemsListItem(\n            [\n                \"product_id\" =&gt; 4,\n                \"ei_raw\" =&gt; [\n                    \"DettaglioLinee\" =&gt; [\n                        \"AltriDatiGestionali\" =&gt; [\n                          [\n                            \"TipoDato\" =&gt; \"TIPO_DATO\"\n                          ]\n                        ]\n                    ]\n                ]\n            ]\n        )\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            ei_raw={\n                \"DettaglioLinee\": {\n                    \"AltriDatiGestionali\": [\n                        {\n                            \"TipoDato\": \"TIPO_DATO\"\n                        }\n                    ]\n                }\n            }\n        )\n    ]\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    items_list: Array(\n      FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            product_id: 4,\n            ei_raw: {\n                DettaglioLinee: {\n                    AltriDatiGestionali: [\n                        {\n                            NumItem: \"5\"\n                        }\n                    ]\n                }\n            }\n        )\n    )\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  items_list: [\n    {\n      product_id: 4,\n      ei_raw: {\n        DettaglioLinee: {\n          AltriDatiGestionali: [\n            {\n              TipoDato: \"TIPO_DATO\",\n            },\n          ],\n        },\n      },\n    },\n  ],\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#payments-list","title":"Payments list","text":"<p>In our web interface, you can define advanced attributes for each of the inserted payments:</p> <p></p> <p>This section is mapped in our API methods in the data.payments_list.ei_raw field. This field's behavior is similar to what was explained in the previous section, but in this case, the root tag is DettaglioPagamento (2.4.2); this means that this is the first tag that we must represent in the item (you must ignore the parent nodes) and that there can be only one root tag per item.</p> <p>In the following example, we suppose that we need to set the CAB field (2.4.2.15); the following table contains the Official XML Structure for the field:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 DatiPagamento 2.4 DettaglioPagamento 2.4.2 root CAB 2.4.2.15 &lt;0,1&gt; <p>This is the final XML that we want to obtain:</p> <p>While mapping this XML to our JSON, we have to omit the root's parent tags, as already explained above.</p> <p>The resulting JSON will be the following one:</p> <pre><code>\"ei_raw\": {\n  \"DettaglioPagamento\": {\n    \"CAB\": \"CAB\"\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        },\n        \"ei_raw\": {\n          \"DettaglioLinee\": {\n            \"AltriDatiGestionali\": [\n              {\n                \"TipoDato\": \"TIPO_DATO\"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        },\n        \"ei_raw\": {\n          \"DettaglioPagamento\": {\n            \"CAB\": \"CAB\"\n          }\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            eiRaw: new {\n                DettaglioPagamento = new {\n                    CAB = \"CAB\"\n                }\n            }\n        )\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"DettaglioPagamento\": map[string]interface{}{\n            \"CAB\": \"CAB\",\n        },\n    },\n)\n</code></pre> <pre><code>    \"DettaglioPagamento\", Map.of(\n        \"CAB\", \"CAB\"\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n    .addPaymentsListItem(\n        new IssuedDocumentPaymentsListItem()\n            .amount(BigDecimal.valueOf(122))\n            .eiRaw(eiRaw)\n    );\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.payments_list = [\n  {\n    amount: 122,\n    ei_raw: {\n      DettaglioPagamento: {\n        CAB: \"CAB\",\n      },\n    },\n  },\n];\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice-&gt;setPaymentsList(\n    [\n        new IssuedDocumentPaymentsListItem(\n            [\n                \"amount\" =&gt; 122,\n                \"ei_raw\" =&gt; [\n                    \"DettaglioPagamento\" =&gt; [\n                        \"CAB\" =&gt; \"CAB\"\n                    ]\n                ]\n            ]\n        )\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122,\n            ei_raw={\n                \"DettaglioPagamento\": {\n                    \"CAB\": \"CAB\"\n                }\n            }\n        )\n    ]\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    payments_list: Array(\n      FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n            amount: 122,\n            ei_raw: {\n                DettaglioPagamento: {\n                    CAB: \"CAB\"\n                }\n            }\n        )\n    )\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  payments_list: [\n    {\n      amount: 122,\n      ei_raw: {\n        DettaglioPagamento: {\n          CAB: \"CAB\",\n        },\n      },\n    },\n  ],\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/externally-generated-xml/","title":"Externally generated XML","text":"<p>On this page, we suppose you already have an e-invoice XML, for example, because your management tool generates one for you automatically.</p> <p>Unfortunately, TSE in Cloud doesn't let you send your XML as-is to the SDI, but there still are some options that you could follow to import your documents into our systems.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/externally-generated-xml/#import-as-zip-file","title":"Import as ZIP file","text":"<p>If you want, it is possible to import your XMLs using a ZIP file. Please, note that this functionality is designed to let you import the history of your documents (for example if you decided to migrate to TSE in Cloud) to keep track of the documents created with your all tools in a single place. Still, it will not be possible to send the documents to the SDI.  Here you can find a detailed description of the procedure you can follow to import your documents in this way.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/externally-generated-xml/#use-our-apis","title":"Use our APIs","text":"<p>This point surely requires more effort than the previous one, but the documents generated in this way will be exportable to the SDI. In this case, you'll need to use our APIs to generate a new document by using the data extracted from your management tool.</p> <p> You have two ways to achieve it:</p> <ul> <li>Create a tool that receives the resulting XML as input and maps every field of the document to the ones used by our JSON API</li> <li>Create a plugin for your management tool that uses our APIs directly, without generating a XML</li> </ul> <p>Of course, our AppStore might already contain a tool that's perfect for your needs, so check it out!</p> <p>Here you can find a guide to help you understand the basic steps needed to create a document using our APIs.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/invoice-creation/","title":"Invoice creation","text":"<p>If you are struggling to create a new invoice with our API this is the place where you want to be, you will learn every step to successfully create your invoice from scratch.</p> <p>We'll build the request step by step, so wait until the end of the guide to send your first request!</p> <p>You can find the technical documentation of this API method here.</p> <p>Some of the steps will use other API methods to create or retrieve the needed resources. You can find the required models on our API Reference section or on the documentation of the SDK you're using (check the GitHub repo or the Package Manager page).</p> <p>If you want to download the complete SDKs examples you can find them here.</p> <p>Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#are-you-using-zapier","title":"Are you using Zapier?","text":"<p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them! For example, while creating a new Issued Document the Document ID must be left blank!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#i-already-have-an-e-invoice-xml-cant-i-just-send-it-to-the-sdi","title":"I already have an e-invoice XML, can't I just send it to the SDI?","text":"<p>Unfortunately, no. TSE in Cloud lets you send documents to the SDI only if they were created through the TSE in Cloud functionalities, so if you have an XML you can't just send it to the SDI using our APIs. Please, check this guide for a more detailed explanation.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#pre-create-info","title":"Pre-Create Info","text":"<p>First of all, check out our Get Issued Document Pre-Create Info page, it contains most of the information you will need to create a new invoice.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-zero-the-document-type","title":"Step Zero: The Document Type","text":"<p>In this guide, we will explain how to create an invoice. We choose this type of document because it is the most common, but keep in mind that the process is almost the same for every issued document.</p> <p>The available types are:</p> <ul> <li>invoice: an invoice (we will use this type in this guide)</li> <li>quote: a quote</li> <li>proforma: a pro forma invoice</li> <li>receipt: a tax receipt</li> <li>delivery_note: a delivery note</li> <li>credit_note: a credit note</li> <li>order: an order</li> <li>work_report: a work report</li> <li>supplier_order: an order by the supplier</li> <li>self_own_invoice: a self-invoice in which the issuer of the document appears both as the customer and as the supplier</li> <li>self_supplier_invoice: a self-invoice in which the issuer of the document appears as the customer, while the other company acts as the supplier</li> </ul>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-one-the-customer","title":"Step One: The Customer","text":"<p>To create an invoice, we need the customer's details. You have three options:</p> <ul> <li> <p>If the customer's details were already inserted in TSE in Cloud, you can retrieve it using our API and add it to the request. See also: Get the list of existing clients</p> </li> <li> <p>If the client wasn't inserted in TSE in Cloud, but it will likely be a recurring customer (so you would like to store his details), you can insert it now, and use the returned details to populate the request. See also: Create a new client</p> </li> <li> <p>If the customer is most likely a one-time customer, you can just insert his details directly in the invoice.</p> </li> </ul> <p>The Client's data must be inserted in the entity field, as shown below. If you used the Clients API to store/retrieve the details, please remember to insert the entity.id field to link the invoice accordingly.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#we-dont-autocomplete","title":"We don't autocomplete!","text":"<p>If you choose to link an existing customer (or to create a new one) make sure you set all the fields you want to be shown in your invoice: at this moment we don't autocomplete your invoice with the customer details, even if he's already stored in TSE in Cloud. You can get the info about your client performing a Get Client request.</p> <p>The partial request looks like this:</p> Example <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1, // only if the client already exists\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> C#GOJavaPHPJavaScriptPythonRubyTypeScriptZapier <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK &lt;https://www.nuget.org/packages/It.FattureInCloud.Sdk/&gt;\n// If you want to use our Client API:\n// Retrieve a client:\n// Create a new client:\n// Insertion on-the-fly:\nEntity entity = new Entity(\n    id: 1, // Only if the client already exists\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsApi.md#listclients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsApi.md#CreateClient\n// Insertion on-the-fly:\nentity := *fattureincloud.NewEntity().\n    SetId(1). // Only if the client already exists\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n// Now we create the invoice and link the entity\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK &lt;https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk&gt;\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#listlients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#createclient\n// Insertion on-the-fly:\nEntity entity = new Entity()\n        .id(1) // Only if the client already exists\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#listclients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#createclient\n// Insertion on-the-fly:\n$entity = new Entity;\n$entity\n    -&gt;setId(1) // Only if the client already exists\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n//now we instanciate the invoice and link the entity\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our JS SDK\n// &lt;https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk&gt;\n// If you want to use our Client API:\n// Retrieve a client: &lt;https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#listClients&gt;\n// Create a new client: &lt;https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#createClient&gt;\n// Insertion on-the-fly:\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1; // Only if the client already exists\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n//now we instanciate the invoice and link the entity\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# &lt;https://pypi.org/project/fattureincloud-python-sdk/&gt;\n# If you want to use our Client API:\n# Retrieve a client: &lt;https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#list_clients&gt;\n# Create a new client: &lt;https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#create_client&gt;\n# Insertion on-the-fly:\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# &lt;https://rubygems.org/gems/fattureincloud_ruby_sdk&gt;\n# If you want to use our Client API:\n# Retrieve a client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#list_clients\n# Create a new client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#create_client\n# Insertion on-the-fly:\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\"\n)\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our TS SDK\n// &lt;https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk&gt;\n// If you want to use our Client API:\n// Retrieve a client: &lt;https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#listClients&gt;\n// Create a new client: &lt;https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#createClient&gt;\n// Insertion on-the-fly:\nlet entity: Entity = {};\nentity.id = 1; // Only if the client already exists\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n//now we create the invoice and link the entity\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n};\n</code></pre> <p>In Zapier, first, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu.</p> <p></p> <p>Next, you must set the Document Type we described in the previous step, you just need to select the correct value in the available list. </p> <p>Then you must set up the entity as explained above. The entity fields' codes start with the \"data.entity\" prefix. Remember: in this example, you must insert values only in the fields we are suggesting to you! In the image below we can't show all the fields you must fill, so you must search them all as shown before. </p> <p>Here you can find the list of all the fields and values you must fill for this example:  </p> Field Name Field Code Value Notes Entity id data.entity.id 1 It must be the ID of an existing Client, or blank. Entity name data.entity.name Mario Rossi Entity vat number data.entity.vat_number 47803200154 Entity tax code data.entity.tax_code RSSMRA91M20B967Q Entity address street data.entity.address_street Via Italia, 66 Entity address postal code data.entity.address_postal_code 20900 Entity address city data.entity.address_city Milano Entity address province data.entity.address_province MI Entity country data.entity.country Italia","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-two-the-invoice-data","title":"Step Two: The Invoice Data","text":"<p>This section allows the insertion of your invoice's basic data, below you can find the main fields:</p> <ul> <li> <p>date: the date of issue.</p> </li> <li> <p>number: the progressive invoice number, if omitted it gets automatically set ('numero documento', eg. 107).</p> </li> <li> <p>numeration: optional invoice numeration ('sezionale documento', eg. \"/FPA\").</p> </li> <li> <p>visible_subject: short optional invoice description (visible in the invoice PDF).</p> </li> <li> <p>subject: short optional invoice description (not visible in the invoice PDF).</p> </li> <li> <p>language: the document language, see: List Languages</p> </li> <li> <p>currency: the currency used for the invoice payment, see: List Currencies</p> </li> <li> <p>rc_center: optional field that represents the category of the generated revenue (centro di ricavo).</p> </li> </ul> <p>The partial request looks like this:</p> Example <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> C#GOJavaPHPJavascriptPythonRubyTypeScript <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n\n    // Below you can find this section fields:\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listCurrencies\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listLanguages\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listcurrencies\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#ListLanguages\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\"))\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        // Below you can find this section fields:\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listCurrencies\n        .currency(new Currency().id(\"EUR\"))\n        // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listLanguages\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n\n// Below you can find this section fields:\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n// Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listcurrencies\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n          \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n// Retrieve the languages: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listLanguages\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\n// Below you can find this section fields:\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\n// Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listcurrencies\ninvoice.currency = {\n  id: \"EUR\",\n};\n// Retrieve the languages: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listLanguages\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    # Below you can find this section fields:\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    # Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_currencies\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    # Retrieve the languages: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_languages\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  # Below you can find this section fields:\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  # Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_currencies\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  # Retrieve the languages: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_languages\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listCurrencies\n  currency: {\n    id: \"EUR\",\n  },\n  // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listLanguages\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued document date data.date 2022-01-20 Entity name data.number 1 Entity vat number data.numeration /fatt Entity tax code data.subject internal subject Entity address street data.visible_subject visible subject Currency code data.currency.id EUR Check List Currencies Currency exchange rate data.currency.exchange_rate 1.00000 Check List Currencies Currency symbol data.currency.symbol \u20ac Check List Currencies Language code data.language.code it Check List Languages Language extended name data.language.name Italiano Check List Languages","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-three-e-invoice","title":"Step Three: E-Invoice","text":"<p>If you want to issue an electronic invoice the first thing to do is to set the e_invoice field to true, then the ei_data field needs to be set accordingly to your needs:</p> <ul> <li> <p>vat_kind: (esigibilit\u00e0 iva) can be one of the following:</p> </li> <li> <p>I =&gt; immediata</p> </li> <li>D =&gt; differita</li> <li> <p>S =&gt; spit payment</p> </li> <li> <p>payment_method: one of the accepted payment methods</p> </li> <li> <p>bank_iban: automatically to your settings default payment method if it is set   bank_name: optional bank name   bank</p> </li> <li> <p>bank_beneficiary: set your name if different from your business name</p> </li> <li> <p>original_document_type: optional field for invoice issue reason, can be ordine, contratto, convenzione</p> </li> <li> <p>od_number: reference to the original document</p> </li> <li> <p>od_date: original document issue date</p> </li> <li> <p>cig: codice identificativo della gara</p> </li> <li> <p>cup: codice unico di progetto</p> </li> <li> <p>invoice_number: if document type is credit note this field is the reference to the invoice to be reversed</p> </li> <li> <p>invoice_date: if document type is credit note this field is the date of the invoice to be reversed</p> </li> </ul> <p>There are also some fields to be set in the entity field:</p> <ul> <li> <p>e_invoice: must be set to true</p> </li> <li> <p>ei_code: customer einvoice code</p> </li> <li> <p>certified_email: optional customer pec</p> </li> </ul> <p>If you have to set advanced parameters you have to use the ei_raw fields.</p> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    // Here we set e_invoice and ei_data\n    \"e_invoice\": true,\n    \"ei_data\": {\n      \"payment_method\": \"MP05\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n    // Here we set e_invoice and ei_data\n    eInvoice: true,\n    eiData: new IssuedDocumentEiData(\n        paymentMethod:\"MP05\"\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    // Here we set e_invoice and ei_data\n    SetEInvoice(true).\n    SetEiData(*fattureincloud.NewIssuedDocumentEiData().SetPaymentMethod(\"MP05\"))\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\"))\n        // Here we set e_invoice and ei_data\n        .eInvoice(true)\n        .eiData(\n            new IssuedDocumentEiData()\n                .paymentMethod(\"MP05\")\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n// Here we set e_invoice and ei_data\n$invoice-&gt;setEInvoice(true);\n$invoice-&gt;setEiData(\n    new IssuedDocumentEiData(\n        array(\n            \"payment_method\" =&gt; \"MP05\"\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity()\nentity.id = 1\nentity.name = \"Mario Rossi\"\nentity.vat_number = \"47803200154\"\nentity.tax_code = \"RSSMRA91M20B967Q\"\nentity.address_street = \"Via Italia, 66\"\nentity.address_postal_code = \"20900\"\nentity.address_city = \"Milano\"\nentity.address_province = \"MI\"\nentity.country = \"Italia\"\n\nlet invoice = new fattureInCloudSdk.IssuedDocument()\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice\ninvoice.entity = entity\ninvoice.date = \"2022-01-20\"\ninvoice.number = 1\ninvoice.numeration = \"/fatt\"\ninvoice.subject = \"internal subject\"\ninvoice.visible_subject = \"visible subject\"\ninvoice.currency = {\n    id: \"EUR\"\n}\ninvoice.language = {\n    code: \"it\",\n    name: \"Italiano\"\n}\n// Here we set e_invoice and ei_data\ninvoice.e_invoice = true\ninvoice.ei_data = {\n    payment_method = \"MP05\"\n}\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    # Here we set e_invoice and ei_data\n    e_invoice = True,\n    ei_data = IssuedDocumentEiData(\n        payment_method=\"MP05\"\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\"\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  # Here we set e_invoice and ei_data\n  e_invoice: true,\n  ei_data: FattureInCloud_Ruby_Sdk::IssuedDocumentEiData.new(\n    payment_method: \"MP05\"\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  // Here we set e_invoice and ei_data\n  e_invoice: true,\n  ei_data: {\n    payment_method: \"MP05\",\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued document is an e-invoice data.e_invoice true E-invoice payment methid data.ei_data.payment_method MP05 see here for the accepted values of ModalitaPagamento","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-four-contributions-and-withholdings","title":"Step Four: Contributions and Withholdings","text":"<p>The Contributions and withholdings section allows the insertion of Casse Professionali, Rivalsa, Withholding tax, and other Withholdings / Enasarco.</p> <ul> <li> <p>cassa professionisti: you can set up two Casse professionisti and set the fields according to your needs.</p> </li> <li> <p>rivalsa (INPS): you can set up the Rivalsa and charge it to your clients setting the appropriate fields.</p> </li> <li> <p>withholding tax: you can set up the Irpef withholding tax setting the appropriate fields.</p> </li> <li> <p>enasarco and other withholdings: you will find also the fields to set up Enasarco and other Withholdings.</p> </li> </ul>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-five-items-list","title":"Step Five: Items list","text":"<p>The items composing the invoice are included in the Items List section.</p> <p>As already seen in step one, you have three possibilities to add items:</p> <ul> <li> <p>If you already inserted the Product in the TSE in Cloud API, you can retrieve it using the Products API. See also: Get a list of the products</p> </li> <li> <p>If this is a new product, and you want to add it to TSE in Cloud, you can do it now. See also: Create a new product</p> </li> <li> <p>If you don't want to save this product for future use, just insert it in the request.</p> </li> </ul> <p>The items_list is an array of items: Just remember to specify the id if you inserted a product using the Product API and want to link it to the invoice.</p> <p>If you are not familiar with the invoice item, you can find below the description of the fields:</p> <ul> <li> <p>code: optional, a custom code</p> </li> <li> <p>name: product name</p> </li> <li> <p>net_price/gross_price: price per single item, if you set the flag use_gross_prices to true you have to specify the gross_price</p> </li> <li> <p>vat: the only field you have to set is the id, you can get the id of the vat you need by performing a list vat type call or create a vat type if the one you want does not exist yet.</p> </li> <li> <p>discount: optional, discount percentage, automatically set if you specified the default discount in the relative client registry</p> </li> <li> <p>category: useful to categorize your products</p> </li> <li> <p>description: additional details</p> </li> <li> <p>qty: number of products sold</p> </li> <li> <p>measure: optional, unit of measure of the product (eg: kilograms, liters, days, etc...)</p> </li> <li> <p>not_taxable: if this flag is set to true the amount will not be counted as revenue.</p> </li> <li> <p>apply_withholding_tax: if you don't want withholding taxes, rivalsa, and cassa to be applied set this flag to false.</p> </li> </ul> <p>If you want to add a 'bollo a carico del cliente' in a einvoice, you have to add a new item, set the name to 'Bollo in fattura', net_price to 2\u20ac, not_taxable to true and the vat.id field to 21 (0% Escluso Art.15), if the invoice is not electronic it's enough to set the field stamp_duty to the amount you want to charge, keep in mind that using the stamp_duty in a einvoice the 'bollo' will be charged to you, not to the customer.</p> <p>!!! warning We don't autocomplete!</p> <p>If you choose to link an existing product (or to create a new one) make sure you set all the fields you want to be shown in your invoice: at this moment we don't autocomplete your invoice with the product details, even if it is already stored in TSE in Cloud. You can get the info about your product performing a Get Product request.</p> <p>!!! </p> <p>Now we add the items_list to our request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n    \"data\": {\n        \"type\": \"invoice\",\n        \"entity\": {\n            \"id\": 1,\n            \"name\": \"Mario Rossi\",\n            \"vat_number\": \"47803200154\",\n            \"tax_code\": \"RSSMRA91M20B967Q\",\n            \"address_street\": \"Via Italia, 66\",\n            \"address_postal_code\": \"20900\",\n            \"address_city\": \"Milano\",\n            \"address_province\": \"MI\",\n            \"address_extra\": \"\",\n            \"country\": \"Italia\"\n        },\n        \"date\": \"2022-01-20\",\n        \"number\": 1,\n        \"numeration\": \"/fatt\",\n        \"subject\": \"internal subject\",\n        \"visible_subject\": \"visible subject\",\n        \"currency\": {\n            \"id\": \"EUR\",\n            \"exchange_rate\": \"1.00000\",\n            \"symbol\": \"\u20ac\"\n        },\n        \"language\": {\n            \"code\": \"it\",\n            \"name\": \"Italiano\"\n        },\n        \"items_list\": [\n            {\n                \"product_id\": 4,\n                \"code\": \"TV3\",\n                \"name\": \"Tavolo in legno\",\n                \"net_price\": 100,\n                \"category\": \"cucina\",\n                \"discount\": 0,\n                \"qty\": 1,\n                \"vat\": {\n                    \"id\": 0 #22%\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n    // Here we set the Items List\n    // List your products: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ProductsApi.md#listProducts\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    }\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    // Here we set the Items List\n    // List your products: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ProductsApi.md#listProducts\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    })\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        // Here we set the Items List\n        // List your products: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ProductsApi.md#listProducts\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n// Here we set the Items List\n// List your products: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ProductsApi.md#listproducts\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\n// Here we set the Items List\n// List your products: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ProductsApi.md#listProducts\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    # Here we set the Items List\n    # List your products: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ProductsApi.md#list_products\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  # Here we set the Items List\n  # List your products: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ProductsApi.md#list_products\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  // Here we set the Items List\n  // List your products: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ProductsApi.md#listProducts\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n</code></pre> <p>The Items List in fact accepts an array of items.</p> <p>In this example, we'll insert only a single item, but you can check how to insert multiple items in the Zapier Documentation.</p> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Data.items list - Issued document item product id data.items_list.product_id 4 Check List Products Data.items list - Issued document item product code data.items_list.code TV3 Data.items list - Issued document item product name data.items_list.name Tavolo in legno Data.items list - Issued document item product net price data.items_list.net_price 100 Data.items list - Issued document item product category data.items_list.category cucina Data.items list - Issued document item product description data.items_list.discount 0 Data.items list - Issued document item product qty data.items_list.qty 1 Data.items list - Vat type id data.items_list.vat.id 0 Check List VAT Type","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-six-payments-list","title":"Step Six: Payments List","text":"<p>The Payment List section allows the insertion of all the info about your invoice payments.</p> <ul> <li> <p>amount: the amount of the payment.</p> </li> <li> <p>payment_terms: the number of days by which the payment must be made can be set.</p> </li> <li> <p>due_date: the date by which the payment must be made.</p> </li> <li> <p>status: the payment status, can be not_paid, paid, and reversed.</p> </li> <li> <p>payment_account: if the status of the invoice is paid, the payment account id needs to be set, make sure it exists or you will get an error. You can get a list of your payment accounts or create a new one as you need.</p> </li> </ul> <p>Here we suppose that the status is \"paid\", and we add the new parameters to the request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n    // Here we set the payments list assuming our invoice has already been paid\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            // List your payment accounts: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    }\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    // Here we set the Payments List\n    // List your payment accounts: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    })\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        // Here we set the payments list assuming our invoice has already been paid\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        // List your payment accounts: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n                        .paymentAccount(new PaymentAccount().id(110))\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n// Here we set the payments list assuming our invoice has already been paid\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                // List your payment accounts: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listpaymentaccounts\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n// Here we set the payments list assuming our invoice has already been paid\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    // List your payment accounts: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n    payment_account: {\n      id: 10,\n    },\n  },\n];\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    # Here we set the payments list assuming our invoice has already been paid\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            # List your payment accounts: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_payment_accounts\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ]\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  # Here we set the payments list assuming our invoice has already been paid\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          # List your payment accounts: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_payment_accounts\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  // Here we set the payments list assuming our invoice has already been paid\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      // List your payment accounts: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n};\n</code></pre> <p>The Payments List in fact accepts an array of items.</p> <p>In this example, we'll insert only a single item, but you can check how to insert multiple items in the Zapier Documentation.</p> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Data.payments list - Issued document payment amount data.payments_list.amount 122 Data.payments list - Issued document payment due date data.payments_list.due_date 2022-01-23 Data.payments list - Issued document payment date data.payments_list.paid_date 2022-01-22 Data.payments list - Issued document status data.payments_list.status paid Data.payments list - Payment account id data.payments_list.payment_account.id 110 Check List Payment Accounts <p>If you want to know more about the calculation of the amounts you can visit the calculating totals page.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-seven-advanced-options","title":"Step Seven: Advanced Options","text":"<p>The Advanced Options section allows the management of the payment methods and the direct generation of DDT and accompanying invoices.</p> <ul> <li> <p>payment_method: you can use this field to communicate to the customer how to pay the invoice;   the only required parameter is the payment method id, make sure it exists or you will get an error. You can get a list of your payment methods or create a new one according to your needs.</p> </li> <li> <p>show_payment_method: if this flag is set to true, it shows the payment method details in the invoice.</p> </li> <li> <p>delivery_note: if this flag is set to true, you can set all the delivery note-related parameters and a DDT will be automatically created.</p> </li> <li> <p>accompanying_invoice: if this flag is set to true, you can set all the accompanying invoice-related parameters and it will be automatically created.</p> </li> <li> <p>amount_due_discount: with this parameter you can set a discount or surcharge on the total of the invoice.</p> </li> <li> <p>use_split_payment: this flag can be set to true if the split payment is needed.</p> </li> </ul> <p>Below we add the Payment Method to the request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>Entity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    },\n    // Here we add the payment method\n    // List your payment methods: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n    paymentMethod: new PaymentMethod(\n        id: 386683\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    }).\n    // Here we add the payment method\n    // List your payment methods: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n    SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683))\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        .paymentAccount(new PaymentAccount().id(110))\n        )\n        // Here we add the payment method\n        // List your payment methods: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n        .paymentMethod(\n                new PaymentMethod().id(386683)\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n// Here we add the payment method\n// List your payment methods: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listpaymentmethods\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\n// Here we add the payment method\n// List your payment methods: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\ninvoice.payment_method = {\n  id: 386683,\n};\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    # Here we add the payment method\n    # List your payment methods: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_payment_methods\n    payment_method = PaymentMethod(\n        id=386683\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  # Here we add the payment method\n  # List your payment methods: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_payment_methods\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  )\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  // Here we add the payment method\n  // List your payment methods: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n  payment_method: {\n    id: 386683,\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Payment method id data.payment_method.id 386683 Check List Payment Method","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-eight-attachment","title":"Step Eight: Attachment","text":"<p>If you want to attach a file to your invoice you can do it by using Upload Attachment method; the response will include an attachment_token, that you can pass to the Invoice Creation request that we're building to effectively attach the file. The token must be assigned to the attachment_token parameter in the request.</p> <p>The code to upload an attachment with our SDKs:</p> <pre><code>Configuration config = new Configuration();\nconfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar apiInstance = new IssuedDocumentsApi(config);\n\nvar filename = \"fattura_XX_XXXX\";\nvar attachment = File.Open(\"/path/to/file.pdf\", FileMode.Open);\nvar companyId = 12345;\n\nUploadIssuedDocumentAttachmentResponse result = apiInstance.UploadIssuedDocumentAttachment(companyId, filename, attachment);\nvar attachmentToken = result.Data.AttachmentToken;\n</code></pre> <pre><code>companyId := int32(12345)\nfilename := \"fattura_XX_XXXX\"\nattachment, _ := os.Open(\"/path/to/file.pdf\")\n\nauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\nconfiguration := fattureincloudapi.NewConfiguration()\napiClient := fattureincloudapi.NewAPIClient(configuration)\nresp, r, err := apiClient.IssuedDocumentsAPI.UploadIssuedDocumentAttachment(auth, companyId).Filename(filename).Attachment(attachment).Execute()\nif err != nil {\n    fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.UploadIssuedDocumentAttachment``: %v\\n\", err)\n    fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n}\nattachmentToken := resp.Data.AttachmentToken\n</code></pre> <pre><code>ApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nIssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\nInteger companyId = 12345;\nString filename = \"fattura_XX_XXXX\";\nFile attachment = new File(\"/path/to/file.pdf\");\n\nUploadIssuedDocumentAttachmentResponse result = apiInstance.uploadIssuedDocumentAttachment(companyId, filename, attachment);\nString attachmentToken = result.getData().getAttachmentToken();\n</code></pre> <pre><code>let defaultClient = fattureInCloudSdk.ApiClient.instance;\n\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ATTACHMENT_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\nlet companyId = 12345;\nlet opts = {\n  filename: \"fattura_XX_XXXX\",\n  attachment: fs.createReadStream(\"/path/to/file.pdf\"),\n};\n\nlet res = await apiInstance.uploadIssuedDocumentAttachment(companyId, opts);\nlet attachmentTokent = res.data.attachment_token;\n</code></pre> <pre><code>configuration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    company_id = 12345\n    filename = \"fattura_XX_XXXX\"\n    attachment = open('/path/to/file.pdf', 'rb')\n\n    api_response = api_instance.upload_issued_document_attachment(company_id, filename=filename, attachment=attachment)\n    attachmen_token = api_response.data.attachment_token\n</code></pre> <pre><code>FattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ATTACHMENT_TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\ncompany_id = 12345\nopts = {\n  filename: 'fattura_XX_XXXX',\n  attachment: File.open('/path/to/file.pdf')\n}\nres = api_instance.upload_issued_document_attachment(company_id, opts)\n\nattachment_token =  res.data.attachment_token\n</code></pre> <pre><code>const apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\nlet companyId = 12345;\nlet filename = \"fattura_XX_XXXX\";\nlet attachment = fs.createReadStream(\"path/to/file.pdf\");\n\nlet res = await apiInstance.uploadIssuedDocumentAttachment(\n  companyId,\n  filename,\n  attachment\n);\nlet attachemntToken = res.data.data?.attachment_token;\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued Document attachment token data.attachment_token FAKE_TOKEN Check Upload Attachment Method","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-nine-customisation","title":"Step Nine: Customisation","text":"<p>The customization section allows the choice of the invoice template and is useful to add some details.</p> <ul> <li> <p>template/delivery_note_template/acc_inv_template: invoice/delivery note/accompanying invoice template, only the id of the template has to be specified, you can retrieve it using the list templates method.</p> </li> <li> <p>h_margins/v_margins: horizontal/vertical margins.</p> </li> <li> <p>show_payments: if this flag is set to false, the expiration dates of the payments will not be shown on the document.</p> </li> <li> <p>show_tspay_button: if this flag is set to true, when the invoice is received by the client it can be paid directly via TS Pay and, without further operations, the invoice will result as paid.</p> </li> <li> <p>show_notification_button: if this flag is set to true when the client pays the invoice he can notify the payment by clicking the button.</p> </li> </ul> <p>Here there is our final JSON, complete with the attachment and our favorite invoice template:</p> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"attachment_token\": \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    \"template\": {\n      \"id\": 150\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    },\n    paymentMethod: new PaymentMethod(\n        id: 386683\n    ),\n    // Finally we can add the attachment token of our uploaded file and a template\n    // Upload your attachment: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n    attachmentToken: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    // List your templates: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listTemplates\n    template: new DocumentTemplate(\n        id: 150\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    }).\n    SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683)).\n    // Finally we can add the attachment token of our uploaded file and a template\n    // Upload your attachment: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n    SetAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\").\n    // List your templates: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listTemplates\n    SetTemplate(*fattureincloud.NewDocumentTemplate().SetId(150))\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        .paymentAccount(new PaymentAccount().id(110))\n        )\n        .paymentMethod(\n                new PaymentMethod().id(386683)\n        )\n        // Finally we can add the attachment token of our uploaded file and a template\n        // Upload your attachment: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n        .attachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\")\n        // List your templates: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listTemplates\n        .template(new DocumentTemplate().id(150));\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n// Finally we can add the attachment token of our uploaded file and a template\n// Upload your attachment: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#uploadissueddocumentattachment\n$invoice-&gt;setAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\");\n// List your templates: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listtemplates\n$invoice-&gt;setTemplate(\n    new DocumentTemplate(\n        array(\n            \"id\" =&gt; 150\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\ninvoice.payment_method = {\n  id: 386683,\n};\n// Finally we can add the attachment token of our uploaded file and a template\n// Upload your attachment: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\ninvoice.attachment_token =\n  \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\";\n// List your templates: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listTemplates\ninvoice.template = {\n  id: 150,\n};\n</code></pre> <pre><code># NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    payment_method = PaymentMethod(\n        id=386683\n    ),\n    # Finally we can add the attachment token of our uploaded file and a template\n    # Upload your attachment: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#upload_issued_document_attachment\n    attachment_token = \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    # List your templates: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_templates\n    template = DocumentTemplate(\n        id=150\n    )\n)\n</code></pre> <pre><code># NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  ),\n  # Finally we can add the attachment token of our uploaded file and a template\n  # Upload your attachment: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#upload_issued_document_attachment\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  # List your templates: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_templates\n  template: FattureInCloud_Ruby_Sdk::DocumentTemplate.new(\n      id: 150\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  payment_method: {\n    id: 386683,\n  },\n  // Finally we can add the attachment token of our uploaded file and a template\n  // Upload your attachment: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  // List your templates: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listTemplates\n  template: {\n    id: 150,\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Template id data.template.id 10 Check List Templates Method <p>Please, remember that this request will most probably fail if executed as-is! For example, the IDs specified in the request must exist in order to avoid getting an error response! Remember to check the various methods explained in this guide to fill the request fields correctly!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#create-the-document","title":"Create the document","text":"<p>Now we are ready to create an invoice, so let's create an invoice using the request we just built:</p> <pre><code>POST /c/1235/issued_documents HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 900\n\n{\"data\":{\"type\":\"invoice\",\"entity\":{\"id\":1,\"name\":\"Mario Rossi\",\"vat_number\":\"47803200154\",\"tax_code\":\"RSSMRA91M20B967Q\",\"address_street\":\"Via Italia, 66\",\"address_postal_code\":\"20900\",\"address_city\":\"Milano\",\"address_province\":\"MI\",\"address_extra\":\"\",\"country\":\"Italia\"},\"date\":\"2022-01-20\",\"number\":1,\"numeration\":\"\\/fatt\",\"subject\":\"internal subject\",\"visible_subject\":\"visible subject\",\"currency\":{\"id\":\"EUR\",\"exchange_rate\":\"1.00000\",\"symbol\":\"\\u20ac\"},\"language\":{\"code\":\"it\",\"name\":\"Italiano\"},\"items_list\":[{\"product_id\":4,\"code\":\"TV3\",\"name\":\"Tavolo in legno\",\"net_price\":100,\"category\":\"cucina\",\"discount\":0,\"qty\":1,\"vat\":{\"id\":0}}],\"payment_method\":{\"id\":386683},\"payments_list\":[{\"amount\":122,\"due_date\":\"2022-01-23\",\"paid_date\":\"2022-01-22\",\"status\":\"paid\",\"payment_account\":{\"id\":110}}],\"attachment_token\":\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\"template\":{\"id\":150}}}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is a complete request, but please customize it!!! \n            // In the next step we'll explain how to perform the request to the API.\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            Entity entity = new Entity(\n                id: 1,\n                name: \"Mario Rossi\",\n                vatNumber: \"47803200154\",\n                taxCode: \"RSSMRA91M20B967Q\",\n                addressStreet: \"Via Italia, 66\",\n                addressPostalCode: \"20900\",\n                addressCity: \"Milano\",\n                addressProvince: \"MI\",\n                country: \"Italia\"\n            );\n\n            IssuedDocument invoice = new IssuedDocument(\n                type: IssuedDocumentType.Invoice,\n                entity: entity,\n                date: new DateTime(2022, 01, 20),\n                number: 1,\n                numeration: \"/fatt\",\n                subject: \"internal subject\",\n                visibleSubject: \"visible subject\",\n                currency: new Currency(\n                    id: \"EUR\"\n                ),\n                language: new Language(\n                    code: \"it\",\n                    name: \"italiano\"\n                ),\n                    new IssuedDocumentItemsListItem(\n                        productId: 4,\n                        code: \"TV3\",\n                        name: \"Tavolo in legno\",\n                        netPrice: 100,\n                        category: \"cucina\",\n                        discount: 0,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                },\n                    new IssuedDocumentPaymentsListItem(\n                        amount: 122,\n                        dueDate: new DateTime(2022, 01, 23),\n                        paidDate: new DateTime(2022, 01, 22),\n                        status: IssuedDocumentStatus.Paid,\n                        paymentAccount: new PaymentAccount(\n                            id: 110\n                        )\n                    )\n                },\n                paymentMethod: new PaymentMethod(\n                    id: 386683\n                ),\n                attachmentToken: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n                template: new DocumentTemplate(\n                    id: 150\n                )\n            );\n\n            // Here we put our invoice in the request object\n            CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Create the invoice: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n            try {\n                CreateIssuedDocumentResponse result = apiInstance.CreateIssuedDocument(companyId, createIssuedDocumentRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.CreateIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n \"context\"\n \"encoding/json\"\n \"fmt\"\n \"os\"\n\n fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n //set your access token\n auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n configuration := fattureincloudapi.NewConfiguration()\n apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n //set your company id\n companyId := int32(12345)\n\n entity := *fattureincloud.NewEntity().\n  SetId(1).\n  SetName(\"Mario Rossi\").\n  SetVatNumber(\"RSSMRA91M20B967Q\").\n  SetTaxCode(\"RSSMRA91M20B967Q\").\n  SetAddressStreet(\"Via Italia, 66\").\n  SetAddressPostalCode(\"20900\").\n  SetAddressCity(\"Milano\").\n  SetAddressProvince(\"MI\").\n  SetCountry(\"Italia\")\n\n invoice := *fattureincloud.NewIssuedDocument().\n  SetEntity(entity).\n  SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n  SetDate(\"2022-01-20\").\n  SetNumber(1).\n  SetNumeration(\"/fatt\").\n  SetSubject(\"internal subject\").\n  SetVisibleSubject(\"visible subject\").\n  SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n  SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n  SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n   *fattureincloud.NewIssuedDocumentItemsListItem().\n    SetProductId(4).\n    SetCode(\"TV3\").\n    SetName(\"Tavolo in legno\").\n    SetNetPrice(100).\n    SetCategory(\"cucina\").\n    SetDiscount(0).\n    SetQty(1).\n    SetVat(*fattureincloud.NewVatType().SetId(0)),\n  }).\n  SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n   *fattureincloud.NewIssuedDocumentPaymentsListItem().\n    SetAmount(122).\n    SetDueDate(\"2022-01-23\").\n    SetPaidDate(\"2022-01-22\").\n    SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n    SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n  }).\n  SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683)).\n  SetAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\").\n  SetTemplate(*fattureincloud.NewDocumentTemplate().SetId(150))\n\n // Here we put our invoice in the request object\n createIssuedDocumentRequest := *fattureincloud.NewCreateIssuedDocumentRequest().SetData(invoice)\n\n // Now we are all set for the final call\n // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\n resp, r, err := apiClient.IssuedDocumentsAPI.CreateIssuedDocument(auth, companyId).CreateIssuedDocumentRequest(createIssuedDocumentRequest).Execute()\n if err != nil {\n  fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.CreateIssuedDocument``: %v\\n\", err)\n  fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n }\n json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is a complete request, but please customize it!!! \n        // In the next step we'll explain how to perform the request to the API.\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        Entity entity = new Entity()\n                .id(1)\n                .name(\"Mario Rossi\")\n                .vatNumber(\"47803200154\")\n                .taxCode(\"RSSMRA91M20B967Q\")\n                .addressStreet(\"Via Italia, 66\")\n                .addressPostalCode(\"20900\")\n                .addressCity(\"Milano\")\n                .addressProvince(\"MI\")\n                .country(\"Italy\");\n\n        IssuedDocument invoice = new IssuedDocument()\n                .type(IssuedDocumentType.INVOICE)\n                .entity(entity)\n                .date(LocalDate.of(2022, 1, 20))\n                .number(1)\n                .numeration(\"/fatt\")\n                .subject(\"internal subject\")\n                .visibleSubject(\"visible subject\")\n                .currency(new Currency().id(\"EUR\"))\n                .language(new Language()\n                                .code(\"it\")\n                                .name(\"italiano\")\n                )\n                .addItemsListItem(\n                        new IssuedDocumentItemsListItem()\n                                .productId(4)\n                                .code(\"TV3\")\n                                .name(\"Tavolo in legno\")\n                                .netPrice(BigDecimal.valueOf(100))\n                                .category(\"cucina\")\n                                .discount(BigDecimal.valueOf(0))\n                                .qty(BigDecimal.valueOf(1))\n                                .vat(new VatType().id(0))\n                )\n                .addPaymentsListItem(\n                        new IssuedDocumentPaymentsListItem()\n                                .amount(BigDecimal.valueOf(122))\n                                .dueDate(LocalDate.of(2022, 01, 23))\n                                .paidDate(LocalDate.of(2022, 01, 22))\n                                .status(IssuedDocumentStatus.PAID)\n                                .paymentAccount(new PaymentAccount().id(110))\n                )\n                .paymentMethod(\n                        new PaymentMethod().id(386683)\n                )\n                .attachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\")\n                .template(new DocumentTemplate().id(150));\n\n        // Here we put our invoice in the request object\n        CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Create the invoice: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n        try {\n            CreateIssuedDocumentResponse result = apiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#createIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n&lt;?php\n\nuse FattureInCloud\\Model\\Currency;\nuse FattureInCloud\\Model\\DocumentTemplate;\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsListItem;\nuse FattureInCloud\\Model\\IssuedDocumentPaymentsListItem;\nuse FattureInCloud\\Model\\IssuedDocumentStatus;\nuse FattureInCloud\\Model\\IssuedDocumentType;\nuse FattureInCloud\\Model\\CreateIssuedDocumentRequest;\nuse FattureInCloud\\Model\\Language;\nuse FattureInCloud\\Model\\PaymentAccount;\nuse FattureInCloud\\Model\\PaymentMethod;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\");\n$invoice-&gt;setTemplate(\n    new DocumentTemplate(\n        array(\n            \"id\" =&gt; 150\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$create_issued_document_request = new CreateIssuedDocumentRequest;\n$create_issued_document_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#createissueddocument\ntry {\n    $result = $apiInstance-&gt;createIssuedDocument($company_id, $create_issued_document_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;createIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\ninvoice.payment_method = {\n  id: 386683,\n};\ninvoice.attachment_token =\n  \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\";\ninvoice.template = {\n  id: 150,\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest =\n  new fattureInCloudSdk.CreateIssuedDocumentRequest();\ncreateIssuedDocumentRequest.data = invoice;\n\nlet opts = {\n  createIssuedDocumentRequest: createIssuedDocumentRequest,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.currency import Currency\nfrom fattureincloud_python_sdk.models.language import Language\nfrom fattureincloud_python_sdk.models.entity import Entity\nfrom fattureincloud_python_sdk.models.payment_method import PaymentMethod\nfrom fattureincloud_python_sdk.models.payment_account import PaymentAccount\nfrom fattureincloud_python_sdk.models.document_template import DocumentTemplate\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document_type import IssuedDocumentType\nfrom fattureincloud_python_sdk.models.issued_document_status import IssuedDocumentStatus\nfrom fattureincloud_python_sdk.models.create_issued_document_request import CreateIssuedDocumentRequest\nfrom fattureincloud_python_sdk.models.create_issued_document_response import CreateIssuedDocumentResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\nfrom fattureincloud_python_sdk.models.issued_document_payments_list_item import IssuedDocumentPaymentsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    payment_method = PaymentMethod(\n        id=386683\n    ),\n    attachment_token = \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    template = DocumentTemplate(\n        id=150\n    )\n)\n\n# Here we put our invoice in the request object\ncreate_issued_document_request = CreateIssuedDocumentRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.create_issued_document(company_id, create_issued_document_request=create_issued_document_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;create_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!! \n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  ),\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  template: FattureInCloud_Ruby_Sdk::DocumentTemplate.new(\n      id: 150\n  )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  create_issued_document_request: FattureInCloud_Ruby_Sdk::CreateIssuedDocumentRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\nbegin\n  result = api_instance.create_issued_document(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;create_issued_document: #{e}\"\nend\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  IssuedDocumentsApi,\n  Entity,\n  IssuedDocument,\n  IssuedDocumentType,\n  CreateIssuedDocumentRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  payment_method: {\n    id: 386683,\n  },\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  template: {\n    id: 150,\n  },\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest: CreateIssuedDocumentRequest = {\n  data: invoice,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>Once you filled all the fields you need, you can click the \"Continue\" button and follow the wizard to create your Zap!</p> <p>You just created your first invoice. Congratulations!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#send-the-document","title":"Send the document","text":"<p>After you created your invoice it's time to send it to your customer, with the Schedule Email method. To do that you have 2 options:</p> <ul> <li>use your SMTP server configured in Settings -&gt; SMTP configuration</li> <li>use our mail service setting the sender_id to 0 as shown in the examples below (the mail will result to be sent by no-reply@fattureincloud.it)</li> </ul> <p>In the email body you can use 3 variables:</p> <ul> <li>{{allegati}}: adds button to download attachments</li> <li>{{logo-1}}: adds the Logo 1 image</li> <li>{{logo-2}}: adds the Logo 2 image</li> </ul> <p>keep in mind that the max size of the body is 50KiB and must be HTML escaped.</p> <pre><code>POST /c/12345/issued_documents/54321/email HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 900\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            //set your company id\n            var companyId = 12345;\n\n            //set your previously created document id\n            var documentId = 54321;\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            EmailSchedule email = new EmailSchedule(\n                senderId: 0,\n                recipientEmail: \"mariorossi@mail.com\",\n                subject: \"Nostra fattura nr. 54321\",\n                include: new EmailScheduleInclude(\n                    document: true,\n                    deliveryNote: false,\n                    attachment: false,\n                    accompanyingInvoice: false\n                    ),\n                attachPdf: false,\n                sendCopy: false\n             );\n\n\n            ScheduleEmailRequest scheduleEmailRequest = new ScheduleEmailRequest(\n                data: email\n            );\n\n            // Now we are all set for the final call\n            // Schedule the email: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\n            try\n            {\n                apiInstance.ScheduleEmail(companyId, documentId, scheduleEmailRequest);\n            }\n            catch (ApiException e)\n            {\n                Debug.Print(\"Exception when calling IssuedDocumentsApi.ScheduleEmail: \" + e.Message);\n                Debug.Print(\"Status Code: \" + e.ErrorCode);\n                Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n \"context\"\n \"fmt\"\n \"os\"\n\n fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n //set your access token\n auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n configuration := fattureincloudapi.NewConfiguration()\n apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n //set your company id\n companyId := int32(12345)\n\n //set your company id\n documentId := int32(54321)\n\n email := *fattureincloud.NewEmailSchedule().\n  SetSenderId(0).\n  SetRecipientEmail(\"mariorossi@mail.com\").\n  SetSubject(\"Nostra fattura nr. 54321\").\n  SetInclude(*fattureincloud.NewEmailScheduleInclude().\n   SetDocument(true).\n   SetDeliveryNote(false).\n   SetAttachment(false).\n   SetAccompanyingInvoice(false),\n  ).\n  SetAttachPdf(false).\n  SetSendCopy(false)\n\n scheduleEmailRequest := *fattureincloud.NewScheduleEmailRequest().SetData(email)\n\n    // Now we are all set for the final call\n    // Schedule the email: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\n resp, err := apiClient.IssuedDocumentsAPI.ScheduleEmail(auth, companyId, documentId).ScheduleEmailRequest(scheduleEmailRequest).Execute()\n if err != nil {\n  fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.ScheduleEmail``: %v\\n\", err)\n  fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", resp)\n }\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        // set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        // set your company id\n        Integer companyId = 12345;\n\n        // set your previously created document id\n        Integer documentId = 54321;\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        EmailSchedule email = new EmailSchedule()\n            .senderId(0)\n            .recipientEmail(\"mariorossi@mail.com\")\n            .subject(\"Nostra fattura nr. 54321\")\n            .include(\n                new EmailScheduleInclude()\n                    .document(true)\n                    .deliveryNote(false)\n                    .attachment(false)\n                    .accompanyingInvoice(false))\n            .attachPdf(false)\n            .sendCopy(false);\n\n        ScheduleEmailRequest scheduleEmailRequest = new ScheduleEmailRequest().data(email);\n\n        // Now we are all set for the final call\n        // Schedule the email: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\n        try {\n            apiInstance.scheduleEmail(companyId, documentId, scheduleEmailRequest);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#scheduleEmail\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\EmailSchedule;\nuse FattureInCloud\\Model\\ScheduleEmailRequest;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// set your company id\n$company_id = 12345;\n\n// set your previously retrieved document id\n$document_id = 54321;\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$email = new EmailSchedule(\n    [\n        \"sender_id\" =&gt; 0,\n        \"recipient_email\" =&gt; \"mariorossi@mail.com\",\n        \"subject\" =&gt; \"Nostra fattura nr. 54321\",\n        \"include\" =&gt;\n            [\n                \"document\" =&gt; true,\n                \"delivery_note\" =&gt; false,\n                \"attachment\" =&gt; false,\n                \"accompanying_invoice\" =&gt; false\n            ],\n        \"attach_pdf\" =&gt; false,\n        \"send_copy\" =&gt; false\n    ]\n);\n\n$schedule_email_request = new ScheduleEmailRequest([\"data\" =&gt; $email]);\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#scheduleemail\ntry {\n    $apiInstance-&gt;scheduleEmail($company_id, $document_id, $schedule_email_request);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;scheduleEmail: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n//set your company id\nlet companyId = 12345;\n\n//set your previously created document id\nlet documentId = 54321;\n\nlet email = new fattureInCloudSdk.EmailSchedule();\nemail.sender_id = 0;\nemail.recipient_email = \"mariorossi@mail.com\";\nemail.subject = \"Nostra fattura nr. 54321\";\nemail.body =\nemail.include = {\n  document: true,\n  delivery_note: false,\n  attachment: false,\n  accompanying_invoice: false,\n};\nemail.attach_pdf = false;\nemail.send_copy = false;\n\nlet scheduleEmailRequest = new fattureInCloudSdk.ScheduleEmailRequest();\nscheduleEmailRequest.data = email;\n\nlet opts = {\n  scheduleEmailRequest: scheduleEmailRequest,\n};\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\napiInstance.scheduleEmail(companyId, documentId, opts).then(\n  () =&gt; {\n    console.log(\"API called successfully\");\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.email_schedule import EmailSchedule\nfrom fattureincloud_python_sdk.models.schedule_email_request import ScheduleEmailRequest\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your previously create document id\ndocument_id = 54321\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nemail = EmailSchedule(\n    sender_id=0,\n    recipient_email=\"mariorossi@mail.com\",\n    subject=\"Nostra fattura nr. 54321\",\n    include=EmailScheduleInclude(\n        document=True,\n        delivery_note=False,\n        attachment=False,\n        accompanying_invoice=False\n    ),\n    attach_pdf=False,\n    send_copy=False\n)\n\nschedule_email_request = ScheduleEmailRequest(\n    data = email\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#schedule_email\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_instance.schedule_email(company_id, document_id, schedule_email_request=schedule_email_request)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;schedule_email: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# set your previously retrieved document id\ndocument_id = 54321\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nemail = FattureInCloud_Ruby_Sdk::EmailSchedule.new(\n  sender_id: 0,\n  recipient_email: \"mariorossi@mail.com\",\n  subject: \"Nostra fattura nr. 54321\",\n  include: FattureInCloud_Ruby_Sdk::EmailScheduleInclude.new(\n      document: true,\n      delivery_note: false,\n      attachment: false,\n      accompanying_invoice: false\n  ),\n  attach_pdf: false,\n  send_copy: false\n)\n\nopts = {\n  schedule_email_request: FattureInCloud_Ruby_Sdk::ScheduleEmailRequest.new(data: email)\n}\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\nbegin\n  api_instance.schedule_email(company_id, document_id, opts)\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;schedule_email: #{e}\"\nend\n</code></pre> <pre><code>// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  IssuedDocumentsApi,\n  EmailSchedule,\n  ScheduleEmailRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n// set your company id\nlet companyId = 12345;\n\n// set your previously created document id\nlet documentId = 54321;\n\nlet email: EmailSchedule = {};\nemail.sender_id = 0;\nemail.recipient_email = \"mariorossi@mail.com\";\nemail.subject = \"Nostra fattura nr. 54321\";\nemail.body =\nemail.include = {\n  document: true,\n  delivery_note: false,\n  attachment: false,\n  accompanying_invoice: false,\n};\nemail.attach_pdf = false;\nemail.send_copy = false;\n\nlet scheduleEmailRequest: ScheduleEmailRequest = {\n  data: email,\n};\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\napiInstance.schedule(companyId, documentId, createIssuedDocumentRequest).then(\n  () =&gt; {\n    console.log(\"API called successfully\");\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>In this case, you'll need to use the Schedule Email Action, so it is a different action than the one used before. You can decide to add another step to your Zap or to create a new Zap with a trigger on the Invoice Creation event.</p> <p>These are the fields required for this step:</p> Field Name Field Code Value Notes The ID of the company - 12345 Select it from the dropdown menu The ID of the document - 54321 The ID returned from the previous step (Trigger or Action) Email sender id data.sender_id 0 The ID 0 indicates our mail service Email recipient emails data.recipient_email mariorossi@mail.com Email subject data.subject Nostra fattura nr. 54321 Email body data.body XXX HTML escaped email body, check the request above to copy the content Include a button to view the document data.include.document true Include a button to view the delivery note data.include.delivery_note false Include a button to view the attachment data.include.attachment false Include a button to view the accompanying invoice data.include.accompanying_invoice false Attach the PDF of the document data.attach_pdf false Send a copy of the email... data.send_copy false <p>Please, remember that this request will most probably fail if executed as-is! For example, the IDs specified in the request must exist in order to avoid getting an error response! Remember to check the various methods explained in this guide to fill the request fields correctly!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#send-the-e-invoice-to-the-sdi","title":"Send the E-Invoice to the SDI","text":"<p>If the document you created is an e-invoice, you can also send it to the SDI. We created a dedicated guide to describe this operation in detail.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-join-transform/","title":"Join & Transform issued documents","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>TSE in Cloud makes it possible to transform a document into another type, for example, a proforma into an invoice, or to join two documents together. Of course, our APIs provide the same functionality, here we explain how to do it.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#join-or-transform","title":"Join or Transform","text":"<p>Although the transform and join use cases may seem very different, our APIs similarly treat them.</p> <p>Danger</p> <p>Executing a join or transform call will NOT create the new document but, instead, it will return a body that you will need to pass to the create document method. !!! </p> <p>Before diving into the functionality details it's better to define the two methods:</p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#family_man_woman_girl_boy-join","title":":family_man_woman_girl_boy:\u00a0 Join","text":"<p>You can use the Join Issued Document method to merge two documents into an invoice. The type of documents that can be joined are delivery_notes, orders, quotes, and work_reports.</p> <p>The required query parameters for the request are:</p> <ul> <li>ids: List of the document ids you want to join (eg. \"876991,876993,876997\").</li> <li>group: If this flag is set to 1, the request will group the items (e.g. if you have the same products in two different documents, they will be grouped); otherwise the items will be kept separate.</li> <li>e_invoice: If this flag is set to 1, your new document will be electronic.</li> </ul> <pre><code>GET /c/1235/issued_documents/join?ids=876991,876993,876997&amp;group=1&amp;e_invoice=1 HTTP/1.1\nAccept: application/json\nHost: api-v2.fattureincloud.it\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            //set your company id\n            var companyId = 12345;\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            // Join documents: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#joinissueddocuments\n            try\n            {\n                JoinIssuedDocumentsResponse result = apiInstance.JoinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.JoinIssuedDocuments: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // Transform the document: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsAPI.md#joinissueddocuments\n    resp, r, err := apiClient.IssuedDocumentsAPI.JoinIssuedDocuments(auth, companyId).Ids(\"876991,876993,876997\").Group(1).EInvoice(1).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.JoinIssuedDocuments``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\n\npublic class Application {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // Join documents: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#joinissueddocuments\n        try {\n            JoinIssuedDocumentsResponse result = apiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#joinIssuedDocuments\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse FattureInCloud\\Configuration;\nuse FattureInCloud\\Api\\IssuedDocumentsApi;\n\n//set your access token\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#joinissueddocuments\ntry {\n    $result = $apiInstance-&gt;joinIssuedDocuments($company_id, \"876991,876993,876997\", 1, 1);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;joinIssuedDocuments: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet opts = {\n  group: 1,\n  eInvoice: 1,\n};\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#joinIssuedDocuments\napiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# Join documents: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#join_issued_documents\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.join_issued_documents(company_id, \"876991,876993,876997\", group=1, e_invoice=1)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;join_issued_documents: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\nopts = {\n  group: 1,\n  e_invoice: 1\n}\n\n# Join documents: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#join_issued_documents\nbegin\n  result = api_instance.join_issued_documents(company_id, \"876991,876993,876997\", opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;join_issued_documents: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#joinIssuedDocuments\napiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#transform","title":"Transform","text":"<p>The Transform Issued Document method makes it possible to transform a document into another type of document. Here you can find which types can be transformed and what they can become.</p> Actual Type New Type Quote Order, Proforma, Receipt, Invoice Work Report Order, Proforma, Receipt, Invoice Order Proforma, Receipt, Invoice Proforma Receipt, Invoice <p>The required query parameters for the request are:</p> <ul> <li>original_document_id: The id of the document you want to transform (eg. 876993).</li> <li>new_type: The type of document you want to obtain (eg. \"invoice\").</li> <li>e_invoice: If this flag is set to 1, your new document will be electronic.</li> <li>transform_keep_copy: If this flag is set to 1, your old document will be preserved.</li> </ul> <pre><code>GET /c/1235/issued_documents/transform?original_document_id=876993&amp;new_type=invoice&amp;e_invoice=1&amp;transform_keep_copy=1 HTTP/1.1\nAccept: application/json\nHost: api-v2.fattureincloud.it\n</code></pre> <p>The correspondig code with our SDKs:</p> <pre><code>using System;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            //set your company id\n            var companyId = 12345;\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            // Transform the document: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#transformissueddocument\n            try\n            {\n                TransformIssuedDocumentResponse result = apiInstance.TransformIssuedDocument(companyId, 876993, \"invoice\", 1, 1);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.TransformIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // Transform the document: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsAPI.md#transformIssuedDocument\n    resp, r, err := apiClient.IssuedDocumentsAPI.TransformIssuedDocument(auth, companyId).OriginalDocumentId(876993).NewType(\"invoice\").EInvoice(1).TransformKeepCopy(1).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.TransformIssuedDocument``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\n\npublic class Application {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // Transform the document: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#transformissueddocument\n        try {\n            TransformIssuedDocumentResponse result = apiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", 1, 1);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#transformIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse FattureInCloud\\Configuration;\nuse FattureInCloud\\Api\\IssuedDocumentsApi;\n\n//set your access token\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// Transform the document: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#transformissueddocument\ntry {\n    $result = $apiInstance-&gt;transformIssuedDocument($company_id, 876993, \"invoice\", 1, 1);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;transformIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet opts = {\n  eInvoice: 1,\n  transformKeepCopy: 1,\n};\n\n// Transform issued document: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#transformIssuedDocument\napiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# Transform the document: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#transform_issued_document\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.transform_issued_document(company_id, 876993, \"invoice\", e_invoice=1, transform_keep_copy=1)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;transform_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\nopts = {\n  e_invoice: 1,\n  transform_keep_copy: 1\n}\n\n# Transform the document: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#transform_issued_document\nbegin\n  result = api_instance.transform_issued_document(company_id, 876993, \"invoice\", opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;transform_issued_document: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// Transform the document: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#transformIssuedDocument\napiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", 1, 1).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#send-it","title":"Send It!","text":"<p>The two methods above won't perform any modification, but they will just return the body that you'll need to use to perform the desired action. This lets you eventually review the final result and modify it if needed.</p> <p>The request also includes an options section, that makes it possible for our APIs to distinguish a normal document creation from a join or transform request; it is critical that you don't modify this section, but you must send it exactly as it is returned by the API.</p> <p>Warning</p> <p>Make sure to pass also the options field to the creation call, it's the most important part of the process. !!! </p> <p>The response will look like this:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"data\": {\n        \"type\": \"invoice\",\n        \"e_invoice\": true,\n        ...,\n    },\n    \"options\": {\n        \"create_from\": [\n            \"89144071\"\n        ],\n        \"transform\": true,\n        \"keep_copy\": true\n    }\n}\n</code></pre> <p>To persist the operation you must use the Create Issued Document method, using the previously returned body as input of the request; of course, you can modify it if needed, but please remember to leave the options section as it is. You can also check the Issued Document Creation Guide for more details.</p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-totals/","title":"Invoice totals calculation","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>If you are setting the payments list of your invoice you must know the total amount of your items list. Luckily for you, you don't have to take the calculator out of your drawer, we got you covered with a specific set of methods to suit your needs, so you won't be seeing the Il totale dei pagamenti non corrisponde al totale da pagare error anymore.</p> <p>!!! warning Beware of roundings! If you use numbers with more than 2 decimal digits when specifying the amounts in the items list and payments list they will automatically be rounded to 2 digits before doing any calculation, so if you do not take this into consideration you probably will get the 'Il totale dei pagamenti non corrisponde al totale da pagare' error. !!! </p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>!!! info Are you using Zapier?</p> <p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p> <p>!!! </p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#old-or-new","title":"Old or new?","text":"<p>We got methods for all the cases you would possibly think of, either you are creating a new invoice or editing an old one we have a specific call.</p> <p>The two methods are:</p> <ul> <li>Get New Issued Document Totals</li> <li>Get Existing Issued Document Totals</li> </ul> <p>!!! info Look out!</p> <p>Invoking these methods will not create or edit your invoice, it will only show you a preview of the totals. You still need to use the appropriate methods to apply the modifications.</p> <p>!!! </p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#new-invoice-totals","title":"New invoice totals","text":"<p>You can invoke the Get New Issued Document Totals method if you are creating a new invoice and want to know the totals after you added the items list to your invoice body: the response will contain all the info you need to finalize your invoice creation.</p> <p>Here you can find an example request and response.</p> <pre><code>POST /c/2/issued_document/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    \"data\": {\n        \"entity\": {\n            \"name\": \"test\"\n        },\n        \"type\": \"invoice\",\n        \"items_list\": [\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod1\",\n                \"net_price\": 35,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod2\",\n                \"net_price\": 39,\n                \"qty\": 1\n            }\n        ]\n    }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"amount_net\": 74,\n    \"amount_global_cassa_taxable\": 74,\n    \"taxable_amount\": 74,\n    \"vat_list\": {\n      \"21\": {\n        \"amount_net\": 74,\n        \"amount_vat\": 15.54\n      }\n    },\n    \"amount_vat\": 15.54,\n    \"amount_gross\": 89.54,\n    \"amount_enasarco_taxable\": 0,\n    \"amount_due\": 89.54,\n    \"amount_due_discount\": null,\n    \"payments_sum\": 0\n  }\n}\n</code></pre> <p>And here there are the examples to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                type: IssuedDocumentType.Invoice,\n                entity: new Entity(\n                    name: \"test\"\n                ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod1\",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod2\",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get new issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n            try {\n                GetNewIssuedDocumentTotalsResponse result = apiInstance.GetNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.GetNewIssuedDocumentTotals: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    //set your invoice info\n    invoice := *fattureincloud.NewIssuedDocument().\n        SetEntity(*fattureincloud.NewEntity().\n            SetId(1)).\n        SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n        SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod1\").\n                SetNetPrice(35).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod2\").\n                SetNetPrice(39).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n        })\n\n    // Here we put our invoice in the request object\n    getNewIssuedDocumentTotalsRequest := *fattureincloud.NewGetNewIssuedDocumentTotalsRequest().SetData(invoice)\n\n    // Now we are all set for the final call\n    // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n    resp, r, err := apiClient.IssuedDocumentsAPI.GetNewIssuedDocumentTotals(auth, companyId).GetNewIssuedDocumentTotalsRequest(getNewIssuedDocumentTotalsRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .type(IssuedDocumentType.INVOICE)\n                .entity(\n                    new Entity()\n                        .name(\"test\")\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod1\")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod2\")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get new issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\n        try {\n            GetNewIssuedDocumentTotalsResponse result = apiInstance.getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#getNewIssuedDocumentTotals\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = {\n  name: \"test\",\n};\ninvoice.items_list = [\n  {\n    name: \"prod1\",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod2\",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetNewIssuedDocumentTotalsRequest();\ngetNewIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getNewIssuedDocumentTotalsRequest: getNewIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.getNewIssuedDocumentTotals(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsList;\nuse FattureInCloud\\Model\\IssuedDocumentType;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n\n$entity = new Entity;\n$entity-&gt;setName(\"test\");\n\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod1\",\n                \"net_price\" =&gt; 35,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod2\",\n                \"net_price\" =&gt; 39,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_new_issued_document_totals_request = new GetNewIssuedDocumentTotalsRequest;\n$get_new_issued_document_totals_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\ntry {\n    $result = $apiInstance-&gt;getNewIssuedDocumentTotals($company_id, $get_new_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;getNewIssuedDocumentTotals: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.entity import Entity\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document_type import IssuedDocumentType\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_request import GetNewIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_response import GetNewIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = Entity(\n        name=\"test\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name=\"prod1\",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod2\",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_new_issued_document_totals_request = GetNewIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_new_issued_document_totals(company_id, get_new_issued_document_totals_request=get_new_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;get_new_issued_document_totals: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n    entity: FattureInCloud_Ruby_Sdk::Entity.new(\n        name: \"test\",\n    ),\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod1\",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod2\",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_new_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetNewIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nbegin\n  result = api_instance.get_new_issued_document_totals(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;get_new_issued_document_totals: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetNewIssuedDocumentTotalsRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: \"test\",\n  },\n  items_list: [\n    {\n      name: \"prod1\",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod2\",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest: GetNewIssuedDocumentTotalsRequest = {\n  data: invoice,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest)\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre> <p>The Zapier Action you need is called Get New Issued Document Totals. After you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu.</p> <p></p> <p>Next, you must insert a request similar to the one we need for the Create Issued Document request. We suggest you check the Invoice Creation Guide for more info.</p> <p>You can then use the resulting totals of this request in the creation request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#existing-invoice-totals","title":"Existing invoice totals","text":"<p>If you want to edit an existing invoice instead, for example, to add a new item, you can get the updated totals invoking the Get Existing Issued Document Totals method and passing the updated fields in the request body.</p> <p>In the following example, we want to a third item to an existing invoice and we want to know what will be the resulting updated totals before making the modify issued document call, using the previously described method:</p> <pre><code>POST /c/2/issued_document/12345/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    \"data\": {\n        \"items_list\": [\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod1\",\n                \"net_price\": 35,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod2\",\n                \"net_price\": 39,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod3\",\n                \"net_price\": 48,\n                \"qty\": 1\n            }\n        ]\n    }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"amount_net\": 122,\n    \"amount_global_cassa_taxable\": 122,\n    \"taxable_amount\": 122,\n    \"vat_list\": {\n      \"21\": {\n        \"amount_net\": 122,\n        \"amount_vat\": 25.62\n      }\n    },\n    \"amount_vat\": 25.62,\n    \"amount_gross\": 147.62,\n    \"amount_enasarco_taxable\": 0,\n    \"amount_due\": 147.62,\n    \"amount_due_discount\": 0,\n    \"payments_sum\": 0\n  }\n}\n</code></pre> <p>And here there are the examples to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            //set your company id\n            var companyId = 12345;\n\n            //set your existing invoice id\n            var invoiceId = 54321;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod1\",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod2\",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod3\",\n                        netPrice: 48,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get existing issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n            try {\n                GetExistingIssuedDocumentTotalsResponse result = apiInstance.GetExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.GetExistingIssuedDocumentTotals: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    //set your document id\n    documentId := int32(54321)\n\n    //set your invoice info\n    invoice := *fattureincloud.NewIssuedDocument().\n        SetEntity(*fattureincloud.NewEntity().\n            SetId(1)).\n        SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n        SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod1\").\n                SetNetPrice(35).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod2\").\n                SetNetPrice(39).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod3\").\n                SetNetPrice(48).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n        })\n\n    // Here we put our invoice in the request object\n    getExistingIssuedDocumentTotalsRequest := *fattureincloud.NewGetExistingIssuedDocumentTotalsRequest().SetData(invoice)\n\n    // Now we are all set for the final call\n    // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n    resp, r, err := apiClient.IssuedDocumentsAPI.GetExistingIssuedDocumentTotals(auth, companyId, documentId).GetExistingIssuedDocumentTotalsRequest(getExistingIssuedDocumentTotalsRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your existing invoice id\n        Integer invoiceId = 54321;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod1\")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod2\")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod3\")\n                            .netPrice(BigDecimal.valueOf(48))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\n        try {\n            GetExistingIssuedDocumentTotalsResponse result = apiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#getExistingIssuedDocumentTotals\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.items_list = [\n  {\n    name: \"prod1\",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod2\",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod3\",\n    net_price: 48,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetExistingIssuedDocumentTotalsRequest();\ngetExistingIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getExistingIssuedDocumentTotalsRequest:\n    getExistingIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\napiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsListItem;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your existing invoice id\n$invoice_id = 54321;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod1\",\n                \"net_price\" =&gt; 35,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod2\",\n                \"net_price\" =&gt; 39,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod3\",\n                \"net_price\" =&gt; 48,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_existing_issued_document_totals_request = new GetExistingIssuedDocumentTotalsRequest;\n$get_existing_issued_document_totals_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\ntry {\n    $result = $apiInstance-&gt;getExistingIssuedDocumentTotals($company_id, $invoice_id, $get_existing_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;getExistingIssuedDocumentTotals: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_request import GetExistingIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_response import GetExistingIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your existing invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = IssuedDocument(\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name=\"prod1\",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod2\",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod3\",\n            net_price=48.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_existing_issued_document_totals_request = GetExistingIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_existing_issued_document_totals(company_id, invoice_id get_existing_issued_document_totals_request=get_existing_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;get_existing_issued_document_totals: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod1\",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod2\",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod3\",\n            net_price: 48,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_existing_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetExistingIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nbegin\n  result = api_instance.get_existing_issued_document_totals(company_id, invoice_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;get_existing_issued_document_totals: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetExistingIssuedDocumentTotalsRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: \"test\",\n  },\n  items_list: [\n    {\n      name: \"prod1\",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod2\",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod3\",\n      net_price: 48,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest: GetExistingIssuedDocumentTotalsRequest =\n  {\n    data: invoice,\n  };\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getExistingIssuedDocumentTotals(\n    companyId,\n    invoiceId,\n    getExistingIssuedDocumentTotalsRequest\n  )\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre> <p>The Zapier Action you need is called Get Existing Issued Document Totals. After you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu.</p> <p></p> <p>Additionally, you need to select the ID of the existing document, that can be provided by a previous step.</p> <p>Next, you must insert a request similar to the one we need for the Modify Issued Document request. We suggest you check the Invoice Creation Guide for more info.</p> <p>You can then use the resulting totals of this request in the modification request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#the-magic-field","title":"The magic field","text":"<p>If you don't mind about the amounts of each payment, but you just want them to match the expected totals, we provide a magic field that could be perfect for you.</p> <p>The options.fix_payments field, when set to true, adjusts your last payment amount of the payments list to match your document total, incrementing or reducing the amount accordingly. Of course, if you have only one payment it will be modified to match the document total.</p> <p>The options.fix_payment field must be used in the invoice creation request. Please, notice that this field is not included in the data field that contains the main section of the request, as you can see in the following example.</p> <pre><code>{\n    \"data\": {\n            ...\n    },\n    \"options\": {\n        \"fix_payments\": true\n    }\n}\n</code></pre> <p>And here there is the example to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n            IssuedDocument invoice = new IssuedDocument(\n                // ...\n            );\n\n            // Here we put our invoice in the request object\n            CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest(\n                data: invoice,\n                // And here we set the magic field\n                options: new IssuedDocumentOptions(\n                    fixPayments: true\n                )\n            );\n\n            // Now we are all set for the final call\n            // Create the invoice: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n            try {\n                CreateIssuedDocumentResponse result = apiInstance.CreateIssuedDocument(companyId, createIssuedDocumentRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.CreateIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n    invoice := *fattureincloud.NewIssuedDocument(\n    // ...\n    )\n\n    // Here we put our invoice in the request object\n    createIssuedDocumentRequest := *fattureincloud.NewCreateIssuedDocumentRequest().\n        SetData(invoice).\n        // And here we set the magic field\n        SetOptions(*fattureincloud.NewIssuedDocumentOptions().\n            SetFixPayments(true),\n        )\n\n    resp, r, err := apiClient.IssuedDocumentsAPI.CreateIssuedDocument(auth, companyId).CreateIssuedDocumentRequest(createIssuedDocumentRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.CreateIssuedDocument``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n        IssuedDocument invoice = new IssuedDocument()\n        // ...\n\n        // Here we put our invoice in the request object\n        CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest()\n            .data(invoice)\n            // And here we set the magic field\n            .options(\n                new IssuedDocumentOptions()\n                    .fixPayments(true)\n            );\n\n        // Now we are all set for the final call\n        // Create the invoice: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n        try {\n            CreateIssuedDocumentResponse result = apiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#createIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n// set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n// set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\n// ...\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest =\n  new fattureInCloudSdk.CreateIssuedDocumentRequest();\ncreateIssuedDocumentRequest.data = invoice;\n// And here we set the magic field\ncreateIssuedDocumentRequest.options = {\n  fix_payments: true,\n};\n\nlet opts = {\n  createIssuedDocumentRequest: createIssuedDocumentRequest,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentOptions;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n$invoice = new IssuedDocument;\n\n// Here we put our invoice in the request object\n$create_issued_document_request = new CreateIssuedDocumentRequest;\n$create_issued_document_request-&gt;setData($invoice);\n// And here we set the magic field\n$create_issued_document_request-&gt;setOptions(\n    new IssuedDocumentOptions(\n        [\n            \"fix_payments\" =&gt; true\n        ]\n    )\n);\n\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#createissueddocument\ntry {\n    $result = $apiInstance-&gt;createIssuedDocument($company_id, $create_issued_document_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;createIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocumentOptions\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = IssuedDocument(\n   # ...\n)\n\n# Here we put our invoice in the request object\ncreate_issued_document_request = CreateIssuedDocumentRequest(\n    data = invoice,\n    # And here we set the magic field\n    options = IssuedDocumentOptions(\n        fix_payments=true\n    )\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.create_issued_document(company_id, create_issued_document_request=create_issued_document_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;create_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    # ...\n)\n\n# Here we put our invoice in the request object\nopts = {\n  create_issued_document_request: FattureInCloud_Ruby_Sdk::CreateIssuedDocumentRequest.new(\n        data: invoice,\n        # And here we set the magic field\n        options: FattureInCloud_Ruby_Sdk::IssuedDocumentOptions.new(\n            fix_payments: true\n      )\n    )\n}\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\nbegin\n  result = api_instance.create_issued_document(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;create_issued_document: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  CreateIssuedDocumentRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\nlet invoice: IssuedDocument = {\n  // ...\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest: CreateIssuedDocumentRequest = {\n  data: invoice,\n  options: {\n    fix_payments: true,\n  },\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>In Zapier, the magic field is called Fixes your last payment amount to match your document total, and its code is options.fix_payments; it must be set in the Create Issued Document request, check the Invoice Creation Guide for more details about this request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/syncronization-using-polling/","title":"Syncronization using Polling","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>In this use case, we suppose that you have a system that you want to keep in sync with the TSE in Cloud API, in particular retrieving the list of the products from our API and storing them in some way. In this example, we'll adopt a polling approach to retrieve the current state of the data stored in TSE in Cloud.</p> <p>If you want to download the complete SDKs examples you can find them here.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>!!! danger Are you sure?</p> <p>A better approach is to use our Webhooks to keep your system updated. Check them out!</p> <p>!!! </p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#lets-start","title":"Let's start!","text":"<p>To keep the code as simple as possible, we decided to write the data to a JSON lines file, that could be then sent as input for an external system; of course, it is possible to use the retrieved elements as needed: for example, to update a Database status or to perform API calls towards a third-party system.</p> <p>!!! warning Schedule the execution!</p> <p>To keep two systems in sync using polling, it is necessary to reiterate the extraction of the data from our APIs, scheduling the code execution.</p> <p>In this example, we deliberately omitted to add the code to repeat the execution of our code. For example, you could decide to add a Cron Library to your application or to execute the script using a Job Scheduler on your operating system. This is up to you.</p> <p>!!! </p> <p>!!! info Or execute it once...</p> <p>Even if we created this code to keep two systems synchronized periodically, it can also be used for a one-off extraction of the data from the TSE in Cloud API. Just execute it as it is...</p> <p>!!! </p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#libraries","title":"Libraries","text":"<p>In our examples, we'll use the TSE in Cloud SDKs; of course, you can just replace our SDKs with a simple HTTP Client if you prefer: check the dedicated page for further info. Additionally, for some languages, we added some other libraries to perform common tasks such as writing to the file system or performing the exponential backoff.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#initialize-our-sdk","title":"Initialize our SDK","text":"<p>In the first part of this example, we import our SDK and initialize it, using the Access Token requested to perform the API call. For simplicity, we didn't implement the code to retrieve the access token in these examples, but you can find more information in the Quickstarts or in the Authentication Implementation pages.</p> <p>Since we're trying to collect the list of products for a certain company, the products:r scope will be required; if you need to use another API method please select the appropriate scopes.</p> <p>Once the token is provided to our SDK, it is possible to start using it to interrogate our APIs.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#implement-the-exponential-backoff","title":"Implement the Exponential Backoff","text":"<p>The polling strategy implies the exigency to perform a potentially huge amount of requests in a really short period. As explained here, our APIs are protected by a set of limits that could result in an error if too many requests are performed in a certain interval.</p> <p>This is why in our examples we wrapped the API call with an Exponential Backoff method: it manages retries and time distance between two consecutive attempts, to avoid your script failing for a temporary quota-related issue.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#the-api-method","title":"The API Method","text":"<p>The API method that we're using is the List Products method, which returns the list of all the possible products for a certain company. The List methods provide Sorting and Customizing functionalities, but in this example we'll not use them.</p> <p>Each response of the List methods will be Paginated: to avoid returning enormous amounts of data with a single call, the list of products will be split into different pages, that can be retrieved consecutively. Each response contains a set of dedicated pagination parameters, that are meant to make the pages navigation task easier for you.</p> <p>In our code, we'll perform the first List request on the first page provided by our API, with a page size of five elements. Then we'll use the pagination parameter last_page to retrieve the subsequent pages, performing the needed number of API calls to export all the needed elements from the APIs.</p> <p>!!! danger Be aware of the index!</p> <p>Please, notice that the pages on our APIs use one-based numbering: the first page has index 1.</p> <p>!!! </p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#manage-the-response","title":"Manage the response","text":"<p>Each response contains a data parameter, that is a JSON array representing one page (e.g. one subset of the list of products). Our SDKs parse the JSON array, so you can just use the elements contained in the array to perform the requested operations.</p> <p>In this example, we're just trying to populate a JSON Lines file, so for each product retrieved we obtain the related JSON representation and append it to the text file.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#code-examples","title":"Code Examples","text":"<p>Here you can find the code described above.</p> <pre><code>// The following dependencies are required\n// dotnet add package It.FattureInCloud.Sdk\n// dotnet add package Polly\n// dotnet add package Polly.Contrib.WaitAndRetry\n\nusing System;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing Polly;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Polly.Contrib.WaitAndRetry;\n\nnamespace poll\n{\n    class Program\n    {\n        public static ProductsApi apiInstance;\n\n        static void Main(string[] args)\n        {\n            // This code should be executed periodically using a cron library or job scheduler.\n            // For example: https://www.quartz-scheduler.net/\n            SyncProducts();\n        }\n\n        private static void SyncProducts()\n        {\n            // Here we init the TSE in Cloud SDK\n            // The Access Token is retrieved using the \"GetToken\" method\n            Configuration config = new Configuration();\n            config.AccessToken = GetToken();\n\n            // In this example we're using the Products API\n            apiInstance = new ProductsApi(config);\n\n            // The ID of the controlled company.\n            var companyId = 2;\n\n            // Here we setup the exponential backoff config\n            var maxRetryAttempts = 5;\n            var pauseBetweenFailures =\n                Backoff.ExponentialBackoff(TimeSpan.FromSeconds(2), retryCount: maxRetryAttempts);\n\n            var retryPolicy = Policy\n                .WaitAndRetry(pauseBetweenFailures);\n\n            try\n            {\n                // In this example we suppose to export the data to a JSON Lines file.\n                // First, we cancel the content of the destination file\n                File.WriteAllText(\"products.jsonl\", String.Empty);\n\n                // List Products\n                var perPage = 5;\n\n                // We perform the first request\n                ListProductsResponse result =\n                    ListProductsWithBackoff(companyId, 1, perPage, retryPolicy, apiInstance);\n                // We use the first response to extract the last page index\n                var lastPage = result.LastPage;\n                // We append the products obtained with the first request top the output file\n                // Data contains an array of products\n                AppendProductsToFile(result.Data);\n\n                // For the missing pages (we already requested the first one)\n                for (var i = 2; i &lt;= lastPage; i++)\n                {\n                    // We require the page to the API\n                    result = ListProductsWithBackoff(companyId, i, perPage, retryPolicy, apiInstance);\n                    // And append all the retrieved products\n                    AppendProductsToFile(result.Data);\n                }\n            }\n            catch (ApiException ex)\n            {\n                Console.WriteLine(\"Exception when calling ProductsAPI.ListProducts: \" + ex.Message);\n                Console.WriteLine(\"Status Code: \" + ex.ErrorCode);\n                Console.WriteLine(ex.StackTrace);\n            }\n        }\n\n        // In this function we append the products in the JSON Lines file.\n        // You can replace this function to perform the operations you need.\n        // For example, you can build SQL queries or call a third-party API using the retrieved products.\n        {\n            StreamWriter sw = File.AppendText(\"products.jsonl\");\n            // For each product in the list\n            foreach (Product p in products)\n            {\n                // We write the product to the file\n                sw.WriteLine(JsonConvert.SerializeObject(p, Formatting.None) + \"\\n\");\n            }\n            sw.Close();\n        }\n\n        // Here we wrap the SDK method with an exponential backoff\n        // This is to manage the quota exceeded issue\n        private static ListProductsResponse ListProductsWithBackoff(int companyId, int currentPage, int perPage, Policy retryPolicy, ProductsApi apiInstance)\n        {\n            return retryPolicy.Execute(() =&gt;\n            {\n                // The actual SDK method is executed here\n                return apiInstance.ListProducts(companyId, null, \"detailed\", null, currentPage, 5);\n            });\n        }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n        private static string GetToken() {\n            return \"YOUR_TOKEN\";\n        }\n    }\n}\n</code></pre> <pre><code>// The following dependencies is required\n// go get github.com/fattureincloud/fattureincloud-go-sdk/\n// go get github.com/cenkalti/backoff/v4\n\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    backoff \"github.com/cenkalti/backoff/v4\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nvar (\n    f, _ = os.OpenFile(\"products.jsonl\", os.O_APPEND|os.O_WRONLY, 0644)\n    // The Access Token is retrieved using the \"getToken\" method\n    auth          = context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, getToken())\n    configuration = fattureincloudapi.NewConfiguration()\n    apiClient     = fattureincloudapi.NewAPIClient(configuration)\n    companyId     = int32(16) // This is the ID of the company we're working on\n    // Here we define the parameters for the first request.\n    nextPage = 1\n    attempts = 0\n)\n\nfunc main() {\n    // This code should be executed periodically using a cron library or job scheduler.\n    syncProducts()\n}\n\nfunc syncProducts() {\n    // In this example we suppose to export the data to a JSON Lines file.\n    // First, we cancel the content of the destination file\n    f.Truncate(0)\n    // Here we define the operation that retrieves the products\n    operation := func() error {\n        attempts++\n        fmt.Printf(\"Attempt: %d\\n\", attempts)\n        // In this example we're using the Products API\n        // Here we execute the actual SDK method\n        resp, _, err := apiClient.ProductsAPI.ListProducts(auth, companyId).Page(int32(nextPage)).PerPage(5).Execute()\n        if resp != nil {\n            // We check if there are other pages to retrieve\n            if resp.NextPageUrl.Get() == nil {\n                nextPage = 0\n            } else {\n                nextPage++\n            }\n            // We write the products of this page to the file\n            // \"data\" contains an array of products\n            appendProductsToFile(resp.Data)\n        }\n        return err\n    }\n    // For all the pages\n    for nextPage != 0 {\n        attempts = 0\n        // We call the operation function using Exponential Backoff\n        err := backoff.Retry(operation, backoff.NewExponentialBackOff())\n        if err != nil {\n            fmt.Fprintf(os.Stderr, \"Error %v\\n\", err)\n            return\n        }\n    }\n    f.Close()\n    fmt.Println(\"products succesfully retrieved and saved in ./products.jsonl\")\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunc appendProductsToFile(products []fattureincloud.Product) {\n    // For each product in the array\n    for _, element := range products {\n        // We obtain the related JSON and append it to the file as single line\n        jsonStr, _ := json.Marshal(element)\n        f.WriteString(string(jsonStr) + \"\\n\")\n    }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunc getToken() string {\n    return \"YOUR_TOKEN\"\n}\n</code></pre> <pre><code>import com.google.gson.Gson;\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.github.resilience4j.retry.Retry;\nimport io.github.resilience4j.retry.RetryConfig;\nimport io.github.resilience4j.retry.RetryRegistry;\nimport io.vavr.CheckedFunction0;\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.ProductsApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListProductsResponse;\nimport it.fattureincloud.sdk.model.Product;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\n\npublic class Application {\n    public static void main(String[] args) throws Throwable {\n        // This code should be executed periodically using a cron library or job scheduler.\n        // For example: http://www.quartz-scheduler.org/\n        syncProducts();\n    }\n\n    static void syncProducts() throws Throwable {\n\n        // Here we init the TSE in Cloud SDK\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        // The Access Token is retrieved using the \"getToken\" method\n        OAuth OAuth2AuthenticationCodeFlow =\n            (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(getToken());\n\n        // In this example we're using the Products API\n        ProductsApi apiInstance = new ProductsApi(defaultClient);\n\n        // The ID of the controlled company.\n        int companyId = 2;\n\n        // Here we setup the exponential backoff config\n        RetryConfig config = RetryConfig.custom()\n                .maxAttempts(10)\n                .retryExceptions(ApiException.class)\n                .intervalFunction(IntervalFunction.ofExponentialBackoff(1000, 2))\n                .build();\n\n        RetryRegistry registry = RetryRegistry.of(config);\n        Retry retry = registry.retry(\"listProducts\", config);\n\n        Retry.EventPublisher publisher = retry.getEventPublisher();\n        publisher.onRetry(event -&gt; System.out.println(event.toString()));\n\n        // In this example we suppose to export the data to a JSON Lines file.\n        // First, we cancel the content of the destination file\n        Files.write(Paths.get(\"products.jsonl\"), (\"\").getBytes(),\n            StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n\n        // List Products\n        int perPage = 5;\n\n        // We perform the first request\n        ListProductsResponse result = listProductsWithBackoff(companyId, 1, perPage, retry, apiInstance);\n\n        // We use the first response to extract the last page index\n        int lastPage = result.getLastPage();\n\n        // We append the products obtained with the first request top the output file\n        // Data contains an array of products\n        appendProductsToFile(result.getData());\n\n        // For the missing pages (we already requested the first one)\n        for (int i = 2; i &lt;= lastPage; i++)\n        {\n            // We require the page to the API\n            result = listProductsWithBackoff(companyId, i, perPage, retry, apiInstance);\n            // And append all the retrieved products\n            appendProductsToFile(result.getData());\n\n        }\n    }\n\n    // Here we wrap the SDK method with an exponential backoff\n    // This is to manage the quota exceeded issue\n    static ListProductsResponse listProductsWithBackoff(int companyId, int currentPage, int perPage,\n            Retry retry, ProductsApi apiInstance) throws Throwable {\n                Retry.decorateCheckedSupplier(retry,\n                        () -&gt; apiInstance.listProducts(companyId, null, \"detailed\", null, currentPage, 5));\n        return retryingListSuppliers.apply();\n    }\n\n        for (Product product : products) {\n            String p = new Gson().toJson(product);\n            Files.write(Paths.get(\"products.jsonl\"), (p + System.lineSeparator()).getBytes(),\n                StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n        }\n    }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n    static String getToken() {\n        return \"YOUR_TOKEN\";\n    }\n}\n</code></pre> <pre><code>// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-js-sdk\n\nconst fs = require(\"fs\");\nconst fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\nvar defaultClient = fattureInCloudSdk.ApiClient.instance;\nvar OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = getToken();\n\n// In this example we're using the Products API\nvar productsApiInstance = new fattureInCloudSdk.ProductsApi();\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) =&gt; console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate(\"./products.jsonl\", (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let opts = {\n    fields: null,\n    fieldset: \"detailed\",\n    sort: null,\n    page: 1, // We're trying to obtain the first page\n    perPage: 5, // Every page will contain at most 5 products\n  };\n  let companyId = 2; // This is the ID of the company we're working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, opts);\n    // We recover the last page index\n    let lastPage = result[\"last_page\"];\n    // We write the products of this page to the file\n    // \"data\" contains an array of products\n    await appendProductsToFile(result[\"data\"]);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i &lt;= lastPage; i++) {\n      // We update the page index\n      opts[\"page\"] = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, opts);\n      // And we write the products to the file\n      await appendProductsToFile(result[\"data\"]);\n    }\n    console.log(\"products succesfully retrieved and saved in ./products.jsonl\");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nasync function appendProductsToFile(products) {\n  // For each product in the array\n  for (i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync(\n      \"./products.jsonl\",\n      JSON.stringify(product) + \"\\n\",\n      (err) =&gt; {\n        if (err) {\n          console.error(err);\n          return;\n        }\n      }\n    );\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId, opts) {\n  var count = 0;\n  const delay = (retryCount) =&gt;\n    new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd = async (retryCount = 0, lastError = null) =&gt; {\n    if (retryCount &gt; 20) throw new Error(lastError);\n    try {\n      console.log(\"attempt:\", count++, \"wait:\", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await productsApiInstance.listProducts(companyId, opts);\n    } catch (e) {\n      await delay(retryCount);\n      return getProd(retryCount + 1, e);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return \"YOUR_TOKEN\";\n}\n</code></pre> <pre><code>&lt;?php\nrequire(\"vendor/autoload.php\");\n// The following dependencies are required\n// composer require stechstudio/backoff\n// composer require fattureincloud/fattureincloud-php-sdk\n\nuse FattureInCloud\\Api\\ProductsApi;\nuse FattureInCloud\\Configuration;\nuse GuzzleHttp\\Client;\nuse STS\\Backoff\\Backoff;\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://github.com/Cron/Cron\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken(getToken());\n// In this example we're using the Products API\n$productsApiInstance = new ProductsApi(\n    new Client(),\n    $config\n);\n\n// In this example we suppose to export the data to a JSON Lines file.\n// First, we cancel the content of the destination file\nfile_put_contents(\"./products.jsonl\", \"\");\n\n// This is the ID of the company we're currently managing\n$companyId = 2;\n// We require the first page using the ListProducts method\n$result = listProductsWithBackoff($productsApiInstance, $companyId, 1);\n// We extract the index of the last page from the first response\n$lastPage = $result[\"last_page\"];\n// We append all the products to the destination file\n// \"data\" contains an array of products\nappendProductsToFile($result[\"data\"]);\n\n// For all the missing pages (we already have the first one)\nfor ($i = 2; $i &lt;= $lastPage; $i++) {\n    // We require the page at the selected index to the API\n    $result = listProductsWithBackoff($productsApiInstance, $companyId, $i);\n    // We append this page products to the file\n    appendProductsToFile($result[\"data\"]);\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunction appendProductsToFile($products)\n{\n    // For each product in the array\n    foreach ($products as $product) {\n        // We encode it to a JSON string and append it to the file as a single line\n        file_put_contents(\"products.jsonl\", json_encode($product) . \"\\n\", FILE_APPEND);\n    }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nfunction listProductsWithBackoff($productsApiInstance, $companyId, $currentPage): Object\n{\n    $backoff = new Backoff(100, 'exponential', 300000, true);\n    return $backoff-&gt;run(function () use ($productsApiInstance, $companyId, $currentPage) {\n        try {\n            // The actual SDK method is executed here\n            $result = $productsApiInstance-&gt;listProducts($companyId, null, \"detailed\", null, $currentPage, 5);\n        } catch (Exception $e) {\n            var_dump($e);\n        }\n        return $result;\n    });\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken(): String {\n  return \"YOUR_TOKEN\"\n}\n</code></pre> <pre><code># The following dependencies are required\n# pip install backoff\n# pip install fattureincloud-python-sdk\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import products_api\nfrom fattureincloud_python_sdk.exceptions import ApiException\nimport backoff\n# import collections #needed if you are using python &gt; 3.10\n# collections.Callable = collections.abc.Callable #needed if you are using python &gt; 3.10\n\n# Here we setup the exponential backoff config\n@backoff.on_exception(backoff.expo, ApiException, max_tries=10)\ndef list_products_with_backoff(products_api_instance, company_id, current_page, per_page):\n    return products_api_instance.list_products(company_id, page=current_page, per_page=per_page)\n\n# In this function we append the products in the JSON Lines file.\n# You can replace this function to perform the operations you need.\n# For example, you can build SQL queries or call a third-party API using the retrieved products.\ndef append_products_to_page(products):\n    # For each product in the list\n    for p in products:\n        f = open(\"products.jsonl\", \"a\")\n        # We write the product to the file\n        f.write(str(p).replace(\"\\n\", \"\"))\n        f.write(\"\\n\")\n        f.close()\n\ndef get_token():\n    return \"YOUR_TOKEN\"\n\ndef sync_products():\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the \"GetToken\" method\n    configuration = fattureincloud_python_sdk.Configuration()\n    configuration.access_token = get_token()\n    configuration.retries = 0 # Needed to implement custom backoff\n    # The ID of the controlled company.\n    company_id = 2\n    current_page = 1\n    per_page = 5\n\n    with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n        # In this example we're using the Products API\n        products_api_instance = products_api.ProductsApi(api_client)\n\n        # We perform the first request\n        result = list_products_with_backoff(products_api_instance, company_id, current_page, per_page)\n        last_page = result.last_page\n\n        # We append the products obtained with the first request to the output file\n        # Data contains an array of products\n        append_products_to_page(result.data)\n\n        # In this example we suppose to export the data to a JSON Lines file.\n        # First, we cancel the content of the destination file\n        file = open(\"products.jsonl\",\"r+\")\n        file.truncate(0)\n        file.close()\n\n        # For the missing pages (we already requested the first one)\n        for x in range(2, last_page):\n            # We require the page to the API\n            result = list_products_with_backoff(products_api_instance, company_id, x, per_page)\n            # And append all the retrieved products\n            append_products_to_page(result.data)\n\n# This code should be executed periodically using a cron library or job scheduler.\nsync_products()\n</code></pre> <pre><code># The following dependency is required\n# gem install fattureincloud_ruby_sdk\n\nrequire 'fattureincloud_ruby_sdk'\nrequire 'json'\n\ndef main()\n    FattureInCloud_Ruby_Sdk.configure do |config|\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the \"get_token\" method\n    config.access_token = get_token()\n    end\n\n    # In this example we're using the Products API\n    products_api_instance = FattureInCloud_Ruby_Sdk::ProductsAPI.new\n    retries = 0\n    max_retries = 20\n\n    # This is the ID of the company we're working on\n    company_id = 2\n    # Here we define the parameters for the first request.\n    opts = {\n        fields: nil,\n        fieldset: \"detailed\",\n        sort: nil,\n        page: 1, # We're trying to obtain the first page\n        per_page: 5 # Every page will contain at most 5 products\n    }\n    actual_page = 2\n\n    result = list_products_with_backoff(company_id, opts, products_api_instance)\n    last_page = result.last_page\n\n    # In this example we suppose to export the data to a JSON Lines file.\n    # First, we cancel the content of the destination file\n    File.delete('./products.jsonl') if File.exist?('./products.jsonl')\n    append_products_to_file(result.data)\n\n    while actual_page &lt;= last_page do\n        opts[:page] = actual_page\n        res = list_products_with_backoff(company_id, opts, products_api_instance)\n        append_products_to_file(res.data)\n        actual_page += 1\n    end\nend\n\ndef list_products_with_backoff(company_id, opts, products_api_instance)\n    retries = 0\n    begin\n        puts \"attempt: #{retries}\\n\"\n        products = products_api_instance.list_products(company_id, opts)\n        return products\n    rescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n        if retries &lt;= max_retries\n            retries += 1\n            sleep 2 ** retries\n            retry\n        else\n            raise \"Giving up on the server after #{retries} retries. Got error: #{e.message}\"\n        end\n    end\nend\n\n\ndef append_products_to_file(products)\n    for product in products\n        File.write('./products.jsonl', product.to_hash.to_json + \"\\n\", mode: 'a')\n    end\nend\n\ndef get_token()\n  return \"YOUR_TOKEN\"\nend\n\n# This code should be executed periodically using a cron library or job scheduler.\nmain()\n</code></pre> <pre><code>// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-ts-sdk\n\nimport fs from \"fs\";\nimport { Product } from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\nimport {\n  Configuration,\n  ProductsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\nconst apiConfig = new Configuration({\n  accessToken: getToken(),\n});\n\n// In this example we're using the Products API\nvar productsApiInstance = new ProductsApi(apiConfig);\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) =&gt; console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate(\"./products.jsonl\", (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let page = 1;\n\n  let companyId = 16; // This is the ID of the company we're working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, page);\n    // We recover the last page index\n    let lastPage = result[\"last_page\"];\n    // We write the products of this page to the file\n    // \"data\" contains an array of products\n    await appendProductsToFile(result.data);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i &lt;= lastPage; i++) {\n      // We update the page index\n      page = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, page);\n      // And we write the products to the file\n      await appendProductsToFile(result.data);\n    }\n    console.log(\"products succesfully retrieved and saved in ./products.jsonl\");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\n  // For each product in the array\n  for (var i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync(\"./products.jsonl\", JSON.stringify(product) + \"\\n\");\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId: number, page: number) {\n  var count = 0;\n  const delay = (retryCount: number) =&gt;\n    new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd: any = async (retryCount = 0, lastError?: string) =&gt; {\n    if (retryCount &gt; 20) throw new Error(lastError);\n    try {\n      console.log(\"attempt:\", count++, \"wait:\", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await (\n        await productsApiInstance.listProducts(\n          companyId,\n          undefined,\n          \"detailed\",\n          undefined,\n          page\n        )\n      ).data;\n    } catch (e: any) {\n      await delay(retryCount);\n      return getProd(++retryCount, e.message);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return \"YOUR_TOKEN\";\n}\n</code></pre>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#additional-resources","title":"Additional resources","text":"<ul> <li>Exponential Backoff</li> <li>Zero-based numbering</li> </ul>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/","title":"SDKs Overview","text":"<p>import DocCardList from \"@theme/DocCardList\"; import { useCurrentSidebarCategory } from \"@docusaurus/theme-common\";</p> <p>To help you interact with our APIs we decided to create a set of dedicated SDKs (Software Developer Kits) in a certain number of programming languages, that can be useful to speed up the integration process. These SDKs provide updated models and methods to contact our APIs with minimal configuration, making it possible to start interacting with TSE in Cloud within minutes: in most cases, you just need to retrieve the Access Token and you're ready to go!</p> <p>!!! note Confused?</p> <p>Here you can find a really interesting video that explains the relationship between APIs and SDKs, and we suggest watching it if you still have some doubts.</p> <p>!!! </p>","tags":["sdk","code example"]},{"location":"sdks/#im-ready-to-dance-what-is-on-the-sdk-playlist","title":"I'm ready to dance! What is on the SDK playlist?","text":"<p>Here you can find the list of the currently supported SDKs:</p> <p>Our SDKs are released with MIT license.</p>","tags":["sdk","code example"]},{"location":"sdks/#raising_hand_man-do-i-really-need-to-use-an-sdk","title":":raising_hand_man:\u00a0 Do I really need to use an SDK?","text":"<p>Actually, no. TSE in Cloud provides simple REST APIs, and if you want you are free to write your own code to contact them; you'll find useful info in the API reference section of this documentation.</p> <p>We strongly suggest using our SDKs, here you can find some good reasons to decide to use them:</p> <ul> <li>It simplifies the integration task, providing useful models and methods out-of-the-box;</li> <li>We'll take care of it for you, updating the models and the dependencies when needed;</li> <li>We'll test and fix bugs that will eventually arise on our APIs.</li> </ul> <p>There are some possible reasons why you could prefer to write custom code instead:</p> <ul> <li>Your programming language is not yet supported;</li> <li>You're using an unsupported version of a supported programming language (for example PHP 5);</li> <li>You have some dependency conflict;</li> <li>You are using a small subset of our APIs and don't want to install the whole SDK;</li> <li>You are already using a different set of libraries (for example, a different HTTP client) and don't want to introduce another dependency;</li> <li>You just want to stay as vanilla as possible.</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/#my-favorite-language-is-not-supported-what-can-i-do","title":"My favorite language is not supported! What can I do?","text":"<p>Don't worry. We're planning to provide SDKs for the most popular programming languages, so your favorite one could be the next!</p> <p>In the meanwhile, you can:</p> <ul> <li>Send suggestions: If we receive a lot of requests for a particular language, it will be more likely to be the next in line!</li> <li>Go Vanilla: If you check the Vanilla code section of our documentation you can find all the information required to write vanilla code.</li> <li>Generate your own SDK: We provide an OpenAPI Specification for the TSE in Cloud API, so you can use it to generate your home-made SDK! :cook:</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/#i-found-a-bug-on-your-sdks-what-can-i-do","title":"I found a bug on your SDKs, what can I do?","text":"<p>Any help is always welcome!</p> <p>Feel free to open an issue on the repository of the specific SDK (check the dedicated pages), describing the issue, sharing example code to replicate the error, and eventually proposing a possible solution.</p>","tags":["sdk","code example"]},{"location":"sdks/#additional-resources","title":"Additional Resources","text":"<ul> <li>SDK on Wikipedia</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/go-sdk/","title":"Go SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Go applications.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on GitHub</p> <p>!!! </p> <p>The SDK can be installed running the following command:</p> <pre><code>go get github.com/fattureincloud/fattureincloud-go-sdk\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Go Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n}\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>suppliersApi := fattureincloudapi.NewAPIClient(configuration).SuppliersApi\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the ListSuppliers and ModifySupplier methods explained above:</p> <pre><code>// NOTE: this is a complete request, but please customize it!!! \n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    companyId := int32(12345) // int32 | The ID of the company.\n    fields := \"\" // string | List of comma-separated fields. (optional)\n    fieldset := \"detailed\" // string | Name of the fieldset. (optional)\n    sort := \"-id\" // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\n    page := int32(2) // int32 | The page to retrieve. (optional) (default to 1)\n    perPage := int32(8) // int32 | The size of the page. (optional) (default to 5)\n\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    suppliersApi := fattureincloudapi.NewAPIClient(configuration).SuppliersApi\n    companySuppliers, r, err := suppliersAPI.ListSuppliers(auth, companyId).Fields(fields).Fieldset(fieldset).Sort(sort).Page(page).PerPage(perPage).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `SuppliersAPI.ListSuppliers``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n\n    firstSupplier := companySuppliers.GetData()[0]\n\n    modifySupplierRequest := *firstSupplier.SetName(\"nuovo nome\").SetPhone(\"03561234312\")\n\n    resp, r, err := suppliersAPI.ModifySupplier(auth, companyId, firstSupplier.GetId()).ModifySupplierRequest(modifySupplierRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `SuppliersAPI.ModifySupplier``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n\n    // response from `ModifySupplier`: ModifySupplierResponse\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>json.NewEncoder(os.Stdout).Encode(modifySupplierRequest)\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest := *fattureincloud.NewModifySupplierRequest()\nerr := json.Unmarshal([]byte(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\"), &amp;modifySupplierRequest)\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Go SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Go SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> </ul>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>[Go](https://en.wikipedia.org/wiki/Go_(programming_language)</li> </ul>","tags":["sdk","code example","go"]},{"location":"sdks/java-sdk/","title":"Java SDK","text":"<p>The TSE in Cloud Java SDK is a Java library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Java applications. It is mainly based on the OkHttp client.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on the Maven Central Repository</p> <p>The SDK can be installed by adding the dependency in your project pom.xml</p> pom.xml<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;it.fattureincloud&lt;/groupId&gt;\n  &lt;artifactId&gt;fattureincloud-java-sdk&lt;/artifactId&gt;\n  &lt;version&gt;VERSION&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>or in your build.gradle file</p> build.gradle<pre><code>repositories {\n  mavenCentral()\n}\n\ndependencies {\n    implementation \"it.fattureincloud:fattureincloud-java-sdk:VERSION\"\n}\n</code></pre> <p>!!! info Another tool?</p> <p>If you want to use another build tool (for example SBT) you can check on the Maven Central Repository or MvnRepository.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Java Quickstart contains an example of Company ID retrieval using the SDK.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First you need to add the using directives for the imported library at the start of your .java file:</p> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.SuppliersApi;\n</code></pre> <p>Now you need to initialize the authentication using the token:</p> <pre><code>// Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>ApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\nSuppliersApi suppliersApiInstance = new SuppliersApi(defaultClient);\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>Warning</p> <p>Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>Integer companyId = 12345; // Integer | The ID of the company.\n\n// Retrieve the list of the Suppliers for the selected company\nString fields = \"\"; // String | List of comma-separated fields.\nString fieldset = \"detailed\"; // String | Name of the fieldset.\nString sort = \"-id\"; // String | List of comma-separated fields for result sorting (minus for desc sorting).\nInteger page = 2; // Integer | The page to retrieve.\nInteger perPage = 8; // Integer | The size of the page.\nListSuppliersResponse companySuppliers = apiInstance.listSuppliers(companyId, fields, fieldset, sort, page, perPage);\n\nInteger supplierId = 56; // Integer | The ID of the supplier.\n\n// Modify the selected supplier\nModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest()\n  .data(\n        new Supplier()\n        .name(\"nuovo nome\")\n        .phone(\"03561234312\")\n    ); // ModifySupplierRequest | The modified Supplier. First level parameters are managed in delta mode.\n\nModifySupplierResponse modifySupplierResponse = apiInstance.modifySupplier(companyId, supplierId, modifySupplierRequest);\nSystem.out.println(\"Supplier modificato correttamente\");\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>System.out.println(modifySupplierRequest.toJson());\n</code></pre>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>// import com.google.gson.Gson;\nGson gson = jsonManager.getGson();\nModifySupplierRequest generated = gson.fromJson(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\", ModifySupplierRequest.class);\n</code></pre>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Java SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Java SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>SDK Javadoc: The standard Java documentation</li> <li>Maven Central: The main package page</li> </ul>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Java</li> <li>Java on Wikipedia</li> <li>JDK Matrix</li> <li>Apache Maven</li> <li>Gradle Build Tool</li> <li>Scala SBT</li> <li>Maven Central</li> <li>Maven Repository</li> <li>OkHttpClient</li> </ul>","tags":["sdk","code example","java"]},{"location":"sdks/javascript-sdk/","title":"JavaScript SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud JavaScript SDK is a JavaScript library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Node.js applications and in-browser (using Browserify). It is mainly based on the Superagent HTTP Client.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NPM or Yarn</p> <p>!!! </p> <p>The SDK can be installed using NPM and Yarn:</p> <pre><code>npm install @fattureincloud/fattureincloud-js-sdk\n</code></pre> <pre><code>yarn add @fattureincloud/fattureincloud-js-sdk\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the JavaScript Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\n\nvar defaultClient = fattureInCloudSdk.ApiClient.instance;\n\nvar auth = defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nauth.accessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>let suppliersApi = new fattureInCloudSdk.SuppliersApi();\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>let companyId = 12345; // Number | The ID of the company.\nlet opts = {\n  fields: \"fields_example\", // String | List of comma-separated fields.\n  fieldset: \"fieldset_example\", // String | Name of the fieldset.\n  sort: \"sort_example\", // String | List of comma-separated fields for result sorting (minus for desc sorting).\n  page: 1, // Number | The page to retrieve.\n  perPage: 5, // Number | The size of the page.\n};\nsuppliersApi.listSuppliers(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n\nlet supplierId = 56; // Number | The ID of the supplier.\nlet opts = new fattureInCloudSdk.ModifySupplierRequest();\nmodifySupplierRequest.data.name = \"nuovo nome\"; // ModifySupplierRequest | The modified Supplier.\nmodifySupplierRequest.data.phone = \"03561234312\";\n\nsuppliersApi.modifySupplier(companyId, supplierId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>console.log(JSON.stringify(modifySupplierRequest));\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest = JSON.parse(\n  '{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}'\n);\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our JavaScript SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>JavaScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>JavaScript</li> <li>Node.js</li> <li>Node.js on Wikipedia</li> <li>Node.js releases</li> <li>Browserify</li> <li>NPM</li> <li>Yarn</li> <li>Superagent HTTP Client</li> </ul>","tags":["sdk","code example","javascript"]},{"location":"sdks/net-sdk/","title":".NET SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud C# SDK is a C# library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in C#, F# and Visual Basic projects. It is mainly based on the RestSharp HTTP Client.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NuGet</p> <p>!!! </p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>The SDK can be installed using Nuget directly from the Visual Studio nuget package manager or with the following command:</p> <pre><code>dotnet add package It.FattureInCloud.Sdk\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the C# Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to add the using directives for the imported library at the start of your .cs file:</p> <pre><code>using It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n</code></pre> <pre><code>Imports It.FattureInCloud.Sdk.Api\nImports It.FattureInCloud.Sdk.Client\nImports It.FattureInCloud.Sdk.Model\n</code></pre> <p>Now you need to initialize the authentication using the token:</p> <pre><code>Configuration config = new Configuration();\nconfig.BasePath = \"https://api-v2.fattureincloud.it\";\n// Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.AccessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <pre><code>Dim config As New Configuration()\nconfig.BasePath = \"https://api-v2.fattureincloud.it\"\n' Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.AccessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>var suppliersApiInstance = new SuppliersApi(config);\n</code></pre> <pre><code>Dim suppliersApiInstance As New SuppliersApi(config)\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>var companyId = 12345;\n\n// Retrieve the list of the Suppliers for the selected company\nvar fields = \"\";  // string | List of comma-separated fields. (optional)\nvar fieldset = \"detailed\";  // string | Name of the fieldset. (optional)\nvar sort = \"-id\";  // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\nvar page = 2;  // int? | The page to retrieve. (optional)  (default to 1)\nvar perPage = 8;  // int? | The size of the page. (optional)  (default to 5)\nvar companySuppliers = suppliersApiInstance.ListSuppliers(companyId, null, fieldset, sort, page, perPage);\n\nvar supplierId = companySuppliers.Data[0].Id\n\n// Modify the first supplier\nModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest();\nmodifySupplierRequest.Data = new Supplier();\nmodifySupplierRequest.Data.Name = \"nuovo nome\";\nmodifySupplierRequest.Data.Phone = \"03561234312\";\nvar modifySupplierResponse = suppliersApiInstance.ModifySupplier(companyId, supplierId, modifySupplierRequest);\nConsole.Write(\"Supplier modificato correttamente\");\n</code></pre> <pre><code>Dim companyId = 12345\n\n' Retrieve the list of the Suppliers for the selected company\nDim fields = \"\"  ' String | List Of comma-separated fields. (Optional)\nDim fieldset = \"detailed\"  ' String | Name Of the fieldset. (Optional)\nDim sort = \"-id\"  ' String | List Of comma-separated fields For result sorting (minus For desc sorting). (Optional)\nDim page = 2  ' int? | The page To retrieve. (Optional)  (Default To 1)\nDim perPage = 8  ' int? | The size Of the page. (Optional)  (Default To 5)\nDim companySuppliers = suppliersApiInstance.ListSuppliers(companyId, Nothing, fieldset, sort, page, perPage)\n\nDim supplierId = companySuppliers.Data(0).Id\n\n' Modify the first supplier\nDim modifySupplierRequest As New ModifySupplierRequest()\nmodifySupplierRequest.Data = New Supplier()\nmodifySupplierRequest.Data.Name = \"nuovo nome\"\nmodifySupplierRequest.Data.Phone = \"03561234312\"\nDim modifySupplierResponse = suppliersApiInstance.ModifySupplier(companyId, supplierId, modifySupplierRequest)\nConsole.Write(\"Supplier modificato correttamente\")\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>Console.WriteLine(modifySupplierRequest.ToJson());\n</code></pre> <pre><code>Console.WriteLine(modifySupplierRequest.ToJson())\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>// using Newtonsoft.Json;\n</code></pre> <pre><code>' Imports Newtonsoft.Json\nDim modifySupplierRequest = JsonConvert.DeserializeObject(Of ModifySupplierRequest)(\"{\"\"data\"\":{\"\"name\"\":\"\"nuovo nome\"\", \"\"phone\"\":\"\"03561234312\"\"}}\")\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our C# SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>C# SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NuGet page: The main package page</li> </ul>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>.NET libraries compatibility</li> <li>C#</li> <li>C# Version History</li> <li>Asp.Net</li> <li>Nuget</li> <li>Rest Sharp HTTP Client</li> </ul>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/php-sdk/","title":"PHP SDK","text":"<p>The TSE in Cloud PHP SDK is a PHP library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports PHP 7.1 and later. It is mainly based on the Guzzle HTTP Client.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#installation-with-composer","title":"Installation with Composer","text":"<p>The SDK is published into Packagist and it can be installed using Composer:</p> <pre><code>composer require fattureincloud/fattureincloud-php-sdk\n</code></pre> <p>!!! danger Important! Make sure you always import the newest version of our SDK, you can check which version is the latest on Packagist !!! </p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#installation-without-composer","title":"Installation without Composer","text":"<p>If you can't install our library using composer there are three routes you can take:</p> <ul> <li>the first and recommended one is to download the latest release of the sdk Phar Archive, then you can simply include it in your project.</li> </ul> <pre><code>require_once('./fattureincloud-php-sdk.phar');\n</code></pre> <ul> <li>the second route is to download our sdk using php-download and include it in your project</li> <li>the third route is to create your own custom autoloader and download all the dependencies (transitive included) as explained here.</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>Api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to actually call our APIs.</li> <li>Model: This package contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them are dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the PHP Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by passing the scope parameter.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the Api classes, for example:</p> <pre><code>$supplierApi = new FattureInCloud\\Api\\SuppliersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n</code></pre> <p>Once you obtained the needed Api instance, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>$company_id = 12345; // int | The ID of the company.\n$fields = 'fields_example'; // string | List of comma-separated fields.\n$fieldset = 'fieldset_example'; // string | Name of the fieldset.\n$sort = 'sort_example'; // string | List of comma-separated fields for result sorting (minus for desc sorting).\n$page = 1; // int | The page to retrieve.\n$per_page = 5; // int | The size of the page.\n\ntry {\n    $result = $suppliersApi-&gt;listSuppliers($company_id, $fields, $fieldset, $sort, $page, $per_page);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SuppliersApi-&gt;listSuppliers: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n$supplier_id = 56; // int | The ID of the supplier.\n\n$supplier = new FattureInCloud\\Model\\Supplier;\n$supplier-&gt;setName(\"nuovo nome\");\n$supplier-&gt;setPhone(\"03561234312\");\n\n$modify_supplier_request = new FattureInCloud\\Model\\ModifySupplierRequest;\n$modify_supplier_request-&gt;setData($supplier);\n\ntry {\n    $result = $suppliersApi-&gt;modifySupplier($company_id, $supplier_id, $modify_supplier_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SuppliersApi-&gt;modifySupplier: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>echo(json_encode($modify_supplier_request));\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>$modify_supplier_request = json_decode(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\");\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#improve-error-handling","title":"Improve error handling","text":"<p>If you have ever run into a Guzzle exception, you probably know that the error message gets truncated like this one:</p> <pre><code>Exception when calling IssuedDocumentsApi - &gt; createIssuedDocument: [422]\nClient error: `POST http://api-v2.local.fattureincloud.it//c/2/issued_documents`\nresulted in a `422 Unprocessable Entity`\nresponse: {\n        \"error\": {\n            \"message\": \"Invalid request.\",\n            \"validation_result\": {\n                \"data\": [\"The data field is required.\"],\n                \"data.entity\": [\"The d (truncated...)\n</code></pre> <p>With an incomplete error like this most of the times it's difficult to understand where the actual problem is to proceed to fix it, luckily our SDK error handling can be improved like this:</p> <pre><code>// set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YUOR_ACCESS_TOKEN');\n\n$stack = new HandlerStack(Utils::chooseHandler());\n// define a custom error size\n$stack-&gt;push(Middleware::httpErrors(new BodySummarizer(2048)), 'http_errors');\n$stack-&gt;push(Middleware::redirect(), 'allow_redirects');\n$stack-&gt;push(Middleware::cookies(), 'cookies');\n$stack-&gt;push(Middleware::prepareBody(), 'prepare_body');\n\n// create a custom client\n$client = new Client(['handler' =&gt; $stack /* other options here */ ]);\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new Client(),\n    $config\n);\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our PHP SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>PHP SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Packagist page: The main package page on Packagist</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>PHP</li> <li>PHP on WIkipedia</li> <li>PHP Versions</li> <li>Packagist</li> <li>Composer</li> <li>Guzzle HTTP Client</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/python-sdk/","title":"Python SDK","text":"<p>The TSE in Cloud Python SDK is a Python library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports Python 3.6 and later. It is mainly based on urllib3.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on PyPI</p> <p>!!! </p> <p>The SDK can be installed using PIP and PyPI:</p> <pre><code>pip install fattureincloud-python-sdk\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Here you can find our documentation.</p> <p>Our SDK is mainly split into two different folders:</p> <ul> <li>api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to actually call our APIs.</li> <li>model: This folder contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them are dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Python Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by passing the scope parameter.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>configuration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the API classes, for example:</p> <pre><code>with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    suppliers_api_instance = suppliers_api.SuppliersApi(api_client)\n</code></pre> <p>Once you obtained the needed API instance, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the list_suppliers and modify_supplier methods explained above:</p> <pre><code>company_id = 12345\ntry:\n    # List Suppliers\n    api_response = api_instance.list_suppliers(company_id)\n    pprint(api_response)\nexcept fattureincloud_python_sdk.ApiException as e:\n    print(\"Exception when calling SuppliersApi-&gt;list_suppliers: %s\\n\" % e)\n\n\nsupplier_id = 1\nmodify_supplier_request = ModifySupplierRequest(\n    data=Supplier(\n        name=\"Rossi S.r.l.\",\n        type=SupplierType(\"company\")\n    )\n)\ntry:\n    # Modify Supplier\n    api_response = api_instance.modify_supplier(company_id, supplier_id, modify_supplier_request=modify_supplier_request)\n    pprint(api_response)\nexcept fattureincloud_python_sdk.ApiException as e:\n    print(\"Exception when calling SuppliersApi-&gt;modify_supplier: %s\\n\" % e)\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>print(json_serial(modify_supplier_request))\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code># from functions import create_from_jsons\nmodifySupplierRequest = create_from_json('{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}', 'ModifySupplierRequest')\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Python SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Python SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>PyPI page: The main package page on PyPI</li> </ul>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Python</li> <li>Python on Wikipedia</li> <li>PIP</li> <li>PyPI</li> <li>Urllib3</li> </ul>","tags":["sdk","code example","python"]},{"location":"sdks/ruby-sdk/","title":"Ruby SDK","text":"<p>The TSE in Cloud Ruby SDK is a Ruby library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports Ruby 2.4 and later. It is mainly based on typhoeus.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on RubyGems</p> <p>!!! </p> <p>The SDK can be installed using RubyGems:</p> <pre><code>gem install fattureincloud_ruby_sdk\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Here you can find our RubyDoc documentation.</p> <p>Our SDK is mainly split into two different folders:</p> <ul> <li>api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to call our APIs.</li> <li>model: This folder contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as a request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Ruby Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule passing the scope parameter.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>FattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ACCESS_TOKEN'\nend\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the Api classes, for example:</p> <pre><code>suppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\n</code></pre> <p>Once you obtained the needed Api instance, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the list_suppliers and modify_supplier methods explained above:</p> <pre><code>company_id = 12345 # Integer | The ID of the company.\nopts = {\n  fields: 'fields_example', # String | List of comma-separated fields.\n  fieldset: 'basic', # String | Name of the fieldset.\n  sort: 'sort_example', # String | List of comma-separated fields for result sorting (minus for desc sorting).\n  page: 56, # Integer | The page to retrieve.\n  per_page: 56 # Integer | The size of the page.\n}\n\nbegin\n  # List Suppliers\n  result = suppliers_api_instance.list_suppliers(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling SuppliersApi-&gt;list_suppliers: #{e}\"\nend\n\n\nsupplier_id = 56 # Integer | The ID of the supplier.\nopts = {\n  modify_supplier_request: {\"data\":{\"id\":56,\"code\":\"AE86\",\"name\":\"Mario Rossi S.R.L.\",\"type\":\"company\",\"first_name\":\"Mario\",\"last_name\":\"Rossi\",\"contact_person\":\"\",\"vat_number\":\"111222333\",\"tax_code\":\"111122233\",\"address_street\":\"Corso Magellano, 46\",\"address_postal_code\":\"20146\",\"address_city\":\"Milano\",\"address_province\":\"MI\",\"address_extra\":\"\",\"country\":\"Italia\",\"email\":\"mario.rossi@example.com\",\"certified_email\":\"mario.rossi@pec.example.com\",\"phone\":\"1234567890\",\"fax\":\"123456789\",\"notes\":\"\"}}\n}\n\nbegin\n  # Modify Supplier\n  result = api_instance.modify_supplier(company_id, supplier_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling SuppliersApi-&gt;modify_supplier: #{e}\"\nend\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>puts opts.to_json\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest = JSON.parse('{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}')\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Ruby SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Ruby SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>RubyDoc page: The package documentation</li> <li>RubyGems page: The main package page on RubyGems</li> </ul>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Ruby</li> <li>Ruby on Wikipedia</li> <li>Ruby maintenance branches</li> <li>RubyGems</li> <li>Typhoeus</li> </ul>","tags":["sdk","code example","ruby"]},{"location":"sdks/typescript-sdk/","title":"TypeScript SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud TypeScript SDK is a TypeScript library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>!!! info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>!!! </p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Node.js applications. It is mainly based on the Axios HTTP Client.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>!!! danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NPM or Yarn</p> <p>!!! </p> <p>The SDK can be installed using NPM and Yarn:</p> <pre><code>npm install @fattureincloud/fattureincloud-ts-sdk\n</code></pre> <pre><code>yarn add @fattureincloud/fattureincloud-ts-sdk\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the TypeScript Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>!!! </p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>import {\n  Configuration,\n  SuppliersApi,\n  ModifySupplierRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// Configure OAuth2 access token for authorization:\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>let suppliersApi = new SuppliersApi(apiConfig);\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>!!! warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>!!! </p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>let companyId = 12345; // Number | The ID of the company.\nsuppliersApi.listSuppliers(companyId).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n\nlet supplierId = 56; // Number | The ID of the supplier.\nlet modifySupplierRequest: ModifySupplierRequest = {\n  // ModifySupplierRequest | The modified Supplier.\n  data: {\n    name: \"nuovo nome\",\n    phone: \"03561234312\",\n  },\n};\n\nsuppliersApi.modifySupplier(companyId, supplierId, modifySupplierRequest).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>!!! tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>!!! </p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>console.log(JSON.stringify(modifySupplierRequest));\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>let modifySupplierRequest: ModifySupplierRequest = JSON.parse(\n  '{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}'\n);\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our TypeScript SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>TypeScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>TypeScript</li> <li>Node.js</li> <li>Node.js on Wikipedia</li> <li>Node.js releases</li> <li>NPM</li> <li>Yarn</li> <li>Axios HTTP Client</li> </ul>","tags":["sdk","code example","typescript"]},{"location":"sdks/additional-capabilities/","title":"SDKs: Additional capabilities","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Our SDKs are designed to help you using our Additional Capabilities.</p>","tags":["sdk","additional capabilities","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/","title":"Filter Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>If you are using one of our SDKs to develop your integration you have multiple choices when you want to filter the responses of our Api, you can write your query manually or you can use our Filter Helper to build the filter.</p> <p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#building-the-filter-manually","title":"Building the filter manually","text":"<p>If you have to filter an Api response and your query is not very complicated, the most straightforward approach you can use is the manual one, you simply have to set the request's q parameter to the desired filter query and you are ready to go.</p> <pre><code>using System;\nusing System.Diagnostics;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace Example\n{\n    public class ListClientsExample\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ClientsApi(config);\n            var companyId = 12345;\n            var fieldset = \"detailed\";\n            var q = \"vat_number = '03812340161'\";\n\n            try\n            {\n                ListClientsResponse result = apiInstance.ListClients(companyId, null, fieldset, null, null, null, q);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Debug.Print(\"Exception when calling ClientsApi.ListClients: \" + e.Message);\n                Debug.Print(\"Status Code: \" + e.ErrorCode);\n                Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    \"github.com/fattureincloud/fattureincloud-go-sdk/v2/filter\"\n)\n\nfunc main() {\n    companyId := int32(2)\n    q := \"vat_number = '03812340161'\"\n\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n    resp, r, err := apiClient.ClientsAPI.ListClients(auth, companyId).Q(q).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `ClientsAPI.ListClients``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `ListClients`: ListClientsResponse\n    json.NewEncoder(os.Stdout).Encode(resp)\n\ncondition := filter.NewCondition\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.ClientsApi;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        ClientsApi apiInstance = new ClientsApi(defaultClient);\n        Integer companyId = 2;\n        String fieldset = \"detailed\";\n        String q = \"vat_number = '03812340161'\";\n        try {\n            ListClientsResponse result = apiInstance.listClients(companyId, null, fieldset, null, null, null, q);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling ClientsApi#listClients\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>const fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.ClientsApi();\nlet companyId = 12345;\nlet opts = {\n  fieldset: \"detailed\",\n  q: \"vat_number = '03812340161'\",\n};\napiInstance.listClients(companyId, opts).then(\n  (result) =&gt; {\n    console.log(result);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\ClientsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$company_id = 12345;\n$fieldset = 'detailed';\n$q = \"vat_number = '03812340161'\";\n\ntry {\n    $result = $apiInstance-&gt;listClients($company_id, null, $fieldset, null, null, null, $q);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ClientsApi-&gt;listClients: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import clients_api\nfrom pprint import pprint\n\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    api_instance = clients_api.ClientsApi(api_client)\n    company_id = 12345\n    fieldset = \"detailed\"\n    q = \"vat_number = '03812340161'\"\n\n    try:\n        api_response = api_instance.list_clients(company_id, fieldset=fieldset, q=q)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling ClientsApi-&gt;list_clients: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\nFattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ACCESS_TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::ClientsApi.new\ncompany_id = 12345\nopts = {\n  fieldset: 'detailed',\n  q: \"vat_number = '03812340161'\"\n}\n\nbegin\n  result = api_instance.list_clients(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling ClientsApi-&gt;list_clients: #{e}\"\nend\n</code></pre> <pre><code>const apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new ClientsApi(apiConfig);\nlet companyId = 2;\n\nlet q = \"vat_number = '03812340161'\";\n\napiInstance\n  .listClients(\n    companyId,\n    undefined,\n    \"detailed\",\n    undefined,\n    undefined,\n    undefined,\n    q\n  )\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#using-the-filter-helper","title":"Using the Filter Helper","text":"<p>If you have a long and articulated query or you are building your filter programmatically then your best option is to use our Filter Helper that you can find in each one of our official SDKs.</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#condition","title":"Condition","text":"<p>The Condition class is the underlying principle of our Helper, it's made up of 3 properties, the Field, the Operator and the Value</p> <pre><code>var query = condition.BuildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nquery := condition.BuildQuery() // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>String query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>var condition = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>$condition = new Condition('vat_number', Operator::EQ, '03812340161');\n$query = $condition-&gt;buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nquery = condition.build_query() # \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nquery = condition.build_query # \"vat_number = '03812340161'\"\n</code></pre> <pre><code>var condition = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#operator","title":"Operator","text":"<p>There are many operators you can utilize in a Condition:</p> Operator Name Symbol EQ '=' GT '&gt;' GTE '&gt;=' LT '&lt;' LTE '&lt;=' NEQ '&lt;&gt;', '!=' IS '=' IS_NOT '!=' LIKE 'like' NOT LIKE 'not like' CONTAINS 'contains' NOT CONTAINS 'not contains' STARTS_WITH 'starts with' ENDS_WITH 'ends with'","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#conjunction-disjunction","title":"Conjunction &amp; Disjunction","text":"<p>The Conjunction and Disjunction classes work like logical operators between two Conditions, the Conjunction works like the AND operator while the Disjunction works like the OR operator.</p> <pre><code>var disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.BuildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\ndisjunction := filter.NewDisjunction(condition1, condition2)\nquery := disjunction.BuildQuery() // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Disjunction disjunction = new Disjunction(condition1, condition2);\nString query = condition.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$condition1 = new Condition('vat_number', Operator::EQ, '03812340161');\n$condition2 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$disjunction = new Disjunction($condition1, $condition2);\n$query = $disjunction-&gt;buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\ncondition2 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ndisjunction = Disjunction(left=condition1, right=condition2)\nquery = disjunction.build_query() # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ndisjunction = FattureInCloud_Ruby_Sdk::Disjunction.new(condition1, condition2)\nquery = disjunction.build_query # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#dsl","title":"DSL","text":"<p>There is another way to use our Filter Helper, you can indeed use out Domain-Specific language as shown in the next steps.</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#where","title":"Where","text":"<p>To initialize a Filter you must set a Where condition, you have 2 options:</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#wherefield-operator-value","title":"Where(field, operator, value)","text":"<p>In this method you have to pass the field, operator and value as shown in the following examples:</p> <pre><code>var filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.BuildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\n\nquery := filterObj.BuildQuery() // vat_number = '03812340161'\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nString query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n\n$query = $filter-&gt;buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\n\nquery = filter.build_query() # vat_number = '03812340161'\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\n\nquery = filter.build_query # vat_number = '03812340161'\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#whereexpressionconditionconjunctiondisjunction","title":"WhereExpression(condition|conjunction|disjunction)","text":"<p>In this method you can either pass a simple condition or a more complex conjunction or disjunction as shown below:</p> <pre><code>var disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.WhereExpression(disjunction);\n\nvar query = filter.BuildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\ndisjunction := filter.NewDisjunction(condition1, condition2)\n\nfilterObj := filter.NewEmptyFilter()\nfilterObj.WhereExpression(disjunction)\n\nquery := disjunction.BuildQuery() // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Disjunction disjunction = new Disjunction(condition1, condition2);\n\nFilter filter = new Filter();\nfilter.whereExpression(disjunction);\n\nString query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.whereExpression(disjunction);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$condition1 = new Condition('vat_number', Operator::EQ, '03812340161');\n$condition2 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$disjunction = new Disjunction($condition1, $condition2);\n\n$filter = new Filter();\n$filter-&gt;whereExpression($disjunction);\n\n$query = $filter-&gt;buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\ncondition2 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ndisjunction = Disjunction(left=condition1, right=condition2)\n\nfilter = Filter()\nfilter.where_expression(disjunction)\n\nquery = filter.build_query() # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ndisjunction = FattureInCloud_Ruby_Sdk::Disjunction.new(condition1, condition2)\n\nfilter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where_expression(disjunction)\n\nquery = filter.build_query # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.whereExpression(disjunction);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#and-or","title":"And &amp; Or","text":"<p>If you need a more complex filter you can add an and or or condition to your Filter you have 3 options:</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andfield-operator-value-orfield-operator-value","title":"And(field, operator, value) &amp; Or(field, operator, value)","text":"<p>In this method you have to pass the field, operator and value as shown in the following examples:</p> <pre><code>var filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.Or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.Or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.BuildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nfilterObj.Or(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\nfilterObj.Or(\"code\", filter.Operators.CONTAINS, \"2022/\")\n\nquery := filterObj.BuildQuery() // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nString query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n$filter-&gt;or('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$filter-&gt;or('code', Operator::CONTAINS, '2022/');\n\n$query = $filter-&gt;buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nfilter.or_condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\nfilter.or_condition(field=\"code\", op=Operator.CONTAINS, value=\"2022/\")\n\nquery = filter.build_query() # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nfilter.or('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\nfilter.or('code', FattureInCloud_Ruby_Sdk::Operator::CONTAINS, '2022/')\n\nquery = filter.build_query # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andexpressionconditionconjunctiondisjunction-orexpressionconditionconjunctiondisjunction","title":"AndExpression(condition|conjunction|disjunction) &amp; OrExpression(condition|conjunction|disjunction)","text":"<p>In this method you can either pass a simple condition or a more complex conjunction or disjunction as shown below:</p> <pre><code>var filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.OrExpression(condition1);\nfilter.OrExpressiom(condition2);\n\nvar query = filter.BuildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"code\", filter.Operators.CONTAINS, \"2022/\")\n\nfilterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nfilterObj.AndExpression(condition1)\nfilterObj.AndExpression(condition2)\n\nquery := filterObj.BuildQuery() // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nString query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var condition1 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar condition2 = new Condition(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>$condition1 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$condition2 = new Condition('code', Operator::CONTAINS, '2022/');\n\n$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n$filter-&gt;orExpression($condition1);\n$filter-&gt;orExpression($condition2);\n\n$query = $filter-&gt;buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>condition1 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ncondition2 = Condition(field=\"code\", op=Operator.CONTAINS, value=\"2022/\")\n\nfilter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nfilter.or_expression(condition1)\nfilter.or_expression(condition2)\n\nquery = filter.build_query() # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('code', FattureInCloud_Ruby_Sdk::Operator::CONTAINS, '2022/')\n\nfilter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nfilter.or_expression(condition1)\nfilter.or_expression(condition2)\n\nquery = filter.build_query # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var condition1 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar condition2 = new Condition(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andfilterfilter-orfilterfilter","title":"AndFilter(filter) &amp; OrFilter(filter)","text":"<p>In this method you have to pass a Filter object as shown here:</p> <pre><code>  var filter = new Filter();\n  filter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\n\n  var filter1 = new Filter();\n  filter1.Where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\n  filter.AndFilter(filter1);\n\n  var query = filter.BuildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\n\nfilterObj1 := filter.NewEmptyFilter()\nfilterObj1.Where(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\n\nfilterObj.AndFilter(*filterObj1)\n\nquery := filterObj.BuildQuery() // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nFilter filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nString query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n\n$filter1 = new Filter();\n$filter1-&gt;where('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n\n$filter-&gt;andFilter($filter1);\n\n$query = $filter-&gt;buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\n\nfilter1 = Filter()\nfilter1.where_condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\n\nfilter.and_filter(filter1)\n\nquery = filter.build_query() # (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\n\nfilter1 = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter1.where('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\n\nfilter.and_filter(filter1)\n\nquery = filter.build_query # (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <p>Now that your query is ready the last thing to do is to set the q parameter equal to the just obtained query and you are ready to make your request!</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"started/authentication/","title":"Authentication","text":"<p>To make requests towards the TSE in Cloud API it is necessary to use one of the supported authentication methods.  In the next paragraph, you'll find a flowchart that will guide you in your choice.</p> <p>The currently supported methods are with access token</p> <p>This section documents the supported authentication models. M2M Scenario Many times a secure and authorized communication channel is needed between different parts of a system such as two back-end services of different applications. The key aspect of these communications lies in the fact that the element for establishing trust in the system is the client. In TSE a client is assigned a technical API Key which is used during the login phase to recognize it and enable it to use the services.</p> <p></p> <p>La figura illustra il flusso di autenticazione (Login) e di consumo dei servizi (GET/POST).</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#jwt-token","title":"JWT Token","text":"<p>Durante questa fase il client utilizza l'API Key per ottenere un token JWT che verr\u00e0 utilizzato nelle successive chiamate per accedere le risorse applicative.</p> <p>L\u2019applicativo deve eseguire la richiesta del token, in POST con i parametri in x-www-form-urlencoded, ad uno specifico path</p> <ul> <li>webapi_base_url/auth/token</li> </ul> <p>Specificando nel body</p> <p>In risposta alla chiamata si ottiene un authorization code costituito da un token jwt della durata di un giorno.</p> <p>E' importante che nella sezione token l'API Key sia preceduta dalla parola Bearer ad esempio</p> <pre><code>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3ZWJhcGlhZG1pbiIsIndlYmFwaTphdXRoZW50aWNhdGlvbjpzY29wZSI6Imh1Yl9hZG1pbix0c2UxMHdlYmFwaXRlc3QyX2FseXRzZTEwd2ViYXBpdGVzdDIiLCJqdGkiOiIwMjdkYmRlMC03OTg5LTQ0MTItODliOC0yM2FkYTVjNTdjZTIiLCJpYXQiOjE2NTg3NDA4NzcsImlzcyI6IkFseUNFU3J2MlNydklzc3VlciIsImF1ZCI6IkFseUNFU3J2MlNydkF1ZGllbmNlIn0.p1oEy4LJyFuTKIjJynYw4zQQQXIYPO3WfLe8VTNh7XA\n</code></pre> <p>!!! </p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#getpost","title":"GET/POST","text":"<p>Le chiamate ai servizi applicativi saranno autenticate con un Bearer token costituito da token jwt ottenuto con la chiamata di Login.</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#scenario-utente","title":"Scenario Utente","text":"<p>Nel caso in cui il client sia integrato con il Teamsystem ID sar\u00e0 possibile utilizzare l'access_token assegnato all'utente per innescare il flusso di login.</p> <p></p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#scope","title":"Scope","text":"<p>Le applicazioni devono richiedere i permessi esclusivamente per le risorse a cui intendono accedere. I sistemi di autorizzazione supportati, riferiscono a tali permessi come scopes. Tutti gli endpoints di Enterprise WebAPI richiedono uno scope, al fine di riferire correttamente ad uno specifico ambiente di lavoro definito per il gestionale.</p> <p>Le applicazioni devono specificare lo scope nella richiesta di autenticazione. I\u2019access token rilasciato conterr\u00e0 solo gli scopes (al momento solo uno) che l\u2019applicativo ha richiesto.</p> Scope Description Webapi_admin Questo scope permette di accedere alle api di richiesta su ambienti disponibili. Permette di avere un token anche non conoscendo l'ambiente di riferimento a priori, perch\u00e9 magari non ancora richiesto all'utente. Tipicamente con questo tipo di token si eseguono interrogazioni di tipo amministrativo, come la GetAmbienti [ambiente] Rappresenta l\u2019ambiente di lavoro Enterprise a cui le API devono accedere","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#additional-resources","title":"\ud83d\udcda\u00a0 Additional resources","text":"<ul> <li>JWT Token</li> <li>Query String</li> <li>URL Encoding</li> <li>Whitelist</li> </ul>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#company","title":"Company","text":"<p>How use Company</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/getting-started/","title":"Introduction","text":"<p>The TSE in Cloud API is a RESTful API Client Libraries. The API exposes most of the features available in the TSE in Cloud Web interface.</p> <p> API vs SDK</p> <p>If you need more information about what APIs and SDKs are, you can watch this video.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#how-can-i-start","title":"How can I start?","text":"<p>In this documentation, you will find three modalities you can use to start developing your TSE in Cloud integration.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#step-by-step-guide","title":"Step-by-step Guide","text":"<p>The Step-by-step page is a guide that will tell you exactly what to do to be ready to develop in no time, including some tricky procedures such as the app configuration and the permission request. You can find most of the steps under the Basics category. If you don't know a lot about TSE in Cloud, or you are uncertain about which option to select, then we strongly suggest you start from here!</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#quickstarts","title":"Quickstarts","text":"<p>If you prefer actions over words, and you feel pretty confident about your knowledge of Token authentication then probably you would prefer to start developing immediately, following one of our Quickstarts. Even so, we don't assure you that you will never have to explore the Basics category! </p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#guides","title":"\ud83d\udee0\ufe0f Guides","text":"<p>If you want to focus on your specific use case from the first moment, you can check our Guides. Here we explained how to implement our customer's most common use cases, and yours could be already included there too! Please, notice that you will most probably need to start with one of the previous options to be ready to follow our guides because they are more focused on the final result rather than on helping you get started.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#faqs","title":"FAQs","text":"<p>In the FAQs section we collected the most common questions we received from the other developers. In most of the cases, this will be enough to help you overcome your issues!</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#can-you-help-me","title":"Can you help me?","text":"<p>Sure! Please, check the Support page to discover the available options!</p>","tags":["getting started","introduction"]},{"location":"started/howto/","title":"How to","text":"","tags":["howto","introduction"]},{"location":"started/howto/#obtain-personal-token","title":"Obtain personal token","text":"<p>Come abilitare il proprio impianto all'utilizzo delle API</p> <p>Prerequisito per il processo \u00e8 che la P.IVA collegata all'impianto abbia la licenza che abilita l'utilizzo delle API</p> <p>Occorre aprire un ticket su MySupport su coda dedicata:</p> <ul> <li>Linea Prodotto: TS Enterprise Cloud</li> <li>Procedura: TSEnterprise Cloud</li> <li>Area: WebAPI e Personalizzazioni</li> <li>Modulo: Supporto sviluppo WebAPI</li> </ul> <p>specificando:</p> <ul> <li>l'url dell'installazione di Teamsystem Enterprise Cloud che si vuole abilitare</li> <li>un indirizzo mail con cui collegarsi al sito di documentazione</li> </ul> <p>A conclusione del processo di abilitazione verr\u00e0 distribuita una chiave tecnica che consentir\u00e0 di accedere ai servizi e specificato il nome dell'ambiente da utilizzare nello scope.</p> <p>Il codice licenza che abilita l'utilizzo delle API \u00e8 il 4520.</p> MODULO SIGLA LICENZA DESCR. 4520 TE-4520 4520 Web API 55166 S-TE-55166 4520 Web API 84006 SAAS-TE-84006 4520 Web API 80057 SAAS-TE-80057 4520 Web API <p>N.B.: la differenza tra le varie sigle \u00e8 legata alla presenza di diversi listini per le singole procedure e/o diverse installazioni.</p>","tags":["howto","introduction"]},{"location":"started/howto/#use-token","title":"use token","text":"","tags":["howto","introduction"]},{"location":"stepbystep/","title":"Step by step overview","text":"<p>On this page, you can find a quick summary of the steps that you are required to perform to interact with our APIs.</p> <p>Some steps must be performed only one time (for example creating an application), while others will be required every time you must contact our APIs (for example the authentication and authorization tasks).</p> <p>To get started, follow these steps: 1. Learn the common terms to start understanding the TSE in Cloud world. 2. Create an app on our Web application. 3. Select an Authentication and retrieve the related credentials. 4. Collect the Scopes that your application requires to work properly. 5. If you want, install one of our SDKs. Otherwise, develop your own code from scratch. 6. Implement the selected Authentication method. 7. You're now ready to integrate TSE in Cloud within your application!  8. If you need to use a Company scoped method, please retrieve your company_id param. 9. Improve your code managing Quotas and Errors properly. 10. Are you still unsure? We prepared a set of Guides to help you with the most common use cases!</p>","tags":["quickstarts","code example"]},{"location":"stepbystep/common-terms/","title":"Common Terms","text":"<p>If you are a newbie in the TSE in Cloud world, you will most probably feel overwhelmed by the amount of information that you can find in this documentation.</p> <p>This is why we suggest you get started by learning what we're talking about: we think that you need to get accustomed to the terms used by the TSE in Cloud API as a very first step.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#common-terms-list","title":"Common Terms List","text":"<p>Below you can find a list of the main concepts that you need to know:</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#url","title":"URL","text":"<p>It is the URL that you connect to to access the application; it has a structure like  <pre><code>[protocol]://[cid].domain\n</code></pre> For example https://apicsdemo.teamsystem.io</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#cid","title":"CID","text":"<p>Customer identification is assigned uniquely to a customer</p> <p>For example csdemo</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#apigateway","title":"APIGateway","text":"<p>An API gateway is the gatekeeper for access to APIs, which protects and manages traffic between API consumers and applications that expose those APIs. Adopting an API gateway provides several benefits by ensuring:</p> <p>authentication and authorization, routing to backends, rate limiting to avoid overloading systems and protecting against DDoS attacks, offloading SSL / TLS traffic to improve performance and handling errors or exceptions, tracking and monitoring access to resources. TSE APIs intended for integration are exposed downstream of the Teamsystem PaaS API Gateway.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#apigwt_base_url","title":"apigwt_base_url","text":"<p>It is the base url for calling services; it has the form  <pre><code>[protocol]://[cid].APIGatewayDomain\n</code></pre> For example: https://csdemo.ts-paas.com</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#webapi_base_url","title":"webapi_base_url","text":"<p>webapi_base_url: https://[apigwt_base_url]/api</p> <p>it is the rootpath that will be referred to below with webapi_base_url, unless otherwise indicated, it is usually composed of api+CID.domain, for example: https://apicsdemo.teamsystem.io</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#scope","title":"Scope","text":"<p>Also referred to as [environment] or [environment] represents the set of data to which you have access; although other configurations are possible in Teamsystem Enterprise Cloud, each installation has access to only one environment.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#resourcename","title":"ResourceName","text":"<p>It is the REST resource name assigned to the application entity; it is used in the rest call.</p> <p>For example:  <pre><code>{{webapi_base_url}}/api/v1/{{scope}}/CO/CustomerSupplierCo/search?company=2\n</code></pre></p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/company-scoped-methods/","title":"Company methods","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Most of our API resources are not owned by the user, but by a company. This makes it possible for all the users who have access to a single company to interact with all the resources it owns (if the user has the related permissions, of course). This is why most of our methods are Company-scoped: it means that you need to provide an additional company_id parameter to use the method correctly.</p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#where-can-i-find-my-company_id","title":"Where can I find my company_id?","text":"<p>One of the questions that we receive more often is: \"How can I find my company_id?\"</p> <p>Don't worry, it is really easy. You can list all the companies accessible by the user using the List User Companies method, which will return you an array of companies. Of course, this method is not company-scoped! \u00a0 You just need to select the right company from the returned list and extract its ID, and you're done!</p> <p>If you're implementing a simple application for a single company, then you can use our API Reference or our Postman Collection to retrieve the Company ID, and then insert it as a constant in your code; this way, you'll avoid writing code to retrieve a value that will never change. Otherwise, if you need to manage multiple company IDs that are unknown at developing time, then you can check the SDK examples below to retrieve the Company ID from your code.</p> <p>Here you can find the steps to use the API Reference to retrieve the Company ID:</p> <ul> <li>Obtain a valid Access Token using one of the available methods;</li> <li>Open the Auth Section in the API Reference, and insert the copied access token in the \"HTTP BEARER\" Section (please, don't add \"Bearer\" to the token, the tool will take care of it!);</li> <li>Search the List User Companies method and click the \"Try\" button, the Company ID will be included in the obtained response.</li> </ul> <p>Here you can find a few examples using our SDKs:</p> <pre><code>using System.Collections.Generic;\nusing System.Diagnostics;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nConfiguration config = new Configuration();\nconfig.BasePath = \"https://api-v2.fattureincloud.it\";\n// Check out the Authentication section to retrieve the Access Token\nconfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar apiInstance = new UserApi(config);\n\ntry\n{\n    // List User Companies\n    ListUserCompaniesResponse result = apiInstance.ListUserCompanies();\n    // In the result you'll find a list of companies, you must use the \"Id\" field of one of those\n    Console.Write(result.Data.Companies[0].Id);\n}\ncatch (ApiException  e)\n{\n    Console.Write(\"Exception when calling UserApi.ListUserCompanies: \" + e.Message);\n    Console.Write(\"Status Code: \" + e.ErrorCode);\n    Console.Write(e.StackTrace);\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n  // Check out the Authentication section to retrieve the Access Token\n  auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"ACCESS_TOKEN\")\n  configuration := fattureincloudapi.NewConfiguration()\n  apiClient := fattureincloudapi.NewAPIClient(configuration)\n  resp, r, err := apiClient.UserAPI.ListUserCompanies(auth).Execute()\n  if err != nil {\n      fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListUserCompanies``: %v\\n\", err)\n      fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n  }\n  // response from `ListUserCompanies`: ListUserCompaniesResponse\n  // In the result you'll find a list of companies, you must use the \"Id\" field of one of those\n  fmt.Printf(\"%d\", resp.GetData().GetCompanies()[0].GetId())\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.models.*;\nimport it.fattureincloud.sdk.api.UserApi;\n\nApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n// Check out the Authentication section to retrieve the Access Token\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\nUserApi apiInstance = new UserApi(defaultClient);\ntry {\n  ListUserCompaniesResponse result = apiInstance.listUserCompanies();\n  // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n  System.out.println(result.getData().getCompanies().get(0).getId());\n} catch (ApiException e) {\n  System.err.println(\"Exception when calling UserApi#listUserCompanies\");\n  System.err.println(\"Status code: \" + e.getCode());\n  System.err.println(\"Reason: \" + e.getResponseBody());\n  System.err.println(\"Response headers: \" + e.getResponseHeaders());\n  e.printStackTrace();\n}\n</code></pre> <pre><code>import fattureInCloudSdk from \"@fattureincloud/fattureincloud-js-sdk\";\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n// Check out the Authentication section to retrieve the Access Token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR ACCESS TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.UserApi();\napiInstance.listUserCompanies().then(\n  (result) =&gt; {\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    console.log(result.data.companies[0].id);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Check out the Authentication section to retrieve the Access Token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new FattureInCloud\\Api\\UserApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance-&gt;listUserCompanies();\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    print_r($result-&gt;getData()-&gt;getCompanies()[0]-&gt;getId());\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi-&gt;listUserCompanies: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>from __future__ import print_function\nimport time\nimport os\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://api-v2.fattureincloud.it\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = fattureincloud_python_sdk.Configuration(\n    host = \"https://api-v2.fattureincloud.it\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Check out the Authentication section to retrieve the Access Token\nconfiguration.access_token = os.environ[\"ACCESS_TOKEN\"]\n\n# Enter a context with an instance of the API client\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = fattureincloud_python_sdk.UserApi(api_client)\n\n    try:\n        # List User Companies\n        api_response = api_instance.list_user_companies()\n        # In the result you'll find a list of companies, you must use the \"id\" field of one of those\n        print(api_response.data.companies[0].id)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;list_user_companies: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\n# setup authorization\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # Check out the Authentication section to retrieve the Access Token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::UserApi.new\n\nbegin\n  # List User Companies\n  result = api_instance.list_user_companies\n  # In the result you'll find a list of companies, you must use the \"id\" field of one of those\n  p result.data.companies[0].id\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling UserApi-&gt;list_user_companies: #{e}\"\nend\n</code></pre> <pre><code>import { Configuration, UserApi } from \"@fattureincloud/fattureincloud-ts-sdk\";\n// Check out the Authentication section to retrieve the Access Token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new UserApi(apiConfig);\napiInstance.listUserCompanies().then(\n  (result) =&gt; {\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    console.log(result.data.companies[0].id);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>If you want more examples, you can find them in the Readme file of each SDK or in the Quickstart section.</p> <p>If you want to retrieve the details of a specific company, you can always use the Get Company Info method, but in this case, this method is company-scoped, so you need an ID!  </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#raising_hand_man-how-can-i-know-if-a-method-is-company-scoped","title":":raising_hand_man:\u00a0 How can I know if a method is company-scoped?","text":"<p>The majority of our methods are company-scoped, so there's a high probability that the method you need to use is included in this group. If you want to be sure if your API method is actually company-scoped, you just need to check if it requires a company_id parameter.</p> <p>In order to do it, you have a few possibilities:</p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-on-the-api-reference","title":"Check on the API Reference","text":"<p>This is the easier option, that only requires you to search the method on our API Reference section. For example, let's check the List Issued Documents method. Checking the URL on top of the page, you can notice that it contains the /c/{company_id} portion, indicating that it is a company-scoped URL that requires to substitute the placeholder to be executed correctly.</p> <p> </p> <p>On the same page, you can also check if you have a company_id box in the Path Params section: here you must insert your companyid while trying to use the API method using the _Try button.</p> <p> </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-on-your-sdk-documentation","title":"Check on your SDK documentation","text":"<p>If you're using a specific SDK, probably it will be easier for you to take advantage of it to check if a method is company-scoped: all the methods that are in this category require an integer company_id to be executed correctly. You can check if the company_id parameter is required by checking the signature of your method (for example using your IDE's functionalities) or accessing your SDK's documentation. Read your SDK's page for further info.</p> <p>For example, using our PHP SDK you have two alternatives:</p> <ul> <li>Accessing the GitHub page of the List Issued Documents method and check if it requires the company_id parameter</li> <li>Use your favorite IDE to check if the method requires it, without having to access our documentation online</li> <li>Some of the SDKs provide standard documentation for the language they're based on; for example, Java's JavaDoc or Ruby's RubyDoc.</li> </ul>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-our-postman-collection","title":"Check our Postman Collection","text":"<p>If you're testing our API using our Postman Collection, you can check if the method needs the companyid parameter. You can check if the method's URL includes the /c/:company_id portion, where :companyid is the placeholder that must be replaced with the actual numeric ID:</p> <p> </p> <p>Otherwise, similarly to what you can do in our API Reference section, you can just search for a companyid param in the _Path Variables section.</p> <p> </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#memo-check-our-openapi-file","title":":memo:\u00a0 Check our OpenAPI file","text":"<p>This is probably the most complicated method because it requires you to know how to read an OpenAPI file (or at least a YAML file) or to use an OpenAPI editor; at the same time, this is our source of truth: all the previous method derive from our OpenAPI specification, so this is where the companyid param is defined. Checking our OpenAPI Specification, you can find out if our method requires a company_id parameter by checking the _openapi.yaml file: below you can notice that the URL contains the {company_id} placeholder and that the company_id param is listed in the parameters section.</p> openapi.yaml<pre><code>/c/\\{company_id\\}/issued_documents:\n  parameters:\n    - $ref: \"#/components/parameters/company_id\"\n  get:\n    summary: List Issued Documents\n    tags:\n      - Issued Documents\n    responses:\n      \"200\":\n        $ref: \"#/components/responses/ListIssuedDocumentsResponse\"\n</code></pre>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/manual-authentication/","title":"Authentication Mode","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Is this the right authentication method for you?</p> <p>Before starting to read this page, we invite you to check if this is the best authentication method for you. Please check the flowchart you can find on the Authentication page before proceeding.</p> <p>Manual Authentication is an authentication method that lets the user retrieve the token \"manually\", e.g. using the TSE in Cloud WebApp. It requires active user collaboration to be applied: specifically, the user needs to generate correctly the Access Token selecting the correct scopes, and then insert it into the application.</p> <p>Are you sure?</p> <p>This authentication method is suggested only for very specific use cases. Please think carefully if you want to use it.</p> <p>This implies some drawbacks:</p> <ul> <li>The User Experience is worse than the other authorization methods.</li> <li>The Error Ratio is higher because the user needs to select the scopes needed by the application; in contrast, in the other flows is the application that's indicating the scopes required to work properly.</li> <li>The generated token will never expire (but it can be manually revoked by the user).</li> </ul> <p>The use cases suggested for this method are the following:</p> <ul> <li>Temporary authentication to start testing our APIs fast without implementing more complex flows. For example, manual authentication can be useful while testing with Postman.</li> <li>Simple scripts that will be used by a single TSE in Cloud User (usually the programmer himself) to manage his account (for example for one-time exports or imports of resources).</li> <li>When the other flows are not applicable.</li> </ul>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#token-generation","title":"Token generation","text":"<p>Technically speaking, to implement this method you need to do nothing to create a new Access Token: this responsibility lies entirely on the User's shoulders . Even so, if your app needs to manage different users you will need to:</p> <ul> <li>Provide your Client ID to the User (you can find it on your Application page, in the Sviluppatore section).   </li> <li>Explain how to generate the Access Token correctly, also indicating the scopes set needed by your app.</li> <li>Explain how to insert the Access Token in your app (so you'll need to implement some mechanism to collect and eventually store a string).</li> </ul> <p>The steps that the user must perform are the following:</p> <ol> <li>Access the TSE in Cloud web app.</li> <li>Access the Settings -&gt; Connected Applications (Impostazioni -&gt; Applicazioni collegate) page.</li> <li>Click the Connect a new application (Collega una nuova applicazione) button.    </li> <li>Insert the Client ID of your application.</li> <li>Select the companies that the application will be able to access from the list.    </li> <li>Select the permissions (e.g. the scope) that will be granted to the application from the list.    </li> <li>Copy the Access Token and insert it into the application.</li> </ol> <p>Forbidden!</p> <p>Since the User will have the possibility to select the permissions he wants to grant to the application, it is likely that some \"Forbidden\" error will happen. Also, if a new version of your app needs additional scopes, all your users will need to update the permissions on the Connected Applications page. You should be aware of that and your code should be able to manage this situation correctly.</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#find-your-company-id","title":"Find your Company ID","text":"<p>Even if this step is not strictly part of the Authentication process, it is required to be able to use the Company-scoped Methods. Once you obtain the Access Token, you can use the List User Companies method to retrieve the ID of the related Company; please check the Company-scoped Methods page for further info.</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#perform-an-api-request","title":"Perform an API request","text":"<p>A valid Access Token can be used to authorize requests included in the scopes authorized by the user; to obtain a valid response it is necessary to include the Access Token in your request as an HTTP header.</p> <p>In the following example, we'll simulate a Get Supplier call. We choose this method because it is relatively easy to understand and it requires the entity.suppliers:r scope to be authorized correctly.</p> <p>Please, notice that for the purposes of this example we will assume that we already know the parameters required by the request and that we have previously collected a valid Access Token.</p> <pre><code>curl --request GET \\\n     --url https://api-v2.fattureincloud.it/c/17/entities/suppliers/16 \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4'\n</code></pre> <pre><code>GET /c/17/entities/suppliers/16 HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nAuthorization: Bearer a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\n</code></pre> <p>Below you can find some vanilla code examples implementing the same command.</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as string, but you should have obtained it in the previous steps\n            var token = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 16;\n            var supplierId = 17;\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/entities/suppliers/\" + supplierId,;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\n    // for this example we define the token as string, but you should have obtained it in the previous steps\n    token := \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\"\n\n    // these parameters are usually retrieved through our APIs or stored in a DB\n    companyId := \"16\"\n    supplierId := \"17\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/entities/suppliers/\" + supplierId\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", token)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as string, but you should have obtained it in the previous steps\n        String token = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n        Integer supplierId = 17;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/entities/suppliers/\" + supplierId)\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as string, but you should have obtained it in the previous steps\nvar token =\n  \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\nvar supplierId = 17;\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/entities/suppliers/\" + supplierId,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as string, but you should have obtained it in the previous steps\n$token = 'a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n$supplierId = 16;\n\n$client = new Client();\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/entities/suppliers/$supplierId\";\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    return json_decode((string) $response-&gt;getBody());\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code>import requests\n\n# for this example we define the token as string, but you should have obtained it in the previous steps\ntoken = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\nsupplier_id = 17\n\nheaders = { 'authorization': \"Bearer \" + token}\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/entities/suppliers/{supplier_id}\", headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as string, but you should have obtained it in the previous steps\ntoken = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\nsupplier_id = 17\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/entities/suppliers/#{supplier_id}\")\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\nvar token =\n  \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\nvar supplierId = 17;\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/entities/suppliers\" +\n      supplierId,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>If the Access Token is valid and provided correctly in the header, the response will be a 200 OK. To check the possible error responses, please check the dedicated page.</p> <p>!!! info Easy switch!</p> <p>Please, note that this is exactly the same step applied for the OAuth 2.0 flows. If you want to switch from this method to another, you can reuse this code without having to modify it. You \"just\" need to add the code to retrieve the access token.</p> <p>!!! </p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#memo-change-token-permissions","title":":memo:\u00a0 Change token permissions","text":"<p>If you need to change the set of scopes currently associated with your token, you must ask your app users to perform the following simple steps:</p> <ol> <li>Access the TSE in Cloud web app.</li> <li>Access the Settings -&gt; Connected Applications (Impostazioni -&gt; Applicazioni collegate) page.</li> <li>Click the Manage (Gestisci) button next to your App.</li> <li>Click the Edit (Modifica) button next to the scopes section.</li> <li>Select the new permissions (e.g. the scopes) that must be granted to the application from the list.</li> </ol> <p>At this point, in a short time, the list of scopes associated with your token will be updated; the token itself isn't regenerated, so it isn't necessary to require the user to reload the token to the application.</p> <p>Please, note that this isn't a step that you can perform automatically. Your user must perform it manually, selecting the required scopes, so the operation is prone to errors in the scopes selection: the user could select the wrong scopes and also remove some previously assigned ones. This means that you must be ready to manage permissions errors, not only related to the new scopes but also the old ones.</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/quickstarts/","title":"Quickstarts Overview","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Quickstarts are documents that explain how to configure and run a simple app that calls a TSE in Cloud v2 API. Following the quickstart, you'll be able to build minimal applications that you can use as a starting point to integrate your code with TSE in Cloud.</p> <p>We also have a repo with all the working examples here.</p> <p>The following quickstarts are currently available:</p>","tags":["quickstarts","code example"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/","title":"C# SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page you'll create a simple Asp.Net project</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>.NET SDK installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-one-create-an-aspnet-web-app","title":"Step One: Create an Asp.Net web app","text":"<p>The first step is to create an Asp.Net web application:</p> <pre><code>dotnet new webapp -o Quickstart --no-https\n</code></pre> <p>Now open the directory created by the above command, in this case, **Quickstart/ ** and proceed to install the TSE in Cloud SDK, published to Nuget.</p> <p>To install it using the .NET CLI:</p> <pre><code>dotnet add package It.FattureInCloud.Sdk\n</code></pre>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Edit the files Pages/Index.cshtml.cs and Pages/Index.cs.cshtml, delete the existing content and paste into them the following snippets:</p> Index.cshtml.cs<pre><code>using System;\nusing System.IO;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.Extensions.Logging;\nusing It.FattureInCloud.Sdk.OauthHelper;\nusing System.Collections.Generic;\nusing Newtonsoft.Json;\n\nnamespace Quickstart.Pages\n{\n    public class IndexModel : PageModel\n    {\n\n        {\n            _logger = logger;\n        }\n\n        public void OnGet()\n        {\n            string code = HttpContext.Request.Query[\"code\"];\n            var oauth = new OAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:5000/oauth\");\n\n            if (code is null)\n            {\n                var url = oauth.GetAuthorizationUrl(scopes, \"EXAMPLE_STATE\");\n                Response.Redirect(url);\n            }\n            else\n            {\n                var token = oauth.FetchToken(code);\n                using StreamWriter file = new(\"token.json\");\n\n                file.Write(JsonConvert.SerializeObject(token)); //saving the oAuth access token in the file token.json in the bin folder\n                file.Close();\n\n                ViewData[\"Content\"] = \"Token saved succesfully in token.json in your bin folder\";\n            }\n        }\n    }\n}\n</code></pre> Index.cshtml<pre><code>@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"OAuth QuickStart\";\n}\n\n    @ViewData[\"Content\"]\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri in the Index.cshtml.cs file at line 23.</p> <p>Warning</p> <p>Make sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:5000/Index).</p> <p>!!! </p> <p>!!! danger Store your Tokens safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-four-setup-the-sample","title":"Step Four: Setup the sample","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the C# SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create the files Pages/Quickstart.cs.cshtml and Pages/Quickstart.cshtml and copy the following code:</p> Quickstart.cshtml.cs<pre><code>using System;\nusing System.IO;\n\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.Extensions.Logging;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Newtonsoft.Json;\n\nnamespace OauthQuickstart.Pages\n{\n    public class QuickstartModel : PageModel\n    {\n\n        {\n            _logger = logger;\n        }\n\n        public void OnGet()\n        {\n            using StreamReader file = new(\"token.json\");\n\n            //retrieve the oAuth access token in the file token.json in the bin folder\n            var line = file.ReadLine();\n            file.Close();\n            string accessToken = json.access_token;\n\n            Configuration config = new Configuration();\n            config.AccessToken = accessToken.Replace(@\"\\\", \"\" );\n\n            // Modify the selected supplier\n            ModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest();\n            modifySupplierRequest.Data = new Supplier();\n            modifySupplierRequest.Data.Name = \"nuovo nome\";\n            modifySupplierRequest.Data.Phone = \"03561234312\";\n\n            var result = modifyFirstSupplier(config, modifySupplierRequest);\n\n            ViewData[\"Content\"] = result;\n        }\n\n        public static string modifyFirstSupplier(Configuration config, ModifySupplierRequest modifySupplierRequest)\n        {\n            try\n            {\n                var userApiInstance = new UserApi(config);\n                var suppliersApiInstance = new SuppliersApi(config);\n\n                // Retrieve User Companies\n                var userCompaniesResponse = userApiInstance.ListUserCompanies();\n                var firstCompanyId = userCompaniesResponse.Data.Companies[0].Id;\n\n                // Retrieve the list of the Suppliers for the selected company\n                var fields = \"\";  // string | List of comma-separated fields. (optional)\n                var fieldset = \"detailed\";  // string | Name of the fieldset. (optional)\n                var sort = \"-id\";  // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\n                var page = 2;  // int? | The page to retrieve. (optional)  (default to 1)\n                var perPage = 8;  // int? | The size of the page. (optional)  (default to 5)\n                var companySuppliers = suppliersApiInstance.ListSuppliers(firstCompanyId, null, fieldset, sort, page, perPage);\n                var firstSupplierId = companySuppliers.Data[0].Id;\n\n                ModifySupplierResponse modifySupplierResponse = suppliersApiInstance.ModifySupplier(firstCompanyId, firstSupplierId, modifySupplierRequest);\n\n                return(\"Supplier modificato correttamente\\n\" + modifySupplierResponse.Data.ToJson());\n            }\n            catch (Exception e)\n            {\n                Console.Write(e);\n                return e.ToString();\n            }\n        }\n    }\n}\n</code></pre> Quickstart.cshtml<pre><code>@page\n@model QuickstartModel\n@{ ViewData[\"Title\"] = \"OAuth QuickStart\"; }\n\n    @ViewData[\"Content\"]\n</code></pre> <p>It's also needed to edit the Pages/Shared/_Layout.cshtml, delete the already existing content and paste the following code:</p> _Layout.cshtml<pre><code>\n</code></pre>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-five-test-the-sample","title":"Step Five: Test the sample","text":"<p>Now you can start a web server running the following command in your shell:</p> <pre><code>dotnet watch run\n</code></pre> <p>Now visit http://localhost:5000/ (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:5000/Quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>C# SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NuGet page: The main package page</li> </ul>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/","title":"Excel Power Query Quickstart","text":"<p>In this guide, we'll explain how to use Power Query to load contents from our APIs into Microsoft Excel.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#open_book-list-example","title":":open_book:\u00a0 List Example","text":"<p>In this example, we will load our invoices list using the List Issued Documents method, but you can adapt this guide to using it with the API method you need.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-one-setup-the-data-source","title":"Step one: Setup the Data Source","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>First, we must select the Import from Web functionality as shown below:</p> <p></p> <p>Then we need to define the URL that will be contacted by Power Query. The List Issued Documents method is accessible to the following URL:</p> <pre><code>https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\n</code></pre> <p>additionally, it requires to define some parameters as Query String (e.g. the \"?type=invoice\" part), but you can substitute it with the endpoint of the method you want. Please, make sure to replace the {company_id} placeholder with your company ID.</p> <p>Our APIs require authentication, so we also need to set the Authorization header as shown below. Remember to replace the \"YOURACCESS_TOKEN\" placeholder with your actual _Access Token; you can obtain a valid one following this procedure.</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-two-extract-the-data","title":"Step Two: Extract the data","text":"<p>If you inserted the connection parameters correctly, Excel should already have retrieved the method response from our APIs.</p> <p>Now, we have to extract the list of invoices from the API response:</p> <p></p> <p>and then convert the result into a Table like shown below:</p> <p> </p> <p>Once obtained the table, we must extract the records of the invoices using the Record Extractor:</p> <p></p> <p>then we must select the fields that we are interested in from the menu:</p> <p></p> <p>And finally we can export the records to your sheet:</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-three-enable-auto-update","title":"Step Three: Enable auto update","text":"<p>Using Power Query it is possible to activate periodic updates of the data, selecting the query -&gt; properties -&gt; check the 'update every x minutes' functionality as shown below.</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-four-what-about-pagination","title":"Step Four: What about pagination?","text":"<p>The List Issued Documents response is paginated, this means that the results will be split into different sets; each set will contain a certain number of records up to the maximum value as explained on the dedicated page. Until now we just fetched the first page from the API, and this means that to retrieve the whole result we need to manage pagination.</p> <p>Unluckily it is not trivial, so you have to open advanced the Power Query editor and paste in the following code</p> <pre><code>let\n    Source = Json.Document(\n        Web.Contents(\n            url,\n            [\n                Timeout = #duration(0, 0, 1, 0),\n                Headers = [Authorization = \"Bearer YOUR_ACCESS_TOKEN\"]\n            ]\n        )\n    ),\n    iterations = Source[last_page],\n    url = \"https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\" &amp; \"?\" &amp; \"type=invoice\",\n\n    FnGetOnePage =\n    (url) as record =&gt;\n    let\n        Source = Json.Document(\n            Web.Contents(\n                url,\n                [\n                    Timeout = #duration(0, 0, 1, 0),\n                    Headers = [Authorization = \"Bearer YOUR_ACCESS_TOKEN\"]\n                ]\n            )\n        ),\n        data = try Source[data] otherwise null,\n        next = try Source[next_page_url] otherwise null,\n        res = [Data = data, Next = next]\nin\nres,\nGeneratedList =\n    List.Generate(\n        () =&gt; [i = 0, res = FnGetOnePage(url)],\n        each[i] &lt; iterations and[res][Data] &lt;&gt; null,\n        each[i = [i] + 1, res = FnGetOnePage([res][Next])],\n        each[res][Data]),\n    #\"Table conversion\" = Table.FromList(GeneratedList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded list\" = Table.ExpandListColumn(#\"Table conversion\", \"Column1\"),\n    #\"Expanded Records\" = Table.ExpandRecordColumn(#\"Expanded list\", \"Column1\", {\n        \"id\",\n        \"type\",\n        \"numeration\",\n        \"subject\",\n        \"visible_subject\",\n        \"amount_net\",\n        \"amount_vat\",\n        \"amount_gross\",\n        \"date\",\n        \"number\",\n        \"next_due_date\",\n        \"url\",\n        \"entity\"\n    }, {\n        \"id\",\n        \"type\",\n        \"numeration\",\n        \"subject\",\n        \"visible_subject\",\n        \"amount_net\",\n        \"amount_vat\",\n        \"amount_gross\",\n        \"date\",\n        \"number\",\n        \"next_due_date\",\n        \"url\",\n        \"entity\"\n    }),\n    #\"Expanded Entity\" = Table.ExpandRecordColumn(#\"Expanded Records\", \"entity\", {\n        \"name\",\n        \"tax_code\",\n        \"vat_number\"\n    }, {\n        \"client.name\",\n        \"client.tax_code\",\n        \"client.vat_number\"\n    })\nin\n#\"Expanded Entity\"\n</code></pre> <p></p> <p>The code above loops all the pages of the response and aggregates the results; additionally, it extracts the entity field to show the client name, tax_code and vat_number. To use this code you mustreplace the placeholders 'YOUR_ACCESS_TOKEN' and {company_id} as explained previously.</p> <p>Please, notice that this will increment the number of API requests executed, so you must be sure to not hit the quota limits to avoid the related errors.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/","title":"Go SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Go application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Go installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK.</p> <p>To install it:</p> <pre><code>go get github.com/fattureincloud/fattureincloud-go-sdk\n</code></pre>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.go and copy in the following code:</p> oauth.go<pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n\n    oauth \"github.com/fattureincloud/fattureincloud-go-sdk/v2/oauth2\"\n)\n\nfunc getOAuthAccessToken(w http.ResponseWriter, r *http.Request) {\n    query := r.URL.Query()\n    auth := oauth.NewOAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:8000/oauth\")\n\n    if query.Get(\"code\") == \"\" {\n        http.Redirect(w, r, auth.GetAuthorizationUrl([]oauth.Scope{oauth.Scopes.ENTITY_SUPPLIERS_READ}, \"EXAMPLE_STATE\"), http.StatusFound)\n    } else {\n        code := query.Get(\"code\")\n\n        token, err := auth.FetchToken(code)\n        if err != nil {\n            log.Println(\"Error on response.\\n[ERROR] -\", err)\n            http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n            return\n        }\n        jsonObj, _ := json.Marshal(token)\n        // saving the oAuth access token in the token.json file\n        err = ioutil.WriteFile(\"token.json\", jsonObj, 0644)\n\n        if err != nil {\n            log.Println(\"Error on writing the file.\\n[ERROR] -\", err)\n            http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n            return\n        }\n\n        fmt.Fprintf(w, \"Token succesfully retrived and stored in token.json\")\n\n    }\n}\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 15.</p> <p>Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-four-set-up-the-sample","title":"Step Four: Set up the sample","text":"<p>Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the Go SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>Create the files main.go and quickstart.go in your working directory and copy in the following code:</p> main.go<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/oauth\", getOAuthAccessToken)\n    http.HandleFunc(\"/quickstart\", getFirstCompanySuppliers)\n\n    fmt.Printf(\"Starting server at port 8000\\n\")\n    if err := http.ListenAndServe(\":8000\", nil); err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre> quickstart.go<pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    oauth \"github.com/fattureincloud/fattureincloud-go-sdk/v2/oauth2\"\n)\n\nfunc getFirstCompanySuppliers(w http.ResponseWriter, r *http.Request) {\n    rawData, err := os.ReadFile(\"token.json\")\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    tokenObj := oauth.OAuth2AuthorizationCodeTokenResponse{}\n    json.Unmarshal(rawData, &amp;tokenObj)\n    accessToken := tokenObj.AccessToken\n\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, accessToken)\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n    // Retrieve the first company id\n    userCompaniesResponse, _, err := apiClient.UserAPI.ListUserCompanies(auth).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListUserCompanies``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n        http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n        return\n    }\n    firstCompanyId := userCompaniesResponse.GetData().Companies[0].GetId()\n    // Retrieve the list of the Suppliers\n    companySuppliers, _, err := apiClient.SuppliersAPI.ListSuppliers(auth, firstCompanyId).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListSuppliers``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n        http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n        return\n    }\n    json.NewEncoder(w).Encode(companySuppliers)\n\n}\n</code></pre> <p>Check the Redirect URL</p> <p>Make sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:8000/oauth).</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-five-run-the-sample","title":"Step Five: Run the sample","text":"<p>From the command line, run the following command:</p> <pre><code>go run .\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>Go SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Go pkg page: The main package page on GoPkg</li> </ul>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/","title":"Google Sheets Apps Script Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>In this guide, we'll explain how to use Apps Script to load and create resources with our APIs into Google Sheets.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#open_book-list-example","title":":open_book:\u00a0 List Example","text":"<p>In this example, we will load our invoices list using the List Issued Documents method, but you can adapt this guide to using it with the API method you need.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-one-create-the-apps-script-function","title":"Step one: Create the Apps Script function","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>First, we must select the extensions -&gt; App Script to open the editor:</p> <p></p> <p>Then we need to create the listInvoice method and define the menu we'll use to trigger it:  <pre><code>// This function creates a menu tab to execute the listInvoices function\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu(\"TSE in Cloud API\")\n    .addItem(\"List invoices\", \"listInvoices\")\n    .addToUi();\n}\n</code></pre> <p> <pre><code>// This function loops between all the pages of the response and pushes the results on the sheet\nfunction listInvoices() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  sheet.clear();\n  sheet.appendRow([\n    \"id\",\n    \"type\",\n    \"numeration\",\n    \"subject\",\n    \"visible_subject\",\n    \"amount_net\",\n    \"amount_vat\",\n    \"date\",\n    \"next_due_date\",\n    \"url\",\n    \"client name\",\n    \"client tax_code\",\n    \"client vat_number\",\n  ]);\n  var url = \"https://api-v2.fattureincloud.it\";\n  var endpoint = \"/c/{company_id}/issued_documents\";\n  var headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer YOUR_ACCESS_TOKEN\",\n  };\n\n  var options = {\n    method: \"get\",\n    headers: headers,\n  };\n\n  var queryParams = [\"type=\" + \"invoice\"];\n  var pageKey = \"page\";\n  var pageNum = 1;\n  var nextPageUrl;\n  var data = {},\n    output = [];\n  do {\n    var currentUrl = url + endpoint + \"?\" + queryParams.join(\"&amp;\");\n    currentUrl += \"&amp;\" + pageKey + \"=\" + pageNum;\n\n    var response = UrlFetchApp.fetch(currentUrl, options);\n    data = JSON.parse(response.getContentText());\n    var invoices = data.data;\n    for (const index in invoices) {\n      sheet.appendRow([\n        invoices[index].id,\n        invoices[index].type,\n        invoices[index].numeration,\n        invoices[index].subject,\n        invoices[index].visible_subject,\n        invoices[index].amount_net,\n        invoices[index].amount_vat,\n        invoices[index].date,\n        invoices[index].next_due_date,\n        invoices[index].url,\n        invoices[index].entity.name,\n        invoices[index].entity.tax_code,\n        invoices[index].entity.vat_number,\n      ]);\n    }\n    pageNum++;\n    nextPageUrl = data.next_page_url;\n  } while (nextPageUrl);\n}\n</code></pre> <p> </p> <p>As you can see we are calling the List Issued Documents method, accessible to the following URL:</p> <pre><code>https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\n</code></pre> <p>additionally, it requires defining some parameters as Query String (e.g. the \"?type=invoice\" part), but you can substitute it with the endpoint of the method you want. Please, make sure to replace the {company_id} placeholder with your company ID.</p> <p>Our APIs also require authentication, so we need to set the Authorization header. You just need to replace the \"YOURACCESS_TOKEN\" placeholder with your actual _Access Token; you can obtain a valid one following this procedure.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-two-try-it","title":"Step Two: Try it!","text":"<p>If you inserted the connection parameters correctly, you can now click on the list invoices button that just appeared in your sheet's menu and see the results:</p> <p></p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#open_book-create-example","title":":open_book:\u00a0 Create Example","text":"<p>In this example, we will create an invoice using the Create Issued Document method.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-one-edit-the-apps-script-functions","title":"Step one: Edit the Apps Script functions","text":"<p>If you followed the list example you can now come back to your editor to implement also the invoice creation.</p> <p>First of all, we need to create a simple form for the inputs, so create the Page.html file and paste in the following code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;base target=\"_top\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;center&gt;\n      &lt;input\n        type=\"text\"\n        id=\"clientName\"\n        placeholder=\"Client Name\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"clientVatNumber\"\n        placeholder=\"Client Vat Number\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"amountNet\"\n        placeholder=\"Amount Net\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"visibleSubject\"\n        placeholder=\"Subject\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;button\n        onclick=\"google.script.run.createInvoice(document.getElementById('clientName').value, document.getElementById('clientVatNumber').value, document.getElementById('amountNet').value, document.getElementById('visibleSubject').value)\"\n        style=\"font-size:20px !important;\"\n      &gt;\n        Create\n      &lt;/button&gt;\n    &lt;/center&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>As you can see, we put only a few fields to exemplify the procedure; of course, you can add all the fields you need. The next step is to modify the menu and add some other functions (the showCreateInvoiceDialog will open the creation form, while the createInvoice will contact our APIs):</p> <p> <pre><code>// We edit this function to add the new Create invoice button\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu(\"TSE in Cloud API\")\n    .addItem(\"List invoices\", \"listInvoices\")\n    .addItem(\"Create invoice\", \"showCreateInvoiceDialog\")\n    .addToUi();\n}\n</code></pre> <p> <pre><code>// This function prompts the html page previously created\nfunction showCreateInvoiceDialog() {\n  var html = HtmlService.createHtmlOutputFromFile(\"Page\")\n    .setWidth(400)\n    .setHeight(300);\n  SpreadsheetApp.getUi().showModalDialog(html, \"Create Invoice\");\n}\n</code></pre> <p> <pre><code>// This function makes the actual API call to create the invoice\nfunction createInvoice(clientName, clientVatNumber, amountNet, subject) {\n    var url = \"https://api-v2.fattureincloud.it\";\n    var endpoint = \"/c/\\{company_id\\}/issued_documents\";\n    var headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer YOUR_ACCESS_TOKEN\"\n    };\n\n    var body = {\n        data: {\n            type: \"invoice\",\n            amount_net: amountNet,\n            visible_subject: subject,\n            entity: {\n                name: clientName,\n                vart_number: clientVatNumber\n            }\n        }\n    }\n    var options = {\n        \"method\": \"post\",\n        \"headers\": headers,\n        \"payload\": JSON.stringify(body)\n    };\n\n    try {\n        var response = UrlFetchApp.fetch(url + endpoint, options);\n        data = JSON.parse(response.getContentText());\n        SpreadsheetApp.getUi().alert(\"Invoice created succesfully with id: \" + data.data.id)\n\n    } catch (e) {\n        SpreadsheetApp.getUi().alert(e.message)\n    }\n</code></pre> <p> </p> <p>Remember to replace the placeholders as explained in the list example.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-two-try-it_1","title":"Step Two: Try it!","text":"<p>Nou can now click on the create invoice button that just appeared in your sheet's menu:</p> <p></p> <p>This will show you the HTML page we defined:</p> <p></p> <p>If you click on the \"Create\" button you'll trigger the invoice creation. You'll be able to see the results using the List Invoices menu one more time.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#google-apps-script-documentation","title":"Google Apps Script Documentation","text":"<p>Here you can find some additional resources:</p> <ul> <li>Container-bound Scripts</li> <li>External APIs</li> <li>Custom Menus in Google Workspace</li> <li>Dialogs and Sidebars in Google Workspace Documents</li> <li>Class Ui</li> <li>HTML Service: Create and Serve HTML</li> <li>Libraries</li> </ul>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/","title":"Java SDK Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Java application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#prerequisites","title":"Prerequisites ##","text":"<p>In this guide, we assume that these prerequisites are met: - Your JDK is configured correctly - A private app using the OAuth 2.0 Authorization Code Flow  - A TSE in Cloud account.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-one-add-the-dependencies","title":"Step One: Add the dependencies ##","text":"<p>In this Quickstart we are going to need some dependencies, OkHttpClient to make the API calls for the OAuth access token retrieval, JSON-java to parse the JSON, and our Java SDK, you can simply add them to your pom.xml or build.gradle file, as shown below:</p> pom.xml build.gradle<pre><code>implementation 'it.fattureincloud:fattureincloud-java-sdk:VERSION'\nimplementation 'com.squareup.okhttp3:okhttp:4.9.3'\nimplementation 'com.google.code.gson:gson:2.9.0'\nimplementation \"io.vavr:vavr:0.10.4\"\n</code></pre> <p>You can check the last version of our SDK on Maven Central.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval ##","text":"<p>First of all create a java project, create the file Application.java in your src/main/java/ directory, and copy in the following code:</p> Application.java<pre><code>import com.google.gson.Gson;\nimport com.sun.net.httpserver.HttpServer;\nimport it.fattureincloud.sdk.auth.OAuth2AuthorizationCodeManager;\nimport it.fattureincloud.sdk.auth.OAuth2AuthorizationCodeResponse;\nimport it.fattureincloud.sdk.auth.Scope;\n\nimport java.io.*;\nimport java.net.InetSocketAddress;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Application {\n\n    public static void main(String[] args) throws IOException {\n        int serverPort = 8000;\n        HttpServer server = HttpServer.create(new InetSocketAddress(serverPort), 0);\n        server.createContext(\"/oauth\", (exchange -&gt; {\n            OAuth2AuthorizationCodeManager oauth = new OAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:8000/oauth\");\n            String redirectUrl = oauth.getAuthorizationUrl(scopes, \"EXAMPLE_STATE\");\n            String query = exchange.getRequestURI().getQuery();\n            if(query == null) query = \"\";\n            if(query.contains(\"code\")){\n                int start = query.indexOf(\"code=\") + 5;\n                int finish = query.indexOf(\"&amp;\");\n                String code = query.substring(start, finish);\n                Gson gson = new Gson();\n                OAuth2AuthorizationCodeResponse tokenObj = oauth.fetchToken(code).get();\n                String token = gson.toJson(tokenObj);\n\n                saveToken(token);\n                String respText = \"token salvato correttamente\";\n                exchange.sendResponseHeaders(200, respText.getBytes().length);\n                OutputStream output = exchange.getResponseBody();\n                output.write(respText.getBytes());\n                output.flush();\n                exchange.close();\n            }else{\n                exchange.getResponseHeaders().set(\"Location\", redirectUrl);\n                exchange.sendResponseHeaders(302, 0);\n                exchange.close();\n            }\n\n        }));\n        server.createContext(\"/quickstart\", (exchange -&gt; {\n            String token = retrieveToken();\n\n            //the following method is defined in the next step\n            String respText = Quickstart.getFirstCompanySuppliers(token);\n\n            exchange.sendResponseHeaders(200, respText.getBytes().length);\n            OutputStream output = exchange.getResponseBody();\n            output.write(respText.getBytes());\n            output.flush();\n            exchange.close();\n        }));\n        server.setExecutor(null);\n        server.start();\n    }\n\n    public static void saveToken(String token) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"token.json\"));\n        writer.write(token); //saving the oAuth access token in the token.json file\n\n        writer.close();\n    }\n\n    public static String retrieveToken() throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"token.json\"));\n        String json = reader.readLine();\n        Gson gson = new Gson();\n        OAuth2AuthorizationCodeResponse obj = gson.fromJson(json, OAuth2AuthorizationCodeResponse.class);\n        String token = obj.getAccessToken();\n        return token;\n    }\n}\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 18.</p> <p>!!! danger Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-three-set-up-the-sample","title":"Step Three: Set up the sample ##","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the Java SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create a file called Quickstart.java in your working directory and copy in the following code: Quickstart.java<pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.SuppliersApi;\nimport it.fattureincloud.sdk.api.UserApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListSuppliersResponse;\nimport it.fattureincloud.sdk.model.ListUserCompaniesResponse;\n\npublic class Quickstart {\n    public static String getFirstCompanySuppliers(String token) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n        defaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(token);\n\n        UserApi userApiInstance = new UserApi(defaultClient);\n        SuppliersApi suppliersApiInstance = new SuppliersApi(defaultClient);\n\n        try {\n            // Retrieve the first company id\n            ListUserCompaniesResponse userCompanies = userApiInstance.listUserCompanies();\n            int firstCompanyId = userCompanies.getData().getCompanies().get(0).getId();\n\n            // Retrieve the list of first 10 Suppliers for the selected company\n            Integer companyId = 12345; // Integer | The ID of the company.\n            Integer page = 1; // Integer | The page to retrieve.\n            Integer perPage = 10; // Integer | The size of the page.\n\n            ListSuppliersResponse result = suppliersApiInstance.listSuppliers(companyId, null, null, null, page, perPage, null);\n            return result.getData().toString();\n\n        } catch (ApiException e) {\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n            return e.getResponseBody();\n        }\n    }\n}\n</code></pre></p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-four-run-the-sample","title":"Step Four: Run the sample ##","text":"<p>Now run your project and visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously.  Finally, you will see the success message, the access token will be stored in the token.json file ready to be used.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#what-now","title":"What now? ##","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources: * Java SDK GitHub Repository: the Readme file contains the full list of the available methods and models * API Reference: it contains the list of methods and models * OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models * SDK Javadoc: The standard Java documentation * Maven Central: The main package page</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/","title":"JavaScript SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Node Js application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Node.js installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to NPM.</p> <p>To install it using Npm:</p> <pre><code>npm install @fattureincloud/fattureincloud-js-sdk\n</code></pre>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.js copy in the following code:</p> oauth.js<pre><code>const fs = require(\"fs\");\nconst fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nconst oauth = new fattureInCloudSdk.OAuth2AuthorizationCodeManager(\n  \"CLIENT_ID\",\n  \"CLIENT_SECRET\",\n  \"http://localhost:8000/oauth\"\n);\n\nasync function saveAccessToken(req, res) {\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"text/plain\");\n\n  let query = req.url.split(\"?\")[1];\n  let params = new URLSearchParams(query);\n\n  if (params.get(\"code\") == null) {\n    res.writeHead(302, {\n      Location: oauth.getAuthorizationUrl(\n        [fattureInCloudSdk.Scope.ENTITY_SUPPLIERS_READ],\n        \"EXAMPLE_STATE\"\n      ),\n    });\n    res.end();\n  } else {\n    try {\n      let token = await oauth.fetchToken(params.get(\"code\"));\n\n      fs.writeFileSync(\n        \"./token.json\",\n        JSON.stringify(token, null, 4),\n        (err) =&gt; {\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      );\n      res.write(\"Token succesfully retrived and stored in token.json\");\n    } catch (e) {\n      console.log(e);\n    }\n    res.end();\n  }\n}\n\nmodule.exports = {\n  saveAccessToken,\n};\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 3.</p> <p>!!! danger Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-three-set-up-the-sample","title":"Step Three: Set up the sample","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the JavaScript SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create the files index.js and quickstart.js in your working directory and copy in the following code:</p> index.js<pre><code>const http = require(\"http\");\nconst url = require(\"url\");\nconst oauthPath = require(\"./oauth.js\"); //import the oauth methods\nconst quickstart = require(\"./quickstart.js\"); //import the quickstart\nconst hostname = \"127.0.0.1\"; //set your hostname\nconst port = 8000; //set your port\n\nconst server = http.createServer(async (req, res) =&gt; {\n  let pathname = url.parse(req.url).pathname;\n\n  //url routing\n  switch (pathname) {\n    case \"/oauth\": //oauth endpoint\n      res.end(oauthPath.getOAuthAccessToken(req, res));\n      break;\n    case \"/quickstart\": //quickstart endpoint\n      res.end(quickstart.getFirstCompanySuppliers());\n      break;\n    default:\n      res.end();\n      break;\n  }\n  res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> quickstart.js<pre><code>const fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nconst fs = require(\"fs\");\n\nasync function getFirstCompanySuppliers() {\n  try {\n    let rawdata = fs.readFileSync(__dirname + \"/token.json\");\n\n    let json = JSON.parse(rawdata);\n\n    let defaultClient = fattureInCloudSdk.ApiClient.instance;\n    let OAuth2AuthenticationCodeFlow =\n      defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\n    OAuth2AuthenticationCodeFlow.accessToken = json[\"access_token\"];\n\n    // Retrieve the first company id\n    let userApiInstance = new fattureInCloudSdk.UserApi();\n    let userCompaniesResponse = await userApiInstance.listUserCompanies();\n    let firstCompanyId = userCompaniesResponse.data.companies[0].id;\n\n    // Retrieve the list of the Suppliers\n    let suppliersApiInstance = new fattureInCloudSdk.SuppliersApi();\n    let companySuppliers = await suppliersApiInstance.listSuppliers(\n      firstCompanyId\n    );\n\n    return JSON.stringify(companySuppliers.data);\n  } catch (e) {\n    return JSON.stringify(e);\n  }\n}\n\nmodule.exports = {\n  getFirstCompanySuppliers,\n};\n</code></pre> <p>Warning</p> <p>Make sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:5000/Index).</p> <p>!!! </p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-five-run-the-sample","title":"Step Five: Run the sample","text":"<p>From the command line, run the following command:</p> <pre><code>node index.js\n</code></pre> <p>Now visit http://localhost:8000/auth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>JavaScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/","title":"PHP SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple PHP command-line application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>PHP 7.1 or greater</li> <li>The Composer dependency management tool</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to Packagist.</p> <p>To install it using Composer:</p> <pre><code>composer require fattureincloud/fattureincloud-php-sdk\n</code></pre>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.php and copy in the following code:</p> oauth.php<pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse FattureInCloud\\OAuth2\\OAuth2AuthorizationCodeManager;\nuse FattureInCloud\\OAuth2\\Scope;\n\nsession_set_cookie_params(86400);\nsession_start();\n\n$oauth = new OAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:8000/oauth.php\");\n\nif(isset($_SESSION['token'])) die('You already have an access token');\n\nif(!isset($_GET['code'])) {\n  $url = $oauth-&gt;getAuthorizationUrl([Scope::ENTITY_SUPPLIERS_READ], \"EXAMPLE_STATE\");\n  header('location: '.$url);\n} else {\n    $code = $_GET['code'];\n    $obj = $oauth-&gt;fetchToken($code);\n    if(!isset($obj-&gt;error)) {\n      $_SESSION['token'] = $obj-&gt;getAccessToken(); //saving the oAuth access token in a session variable\n      $_SESSION['refresh'] = $obj-&gt;getRefreshToken();\n    }\n\n    echo 'Token saved correctly in the session variable';\n}\n\n?&gt;\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 10.</p> <p>Warning</p> <p>Make sure your FattureInCloud app redirect URL points to your just created oauth.php file.</p> <p>!!! </p> <p>!!! danger Keep your Client Secret safe!</p> <p>Never share your Client Secret with third-party actors, or publish it to your frontend! If you did, then we suggest to delete your TSE in Cloud app and to recreate it.</p> <p>!!! </p>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-three-set-up-the-sample","title":"Step Three: Set up the sample","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the PHP SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create a file called quickstart.php in your working directory and copy in the following code:</p> quickstart.php<pre><code>&lt;?php\n\nuse FattureInCloud\\Api\\SuppliersApi;\nuse FattureInCloud\\Api\\UserApi;\nuse FattureInCloud\\Configuration;\nuse GuzzleHttp\\Client;\n\nrequire __DIR__ . '/vendor/autoload.php';\nsession_start();\n\n// Retrieve the access token from the session variable\n$accessToken = $_SESSION['token'];\n\n// Get the API config and construct the service object.\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($accessToken);\n\n$userApi = new FattureInCloud\\Api\\UserApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$suppliersApi = new FattureInCloud\\Api\\SuppliersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    // Retrieve the first company id\n    $companies = $userApi-&gt;listUserCompanies();\n    $firstCompanyId = $companies-&gt;getData()-&gt;getCompanies()[0]-&gt;getId();\n\n    // Retrieve the list of first 10 Suppliers for the selected company\n    $suppliers = $suppliersApi-&gt;listSuppliers($firstCompanyId, null, null, null, 1, 10);\n    foreach ($suppliers-&gt;getData() as $supplier) {\n        $name = $supplier-&gt;getName();\n    }\n\n} catch (Exception $e) {\n    echo 'Exception when calling the API: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-four-run-the-sample","title":"Step Four: Run the sample","text":"<p>Now start the webserver using the following command:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>and go to http://localhost:8000/oauth.php (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message, the access token will be stored in the session variable ready to be used.</p> <p>You can now visit http://localhost:8000/quickstart.php (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>PHP SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Packagist page: The main package page on Packagist</li> </ul>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/postman-collection/","title":"Postman Collection","text":"<p>To test our API without writing a single line of code, we used our OpenAPI Specification to generate a dedicated Postman Collection.</p> <p>Postman is an API Platform for building and using APIs. Postman Collections can describe all the methods exposed by an API, making it possible for the user to modify the different request parameters and perform actual calls towards the API, obtaining the HTTP response as a result.</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#install-postman","title":"Install Postman","text":"<p>To use our collection, we suggest downloading Postman on your device; it is available for Windows, Mac, and Linux.</p> <p>Next, sign up to Postman: don't worry, to use our collection the Free Plan is enough </p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#import-the-collection","title":"Import the Collection","text":"<p>Our Collection is generated automatically using our OpenAPI Specification, and can be downloaded from our GitHub Repository at the postman/fic-api.json position; it is updated every time a new version of the Specification is released, so you can just redownload it to keep in sync.</p> <p>Once you downloaded the JSON file of the collection, you can import it following this procedure.</p> <p>Now you're almost ready to interact with our API!</p> <p>Not satisfied by our collection?</p> <p>If you prefer, you can instead use our OpenAPI Specification directly, importing the openapi.yaml file using this procedure. You just need to be sure to download also the files in the models folder, otherwise, the import will fail. Also, you need to select the right parameters to import the collection correctly.</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#authorization","title":"Authorization","text":"<p>Next, to be able to interact with our API you need to be authorized: see the Authentication page for further info.</p> <p>You have two main options to retrieve a valid token:</p> <ol> <li>Manual Authentication: since Postman is mainly used to test and discover our API behavior, this is a great use case for Manual Authentication. Just generate a new token with the required scopes and insert it in Postman!</li> <li>OAuth 2.0 Authorization Code: if you want to test the authentication step, you can try to retrieve the token and insert it in Postman.</li> </ol> <p>Once you retrieved a valid token, you can just insert it as a Bearer token following this procedure.</p> <p>If you want, you can also use Postman to retrieve your Access Token automatically from its interface. To set it up, click on the collection and select the Authorization tab, then compile the Configure New Token form.</p> <p> </p> <p>The parameters are:</p> <ol> <li>Auth URL: https://api-v2.fattureincloud.it/oauth/authorize</li> <li>Access Token URL: https://api-v2.fattureincloud.it/oauth/token</li> <li>Callback URL: The redirect URL declared for the OAuth2 Application</li> </ol> <p>All the other parameters can be found on the OAuth 2.0 Authorization Code Flow page.</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#test-our-apis","title":"Test our APIs!","text":"<p>You're finally ready to test our API using Postman. Select the method you want to try, compile the request parameters and click the Send button! Have fun!</p> <p>Retrieve your Company ID!</p> <p>Many of our methods are Company-scoped, which means they require to indicate the ID of the Company we're operating on. The good news is that you can use Postman to retrieve it! Check the Company-scoped Methods page for more info!</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#additional-resources","title":"Additional resources","text":"<ul> <li>Postman API Platform</li> <li>Download Postman</li> </ul>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/","title":"Python SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Python application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Python &gt;= 3.6 installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to PyPI.</p> <p>To install it using pip:</p> <pre><code>pip install fattureincloud-python-sdk\n</code></pre>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.py and copy in the following code:</p> oauth.py<pre><code>import json\nfrom urllib.parse import urlparse\nfrom urllib.parse import parse_qs\nfrom fattureincloud_python_sdk.oauth2.oauth2 import OAuth2AuthorizationCodeManager\nfrom fattureincloud_python_sdk.oauth2.oauth2 import Scope\n\nclass Oauth:\n    def get_oauth_access_token(self):\n        oauth = OAuth2AuthorizationCodeManager('CLIENT_ID', 'CLIENT_SECRET', 'http://localhost:8000/oauth')\n        query_components = parse_qs(urlparse(self.path).query)\n        if 'code' in query_components:\n            self.send_response(200)\n            self.send_header('Content-type','text/html')\n            self.end_headers()\n            code = query_components['code'][0]\n            token = oauth.fetch_token(code)\n            file = open('./token.json', 'w')\n            file.write(json.dumps({\"access_token\": token.access_token}))  #saving the oAuth access token in the token.json file\n            file.close()\n            self.wfile.write(bytes('Token saved succesfully in ./token.json', 'utf8'))\n        else:\n            url = oauth.get_authorization_url([Scope.ENTITY_SUPPLIERS_READ], 'EXAMPLE_STATE')\n            self.send_response(302)\n            self.send_header('Location', url)\n            self.end_headers()\n        return\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 9.</p> <p>!!! danger Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-four-set-up-the-sample","title":"Step Four: Set up the sample","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the Python SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create the files index.py and quickstart.py in your working directory and copy in the following code:</p> index.py<pre><code>from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom oauth import Oauth #import the Oauth class\nfrom quickstart import Quickstart #import the Quickstart class\n\nclass testHTTPServer_RequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        #url routing\n        if self.path.startswith('/oauth'): #oauth endpoint\n            Oauth.get_oauth_access_token(self)\n        elif self.path == '/quickstart': #quickstart endpoint\n            Quickstart.get_first_company_suppliers(self)\n        return\n\ndef run():\n    print('Avvio del server...')\n    server_address = ('127.0.0.1', 8000) #set your hostname and port\n    httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)\n    print('Server in esecuzione...')\n    httpd.serve_forever()\nrun()\n</code></pre> quickstart.py<pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import user_api\nfrom fattureincloud_python_sdk.api import suppliers_api\nfrom fattureincloud_python_sdk.models.list_user_companies_response import ListUserCompaniesResponse\nimport json\nimport collections\ncollections.Callable = collections.abc.Callable #needed if you are using python &gt; 3.10\n\n\nclass Quickstart:\n    def get_first_company_suppliers(self):\n\n        token_file = open(\"./token.json\")\n        json_file = json.load(token_file)\n        token_file.close()\n        configuration = fattureincloud_python_sdk.Configuration()\n        configuration.access_token = json_file[\"access_token\"]\n        with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n            # Retrieve the first company id\n            user_api_instance = user_api.UserApi(api_client)\n            user_companies_response = user_api_instance.list_user_companies()\n            first_company_id = user_companies_response.data.companies[0].id\n\n            # Retrieve the list of the Suppliers\n            suppliers_api_instance = suppliers_api.SuppliersApi(api_client)\n            company_suppliers = suppliers_api_instance.list_suppliers(first_company_id)\n            self.send_response(200)\n            self.send_header('Content-type','text/html')\n            self.end_headers()\n            self.wfile.write(bytes(str(company_suppliers.data), \"utf8\"))\n        return\n</code></pre> <p>Warning</p> <p>Make sure your FattureInCloud app redirect URL points to the just defined /oauth endpoint (e.g. http://localhost:8000/oauth).</p> <p>!!! </p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-five-run-the-sample","title":"Step Five: Run the sample","text":"<p>From the command line, run the following command:</p> <pre><code>python3 index.py\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>Python SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>PyPI page: The main package page on PyPI</li> </ul>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/","title":"Ruby SDK Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Ruby application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#prerequisites","title":"Prerequisites ##","text":"<p>In this guide, we assume that these prerequisites are met: - Ruby installed - A private app using the OAuth 2.0 Authorization Code Flow  - A TSE in Cloud account.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK ##","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to RubyGems. </p> <p>To install it: <pre><code>gem install fattureincloud_ruby_sdk\n</code></pre></p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval ##","text":"<p>Create the file oauth.rb and copy in the following code:</p> oauth.rb<pre><code>require 'rubygems'\nrequire 'webrick'\nrequire 'json'\nrequire 'fattureincloud_ruby_sdk'\n\nclass Oauth &lt; WEBrick::HTTPServlet::AbstractServlet\n  def do_GET(request, response)\n    oauth = FattureInCloud_Ruby_Sdk::OAuth2AuthorizationCodeManager.new('CLIENT_ID', 'CLIENT_SECRET', 'http://localhost:8000/oauth')\n    if !request.request_uri.query.nil?\n      url_obj = URI.decode_www_form(request.request_uri.query).to_h\n      if !url_obj['code'].nil?\n        token = oauth.fetch_token(url_obj['code'])\n        File.open('./token.json', 'w') do |file|\n          file.write({\"access_token\" =&gt; token.access_token}.to_json) # saving the oAuth access token in the token.json file\n        end\n        body = 'Token saved succesfully in ./token.json'\n      else\n        redirect(response, oauth)\n      end\n    else redirect(response, oauth)\n    end\n\n    response.status = 200\n    response['Content-Type'] = 'text/html'\n    response.body = body\n  end\n\n  def redirect(response, oauth)\n    url = oauth.get_authorization_url([FattureInCloud_Ruby_Sdk::Scope::ENTITY_SUPPLIERS_READ], 'EXAMPLE_STATE')\n    response.set_redirect(WEBrick::HTTPStatus::TemporaryRedirect, url)\n  end\nend\n\nif $PROGRAM_NAME == __FILE__\n  server = WEBrick::HTTPServer.new(Port: 8000)\n  server.mount '/oauth', Oauth\n  trap 'INT' do server.shutdown end\n  server.start\nend\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 8.</p> <p>!!! danger Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-three-set-up-the-sample","title":"Step Three: Set up the sample ##","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the Ruby SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create the files index.rb and quickstart.rb in your working directory and copy in the following code:</p> index.rb<pre><code>require 'rubygems'\nrequire 'webrick'\n\nrequire './oauth' # importing the class created in the next tab\nrequire './quickstart' # importing the class created in the previous steps\n\nif $0 == __FILE__ then\n  server = WEBrick::HTTPServer.new(:Port =&gt; 8000)\n  server.mount \"/quickstart\", QuickStart # route that refers to the QuickStary class in the imported quickstart.rb file\n  server.mount \"/oauth\", Oauth  # route that refers to the Oauth class in the imported oauth.rb file\n  trap \"INT\" do server.shutdown end\n  server.start\nend\n</code></pre> quickstart.rb<pre><code>require 'fattureincloud_ruby_sdk'\n\nclass QuickStart &lt; WEBrick::HTTPServlet::AbstractServlet\n\n  def do_GET(request, response)\n\n    # setup authorization\n    FattureInCloud_Ruby_Sdk.configure do |config|\n    # Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n    config.access_token = retrieve_token_from_file()\n    end\n\n    # Retrieve the first company id\n    user_api_instance = FattureInCloud_Ruby_Sdk::UserApi.new\n    user_companies_response = user_api_instance.list_user_companies\n    first_company_id = user_companies_response.data.companies[0].id\n\n    # Retrieve the list of the Suppliers\n    suppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\n    company_suppliers = suppliers_api_instance.list_suppliers(first_company_id)\n    response.body = company_suppliers.to_s\n\n  end\n\n  def retrieve_token_from_file()\n    obj = JSON.parse(File.read(\"./token.json\"))\n    return obj[\"access_token\"].to_s\n  end\n\nend\n</code></pre> <p>Danger</p> <p>Make sure your FattureInCloud app redirect URL points to the just defined /oauth endpoint (e.g. http://localhost:8000/oauth).</p> <p>!!! </p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-four-run-the-sample","title":"Step Four: Run the sample ##","text":"<p>From the command line, run the following command: <pre><code>ruby index.rb\n</code></pre></p> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously.  Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#what-now","title":"What now? ##","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources: * Ruby SDK GitHub Repository: the Readme file contains the full list of the available methods and models * API Reference: it contains the list of methods and models * OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models * RubyDoc page: The package documentation * RubyGems page: The main package page on RubyGems</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/","title":"TypeScript SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Node Js application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Node.js and ts-node installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to NPM.</p> <p>To install it using Npm:</p> <pre><code>npm install @fattureincloud/fattureincloud-ts-sdk\n</code></pre>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.ts and copy in the following code:</p> oauth.ts<pre><code>import {\n  OAuth2AuthorizationCodeManager,\n  Scope,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\nimport fs from \"fs\";\nimport http from \"http\";\n\nexport async function getOAuthAccessToken(\n  req: http.IncomingMessage,\n  res: http.ServerResponse\n) {\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"text/plain\");\n\n  let query = !!req.url &amp;&amp; req.url.split(\"?\")[1];\n  let params = new URLSearchParams(query || \"\");\n\n  let oauth = new OAuth2AuthorizationCodeManager(\n    \"CLIENT_ID\",\n    \"CLIENT_SECRET\",\n    \"http://localhost:8000/oauth\"\n  );\n\n  if (params.get(\"code\") == null) {\n    res.writeHead(302, {\n      Location: oauth.getAuthorizationUrl(\n        [Scope.ENTITY_SUPPLIERS_READ],\n        \"EXAMPLE_STATE\"\n      ),\n    });\n    res.end();\n  } else {\n    let code = params.get(\"code\");\n\n    try {\n      let token = await oauth.fetchToken(code ?? \"\");\n      // saving the oAuth access token in the token.json file\n      fs.writeFileSync(\"./token.json\", JSON.stringify(token, null, 4));\n      res.write(\"Token succesfully retrived and stored in token.json\");\n    } catch (e) {\n      console.log(e);\n    }\n    res.end();\n  }\n}\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 12.</p> <p>!!! danger Store the Token safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>!!! </p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-four-set-up-the-sample","title":"Step Four: Set up the sample","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the TypeScript SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>Create the files index.ts and quickstart.ts in your working directory and copy in the following code:</p> index.ts<pre><code>import * as http from \"http\";\nimport url from \"url\";\nimport { getOAuthAccessToken } from \"./oauth\";\nimport { getFirstCompanySuppliers } from \"./quickstart\";\n\nconst hostname = \"127.0.0.1\"; //set your hostname\nconst port = 8000; //set your port\n\nconst server = http.createServer(async (req, res) =&gt; {\n  var pathname = url.parse(req.url ?? \"\").pathname;\n\n  //url routing\n  switch (pathname) {\n    case \"/oauth\": //oauth endpoint\n      res.end(await getOAuthAccessToken(req, res));\n      break;\n    case \"/quickstart\": //quickstart endpoint\n      res.end(await getFirstCompanySuppliers());\n      break;\n    default:\n      res.end();\n      break;\n  }\n  res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> quickstart.ts<pre><code>import {\n  Configuration,\n  ListUserCompaniesResponse,\n  SuppliersApi,\n  UserApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\nimport fs from \"fs\";\n\nexport async function getFirstCompanySuppliers() {\n  try {\n    let rawdata = fs.readFileSync(\"./token.json\");\n    let json = JSON.parse(rawdata.toString());\n    // Configure OAuth2 access token for authorization:\n    const apiConfig = new Configuration({\n      accessToken: json[\"access_token\"],\n    });\n\n    // Retrieve the first company id\n    var userApiInstance = new UserApi(apiConfig);\n    var userCompaniesResponse: ListUserCompaniesResponse = await (\n      await userApiInstance.listUserCompanies()\n    ).data;\n    var firstCompanyId = userCompaniesResponse?.data?.companies?.[0]?.id;\n\n    if (firstCompanyId) {\n      // Retrieve the list of the Suppliers\n      var suppliersApiInstance = new SuppliersApi(apiConfig);\n      var companySuppliers = await suppliersApiInstance.listSuppliers(\n        firstCompanyId\n      );\n\n      return JSON.stringify(companySuppliers.data);\n    }\n  } catch (e) {\n    return JSON.stringify(e);\n  }\n}\n</code></pre> <p>Warning</p> <p>Make sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:8000/oauth).</p> <p>!!! </p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-five-run-the-sample","title":"Step Five: Run the sample","text":"<p>From the command line, run the following command:</p> <pre><code>ts-node index.ts\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>TypeScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/vanilla-code/","title":"Vanilla Code Examples","text":"<p>In this section of the Developer Hub, we provide a set of useful guides to use our SDKs to interact with the TSE in Cloud APIs. We strongly suggest using our SDKs whenever possible, but some use cases make it impossible to use them.</p> <p>For example, you could be in one of the following situations:</p> <ul> <li>We don't (currently) provide an SDK for your programming language</li> <li>The SDK for your language doesn't support your version (for example, you're using an obsolete version of PHP)</li> <li>You're having some version conflict while installing our SDK</li> </ul> <p>In these cases, it could be impossible to use one of our SDKs, or the effort required to use them could be unacceptable. On the other hand, some users could still decide to avoid our SDKs for various reasons, even if it would be technically possible to install them.</p> <p>Whatever the case, it is still possible to use our APIs by using Vanilla Code, by implementing our SDKs' behavior on your own.</p> <p>!!! danger Follow this path at your own risk!</p> <p>We strongly suggest using our SDKs because:</p> <ul> <li>The SDKs abstract your code, making it possible to ignore the implementation details</li> <li>Our guides are mostly based on our SDKs, so it will be faster to develop a functioning integration</li> <li>Our SDKs provide models containing all the fields that represent the API resources</li> <li>Our SDKs code is tested and used by many other users</li> <li>We offer support for our SDKs, so if a bug is detected we can fix it with the next release</li> <li>We won't debug your custom code (even if you send us the code snippet)</li> </ul> <p>!!! </p> <p>Since it is impossible to create vanilla code guides for every existing programming language, and since each language has a possibly huge set of similar libraries that could be used to implement the integration, we decided to not provide vanilla code examples. Instead, we decided to provide you with enough information to help you implement the code on your own.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#wanna-be-faster","title":"Wanna be faster?","text":"<p>If your environment is incompatible with our SDKs, but you would still like to use something similar, you could try to generate your own library thanks to our OpenAPI specification. It is the same procedure we use to create our SDKs, so you could give it a try too.</p> <p>For example, you could try to check if the OpenAPI Generator provides a generator compatible with your environment: the generator offers more languages than the ones we currently support, and some generator options could make the generated code compatible with your environment (targeting a language version or selecting a different library). Also, it is possible to find alternative code generators, or you can decide to use a self-generating library.</p> <p>If you don't want to include our SDKs because you just need a subset of our methods, you could also download and modify our OpenAPI file, removing all the parts that are unuseful for your use case; if you use this file as input for the generator, you'll obtain a smaller library than the official one.</p> <p>For additional information, you can check the resources linked to the OpenAPI specification page.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#can-i-modify-your-libraries","title":"Can I modify your libraries?","text":"<p>Sure! Our SDKs and our Prestashop module are released under MIT License, so feel free to modify them to meet your requirements. The code is freely available on GitHub, so feel free to customize it accordingly to your needs.</p> <p>!!! info Do you want to help other customers?</p> <p>If you think that the modifications you developed could be useful for the rest of the Community, then we invite you to open a Pull Request on our GitHub repositories!</p> <p>Please, notice that to open a PR the first step is to create a public Fork and publish your modifications to a branch in your repo; we won't accept or review code passed through any other mode. See also: Contributing to projects</p> <p>!!! </p> <p>!!! warning Our SDKs are generated!</p> <p>**Our SDKs are in large part generated!!! ** This means that your modifications could be overwritten while generating a new version, so we will most probably reject your PRs on the generated code. The OAuth and Filter helpers are not generated, so we could accept your PRs involving that part.</p> <p>If you want to propose an improvement to the generated code, you could try to modify the OpenAPI specification or the templates we use to generate the code. Please, notice that not all templates are added to our repository: we include only the ones that we must customize, the other templates are the standard ones provided by the generator. As an alternative, you can try to open an issue on the SDK repo and wait for our support.</p> <p>If you decide to do it on your own, you can check:</p> <ul> <li>OpenAPI specification</li> <li>OpenAPI Generator - Customization</li> </ul> <p>!!! </p> <p>!!! danger Can you support me with my modified library?</p> <p>If you're having a problem with a customized library, we can still try to support you to solve the issue, but first, you should publish a PR containing your modifications. We won't review code provided in any other way.</p> <p>If you publish a PR it will be easier for us to check the modifications you applied to our code, and we could additionally decide to adopt your changes into our library if the new features could be useful to the rest of the community.</p> <p>!!! </p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#man_facepalming-can-you-do-it-for-us","title":":man_facepalming:\u00a0 Can you do it for us?","text":"<p>We usually don't accept custom modification requests, but if you have an idea for a new functionality you can try to open a new discussion in our Community: if we think that the request could be useful also for other developers we might decide to develop it for you.</p> <p>If, instead, your request is useful only for your use case, or if you don't want to wait for our intervention, you can proceed and develop the modifies on your own.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#the-implementation-details","title":"The implementation details","text":"<p>If you prefer to implement the integration on your own (e.g. without a generator), you will still need a few libraries to make your life easier. In some cases, your language could provide them directly without external imports, while in other cases it is mandatory to select and install additional libraries.</p> <p>This is an indicative set of libraries that you could need:</p> <ul> <li>An HTTP Client</li> <li>A JSON marshaller/unmarshaller</li> <li>An OAuth2 client (optional)</li> </ul> <p>This set could change based on the libraries that you select: for example, the HTTP Client could require a JSON string as request, so you'll need to perform the JSON conversion on your own; in some other cases the JSON conversion is managed directly by the client, so you'll be able to avoid to install the JSON library. Also, the OAuth2 client will be unuseful if you decide to use the Manual Authentication, or you could decide to implement the OAuth2 process on your own using the HTTP client.</p> <p>The HTTP Client must be used to implement the REST Requests. The request will take advantage of the structure of HTTP Requests, in particular of the following parts:</p> <ul> <li>HTTP Method</li> <li>Request Target (the URL)</li> <li>HTTP Request Headers</li> <li>Querystring parameters</li> <li>Request Body</li> </ul> <p>The HTTP Response will contain the result of the request. The HTTP Response is structured as follows:</p> <ul> <li>Status Code</li> <li>Response Body</li> <li>HTTP Response Headers</li> </ul> <p>Below you can find the description of the various parts. You can check the actual values that must be used by checking the API Reference or by using the Postman Collection.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#haircut_man-http-method","title":":haircut_man:\u00a0 HTTP Method","text":"<p>Each HTTP request must contain an HTTP Method, that defines the kind of action that you want to perform. In the following table you can find the relationship between HTTP methods and actions:</p> HTTP Method Performed Action GET Read opetations (Get or List actions) POST Create operations PUT Modify operations DELETE Delete operations <p>The Get or List operations are distinguished by the structure of the URL (see below).</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#request-target-the-url","title":"Request Target (the URL)","text":"<p>The request target is an URL that identifies the resource on which the action should be performed. It could contain some Path Parameters, usually one of the following:</p> <ul> <li>Company ID</li> <li>The ID of the resource to manipulate</li> </ul> <p>You can usually distinguish between List and Get methods because the Get URLs additionally include the ID of the resource to retrieve.</p> <p>!!! tip Retrieve your Company ID!</p> <p>The Company ID is mandatory if you want to use Company-scoped Methods. If you plan to manage only one company, you can insert it directly into your code as a string; if, instead, you will manage multiple companies (and you don't know them at compile time), you must retrieve their IDs programmatically. Check the Company-scoped Methods page for more info.</p> <p>!!! </p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#http-request-headers","title":"HTTP Request Headers","text":"<p>The Headers usually contain metadata that apply to the request.</p> <p>In particular, our APIs use the Authorization Header to include the Access Token. If this header is missing or it isn't in the correct format, the request will be immediately discarded. Since the OAuth2 procedure can be complicated for inexperienced programmers, we provided a dedicated vanilla code guide to show some additional examples.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#query-string-parameters","title":"Query string parameters","text":"<p>The Query string is used by our APIs to add the parameters required to use the additional functionalities of the Read operations (e.g. Get and List); it can usually be omitted if you don't need to use those functionalities. This string is used as a suffix to the URL, and it can be used to sort, paginate, customize or filter the response.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#request-body","title":"Request Body","text":"<p>The Request Body is used in Create and Modify requests to describe the new status of the resource after the action has been applied. Our APIs use solely JSON to represent the request, so you could need a JSON marshaller to create the body string.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#status-code","title":"Status Code","text":"<p>The Status Code is used to define if an operation was concluded with a success (2xx codes), with a client error (4xx codes), or with a server error (5xx codes).</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#response-body","title":"Response Body","text":"<p>The response body will contain the following:</p> <ul> <li>Get requests: it contains the current state of the selected resource</li> <li>List requests: it contains a set of resources with their current state</li> <li>Create request: it contains the state of the created resource, including also the ID of the resource generated by the server</li> <li>Modify Request: it contains the state of the modified resource</li> </ul> <p>Our APIs always return a JSON response, so it must be managed accordingly.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#http-response-headers","title":"HTTP Response Headers","text":"<p>The response headers are usually used to provide additional info, such as information related to limits and quotas.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#please-give-me-some-examples","title":"Please, give me some examples!","text":"<p>You can obtain some examples automatically, by using our OpenAPI file or Postman Collection.</p> <p>For example, if you download our Postman Collection you can automatically generate some useful vanilla code examples by following this guide: Generating Client Code.</p> <p>As an alternative, you can use a code snippet generator to generate vanilla code snippets automatically for a huge variety of languages. You can obtain the info required to launch the generation by using our OpenAPI specification as a source.</p> <p>Here you can find some snippet generators:</p> <ul> <li>OpenAPI Snippet</li> <li>OpenAPI Snippet CLI</li> <li>ReadmeIO/httpsnippet</li> <li>Kong/httpsnippet</li> </ul> <p>As a last chance, you can also check our SDK repositories to copy our code. The SDK internally uses the same procedure described above, so you could try to read the code and adapt it to your needs.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/","title":"Windows Form Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Windows Form App integrated with TSE in Cloud.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met: - .NET SDK installed - A TSE in Cloud account. - A private app using the Manual Authentication </p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#github-repo","title":"Github repo!","text":"<p>If you want to download the complete project we have it here, we strongly suggest that you clone this project to follow this guide.</p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-one-create-a-windows-form-app","title":"Step One: Create a Windows Form app","text":"<p>The first step is to create a Windows Form project in Visual Studio, in this tutorial we are making a simple app that does two things:</p> <ul> <li>lists all the clients</li> <li>creates a client</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-two-put-the-components-in-the-form","title":"Step Two: Put the components in the Form","text":"<p>This form is pretty simple: </p> <p></p> <p></p> <p>Components list:</p> <ul> <li>TabControl tabControl1: we have a TabControl with 2 tabs, one for the list clients and one for the create client</li> </ul> <p>inside the first tab we have:</p> <ul> <li>DataGridView dataGridView1: this shows all the clients linked to the company</li> <li>Button syncButton: it calls the method that populates the data grid</li> </ul> <p>inside the second tab we have:</p> <ul> <li>TextBox clientNameTextBox: input for the client name</li> <li>TextBox clientTaxCodeTextBox: input for the client tax code</li> <li>TextBox clientVatNumberTextBox: input for the client vat number</li> <li>TextBox clientEmailTextBox: input for the client email</li> <li>Button saveClient: it calls the method that creates the client</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#the-actual-code","title":"The actual code","text":"<p>!!! tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>!!! </p> <p>The actual code behind the Form is very simple too:</p> <pre><code>using It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\nusing System;\nusing System.Windows.Forms;\n\nnamespace WinFormsQuickstart\n{\n    public partial class Form : System.Windows.Forms.Form\n    {\n        ClientsApi clientsApi;\n        int companyId = 12345;\n        public Form()\n        {\n            InitializeComponent();\n            Configuration config = new Configuration();\n            // IMPORTANT: the access token file must be saved in a secure environment\n            // like a db or the AppConfig\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            clientsApi = new ClientsApi(config);\n        }\n\n        private void syncButton_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                dataGridView1.Rows.Clear();\n                dataGridView1.Columns.Clear();\n                dataGridView1.Refresh();\n                dataGridView1.Columns.Add(\"Id\", \"Id\");\n                dataGridView1.Columns.Add(\"Name\", \"Name\");\n                dataGridView1.Columns.Add(\"VatNumber\", \"Vat Number\");\n                dataGridView1.Columns.Add(\"TaxCode\", \"Tax Code\");\n                dataGridView1.Columns.Add(\"Country\", \"Country\");\n\n                retrieveAllClients();\n\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message);\n            }\n        }\n\n        private void retrieveAllClients(int page = 1)\n        {\n            var result = clientsApi.ListClientsWithHttpInfo(companyId, page: page);\n\n            result.Data.Data.ForEach(client =&gt;\n            {\n                dataGridView1.Rows.Add(\n                    new string[] \n                    { \n                        client.Id.ToString(), \n                        client.Name, \n                        client.VatNumber, \n                        client.TaxCode, \n                        client.Country \n                    }\n                );\n            });\n\n            if (result.Data.NextPageUrl != null) retrieveAllClients(++page);\n        }\n\n        private void saveClient_Click(object sender, EventArgs e)\n        {\n            var newClient = new CreateClientRequest(\n                data: new ModelClient(\n                    name: clientNameTextBox.Text,\n                    taxCode: clientTaxCodeTextBox.Text,\n                    vatNumber: clientVatNumberTextBox.Text,\n                    email: clientEmailTextBox.Text\n                )\n            );\n\n            try\n            {\n                var result = clientsApi.CreateClient(companyId, newClient);\n                MessageBox.Show(\"Client save succesfully with id: \" + result.Data.Id.ToString());\n                clientNameTextBox.Text = String.Empty;\n                clientTaxCodeTextBox.Text = String.Empty;\n                clientVatNumberTextBox.Text = String.Empty;\n                clientEmailTextBox.Text = String.Empty;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message);\n            }\n        }\n    }\n}\n</code></pre> <p>!!! danger STORE YOUR TOKENS SAFELY!</p> <p>In this QuickStart, as you can see the access token is hard coded, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database or in the AppConfig. Also, never share your Client Secret with third-party actors, or publish it on your frontend!</p> <p>!!! </p> <p>The main methods are two:</p> <ul> <li>syncButton_Click: retrieves all the clients looping thru the pages of the paginated response and shows them into the DataGrid</li> <li>saveClient_Click: creates the client with the params specified in the TexBoxes</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-three-run-the-sample","title":"Step Three: Run the sample","text":"<p>Now your Form should work like a charm.</p> <p>Let's create a new client:</p> <p></p> <p>and now we are going to see it by syncing in the list clients tab:</p> <p></p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/zapier-quickstart/","title":"Zapier Quickstart","text":"<p>In this guide, we'll explain how to use Zapier to integrate TSE in Cloud with thousands of other services.</p> <p>Danger</p> <p>The Zapier integration is published but is still in the beta phase, please contact us if you experience some kind of issue using it. !!! </p> <p>!!! info Do you feel lost? If you need help with the usage of the Zapier integration, feel free to open a new Discussion in our Community!</p> <p>If instead you are experiencing a malfunctioning or you think that you found a bug in our integration, please check the Support Page! !!! </p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#what-is-zapier","title":"What is Zapier?","text":"<p>Zapier is a platform made to create automated workflows without the need to write a single line of code, all you will see is an intuitive drag-and-drop editor, here you can find the home page of the TSE in Cloud Zapier integration.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#in-which-cases-is-it-useful","title":"In which cases is it useful?","text":"<p>Zapier is a no-code workflow builder, and its main objective is to make automation available to non-technical people. It can help you building a workflow rapidly, without having to learn a programming language to do it.</p> <p>If you are a developer you can still use Zapier to build simple workflows rapidly, without having to take care of tedious tasks such as authentication and implementation of the API methods.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#open_book-base-concepts","title":":open_book:\u00a0 Base concepts","text":"<p>A Zapier workflow is called a Zap. Each Zap consists of a trigger and one or more actions. When you turn on your Zap, it will run the action steps every time the trigger event occurs.</p> <p>A trigger is an event that starts a Zap. For example, if you want to update an Excel file each time an invoice gets created, the trigger is \u2018new invoice created\u2019.</p> <p>An action is an event a Zap performs after it is triggered. For example, if you want to update an Excel file each time an invoice gets created, the action is 'Edit Excel Sheet\u2019.</p> <p>Let's get more into the specific details of the TSE in Cloud Zapier Integration.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#triggers","title":"Triggers","text":"<p>If you try to set up a TSE in Cloud trigger you will see that 2 triggers are available:</p> <ul> <li>Raw Trigger: this trigger makes available to the following actions only the IDs of the interested resources</li> <li>Enriched Trigger: this trigger makes available to the following actions the complete resource with all the fields</li> </ul> <p>So if you need to set up a trigger that sends an email to the customer when an invoice gets created it is enough the raw trigger (as you need only the ID to use the Schedule Email method), but if you need to sync an Excel sheet when an invoice gets created then you will need the enriched trigger (as you need the complete invoice body).</p> <p>!!! warning Watch the limits! Keep in mind that the enriched trigger makes a get request under the hood to retrieve the resource body, so it will erode your API limits. !!! </p> <p>!!! info How do triggers work? The TSE in Cloud's Zapier Triggers are based on our Webhooks functionality. When you use a trigger, it creates a new subscription and starts listening to the notifications generated when something occurs on the resources. If you want more detail or you are just curious, you can check the dedicated pages (but you don't need to read them to use our triggers!). !!! </p> <p>Let's create a trigger then:</p> <ul> <li>create a new Zap</li> <li>choose the TSE in Cloud app</li> <li>choose the Enriched Trigger</li> <li>login with TSE in Cloud if you haven't already</li> <li>select the type of trigger you need and select your company, in this example, we are setting up a trigger when a client gets created:</li> </ul> <p></p> <p>Now you can test the trigger, this test will retrieve a client (or a different type of resource, depending on the selected trigger type) directly from your TSE in Cloud account so you can test the following actions with real data, keep in mind that if you don't have any resource of the needed type in your account you will get an error.</p> <p>Info</p> <p>Not every type of trigger is currently available, you can check here to see if the notification type you need is currently active. !!! </p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#running_man-actions","title":":running_man:\u00a0 Actions","text":"<p>To understand what Zapier Actions can do for you, first, you must understand how our APIs work.</p> <p>The TSE in Cloud APIs provide a wide set of methods that let you interact with your account's resources giving you full control over them, by providing the following standard operations:</p> <ul> <li>Get Methods: to read the current status of the resource</li> <li>Create Methods: to create a new resource</li> <li>Modify Methods: to update an existing resource</li> <li>Delete Methods: to delete an existing resource</li> </ul> <p>You can check the list of all the methods provided by our APIs in our API Reference.</p> <p>Every Zapier Action implements one of our API methods, making that method available to be used in your Zaps.</p> <p>In the following simple example, we'll show you how to modify a client's name using the Modify Client action.</p> <ul> <li>choose the event you need from the list of available methods, in this case, the \"modifyClient\" event</li> <li>login with TSE in Cloud if you haven't already</li> <li>select your company from the dropdown menu</li> <li>fill in the client ID and the fields you want to edit (in this case only the name):</li> </ul> <p></p> <p>Now you can test the action and see if it works as expected.</p> <p>!!! info How can I know how to use an action?</p> <p>Since the Zapier Actions are just an implementation of our API Methods, they provide the same fields and perform the same behavior that you would obtain by using our APIs directly. So we suggest you check our Guides that illustrate how to use our APIs to perform the most common use cases. You just need to map the fields used in the guide to the related ones provided by the Zapier Action.</p> <p>If you still have some doubts, you can check our Support Page and ask for help.</p> <p>!!! </p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#turn-on-the-zap","title":"Turn on the Zap","text":"<p>At this point we created a Zap that for each client created on TSE in Cloud edits the name by adding \"- new name\", you can turn it on with the button at the top of the page and test the Zap by creating a client on the TSE in Cloud web application to see if the name gets modified.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#have-fun","title":"Have fun!","text":"<p>Probably the newly created Zap won't be useful in a real environment, but with Zapier you can create lots of useful workflows, for example, you could use the Create Issued Document action to create an invoice when an order on your Shopify store gets created, or when you receive a payment in your Stripe account, the possibilities are endless as Zapier supports 6000+ services at the moment and it's always adding more.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#additional-resources","title":"Additional resources","text":"<ul> <li>Zapier Platform</li> <li>Zapier key concepts</li> <li>Zapier apps</li> </ul>","tags":["zapier","no code","shopify","stripe"]},{"location":"support/","title":"Support & Feature Request","text":"<p>Do you need help? Do you have a beautiful idea you want to share? Here you can discover how to contact us!</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#feature-request","title":"Feature Request","text":"<p>If you need a functionality that we are not providing at the moment, you can give us suggestions by creating a post on our GitHub Discussions Page, explaining what you want to see implemented in our APIs and why it is a great idea. Remember to select the Ideas category to help us identify it faster!</p> <p>Before creating a new feature request please make sure you check out our roadmap and the other feature requests to make sure you are not duplicating another request or asking for functionality we have already planned to implement.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#technical-questions","title":"Technical questions","text":"<p>Are you having problems starting to integrate our APIs? Do you have some doubts about how to implement your specific use case?</p> <p>If you're a TSE in Cloud first-timer and you just need the first push to start using our APIs, you can check our Step-by-step and Quickstarts sections, which are dedicated to the first steps you must do to interact with our APIs.</p> <p>If, instead, you already started implementing an integration but you are stuck trying to resolve a problem, some other developer likely faced the same situation before. This is why we decided to collect the most common questions in the FAQs section, to rapidly resolve the issues that you'll probably encounter.</p> <p>Some use cases proved to be more complicated than others, so we decided to help our Developers Community by creating some ad-hoc guides. In our Guides Section, we try to explain how to perform complex operations in detail; for example, we prepared a detailed Create an Invoice guide where we illustrate all the steps required to create your first Issued Document... The TSE in Cloud core functionality!</p> <p>If you reached this point but still can't find what you need, then you can still try to contact us.</p> <p>If you think to have encountered a bug, or if you have some more complex question that requires you to share sensitive data with us, then you can check the paragraphs below. Otherwise, if you just need General Guidance, then feel free to use our GitHub Discussions Page, where you can ask for help from the TSE in Cloud Team and the rest of the Community! Just remember to select the Q&amp;A category and explain your needs and the problems you're facing in detail: think of this page as the TSE in Cloud's Stack Overflow!  Also, before opening a new discussion we suggest you check the already existing ones (remember to check also the Closed Discussions!) to check if the answer you're searching for is already available!</p> <p>!!! danger Important!</p> <p>NEVER put sensitive data or tokens on the public GitHub Discussions page!!!  Otherwise, we'll be obligated to delete your question. If you want to give us more detail, you can either publish fake data or contact our Customer Support.</p> <p>!!! </p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#construction_worker_man-sdk-bugs-and-improvements","title":":construction_worker_man:\u00a0 SDK bugs and improvements","text":"<p>If you think you found a bug in our SDKs, or you would like to require an improvement on a specific SDK, please feel free to open an issue on the GitHub repo of the specific SDK.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#api-bugs-problems-and-user-specific-questions","title":"API bugs, problems, and user-specific questions","text":"<p>If you think you need to share your actual data with us, or if you think that you found a bug in our APIs, then we ask you to contact our customer support at the bottom of this page. This is a private discussion page, not visible to other developers, and you'll get in contact directly with the TSE in Cloud Team. Please, remember that this procedure will usually require more time than the Discussions page, so use it only if you think you have to.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/faq/","title":"FAQs","text":"<p>import Faq from  '@site/src/components/Faq/Faq';</p> <p>No, currently our APIs don't support the upload of XML, you can use the{\" \"}     Create Issued Document     this guide   for a more detailed explanation.</p> <pre><code>To start working with our APIs in a development environment, you can just\nuse a Manual Token. We created a more extensive{\" \"}\n  guide to the authentication method selection\nto help you choose the one that you'll use when going live.\n\nThe Company ID is a really important parameter for the TSE in Cloud APIs\nbecause it enables the user to use{\" \"}\n  Company-scoped methods.\nTo retrieve your Client ID, you can use the{\" \"}\n  List User Companies \n{\" \"}\nso you can retrieve it once and store it if needed. To check if the ID is correct,\nyou can try to use the {\" \"}\n  Get Company Info\nmethod to see if the correct result is returned.\n\n\nThis is our most common use case, so we prepared a dedicated\n  guide\nto explain how to create an invoice step by step.\n\ncontain the details of the client or the supplier, depending on the kind of\ndocument.\nWhen the client is not inserted in the clients list, only some of the details\nare stored and thus shown in the resulting document. The only way to show the\n  Create Client{\" \"}\nalso insert all the client's details that must be shown in the document while\n  Create Issued Document\n\nThe TSE in Cloud software makes some calculations, that could differ\nfrom yours because of the applied rounding. We prepared a{\" \"}\n  guide\nto explain all the possible solutions to this issue.\n\nEvery account has a potentially huge number of entities and documents, so we\nresults; to safeguard our systems it is not possible to deactivate\npagination, so it is important to manage it properly.\n  guide\n\nTo avoid generating huge responses containing a lot of unnecessary data, we\ndefine which fields must be returned. If you want to know more, you should\ncheck this{\" \"}\n  guide\ndescribing the functionality in detail.\n\nYes, we have a special parameter to avoid sending the e-invoice to the SDI\nwhile performing all the checks, you can find more info{\" \"}\n  here.\n\nthe best way to start using our APIs, and in most cases is more than\nsufficient even in production. Check the{\" \"}\n  App Visibility Guide\nfor more information.\n\nNo, you just need an HTTP Client. This makes it possible to use our APIs\neven if your programming language isn't currently supported, or if the SDK\nfor your language doesn't support the version you're using.\nOf course, we strongly suggest using our SDKs when possible because they speed\nup your development process.\nIf you still don't think our SDKs are the best solutions for you, you can\ncheck the{\" \"}\n  Vanilla Code Quickstart\nto help you getting started with some code examples.\n\nIt refers to a single item.\nLet's suppose to have a 'Red Funnel' item.\nIf we create an invoice containing the Red Funnel with:\n\nTo create a ddt you have to use the{\" \"}\n  Create Issued Document method\n  create an issued document\n\nWe suggest creating a new TSE in Cloud account and company for your\ndevelopment team. Check the following link for more info:{\" \"}\n  Developer Account\n\n    A self invoice (autofattura) is a special type of issued document, there are 2 types of\n    them:{\" \"}\n    You will also need to set the ei_raw according to the type of autofattura\n    that you want to create, below you can find an example.\n    ```json\n    {\n        \"ei_raw\": {\n            \"FatturaElettronicaBody\": {\n                \"DatiGenerali\": {\n                    \"DatiGeneraliDocumento\": {\n                        \"TipoDocumento\": \"TD18\"\n                    }\n                }\n            },\n            \"FatturaElettronicaHeader\": {\n                \"CedentePrestatore\": {\n                    \"DatiAnagrafici\": {\n                        \"RegimeFiscale\": \"RF01\"\n                    }\n                }\n            }\n        }\n    }\n    ```\n</code></pre>","tags":["faqs","questions","help","support"]},{"location":"support/general-knowledge/","title":"General Knowledge","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>If you need to brush up your knowledge of the general concepts described in this documentation, we wrote some pages for you.</p>","tags":["general knowledge","beginner","concepts"]},{"location":"support/general-knowledge/oauth2/","title":"OAuth 2.0","text":"<p>OAuth 2.0 is the industry-standard protocol for authorization and it was developed to provide a universal way to secure communication between different services. The standard provides guidelines to build the authentication service but leaves many decisions to the implementers. Nevertheless, most of the web services that do implement OAuth 2.0 for their API come to many of the same decisions, and so most of the implementations look very similar.</p> <p>In this brief guide, we are going to illustrate the basic concepts of the standard, it should contain all you need to know about OAuth 2.0! \ud83d\ude01</p> <p>A detailed description of our implementations of the OAuth 2.0 flows is available here:</p> <ul> <li>OAuth 2.0 Authorization Code Flow</li> <li>OAuth 2.0 Device Code Flow</li> </ul> <p>!!! info Do I need to read this?</p> <p>Despite this mini-guide being optional and not necessary to use our API, we recommend reading it as it clarifies many concepts of the protocol that you will encounter very often.</p> <p>!!! </p> <p>In the following sections, you can find a concise description of the fundamentals of the OAuth 2.0 protocol that will help you to understand some concepts widely used in our documentation. If you want to further investigate the OAuth 2.0 standard, feel free to check out the Additional Resources section, where we collected a lot of useful resources that should help you to fulfill your thirst for learning! \ud83d\ude0c</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#whos-joining-the-party","title":"Who\u2019s joining the party?","text":"<p>Let\u2019s start by introducing the subjects that take part in the authentication process:</p> <p>First of all, we have the app that you developed, which we\u2019re going to name Client Application. It\u2019s the applicant who wants to access the user\u2019s data.</p> <p>This allows us to introduce the second subject, the End-User. He\u2019s the owner of the data you want to access, and we need his authorization to do so.</p> <p>The user\u2019s data in this case are stored in TSE in Cloud\u2019s server, which we\u2019re going to name Resource Server. To access this data we need a token, a string that acts as permission to ask the Resource Server to provide us the information we need.</p> <p>The token will be provided to us by the last subject, the Authorization Server. This can be a separate entity from the Resource Server, but in our implementation, they are technically the same. For the purpose of this guide though, we will assume that they are two separate entities.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#wait-a-minute-what-are-tokens","title":"Wait a minute, what are tokens?","text":"<p>Tokens are like keys, they allow the possessor to perform certain operations. There are two main types of tokens:</p> <ol> <li>The Access Token is the final token the Client Application will use to request data to the Resource Server. It expires, so it is required to request a new access token to continue using the APIs.</li> <li>When an Access Token expires, you don\u2019t need to redo the whole process again. The Refresh Token allows the Client Application to request a new Access Token directly to the Authorization Server. It can also expire, but its expiration time is usually much larger with respect to the Access Token.</li> </ol> <p>When also the Refresh Token expires, you need to re-execute the Authorization flow to obtain new tokens.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#oauth-20-flows-overview","title":"OAuth 2.0 flows overview","text":"<p>OAuth 2.0 specifies several Flows that can be used to retrieve those tokens. Each one of them is specialized for a different use case:</p> <ul> <li>Implicit Flow</li> <li>\u00a0 Authorization Code Flow</li> <li>Client Credential Flow</li> <li>Resource Owner Password Flow</li> <li>Assertion Flow</li> <li>\u00a0 Device Authorization Flow</li> </ul> <p>Currently, the TSE in Cloud API supports the Authorization Code Flow and Device Authorization Flow.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#authorization-code-flow","title":"Authorization Code Flow","text":"<p>The Authorization Code Flow is the most common of the OAuth 2.0 grant types. Like the other flows, it describes how the application can retrieve the token required to interact with the APIs.</p> <p>!!! info Wanna get technical?</p> <p>Our implementation of this flow can be found here.</p> <p>!!! </p> <p>At a high level, the flow can be divided into the following steps:</p> <ol> <li>The End-User wants to use the Client Application.</li> <li>The Client Application wants to access the user\u2019s data, so it contacts the Authorization Server to get permission.</li> <li>The Authorization Server asks the End-User whether to grant the requested permissions to the Client Application.</li> <li>If the End-User approves the request, the Authorization Server redirects him to the Client Application with an Authorization Code in the query string.</li> <li>The Client Application contacts the Authorization Server to exchange the Authorization Code with an Access Token. In addition to the Access Token, the Authorization Server will provide a Refresh Token.</li> <li>The Client Application uses the received tokens to access the user's data.</li> </ol> <p>As you can see, the Authorization Code flow introduces a new token called Authorization code. It is a short-living one-time use token generated by the Authorization Server, and its only purpose is to be exchanged for an Access Token.</p> <p>Since the Authorization Code Grant requires the exchange of the Authorization Code for the Access Token, it provides an additional layer of security not present in other grant types. The code exchange step ensures that an attacker isn\u2019t able to intercept the Access Token, given that the Access Token is always sent via a secure backchannel between the Client Application and the Authorization Server.</p> <p>The authorization step is performed directly by the End-User on a page provided by the Authorization Server, so the application needs to expose a Redirect Endpoint that will be used by the Authorization Server to send the Authorization code.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#device-code-flow","title":"Device Code Flow","text":"<p>The Device Code Flow is an authorization process designed explicitly for browserless and input-constrained devices such as smart TVs, media consoles, picture frames, printers, or hardware video encoders. It can be also used for use cases where the Client cannot safely store a secret (making it impossible to use the Authorization Code Flow), such as CRM plugins or pure frontend applications.</p> <p>!!! warning Wait a minute!</p> <p>To enable this flow for your application, you have to contact us! We would like to know why you want to use the Device Authorization flow before activating it.</p> <p>!!! </p> <p>The Device Code Flow tries to overcome the restrictions that affect the Client Application by asking the End User to manually access a web page, where the authentication and authorization steps will be performed; this second device will usually be a PC or another device browser-provided, where the End User will be able to open the page and perform the requested operations easily.</p> <p>We can then split the Device Code Flow into two different paths, one for the device where the Client Application is running (named \"Device Flow\") and one for the secondary device (named \"Browser Flow\"); the two flows will be executed parallelly until the End-User authorization will be provided.</p> <p>The Device Flow is executed on the device where the Client App is running, e.g. the device with the restrictions mentioned above.</p> <p>The steps are the following:</p> <ol> <li>The End-User wants to use the Client Application.</li> <li>The Client Application wants to access the user\u2019s data, so it contacts the Authorization Server to get permission.</li> <li>The Authorization Server sends a verification URL and a code to the Client Application, which displays them to the End-User.</li> <li>The Client Application starts polling the Authorization Server for the authorization result. This process continues until the End-User approves the request.</li> <li>The first Client Application's check following the End-User approval will be successful, and the Authorization Server will provide the Access Token and Refresh Token to the user.</li> <li>The Client Application uses the received tokens to access the user's data.</li> </ol> <p>The Browser Flow will be executed manually by the user on a secondary device of his choice, and it can be placed between steps 3 and 5 of the Device Flow:</p> <ol> <li>The End User will open the verification page, writing the verification URL on a secondary device of his choice.</li> <li>The page will require the End User to insert the code and to give permissions to the Client Application to perform the operations on the API</li> </ol>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#additional-resources","title":"Additional Resources","text":"<ul> <li>What the Heck is OAuth?</li> <li>Which OAuth 2.0 Flow should I use</li> <li>Authorization Code Flow</li> <li>Authorization Code Grant</li> <li>Authorization Code Flow</li> <li>What is the OAuth 2.0 Authorization Code Grant Type?</li> <li>Specification</li> <li>Device Code Flow</li> <li>Device Authorization Grant</li> <li>Device Authorization Flow</li> <li>OAuth 2.0 Device Flow Grant</li> <li>Specification</li> <li>The Simplest Guide To OAuth 2.0</li> <li>Wikipedia</li> <li>OAuth 2.0 Simplified</li> </ul>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/openapi-specification/","title":"OpenAPI Specification","text":"<p>The TSE in Cloud OpenAPI specification is a YAML document, respecting the OpenAPI Specification. It is a complete description of the TSE in Cloud API, where all the details about our API are described: it lists the methods and models, the available scopes, and the authentication methods. For its nature, it is a great source of information about our API, and it can be already useful as-it-is.</p> <p>!!! info REST API &amp; OpenAPI</p> <p>To discover the relationship between OpenAPI and REST APIs, you can check this video.</p> <p>!!!  We use our OpenAPI specification for these purposes:  - As a documentation source  - To automatically populate the API reference section of this documentation  - To generate our SDKs </p>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/openapi-specification/#how-can-i-use-your-openapi-specification","title":"How can I use your OpenAPI Specification?","text":"<p>There are many OpenAPI tools available (here you can find a useful list).</p> <p>To create our SDKs we use the OpenAPI Generator, but you can use any of the other available generators. Just remember that if you'll use our same generator it will be easier for you to switch from your custom code to our SDK when your language will be officially supported.</p> <p>For some languages, it is also possible to find self-generating libraries that accept a YAML definition as input and automatically provide the methods to access the API (for example this one).</p>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/openapi-specification/#additional-resources","title":"Additional Resources","text":"<ul> <li>The OpenAPI initiative </li> <li>The latest version of the OpenAPI Specification</li> <li>OpenAPI Specification Repository</li> <li>OpenAPI on Wikipedia</li> <li>YAML </li> <li>OpenAPI.Tools</li> <li>OpenAPI Generator</li> </ul>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/principle-of-least-privilege/","title":"Principle of Least Privilege","text":"<p>The Principle of Least Privilege refers to an information security concept where only the minimum necessary rights should be assigned to a subject that requests access to a resource.</p> <p>Granting permissions to an access token beyond the scope of the necessary rights of an action can allow an attacker who manages to steal the token to obtain or change information in unwanted ways. Therefore, careful delegation of access rights can limit attackers to manipulate data.</p> <p>Our APIs adopt the scopes system, the application owner chooses which scopes are needed for the app to run properly and the users will be prompted to allow the requested permissions. Every resource has its own scope that could be either read-only or full write access, make sure to require the least amount of scopes possible for the correct functioning of your app, selecting as few permissions as possible.</p> <p>Danger</p> <p>We know it's easier to just require all the possible scopes in write access and not have to think about what's the lowest configuration of privileges that can be asked to the user, but we kindly ask you not to do that, in most of the cases in fact only 3-4 scopes are actually needed to use an application. !!! </p>","tags":["general knowledge","privileges","beginner","concepts","scopes"]},{"location":"support/general-knowledge/rest-apis/","title":"REST APIs","text":"<p>An Application Programming Interface, or API, is a type of software interface, offering a service to other pieces of software. Developing a public API means making it possible for external systems to integrate the exposed services into their own, with advantages for both sides.</p> <p>REST stands for REpresentational State Transfer and is an architectural style; when the principles of REST are respected by a Web API then it can be called RESTful API.</p> <p>!!! info Do you prefer a video?</p> <p>Here you can find an interesting video about REST APIs.</p> <p>!!! </p> <p>REST consists of six guiding principles, you can find a description below.</p> <p>Warning</p> <p>The TSE in Cloud API loosely applies the principles described on this page.</p> <p>!!! </p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#uniform-interface","title":"Uniform Interface","text":"<p>A Uniform Interface helps simplify and decouple the system architecture.</p> <p>The following constraints make it possible to achieve a uniform REST interface:</p> <ul> <li>Identification of resources: practically, it means that URIs must be used to uniquely identify uniform resources (see below for further information). \"Uniform resources\" means that the resources interfaces must be standardized and decoupled from the server's implementation of the resource itself (for example using JSON for their representation, while the resource is stored in a database).</li> <li>Manipulation of resources through representation: HTTP verbs are used to create, update and delete resources. Also, if a client knows the representation of a resource it possesses all the information needed to manipulate the resource.</li> <li>Self-descriptive messaged: Each resource representation should carry enough information to describe how to process the message (for example, using Media-Type).</li> <li>Hypermedia as the engine of application state (HATEOAS): The client should be aware only of the initial URI for the REST application, and it should be able to discover all the other available resources using the URIs provided by the application itself. For example, a resource should contain links to correlated resources.</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#client-server","title":"Client-server","text":"<p>The client-server design pattern enforces the principle of separation of concerns: separating the user interface concerns from the data storage concerns. This principle improves the portability of the interface across multiple platforms and the scalability by simplifying the server components.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#stateless","title":"Stateless","text":"<p>The communication must be stateless: each request from the client must contain all of the information necessary to understand and complete the request, and the session is stored completely on the client.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#cacheable","title":"Cacheable","text":"<p>A response should implicitly or explicitly label itself as cacheable or non-cacheable. If a response is cacheable, the client has the right to reuse it later for equivalent requests.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#layered-system","title":"Layered System","text":"<p>An architecture can be composed of hierarchical layers by constraining component behavior. It means that each component cannot see beyond the immediate layer they are interacting with; also, it makes it possible to interact with a system using its standardized interfaces without knowing its actual implementation (for example it could be a legacy application).</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#code-on-demand-optional","title":"Code-on-demand (optional)","text":"<p>The client could extend its functionality by downloading code provided by the server in the form of applets or scripts. This makes it possible to reduce the client complexity: some features will not be implemented by the client itself but provided by the server, while the client will just have to execute the code. At the same time, this makes it possible for the server to delegate some of the processing efforts to the client.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#resources","title":"Resources","text":"<p>Any information that we can name can be a resource. For example, a REST resource can be a document or image, a temporal service, a collection of other resources, or a non-virtual object (e.g., a person).</p> <p>The state of the resource, at any particular time, is known as the resource representation. It consists of:</p> <ul> <li>the data.</li> <li>the metadata describing the data.</li> <li>the hypermedia link that can help the client in transition to the next desired state.</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#interface-representation","title":"Interface representation","text":"<p>REST doesn't define an Interface Definition Language, but many have been proposed during the years. The Open API Specification (OAS) is the most used, but some others are available like API Blueprint or RAML.</p> <p>!!! info We use OpenAPI!</p> <p>We described our API using an OpenAPI specification. For more information, check this page.</p> <p>!!! </p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#additional-resources","title":"Additional Resources","text":"<ul> <li>What is REST</li> <li>REST on Wikipedia</li> <li>What is an application programming interface (API)?</li> <li>HTTP methods on REST APIs</li> <li>HTTP methods</li> <li>POST vs PUT</li> <li>OpenAPI</li> <li>API Blueprint</li> <li>RAML</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"template/0001/","title":"AIP Purpose and Guidelines","text":"<p>As the corpus of Google APIs has grown and the API Governance team has grown to meet the demand of supporting them, it is increasingly necessary to have a corpus of documentation for API producers, reviewers, and other interested parties to reference. The API style guide and introductory One Platform documentation are intentionally terse and high-level. The AIP collection provides a way to provide consistent documentation for API design guidance.</p>"},{"location":"template/0001/#what-is-an-aip","title":"What is an AIP?","text":"<p>AIP stands for API Improvement Proposal, which is a design document providing high-level, concise documentation for API development. They are to serve as the source of truth for API-related documentation at Google and the means by which API teams discuss and come to consensus on API guidance. AIPs are maintained as Markdown files in the AIP GitHub repository.</p>"},{"location":"template/0001/#types-of-aips","title":"Types of AIPs","text":"<p>There are several different types of AIPs, described below. The list of AIP types may evolve over time as necessary.</p>"},{"location":"template/0001/#guidance","title":"Guidance","text":"<p>These AIPs describe guidance on API design. These are provided as instruction for API producers to help write simple, intuitive, and consistent APIs, and are used by API reviewers as a basis for review comments.</p>"},{"location":"template/0001/#process","title":"Process","text":"<p>These AIPs describe a process surrounding API design. They often affect the AIP process itself and are used to enhance the way in which AIPs are handled.</p>"},{"location":"template/0001/#stakeholders","title":"Stakeholders","text":"<p>As with any process there are many different stakeholders when it comes to reviewing and working with AIPs. Below is a summary of the escalation path starting with the API producer.</p> <pre><code>digraph d_front_back {\n  rankdir=BT;\n  ranksep=0.3;\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n\n  producer [ label=\"API Producer\" ];\n  editors [ label=\"AIP Editors\" ];\n  tl_infra [ label=\"Infrastructure TL\" ];\n  tl_design [ label=\"Design TL\" ];\n  tl [ label=\"TL\" ];\n\n  producer -&gt; editors;\n  editors -&gt; tl_infra -&gt; tl;\n  editors -&gt; tl_design -&gt; tl;\n}\n</code></pre> <p>As noted in the diagram above, the TL is the final decision-maker on the AIP process and the final point of escalation if necessary.</p>"},{"location":"template/0001/#editors","title":"Editors","text":"<p>The editors are the set of people who make decisions on AIPs. The general goal is that the AIP process is collaborative and that we largely work on the basis of consensus. However, a limited number of designated approvers is necessary, and these Googlers will be approvers for each AIP in the general scope.</p> <p>The list of AIP editors is currently:</p> <ul> <li>Angie Lin (@alin04)</li> <li>Jon Skeet (@jskeet)</li> <li>Jose Juan Zavala Iglesias (@itsStrobe)</li> <li>Louis Dejardin (@loudej)</li> <li>Noah Dietz (@noahdietz)</li> <li>Sam Levenick (@slevenick)</li> <li>Sam Woodard (@shwoodard)</li> </ul> <p>The editors are also responsible for the administrative and editorial aspects of shepherding AIPs and managing the AIP pipeline and workflow. They approve PRs to AIPs, assign proposal numbers, manage the agenda, set AIP states, and so forth. They also ensure that AIPs are readable (proper spelling, grammar, sentence structure, markup, etc.).</p> <p>AIP editorship is by invitation of the current editors.</p>"},{"location":"template/0001/#domain-specific-aips","title":"Domain-specific AIPs","text":"<p>Some AIPs may be specific to a particular domain (for example, only to APIs within a certain PA, or even a certain team). In this situation, the group will be given a particular block of AIPs to use in accordance with AIP-2, and the applicable AIPs will clearly indicate their scope.</p>"},{"location":"template/0001/#states","title":"States","text":"<p>At any given time, AIPs may exist in a variety of states as they work their way through the process. The following is a summary of each state.</p>"},{"location":"template/0001/#draft","title":"Draft","text":"<p>The initial state for an AIP is the \"Draft\" state. This means that the AIP is being discussed and iterated upon, primarily by the original authors. While the editors may get involved at this stage, it is not necessary.</p> <p>Note: If significant, high-level iteration is required, it is recommended to draft AIPs in a Google doc instead of a PR. AIPs that are migrated into the AIP system from Google Docs may skip the draft state and go directly to reviewing provided there is sufficient approval.</p>"},{"location":"template/0001/#reviewing","title":"Reviewing","text":"<p>Once discussion on an AIP has generally concluded, but before it is formally accepted it moves to the \"Reviewing\" state. This means that the authors have reached a general consensus on the proposal and the editors are now involved. At this stage the editors may request changes or suggest alternatives to the proposal before moving forward.</p> <p>Note: As a formal matter, one AIP approver (other than the author) must provide formal signoff to advance an AIP to the reviewing state. Additionally, there must not be formal objections (\"changes requested\" on the GitHub PR) from other approvers.</p>"},{"location":"template/0001/#approved","title":"Approved","text":"<p>Once an approved AIP has been agreed upon, it enters \"approved\" state and is considered \"best current practice\".</p> <p>Note: As a formal matter, two AIP approvers (other than the author) must provide formal signoff to advance an AIP to the approved state. Additionally, there must not be formal objections (\"changes requested\" on the GitHub PR) from other approvers.</p>"},{"location":"template/0001/#withdrawn","title":"Withdrawn","text":"<p>If an AIP is withdrawn by the author or champion, it enters \"withdrawn\" state. AIPs that are withdrawn may be taken up by another champion.</p>"},{"location":"template/0001/#rejected","title":"Rejected","text":"<p>If an AIP is rejected by the AIP editors, it enters \"rejected\" state. AIPs that are rejected remain, and provide documentation and reference to inform future discussions.</p>"},{"location":"template/0001/#deferred","title":"Deferred","text":"<p>If an AIP has not been acted upon for a significant period of time, the editors may mark it as \"deferred\".</p>"},{"location":"template/0001/#replaced","title":"Replaced","text":"<p>If an AIP has been replaced by another AIP, it enters \"replaced\" state. AIP editors are responsible to provide a notice explaining the replacement and rationale (the replacement AIP should also clearly explain the rationale).</p> <p>In general, API producers should rely primarily on AIPs in the \"approved\" state.</p>"},{"location":"template/0001/#workflow","title":"Workflow","text":"<p>The following workflow describes the process for proposing an AIP, and moving an AIP from proposal to implementation to final acceptance.</p>"},{"location":"template/0001/#overview","title":"Overview","text":"<pre><code>digraph d_front_back {\n  rankdir=LR;\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n  draft [ label=\"Draft\" fillcolor=\"orange\" ];\n  reviewing [ label=\"Reviewing\" fillcolor=\"lightskyblue\" ];\n  approved [ label=\"Approved\" fillcolor=\"palegreen\" ];\n  withdrawn [ label=\"Withdrawn\" fillcolor=\"mistyrose\" ];\n  rejected [ label=\"Rejected\" fillcolor=\"mistyrose\" ];\n  deferred [ label=\"Deferred\" fillcolor=\"lightsteelblue\" ];\n  replaced [ label=\"Replaced\" fillcolor=\"lightsteelblue\" ];\n\n  draft -&gt; reviewing;\n  draft -&gt; withdrawn [ style=dashed, color=mistyrose3 ];\n  draft -&gt; rejected [ style=dashed, color=mistyrose3 ];\n  reviewing -&gt; approved;\n  reviewing -&gt; withdrawn [ style=dashed, color=mistyrose3 ];\n  reviewing -&gt; rejected [ style=dashed, color=mistyrose3 ];\n  draft -&gt; deferred [ style=dashed, color=lightsteelblue3 ];\n  reviewing -&gt; deferred [ style=dashed, color=lightsteelblue3 ];\n  approved -&gt; replaced [ style=dashed, color=lightsteelblue3 ];\n  reviewing -&gt; replaced [ style=dashed, color=lightsteelblue3 ];\n}\n</code></pre>"},{"location":"template/0001/#proposing-an-aip","title":"Proposing an AIP","text":"<p>In order to propose an AIP, first open an issue to circulate the fundamental idea for initial feedback. It should generally be possible to describe the idea in a couple of pages.</p> <p>Once ready, create a PR with a new file in the AIP directory using a file titled <code>aip/new.md</code>. Ensure that the PR is editable by maintainers.</p> <p>In most circumstances, the editors will assign the proposal an AIP number and submit the PR with the AIP in the \"Reviewing\" state. The editors may reject an AIP outright if they have an obvious reason to do so (e.g. the proposal was already discussed and rejected in another AIP or is fundamentally unsound), in which case the PR is not merged.</p>"},{"location":"template/0001/#discussing-an-aip","title":"Discussing an AIP","text":"<p>Once the PR is merged, the AIP author is responsible for championing the AIP on a follow-up approval pull request. This means that the author is responsible for pushing towards consensus around the proposal. This may involve a discussion at the regularly scheduled meetings for the API Governance team.</p> <p>The AIP author may modify the AIP over the course of discussion by submitting follow-up commits to the PR.</p>"},{"location":"template/0001/#accepting-an-aip","title":"Accepting an AIP","text":"<p>The editors will work together to ensure that qualified proposals do not linger in review.</p> <p>To gain final approval, an AIP must be approved by, at minimum, the TL with responsibility over the domain covered by the AIP (either design or infrastructure) and at least one other editor, with no editors actively requesting changes.</p> <p>Note: If an AIP editor is the primary author of an AIP, then at least two other editors must approve it.</p> <p>Once the AIP is approved, the editors will update the state of the AIP to reflect this and submit the PR.</p>"},{"location":"template/0001/#withdrawing-or-rejecting-an-aip","title":"Withdrawing or Rejecting an AIP","text":"<p>The author of an AIP may decide, after further consideration, that an AIP should not advance. If so, the author may withdraw the AIP by updating the PR adding a notice of withdrawal with an explanation of the rationale. Additionally, the author may be unable to get consensus among the group and the AIP editors may elect to reject the AIP. In this situation, the AIP editors shall amend the PR adding a notice of rejection with an explanation of the rationale. In both cases, the AIP editors update the state accordingly and submit the PR.</p>"},{"location":"template/0001/#replacing-an-aip","title":"Replacing an AIP","text":"<p>In rare cases, it may be necessary to replace an AIP with another one. This is not general practice: minor edits to approved AIPs are acceptable, and will be the common way to tweak guidance. However, if new guidance fundamentally alters the old guidance in some way, then the AIP editors shall create a new AIP that, once approved, will replace the old one. The old one then enters \"Replaced\" state, and will link to the new, current AIP.</p>"},{"location":"template/0001/#changelog","title":"Changelog","text":"<ul> <li>2024-09-04: Updated names of current editors and remove TLs.</li> <li>2023-05-10: Updated names of current and editors and TLs.</li> <li>2019-07-30: Further clarified AIP quorum requirements.</li> <li>2019-05-12: Collapsed AIP approvers and editors into a single position,   relaxed approval rules from full quorum.</li> <li>2019-05-04: Updated the AIP to refer to GitHub processes, rather than   internal processes.</li> </ul>"},{"location":"template/0002/","title":"AIP Numbering","text":"<p>The AIP system provides a mechanism to index and have a single source of truth for API Improvement Proposals, as well as iterate on them collaboratively and transparently.</p> <p>This document describes the AIP numbering system.</p>"},{"location":"template/0002/#assigning-aip-numbers","title":"Assigning AIP Numbers","text":"<p>The AIP editors (see AIP-1) are responsible for assigning a number to each AIP when it is accepted as a draft for review. Importantly, all AIPs have numbers, not just approved ones. The AIP Index clearly delineates which AIPs are approved and binding and which are under discussion.</p> <p>The editors may decide to reserve a specific block of numbers for groups of AIPs that are related in some way (for example, that are only scoped to a specific subset of APIs).</p> <p>Beyond this, AIP numbers are assigned arbitrarily. In general, the editors will take the next AIP number off of the stack to assign to a draft AIP, but occasionally may use a special/joke number if useful for mnemonic or other reasons.</p>"},{"location":"template/0002/#aip-blocks","title":"AIP Blocks","text":"<p>Currently recognized blocks of AIP numbers are:</p>"},{"location":"template/0002/#generally-applicable","title":"Generally Applicable","text":"<ul> <li>1-99: Reserved for meta-AIPs (generally process-related).</li> <li>100-999: General API design guidance</li> </ul>"},{"location":"template/0002/#google-product-areas","title":"Google Product Areas","text":"<ul> <li>2700-2799: Apps (Google Workspace)</li> <li>2500-2599: Cloud</li> <li>3000-3099: Actions on Google</li> <li>3200-3299: Firebase</li> <li>4100-4199: Auth libraries</li> <li>4200-4299: Client libraries</li> <li>4600-4699: Geo</li> </ul> <p>To request a block for a specific team that is publishing API guidance or documentation germane to that specific team, reach out to api-editors@.</p>"},{"location":"template/0002/#changelog","title":"Changelog","text":"<ul> <li>2019-10-03: The 3000-3099 block was assigned to Actions on Google.</li> <li>2019-01-26: The general API design guidance block was expanded to include   100-199.</li> <li>2018-10-24: The 4600-4699 block was assigned to Google Geo.</li> <li>2018-10-02: The 2500-2599 block was assigned to Google Cloud Platform.</li> <li>2018-10-02: The 2700-2799 block was assigned to Google Workspace.</li> </ul>"},{"location":"template/0003/","title":"AIP Versioning","text":"<p>This AIP defines the versioning scheme of the AIPs.</p>"},{"location":"template/0003/#guidance","title":"Guidance","text":"<ul> <li>The AIPs must be versioned by date, using the ISO-8601 format of   <code>YYYY-MM-DD</code>, that corresponds to the   date the version was added.</li> <li>AIPs versions must be available as a tag on the source control system used   to store the AIPs, of the format <code>v{version}</code>. Example: <code>v2023-03-28</code>.</li> <li>The AIPs must have a new version when there is a significant change to one   or more AIPs.</li> <li>Each AIP must include a changelog section, with the date the change was   made and a short description.</li> </ul>"},{"location":"template/0003/#rationale","title":"Rationale","text":"<p>Versions serve as reference points to AIPs at a specific point in time. They are crucial since guidance on an AIP can be reversed, or include significant changes such that they are no longer similar to the original design. APIs using AIPs may need to reference older AIP guidance to justify their design choice.</p>"},{"location":"template/0003/#rationale-for-date-based-versioning","title":"Rationale for date-based versioning","text":"<p>With date-based versioning, a client can easily find the AIP guidance at the time an API was authored.</p>"},{"location":"template/0003/#why-not-individually-versioned-aips","title":"Why not individually versioned AIPs","text":"<p>An alternative to a universal version is to have specific versions attached to each AIP.</p> <p>AIPs often cross-reference one another. If each AIP had a specific version, then cross-references would also have to specify specific versions of those referenced AIPs to provide complete guidance.</p>"},{"location":"template/0008/","title":"AIP Style and Guidance","text":"<p>AIP stands for API Improvement Proposal, which is a design document providing high-level, concise documentation for API design and development. The goal is for these documents to serve as the source of truth for API-related documentation at Google and the way API teams discuss and come to consensus on API guidance.</p> <p>AIPs are most useful when they are clear and concise, and cover a single topic or inquiry well. In the same way that AIPs describe consistent patterns and style for use in APIs, they also follow consistent patterns and style.</p>"},{"location":"template/0008/#guidance","title":"Guidance","text":"<ul> <li>AIPs must cover a single, discrete topic, and provide clear, actionable   guidance.</li> <li>AIPs must not duplicate or contradict guidance in another AIP.</li> <li>AIPs may also cover what not to do, but should not cover only   anti-patterns.</li> <li>If AIP guidance is conditional (e.g. a design pattern such as Jobs), the   guidance must clearly explain under what conditions the guidance should be   followed.</li> </ul> <p>Guidance contained within an AIP must be beneficial to one or more types of clients or their authors, including but not limited to:</p> <ul> <li>Asset inventories which can be used to audit and analyze resources.</li> <li>Command line interfaces for exploration and simple automation.</li> <li>Custom controllers (e.g. auto-scalers) which poll live state and adjust   resource configuration accordingly.</li> <li>IaC clients for orchestration and automation of multiple resources.</li> <li>Recommendation tools which provide guidance on which APIs are useful for   specific use cases, and how to use them.</li> <li>SDKs to interact with an API from a programming language, often used heavily   for data-plane operations.</li> <li>Security orchestration, automation, and remediation tools.</li> <li>Simple scripts to automate or orchestrate tasks.</li> <li>Test frameworks.</li> <li>Tools that operate on resource data at rest.</li> <li>Visual User Interfaces for visualization and one-off manual actions.</li> <li>Users.</li> </ul> <p>Examples of improvements include:</p> <ul> <li>Requiring new proto annotations that enable more descriptive interfaces on   clients (e.g. requiring <code>singular</code> and <code>plural</code> on a <code>google.api.resource</code>   annotation).</li> </ul> <p>AIP guidance must not be a significant detriment to a client's usability or implementation difficulty, or maintenance difficulty.</p> <p>Examples of detriments include:</p> <ul> <li>Introduction of a non-uniform pattern in a standard method such that all   clients must introduce additional code without sufficient benefit (e.g. List   behaves like this except for resources that start with the name Foo).</li> <li>Renames of well-established fields for minor improvements in readability (e.g.   rename <code>expire_time</code> to <code>lapse_time</code> since <code>lapse</code> is a common term in my   service).</li> </ul> <p>While the length of AIPs will necessarily vary based on the complexity of the question, most AIPs should be able to cover their content in roughly two printed pages.</p>"},{"location":"template/0008/#file-structure","title":"File structure","text":"<p>AIPs must be written in Markdown, and must be named using their four-digit number (example: <code>0008.md</code>). AIPs that serve a specific scope must be in the subdirectory for that scope.</p> <p>AIPs must have appropriate front matter.</p> <pre><code>---\nid: 8\nstate: reviewing\ncreated: 2019-05-28\npermalink: /8\nredirect_from:\n  - /08\n  - /008\n  - /0008\n---\n</code></pre> <p>Front matter for AIPs must include:</p> <ul> <li>The <code>aip</code> key:</li> <li><code>id</code>: Required. The ID for the given AIP, as an integer.</li> <li><code>state</code>: Required. The current state of the AIP, in all lower-case. The     valid states are listed in AIP-1, and common states are <code>draft</code>,     <code>reviewing</code>, and <code>approved</code>.</li> <li><code>created</code>: Required. The ISO-8601 date (<code>yyyy-mm-dd</code>) when the AIP was     originally drafted, with no quotes.</li> <li><code>updated</code>: The ISO-8601 date (<code>yyyy-mm-dd</code>) when the AIP was last revised.</li> <li><code>scope</code>: The scope for the AIP. This must match the directory name for     that scope. Required for AIPs with IDs &gt;= 1000, prohibited otherwise.</li> <li>The <code>permalink</code> key (required): This must be set to   <code>/{aip.scope}/{aip.id}</code>. If there is no scope, use <code>/{aip.id}</code> instead.</li> <li>The <code>redirect_from</code> key: This should include a list of any <code>/{aip.id}</code>   permutations that a reader would be likely to enter, including:</li> <li><code>/{aip.id}</code> (for AIPs where the permalink includes the scope)</li> <li>AIP IDs with zero-padding, for each level of zero-padding up to four digits     (for example: <code>/08</code>, <code>/008</code>, <code>/0008</code>).</li> </ul>"},{"location":"template/0008/#document-structure","title":"Document structure","text":"<p>AIPs must begin with a top-level heading with the AIP's title (<code># Title</code>). The title should be a noun (not an imperative). For example, \"Bad API precedents\" not \"Avoid breaking API precedent\".</p> <p>AIPs should then begin with an introduction (with no additional heading), followed by a <code>## Guidance</code> heading. If necessary, the AIP may include any of the following after the guidance, in the following order:</p> <ul> <li>\"Further reading\" is a bulleted list of links to other AIPs that are useful to   fully understand the current AIP.</li> <li>\"Appendices\" covering further explanation in the same AIP. These are   relatively rare but are important in cases where an AIP requires a lot of   justification for the decision. Often this is primarily an explanation of   alternatives considered to help explain the guidance.</li> <li>\"Changelog\" is a bulleted list of changes made to the AIP since the first   writing.</li> </ul> <p>The guidance section may include subsections that elaborate further on details. Subsections will automatically create an entry in the table of contents, and an anchor for citations.</p> <p>Below is an example AIP shell that uses each major section:</p> <pre><code># AIP title\n\nThe introductory text explains the background and reason why the AIP exists. It\nlays out the basic question, but does not tell the reader what to do.\n\n## Guidance\n\nThe \"guidance\" section helps the reader know what to do. A common format for\nthe guidance section is a high-level imperative, followed by an example,\nfollowed by a bulleted list explaining the example.\n\n### Subsection\n\nIndividual subsections can be cited individually, and further elaborate\ndetails.\n\n## Rationale\n\nThe \"rationale\" section is optional, and helps the reader understand the\nmotivation behind specific guidance within the AIP.\n\nDeeper explanations of design justification and tradeoffs **must** be in the\nrationale instead of other sections, to ensure the rest of the document acts as\nan easily actionable reference.\n\n## History\n\nThe \"history\" section is optional, and documents events and context around a\nsignificant edit to an AIP. For example, explanation of rewrite would be\nincluded in this section\n\nWhile the changelog is a dotted list of one-line summaries of changes to an AIP,\nthe history section should elaborate on significant events in a descriptive\nformat.\n\nThe section **must not** be used to exhaustively enumerate all changes. This\nis what the changelog provides.\n\n## Further reading\n\nA bulleted list of (usually) other AIPs, in the following format:\n\n- [AIP-1](./0001.md): AIP purpose and guidelines\n\n## Changelog\n\nA bulleted list of changes in reverse chronological order, using the following\nformat:\n\n- **2020-02-18**: Specified ordering.\n- **2019-07-01**: Added a subsection clarifying XYZ.\n</code></pre> <p>AIPs should attempt to follow this overall format if possible, but AIPs may deviate from it if necessary (in particular, if the AIP would be more difficult to understand, even for a reader already accustomed to reading AIPs in the usual format).</p> <p>Note: Except for the title, AIPs must only use the second heading level (<code>##</code>) and above. AIPs should only use the second and third heading levels (<code>##</code>, <code>###</code>).</p>"},{"location":"template/0008/#requirement-keywords","title":"Requirement keywords","text":"<p>AIPs should use the following requirement level keywords: \"MUST\", \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\", which are to be interpreted as described in RFC 2119.</p> <p>When using these terms in AIPs, they must be lower-case and bold. These terms should not be used in other ways.</p> <p>If \"SHOULD\" or \"SHOULD NOT\" are used, they must include valid examples of where other concerns may override the guidance.</p> <p>Important: If rationale is used, it exists to provide background and a more complete understanding, but must not contain guidance (and RFC-2119 terms must not be used).</p>"},{"location":"template/0008/#code-examples","title":"Code examples","text":"<p>API design examples in AIPs should use protocol buffers. Examples should cover only enough syntax to explain the concept. When using RPCs in examples, a <code>google.api.http</code> annotation should be included.</p>"},{"location":"template/0008/#referencing-aips","title":"Referencing AIPs","text":"<p>When AIPs reference other AIPs, the prosaic text must use the format <code>AIP-XXXX</code> without zero-padding (e.g., <code>AIP-8</code>, not <code>AIP-0008</code>), and must link to the relevant AIP. AIP links may point to a particular section of the AIP if appropriate.</p> <p>Important: AIP links must use the relative path to the file in the repository (such as <code>./0008.md</code> for core AIPs, or <code>../0008.md</code> for AIPs in a subdirectory); this ensures that the link works both on the AIP site, when viewing the Markdown file on GitHub, using the local development server, or a branch.</p>"},{"location":"template/0008/#rationale","title":"Rationale","text":""},{"location":"template/0008/#designing-for-a-broad-set-of-clients","title":"Designing for a broad set of clients","text":"<p>API guidance, similar to any software, is most beneficial when there is a clear purpose and target beneficiary.</p> <p>The beneficiaries of improved API design are users. These users interact with APIs via a variety of clients, depending on their use case as enumerated above.</p> <p>API guidance must in turn consider the impact broadly across these clients.</p>"},{"location":"template/0008/#changelog","title":"Changelog","text":"<ul> <li>2023-05-20: Increase API guidance scope to include broad set of clients.</li> <li>2023-03-30: Removed appendix, added rationale and history to the template.</li> <li>2020-02-18: Specified reverse chronological ordering for changelog items.</li> <li>2019-08-23: Added guidance for internal AIP links.</li> </ul>"},{"location":"template/0009/","title":"Glossary","text":"<p>In the name of brevity, this AIP defines some common terminology here rather than in each AIP individually.</p>"},{"location":"template/0009/#guidance","title":"Guidance","text":"<p>The following terminology should be used consistently throughout AIPs.</p>"},{"location":"template/0009/#api","title":"API","text":"<p>Application Programming Interface. This can be a local interface (such as a client library) or a Network API (defined below).</p>"},{"location":"template/0009/#api-backend","title":"API Backend","text":"<p>A set of servers and related infrastructure that implements the business logic for an API Service. An individual API backend server is often called an API server.</p>"},{"location":"template/0009/#api-consumer","title":"API Consumer","text":"<p>The entity that consumes an API Service. For Google APIs, it typically is a Google project that owns the client application or the server resource.</p>"},{"location":"template/0009/#api-definition","title":"API Definition","text":"<p>The definition of an API, usually defined in a Protocol Buffer service. An API Definition can be implemented by any number of API Services.</p>"},{"location":"template/0009/#api-frontend","title":"API Frontend","text":"<p>A set of servers plus related infrastructure that provides common functionality across API Services, such as load balancing and authentication. An individual API frontend server is often called an API proxy.</p> <p>Note: the API frontend and the API backend may run next to each other or far away from each other. In some cases, they can be compiled into a single application binary and run inside a single process.</p>"},{"location":"template/0009/#api-method","title":"API Method","text":"<p>An individual operation within an API. It is typically represented in Protocol Buffers by an <code>rpc</code> definition, and is mapped to a function in the API in most programming languages.</p>"},{"location":"template/0009/#api-producer","title":"API Producer","text":"<p>The entity that produces an API Service. For Google APIs, it typically is a Google team responsible for the API Service.</p>"},{"location":"template/0009/#api-product","title":"API Product","text":"<p>An API Service and its related components, such as Terms of Service, documentation, client libraries, and service support, are collectively presented to customers as a API Product. For example, Google Calendar API.</p> <p>Note: people sometimes refer to an API Product simply as an API.</p>"},{"location":"template/0009/#api-service","title":"API Service","text":"<p>A deployed implementation of one or more APIs, exposed on one or more network addresses, such as the Cloud Pub/Sub API.</p>"},{"location":"template/0009/#api-service-definition","title":"API Service Definition","text":"<p>The combination of API Definitions (<code>.proto</code> files) and API Service configurations (<code>.yaml</code> files) used to define an API Service. The schema for Google API Service Definition is <code>google.api.Service</code>.</p>"},{"location":"template/0009/#api-service-endpoint","title":"API Service Endpoint","text":"<p>Refers to a network address that an API Service uses to handle incoming API Requests. One API Service may have multiple API Service Endpoints, such as <code>https://pubsub.googleapis.com</code> and <code>https://content-pubsub.googleapis.com</code>.</p>"},{"location":"template/0009/#api-service-name","title":"API Service Name","text":"<p>Refers to the logical identifier of an API Service. Google APIs use RFC 1035 DNS compatible names as their API Service Names, such as <code>pubsub.googleapis.com</code>.</p>"},{"location":"template/0009/#api-title","title":"API Title","text":"<p>Refers to the user-facing product title of an API service, such as \"Cloud Pub/Sub API\".</p>"},{"location":"template/0009/#api-request","title":"API Request","text":"<p>A single invocation of an API Method. It is often used as the unit for billing, logging, monitoring, and rate limiting.</p>"},{"location":"template/0009/#api-version","title":"API Version","text":"<p>The version of an API or a group of APIs if they are defined together. An API Version is often represented by a string, such as \"v1\", and presents in API requests and Protocol Buffers package names.</p>"},{"location":"template/0009/#client","title":"Client","text":"<p>Clients are programs that perform a specific tasks by calling an API or generic tools, such as CLIs, that expose the API in a user-accessible fashion or operate on resource data at rest.</p> <p>Examples of clients include the following:</p> <ul> <li>Command line interfaces</li> <li>Libraries, such as an SDK for a particular programming language</li> <li>Scripts that operates on a JSON representation of a resource after reading it   from an API</li> <li>Tools, such as a Declarative clients</li> <li>Visual UIs, such as a web application</li> </ul>"},{"location":"template/0009/#google-api","title":"Google API","text":"<p>A Network API exposed by a Google service. Most of these are hosted on the <code>googleapis.com</code> domain. It does not include other types of APIs, such as client libraries and SDKs.</p>"},{"location":"template/0009/#declarative-clients","title":"Declarative Clients","text":"<p>Declarative Clients, also known as Infrastructure as Code (IaC), describes a category of clients that consumes a markup language or code that represents resources exposed by an API, and executes the appropriate imperative actions to drive the resource to that desired state. To determine what changes to make and if a set of updates was successful a declarative client compares server side resource attributes with client defined values. The comparison feature ensures accuracy of a creation or an update but it requires services to treat the client set fields as read-only and diligently preserve those values.</p> <p>Examples of complexities that declarative clients abstract away include:</p> <ul> <li>Determining the appropriate imperative action (create / update / delete) to   achieve desired state.</li> <li>Ordering of these imperative actions.</li> </ul> <p>Terraform is an example of such a client.</p>"},{"location":"template/0009/#user","title":"User","text":"<p>A human being which is using an API directly, such as with cURL. This term is defined to differentiate usage in the AIPs between a human user and a programmatic client.</p>"},{"location":"template/0009/#network-api","title":"Network API","text":"<p>An API that operates across a network of computers. Network APIs communicate using network protocols including HTTP, and are frequently produced by organizations separate from those that consume them.</p>"},{"location":"template/0009/#changelog","title":"Changelog","text":"<ul> <li>2024-10-23: Add API Title entry</li> <li>2023-07-24: Rename IaC to Declarative Clients</li> <li>2023-04-01: Adding definition of IaC</li> <li>2023-03-24: Reformatting content to include anchor links.</li> </ul>"},{"location":"template/0100/","title":"API Design Review FAQ","text":"<p>API design review exists to ensure a simple, intuitive, and consistent API experience throughout our API corpus.</p>"},{"location":"template/0100/#do-i-need-api-design-approval","title":"Do I need API design approval?","text":"<p>TL;DR: You usually need API design approval if you are launching an API that users can code against (either now or in the future) at the beta or GA quality level.</p> <p>API design review is fundamentally about ensuring we provide a simple and consistent experience for our users, and therefore is only expected for APIs that users code directly against.</p> <p>The following flowchart illustrates whether or not your API needs to go through the design review process:</p> <pre><code>digraph {\n  node [ style=\"filled,solid\" shape=box fontname=\"Roboto\" ];\n  graph [ splines=ortho, nodesep=0.2 ];\n\n  audience [ label=\"Who should code directly\\nagainst this API?\"\n             shape=diamond fillcolor=bisque ];\n\n  subgraph audience_responses {\n    rank = \"same\";\n    node [ shape=oval fillcolor=orange ];\n\n    googlers [ label=\"Googlers\\nOnly\" fillcolor=lightcoral ];\n    public [ label=\"Anyone\" fillcolor=limegreen ];\n    partners [ label=\"Partners\\nOnly\" fillcolor=deepskyblue ];\n\n    partners -&gt; public -&gt; googlers [ style=invisible arrowhead=none ];\n  }\n\n\n  subgraph and_ever {\n    rank = \"same\";\n    node [ shape=diamond fillcolor=bisque ];\n\n    forever_partners [ label=\"Forever?\" shape=diamond fillcolor=bisque ];\n    forever_googlers [ label=\"Forever?\" shape=diamond fillcolor=bisque ];\n  }\n\n  subgraph forever_responses {\n    rank = \"same\";\n    node [ shape=oval fillcolor=orange ];\n\n    forever_partners_yes [ label=\"Yes\" fillcolor=deepskyblue ];\n    forever_no [ label=\"No, anyone\\neventually\" fillcolor=limegreen ];\n    forever_googlers_yes [ label=\"Yes\" fillcolor=lightcoral ];\n  }\n\n  release_level [ label=\"What release\\nlevel?\" shape=diamond fillcolor=bisque ];\n\n  # Not required is not in the subgraph with the other outcomes because\n  # it makes the graph much smaller if it can be higher in the image.\n\n  subgraph release_levels {\n    rank = \"same\";\n    node [ shape=oval ];\n\n    alpha [ label=\"Alpha\" fillcolor=darkorange ];\n    beta [ label=\"Beta\" fillcolor=goldenrod1 ];\n    ga [ label=\"GA\" fillcolor=limegreen ];\n\n    alpha -&gt; beta -&gt; ga [ style=invisible arrowhead=none ];\n  }\n\n  changes [ label=\"Any changes\\nfrom beta?\" shape=diamond fillcolor=bisque ];\n\n  subgraph changes_bool {\n    rank = \"same\";\n    node [ shape=oval ];\n\n    changes_yes [ label=\"Yes\" fillcolor=goldenrod1 ];\n    changes_no [ label=\"No\" fillcolor=limegreen ];\n  }\n\n  subgraph outcome {\n    rank = \"same\";\n    node [ style=\"rounded,filled\" ];\n    fyi [ label=\"FYI\" fillcolor=lightblue ];\n    recommended [ label=\"Recommended\" fillcolor=limegreen ];\n    required [ label=\"\u26a0 Required\" fillcolor=goldenrod1 ];\n    not_required\n      [ label=\"Not Required\" fillcolor=lightgrey style=\"rounded,filled\" ];\n    recommended -&gt; required -&gt; fyi -&gt; not_required\n      [style=invisible arrowhead=none];\n  }\n\n  audience -&gt; googlers [ arrowhead=none style=dashed color=grey ];\n  audience -&gt; partners [ arrowhead=none ];\n  audience -&gt; public [ arrowhead=none ];\n  partners -&gt; forever_partners;\n  googlers -&gt; forever_googlers [ style=dashed color=grey ];\n  public -&gt; release_level;\n  forever_partners -&gt; forever_partners_yes [ arrowhead=none ];\n  forever_googlers -&gt; forever_googlers_yes\n    [ arrowhead=none style=dashed color=grey ];\n  forever_partners -&gt; forever_no [ arrowhead=none ];\n  forever_googlers -&gt; forever_no [ arrowhead=none ];\n  forever_partners_yes -&gt; recommended;\n  forever_googlers_yes -&gt; not_required [ style=dashed color=grey ];\n  forever_no -&gt; release_level;\n  release_level -&gt; alpha [ arrowhead=none ];\n  release_level -&gt; beta [ arrowhead=none ];\n  release_level -&gt; ga [ arrowhead=none ];\n  alpha -&gt; recommended;\n  beta -&gt; required;\n  ga -&gt; changes;\n  changes -&gt; changes_yes [ arrowhead=none ];\n  changes -&gt; changes_no [ arrowhead=none ];\n  changes_yes -&gt; required;\n  changes_no -&gt; fyi;\n}\n</code></pre>"},{"location":"template/0100/#who-should-code-directly-against-it","title":"Who should code directly against it?","text":"<p>One of the more complex questions is, \"Who should code directly against this API?\" API design review is primarily concerned about the API's audience. This means we care about who is permitted to write their own HTTP/gRPC calls against the service, and who is able to see the documentation. (We do not care about questions such as whether the service is exposed on the public network.)</p> <p>Design review is expected if the general public is intended to read documentation and write code that interacts with the service.</p> <p>The following situations do not require design review:</p> <ul> <li>An API which will only ever be used by Googlers, or internal tools (for   example, Pantheon).</li> <li>An API which will only ever be called by an executable program released by   Google (even if the API could be reverse-engineered from the executable).</li> <li>An API which will only ever be called by a single customer or small set of   customers under contract, and which will never be made more widely   available. (Design review is still recommended in this case, but not   required.)</li> </ul>"},{"location":"template/0100/#alpha","title":"Alpha","text":"<p>For alpha, API design review is optional but recommended. It may often make sense to endeavor to get initial feedback from customers quickly, and launching an alpha can be a way of gaining data to determine the best answer to some usability questions; therefore, bypassing review may be expedient. On the other hand, launching an alpha requires building an implementation which then takes engineering effort to update if the API design review at the beta stage raises concerns. Because API design review can precede implementation work, we recommend a design review for alpha.</p>"},{"location":"template/0100/#why-is-design-review-important","title":"Why is design review important?","text":"<p>TL;DR: Product excellence.</p> <p>Our design review process exists to ensure that the APIs that we present to customers are simple, intuitive, and consistent. Your reviewer approaches your API from the standpoint of a na\u00efve user, thinks through the resources and actions that your API provides, and attempts to make the surface as accessible and extensible as possible.</p> <p>Your design reviewer is not only evaluating your API, but also checking to ensure that your API is consistent with Google's existing corpus of APIs. Many customers use multiple APIs, and therefore it is important that our conventions and naming choices line up with customer expectations.</p>"},{"location":"template/0100/#what-should-i-expect","title":"What should I expect?","text":""},{"location":"template/0100/#how-long-does-the-review-process-take","title":"How long does the review process take?","text":"<p>Reviewers make an effort to keep up with their assigned reviews and offer feedback frequently, so as not to cause unnecessary delay, but it's generally best to begin the review process early in case there are delays.</p> <p>The design review process varies based on the size and complexity of the underlying API surface:</p> <ul> <li>Incremental changes to existing APIs generally take a few days.</li> <li>Small APIs usually take around a week.</li> <li>Entirely new APIs with large surfaces tend to take no less than a week. In   cases with extraordinarily large surfaces (e.g., Cloud AutoML), reviews may   take a month or more to go through design review.</li> </ul>"},{"location":"template/0100/#how-do-reviewers-approach-my-api","title":"How do reviewers approach my API?","text":"<p>API reviewers seek to approach your API the same way that your users will, by focusing primarily on the API surface and its user-facing documentation. In an ideal world, your API reviewer will ask the types of design questions that users will ask (and nudge the API toward raising fewer of those questions in the first place).</p>"},{"location":"template/0100/#what-is-precedent","title":"What is precedent?","text":"<p>In general, we want Google APIs to be as consistent as possible. Once customers learn their first Google API, it should be easier to learn the second (and then the third, and so on) because we are using the same patterns consistently.</p> <p>We refer to precedent to mean decisions that have already been made by previous APIs, which generally should be binding upon newer APIs in similar situations. The most common example of this is naming: we have a list of standard fields that dictate how we use common terms like <code>name</code>, <code>create_time</code>, and so forth, and which also dictates that we always attach the same name to the same concept.</p> <p>Precedent also applies to patterns. All APIs should implement pagination the same way. Ditto for long-running operations, import and export, and so on. Once a pattern has been established, we seek to implement that pattern the same way wherever it is germane.</p>"},{"location":"template/0100/#what-should-i-do","title":"What should I do?","text":""},{"location":"template/0100/#if-i-have-a-launch-on-a-tight-deadline","title":"...if I have a launch on a tight deadline?","text":"<p>The best thing that you can do is to engage design review as early as possible. Additionally, make your reviewers aware of your timeline so that they are aware, and can endeavor to provide you the best possible service. We want you to make your deadline if at all possible.</p> <p>For time-sensitive alpha launches, an API may launch without receiving design review approval. Such launches must be limited to a known set of users. In this case, the reviewers will provide notes for the API team to take under consideration for subsequent stages.</p> <p>Warning: Launching an API in alpha with an incomplete design review does not enshrine that API's decisions. Design review will be required to promote the API to beta, and API reviewers will block your beta launch if there are issues.</p> <p>For launch stages after alpha, the API design review is mandatory due to its impact on user experience across the board. Your team's inconsistencies affect more than just your team.</p> <p>In some cases, there is a difficult choice to be made between product excellence and either engineering effort or deadlines. These are difficult business decisions and we understand that they are sometimes necessary; however, a director or VP must make an explicit choice to put these other concerns ahead of product excellence when choosing to bypass design review or disregard reviewers' feedback.</p>"},{"location":"template/0100/#to-make-my-review-go-faster","title":"...to make my review go faster?","text":"<p>A few tips:</p> <ul> <li>Begin API review as early as possible, and follow up frequently.</li> <li>Run the API linter beforehand. (If you are disabling the linter at any   point, explain why. Reviewers often find that the linter is disabled because   it did its job.)</li> <li>Ensure that every message, RPC, and field is usefully commented. Comments   should be in valid American English and say something meaningful.</li> <li>If your API reviewer asks you to explain something, add the explanation in   the proto comments, rather than the code review conversation. This will very   often save you a round trip.</li> </ul>"},{"location":"template/0100/#if-one-of-my-api-reviewers-is-unresponsive","title":"...if one of my API reviewers is unresponsive?","text":"<p>Reach out to the reviewer on Chat. If that fails, reach out to the other reviewer, who will coordinate accordingly. If that fails also, escalate according to AIP-1.</p>"},{"location":"template/0100/#if-i-have-a-design-question","title":"...if I have a design question?","text":"<p>The first places to look at the API style guide, the AIP index, and other public APIs within Google. Other public APIs are particularly valuable; it is common that someone has encountered a situation that is germane to your question.</p>"},{"location":"template/0100/#if-i-have-a-question-not-covered-there","title":"...if I have a question not covered there?","text":"<p>Reach out to api-design@google.com with your question.</p> <p>This generally works best when you are seeking guidance on a specific question related to API design, and when you clearly explain your use case and provide examples.</p> <p>Note: The membership of this list comprises almost exclusively volunteers, who spend the majority of their time doing something else. We do our best to be responsive, but please be patient with us.</p>"},{"location":"template/0100/#if-a-question-is-complex-and-languishing-in-a-cl","title":"...if a question is complex and languishing in a CL?","text":"<p>While the code review interface is the best way to resolve questions when practical, sometimes there are issues that are sufficiently complicated that working them out in the code review tool is not feasible. In this situation, reach out to your reviewers and ask to schedule a meeting. In general, most issues can be discussed in 30 minutes.</p> <p>When this happens, make sure that someone documents what is discussed in the CL, so that the history is preserved.</p>"},{"location":"template/0100/#if-my-api-needs-to-violate-a-standard","title":"...if my API needs to violate a standard?","text":"<p>Clearly document (using an internal comment in the proto) that you are violating an API design guideline and your rationale for doing so. This comment must be prefixed with <code>aip.dev/not-precedent</code>.</p> <p>In general, your rationale for the design guideline violation should be in accordance with one of the enumerated reasons listed in AIP-200. If it is not, work together with your API reviewer to determine the right thing to do.</p>"},{"location":"template/0100/#if-a-reviewer-is-bringing-up-a-previously-settled-issue","title":"...if a reviewer is bringing up a previously-settled issue?","text":"<p>If you have a different reviewer from your API's previous stages, this might happen. In general, the best approach is simply to reference the code review where the issue was decided. Reviewers want to avoid causing you churn, and therefore usually give deference to previous reviews. This is usually sufficient to resolve the question promptly.</p> <p>Occasionally, the reviewer may believe that the previous reviewer made a significant mistake, and that correcting it is important. In this case, you and your reviewer should work together to determine the best course of action.</p>"},{"location":"template/0100/#if-the-team-and-the-reviewers-strongly-disagree","title":"...if the team and the reviewers strongly disagree?","text":"<p>Escalate according to AIP-1.</p>"},{"location":"template/0100/#does-my-pa-or-team-have-any-particular-guidelines","title":"Does my PA or team have any particular guidelines?","text":"<p>The Cloud PA has specific guidelines to ensure additional uniformity across Cloud, and Cloud APIs have their own reviewer pool. Other teams may adopt similar (but not necessarily identical) rules and systems. Some teams that produce multiple APIs (for example, machine learning) may also have guidelines that apply to that group of APIs.</p> <p>In all cases, we endeavor to make these guidelines available as AIPs; the higher AIP numbers are reserved for specific PA and team use (see AIP-2), and these AIPs are listed in the AIP index.</p>"},{"location":"template/0111/","title":"Planes","text":"<p>Resources and methods on an API can be divided into the plane that they reside or perform operations upon. For the context of APIs, the following planes are defined:</p> <ul> <li>Management plane: a uniform, resource-oriented API that primarily   configures and allows retrieval of resources.</li> <li>Data plane: a heterogenous API (ideally resource-oriented) that reads and   write user data. Often connects to entities provisioned by the management   plane, such as virtual machines.</li> </ul> <p>The term \"plane\" was originally used in networking architecture. Although system and network architecture often defines additional planes (e.g. control plane or power planes), as the AIPs are focused on the interface, they are not defined in this AIP.</p>"},{"location":"template/0111/#guidance","title":"Guidance","text":""},{"location":"template/0111/#management-plane","title":"Management Plane","text":"<p>Management resources and methods exist primarily to provision, configure, and audit the resources that the data plane interfaces with.</p> <p>As an example, the following are considered management resources for a cloud provider:</p> <ul> <li>virtual machines</li> <li>virtual private networks</li> <li>virtual disks</li> <li>a blob store instance</li> <li>a project or account</li> </ul>"},{"location":"template/0111/#data-plane","title":"Data Plane","text":"<p>Methods on the data plane operate on user data in a variety of data formats, and generally interface with a resource provisioned via a management plane API. Examples of data plane methods include:</p> <ul> <li>writing and reading rows in a table</li> <li>pushing to or pulling from a message queue</li> <li>uploading blobs to or downloading blobs from a blob store instance</li> </ul> <p>Data plane APIs may be heterogenous across a larger API surface, due to requirements including high throughput, low latency, or the need to adhere to an existing interface specification (e.g. ANSI SQL).</p> <ul> <li>For convenience, resources and methods that operate on the data plane may expose themselves via resource-oriented management APIs. If so, those resources and methods must adhere to the requirements of the management plane as specified in the other AIPs (AIP-131 through AIP-135).</li> </ul>"},{"location":"template/0111/#major-distinctions-between-management-and-data-plane","title":"Major distinctions between management and data plane","text":"<ul> <li>Declarative clients operate on the management plane exclusively.</li> <li>Data planes are often on the critical path of user-facing functionality, and   therefore:</li> <li>Have higher availabilty requirements than management planes.</li> <li>Are more peformance-sensitive than management planes.</li> <li>Require higher-throughput than management planes.</li> </ul>"},{"location":"template/0111/#changelog","title":"Changelog","text":"<ul> <li>2023-06-10: Introduction of this AIP.</li> </ul>"},{"location":"template/0121/","title":"Resource-oriented design","text":"<p>Resource-oriented design is a pattern for specifying RPC APIs, based on several high-level design principles (most of which are common to recent public HTTP APIs):</p> <ul> <li>The fundamental building blocks of an API are individually-named resources   (nouns) and the relationships and hierarchy that exist between them.</li> <li>A small number of standard methods (verbs) provide the semantics for most   common operations. However, custom methods are available in situations where   the standard methods do not fit.</li> <li>Stateless protocol: Each interaction between the client and the server is   independent, and both the client and server have clear roles.</li> </ul> <p>Readers might notice similarities between these principles and some principles of REST; resource-oriented design borrows many principles from REST, while also defining its own patterns where appropriate.</p>"},{"location":"template/0121/#guidance","title":"Guidance","text":"<p>When designing an API, consider the following (roughly in logical order):</p> <ul> <li>The resources (nouns) the API will provide</li> <li>The relationships and hierarchies between those resources</li> <li>The schema of each resource</li> <li>The methods (verbs) each resource provides, relying as much as possible on   the standard verbs.</li> </ul>"},{"location":"template/0121/#resources","title":"Resources","text":"<p>A resource-oriented API should generally be modeled as a resource hierarchy, where each node is either a simple resource or a collection of resources.</p> <p>A collection contains resources of the same type. For example, a publisher has the collection of books that it publishes. A resource usually has fields, and resources may have any number of sub-resources (usually collections).</p> <p>Note: While there is some conceptual alignment between storage systems and APIs, a service with a resource-oriented API is not necessarily a database, and has enormous flexibility in how it interprets resources and methods. API designers should not expect that their API will be reflective of their database schema. In fact, having an API that is identical to the underlying database schema is actually an anti-pattern, as it tightly couples the surface to the underlying system.</p>"},{"location":"template/0121/#methods","title":"Methods","text":"<p>Resource-oriented APIs emphasize resources (data model) over the methods performed on those resources (functionality). A typical resource-oriented API exposes a large number of resources with a small number of methods on each resource. The methods can be either the standard methods (Get, List, Create, Update, Delete), or custom methods.</p> <p>If the request to or the response from a standard method (or a custom method in the same service) is the resource or contains the resource, the resource schema for that resource across all methods must be the same.</p> Standard method Request Response Create Contains the resource Is the resource Get None Is the resource Update Contains the resource Is the resource Delete None None List None Is the resource <p>The table above describes each standard method's relationship to the resource, where \"None\" indicates that the resource neither is nor is contained in the request or the response</p> <p>A resource must support at minimum Get: clients must be able to validate the state of resources after performing a mutation such as Create, Update, or Delete.</p> <p>A resource must also support List, except for singleton resources where more than one resource is not possible.</p> <p>Note: A custom method in resource-oriented design does not entail defining a new or custom HTTP verb. Custom methods use traditional HTTP verbs (usually <code>POST</code>) and define the custom verb in the URI.</p> <p>APIs should prefer standard methods over custom methods; the purpose of custom methods is to define functionality that does not cleanly map to any of the standard methods. Custom methods offer the same design freedom as traditional RPC APIs, which can be used to implement common programming patterns, such as database transactions, import and export, or data analysis.</p>"},{"location":"template/0121/#strong-consistency","title":"Strong Consistency","text":"<p>For methods that operate on the management plane, the completion of those operations (either successful or with an error, long-running operation, or synchronous) must mean that the state of the resource's existence and all user-settable values have reached a steady-state.</p> <p>output only values unrelated to the resource state should also have reached a steady-state for values that are related to the resource state.</p> <p>Examples include:</p> <ul> <li>Following a successful create that is the latest mutation on a resource, a get   request for a resource must return the resource.</li> <li>Following a successful update that is the latest mutation on a resource, a get   request for a resource must return the final values from the update   request.</li> <li>Following a successful delete that is the latest mutation on a resource, a get   request for a resource must return <code>NOT_FOUND</code> (or the resource with the   <code>DELETED</code> state value in the case of soft delete)</li> </ul> <p>Clients of resource-oriented APIs often need to orchestrate multiple operations in sequence (e.g. create resource A, create resource B which depends on A), and ensuring that resources immediately reflect steady user state after an operation is complete ensures clients can rely on method completion as a signal to begin the next operation.</p> <p>output only fields ideally would follow the same guidelines, but as these fields can often represent a resources live state, it's sometimes necessary for these values to change after a successful mutation operation to reflect a state change.</p>"},{"location":"template/0121/#stateless-protocol","title":"Stateless protocol","text":"<p>As with most public APIs available today, resource-oriented APIs must operate over a stateless protocol: The fundamental behavior of any individual request is independent of other requests made by the caller. This is to say, each request happens in isolation of other requests made by that client or another, and resources exposed by an API are directly addressable without needing to apply a series of specific requests to \"reach\" the desired resource.</p> <p>In an API with a stateless protocol, the server has the responsibility for persisting data, which may be shared between multiple clients, while clients have sole responsibility and authority for maintaining the application state.</p>"},{"location":"template/0121/#cyclic-references","title":"Cyclic References","text":"<p>The relationship between resources, such as with resource references, must be representable via a directed acyclic graph. The parent-child relationship also must be acyclic, and as per AIP-124 a given resource instance will only have one canonical parent resource.</p> <p>A cyclic relationship between resources increases the complexity of managing resources. Consider resources A and B that refer to each other. The process to create said resources are:</p> <ol> <li>create resource A without a reference to B. Retrieve id for resource A.</li> <li>create resource B with a reference to A. Retrieve id for resource B.</li> <li>update resource A with the reference to B.</li> </ol> <p>The delete operation may also become more complex, due to reasoning about which resource must be dereferenced first for a successful deletion.</p> <p>This requirement does not apply to relationships that are expressed via output only fields, as they do not require the user to specify the values and in turn do not increase resource management complexity.</p>"},{"location":"template/0121/#changelog","title":"Changelog","text":"<ul> <li>2024-07-08: Clarify acyclic nature of parent-child relationship.</li> <li>2023-08-24: Added guidance on consistency guarantees of methods.</li> <li>2023-07-23: Clarify stateless protocol definition.</li> <li>2023-01-21: Explicitly require matching schema across standard methods.</li> <li>2022-12-19: Added a section requiring Get and List.</li> <li>2022-11-02: Added a section restricting resource references.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0122/","title":"Resource names","text":"<p>Most APIs expose resources (their primary nouns) which users are able to create, retrieve, and manipulate. Additionally, resources are named: each resource has a unique identifier that users use to reference that resource, and these names are what users should store as the canonical names for the resources.</p>"},{"location":"template/0122/#guidance","title":"Guidance","text":"<p>All resource names defined by an API must be unique within that API. (See the section on full resource names below for more information on referring to resources across APIs.)</p> <p>Resource names are formatted according to the URI path schema, but without the leading slash:</p> <pre><code>publishers/123/books/les-miserables\nusers/vhugo1802\n</code></pre> <ul> <li>Resource name components should usually alternate between collection   identifiers (example: <code>publishers</code>, <code>books</code>, <code>users</code>) and resource IDs   (example: <code>123</code>, <code>les-miserables</code>, <code>vhugo1802</code>).</li> <li>Resource names must use the <code>/</code> character to separate individual segments   of the resource name.</li> <li>Non-terminal segments of a resource name must not contain a <code>/</code>     character.</li> <li>The terminal segment of a resource name should not contain a <code>/</code>     character.</li> <li>Resource names should only use characters available in DNS names, as   defined by RFC-1123.</li> <li>Additionally, resource IDs should not use upper-case letters.</li> <li>If additional characters are necessary, resource names should not use     characters that require URL-escaping, or characters outside of ASCII.</li> <li>If Unicode characters can not be avoided, resource names must be stored     in Normalization Form C (see AIP-210).</li> <li>Resources must expose a <code>name</code> field that contains its resource name.</li> <li>Resources may provide the resource ID as a separate field (e.g.     <code>book_id</code>). This field must apply the     <code>OUTPUT_ONLY</code> field behavior classification.</li> <li>Resources may expose a separate, system-generated unique ID field     (<code>uid</code>). This field must apply the     <code>OUTPUT_ONLY</code> field behavior classification.</li> <li>Resources must not expose tuples, self-links, or other forms of     resource identification.</li> <li>All ID fields should be strings.</li> </ul> <p>Note: Resource names as described here are used within the scope of a single API (or else in situations where the owning API is clear from the context), and are only required to be unique within that scope. For this reason, they are sometimes called relative resource names to distinguish them from full resource names (discussed below).</p>"},{"location":"template/0122/#collection-identifiers","title":"Collection identifiers","text":"<p>The collection identifier segments in a resource name must be the plural form of the noun used for the resource. (For example, a collection of <code>Publisher</code> resources is called <code>publishers</code> in the resource name.)</p> <ul> <li>Collection identifiers must be concise American English terms.</li> <li>Collection identifiers must be in <code>camelCase</code>.</li> <li>Collection identifiers must begin with a lower-cased letter and contain   only ASCII letters and numbers (<code>/[a-z][a-zA-Z0-9]*/</code>).</li> <li>Collection identifiers must be plural.</li> <li>In situations where there is no plural word (\"info\"), or where the singular     and plural terms are the same (\"moose\"), the non-pluralized (singular) form     is correct. Collection segments must not \"coin\" words by adding \"s\" in     such cases (e.g, avoid \"infos\").</li> <li>Within any given single resource name, collection identifiers must be   unique. (e.g. <code>people/xyz/people/abc</code> is invalid)</li> </ul>"},{"location":"template/0122/#nested-collections","title":"Nested collections","text":"<p>If a resource name contains multiple levels of a hierarchy, and a parent collection's name is used as a prefix for the child resource's name, the child collection's name may omit the prefix. For example, given a collection of <code>UserEvent</code> resources that would normally be nested underneath <code>users</code>:</p> <pre><code>users/vhugo1802/userEvents/birthday-dinner-226\n</code></pre> <p>An API should use the less-redundant form:</p> <pre><code>users/vhugo1802/events/birthday-dinner-226\n</code></pre> <p>In this situation, the message and resource type are still called <code>UserEvent</code>; only the collection and resource identifiers in the pattern(s) are  shortened. Since the resource type is not shortened, the <code>singular</code> and <code>plural</code> are similarly not shortened.</p> <pre><code>message UserEvent {\n  option (google.api.resource) = {\n    type: \"example.googleapis.com/UserEvent\"\n    // Only the collection &amp; resource identfiers in the `pattern` are shortened.    \n    pattern: \"projects/{project}/users/{user}/events/{event}\"\n    singular: \"userEvent\"\n    plural: \"userEvents\"\n  };\n\n  string name = 1;\n}\n</code></pre> <p>Note: APIs wishing to do this must follow this format consistently throughout all of its <code>pattern</code> entries defined and anywhere else the resource is referenced in the API, or else not at all.</p>"},{"location":"template/0122/#resource-id-segments","title":"Resource ID segments","text":"<p>A resource ID segment identifies the resource within its parent collection. In the resource name <code>publishers/123/books/les-miserables</code>, <code>123</code> is the resource ID for the publisher, and <code>les-miserables</code> is the resource ID for the book.</p> <ul> <li>If resource IDs are user-specified, the API must document allowed   formats. User-specified resource IDs should conform to RFC-1034;   which restricts to letters, numbers, and hyphen, with the first character   a letter, the last a letter or a number, and a 63 character maximum.</li> <li>Additionally, user-specified resource IDs should restrict letters to     lower-case (<code>^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$</code>).</li> <li>Characters outside of ASCII should not be permitted; however, if     Unicode characters are necessary, APIs must follow guidance in     AIP-210.</li> <li>User-specified IDs should not be permitted to be a UUID (or any value     that syntactically appears to be a UUID).</li> <li>If resource IDs are not user-settable, the API should document the   basic format, and any upper boundaries (for example, \"at most 63   characters\").</li> <li>For more information, see the create standard method.</li> </ul>"},{"location":"template/0122/#resource-id-aliases","title":"Resource ID aliases","text":"<p>It is sometimes valuable to provide an alias for common lookup patterns for resource IDs. For example, an API with <code>users</code> at the top of its resource hierarchy may wish to provide <code>users/me</code> as a shortcut for retrieving information for the authenticated user.</p> <p>APIs may provide programmatic aliases for common lookup patterns. However, all data returned from the API must use the canonical resource name.</p>"},{"location":"template/0122/#full-resource-names","title":"Full resource names","text":"<p>In most cases, resource names are used within a single API only, or else they are used in contexts where the owning API is clear (for example, <code>string pubsub_topic</code>).</p> <p>However, sometimes it is necessary for services to refer to resources in an arbitrary API. In this situation, the service should use the full resource name, a schemeless URI with the owning API's service name, followed by the relative resource name:</p> <pre><code>//library.googleapis.com/publishers/123/books/les-miserables\n//calendar.googleapis.com/users/vhugo1802\n</code></pre> <p>Note: The full resource name should not be used for cross-API references where the owning API is clear; it is only used if a field refers to resources in multiple APIs where ambiguity is possible.</p>"},{"location":"template/0122/#resource-uris","title":"Resource URIs","text":"<p>The full resource name is a schemeless URI, but slightly distinct from the full URIs we use to access a resource. The latter includes the protocol (HTTPS), the API version, and the specific service endpoint to target:</p> <pre><code>https://library.googleapis.com/v1/publishers/123/books/les-miserables\nhttps://calendar.googleapis.com/v3/users/vhugo1802\n</code></pre> <p>The version is not included in the full resource name because the full resource name is expected to persist from version to version. Even though the API surface may change between major versions, multiple major versions of the same API are expected to use the same underlying data.</p> <p>Note: The correlation between the full resource name and the service's endpoint is by convention. In particular, one service is able to have multiple endpoints (example use cases include regionalization, MTLS, and private access), and the full resource name does not change between these.</p>"},{"location":"template/0122/#fields-representing-resource-names","title":"Fields representing resource names","text":"<p>When defining a resource, the first field should be the resource name, which must be of type <code>string</code> and must be called <code>name</code> for the resource name. The message should include a <code>google.api.resource</code> annotation declaring the type (see AIP-123 for more on this).</p> <pre><code>// A representation of a book in the library.\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The resource name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // Other fields...\n}\n</code></pre> <p>When defining a method that retrieves or acts on an already-existing resource (such as <code>GetBook</code> or <code>ArchiveBook</code>), the first field of the request message should be the resource name, which must be of type <code>string</code> and must be called <code>name</code> for the resource name. The field should also be annotated with the <code>google.api.resource_reference</code> annotation, referencing the resource type (AIP-123).</p> <pre><code>// Request message for ArchiveBook\nmessage ArchiveBookRequest {\n  // The book to archive.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // Other fields...\n}\n</code></pre> <p>Note: Fields must not be called <code>name</code> except for this purpose. For other use cases, either use a different term or prepend an adjective (for example: <code>display_name</code>).</p>"},{"location":"template/0122/#fields-representing-a-resources-parent","title":"Fields representing a resource's parent","text":"<p>When defining a method that retrieves resources from a collection or adds a new resource to a collection (such as <code>ListBooks</code> or <code>CreateBook</code>), the first field of the request message should be of type <code>string</code> and should be called <code>parent</code> for the resource name of the collection. The <code>parent</code> field should also be annotated with the <code>google.api.resource_reference</code> annotation, referencing the parent's resource type (AIP-123).</p> <pre><code>// Request message for ListBooks.\nmessage ListBooksRequest {\n  // The publisher to list books from.\n  // Format: publishers/{publisher_id}\n  string parent = 1 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Publisher\"\n  }];\n\n  // Other fields (e.g. page_size, page_token, filter, etc.)...\n}\n</code></pre> <p>If there is more than one possible parent type, the <code>parent</code> field should be annotated with the <code>child_type</code> key on <code>google.api.resource_reference</code> instead:</p> <pre><code>// Request message for ListBooks.\nmessage ListBooksRequest {\n  // The parent to list books from.\n  // Format:\n  //   - publishers/{publisher_id}\n  //   - authors/{author_id}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // Other fields (e.g. page_size, page_token, filter, etc.)...\n}\n</code></pre> <p>Note: Fields should not be called <code>parent</code> except for this purpose. For other use cases, use a synonymous term if possible.</p>"},{"location":"template/0122/#fields-representing-another-resource","title":"Fields representing another resource","text":"<p>When a field represents another resource, the field should be of type <code>string</code> and accept the resource name of the other resource. The field name should be equivalent to the corresponding message's name in snake case.</p> <ul> <li>Field names may include a leading adjective if appropriate (such as   <code>string dusty_book</code>).</li> <li>Field names should not use the <code>_name</code> suffix unless the field would be   ambiguous without it (e.g., <code>crypto_key_name</code>)</li> <li>Fields representing another resource should provide the   <code>google.api.resource_reference</code> annotation with the resource type being   referenced.</li> <li>If using the resource name is not possible and using the ID component alone is strictly necessary, the field should use an <code>_id</code> suffix (e.g. <code>shelf_id</code>).</li> </ul> <p>The field should not be of type <code>message</code> using the <code>message</code> that implements the resource, except for one of following conditions:</p> <ul> <li>The API is internal-only, has tight lifecycle relationships, and has a   permission model that enables inherited access to embedded resources.</li> <li>The embedding of the resource is done as part of the AIP-162 revisions   pattern.</li> </ul> <p>Example of a resource reference:</p> <pre><code>// A representation of a book in a library.\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // Name of the book.\n  // Format is `publishers/{publisher}/books/{book}`\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The shelf where the book currently sits.\n  // Format is `shelves/{shelf}`.\n  string shelf = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Shelf\"\n  }];\n\n  // Other fields...\n}\n</code></pre>"},{"location":"template/0122/#further-reading","title":"Further reading","text":"<ul> <li>For evolving resource names over time, see   AIP-180.</li> <li>For resource types, see AIP-123.</li> </ul>"},{"location":"template/0122/#rationale","title":"Rationale","text":""},{"location":"template/0122/#using-names-instead-of-ids","title":"Using names instead of IDs","text":"<p>For any large system, there are many kinds of resources. To use simple resource IDs to identify a resource, we'd actually need use a resource-specific tuple to reliably identify it, such as <code>(bucket, object)</code> or <code>(user, album, photo)</code>. This creates several issues:</p> <ul> <li>Developers have to understand and remember such anonymous tuples.</li> <li>Passing tuples is generally harder than passing strings.</li> <li>Centralized infrastructures, such as logging and access control systems,   don't understand specialized tuples.</li> <li>Specialized tuples limit API design flexibility, such as providing   reusable API interfaces. For example,   Long Running Operations can work with many other API interfaces   because they use flexible resource names.</li> </ul>"},{"location":"template/0122/#standardizing-on-name","title":"Standardizing on <code>name</code>","text":"<p>The concept of resource names is not a new one, and is formalized in Uniform Resource Names (URN) in conjunction with Uniform Resource Identifiers (URI) and Uniform Resource Locators (URL). Considering that the term \"name\" is so heavily overloaded in general, usage outside of a very well-defined meaning would be confusing for developers. So, the field name <code>name</code> is reserved in the context of AIP-compliant APIs so as to eliminate any confusion with resource names, and force other would be \"name\" fields to use a more specific field name.</p>"},{"location":"template/0122/#disallow-embedding-of-resources","title":"Disallow embedding of resources","text":"<p>Using a resource message directly as the type of a field within another resource is problematic for a number of reasons, which are as follows:</p> <ul> <li>Complicates the resource lifecycle: If the dependency resource is   deleted, what happens to the embedded reference in the dependent resource?   Data retention and clean up operations will be significantly complicated.</li> <li>Bypasses permissions: If every resource has its own set of permissions, a user   with read permission on the dependent resource that doesn't have the same   permission on the dependency resource suddenly cannot see the full resource.</li> <li>Tightly couples resources in all aspects: Changing the requirements in the   schema, permissions, or otherwise for either resource impacts the other,   significantly increasing complexity of roll outs.</li> </ul> <p>Referencing by name, as is recommended, eliminates all of this complexity by preventing resource data duplication, and forcing the owning service to be involved in the resolution of the reference (via Standard Methods), guaranteeing isolation of logical concerns per-resource.</p>"},{"location":"template/0122/#changelog","title":"Changelog","text":"<ul> <li>2024-10-15: Add some rationale we found for use of <code>name</code> as a field and   instead of IDs as an identifier.</li> <li>2024-06-14: Clarify resource annotation shortening rules for nested   collections.</li> <li>2023-09-19: Prohibit duplicate collection identifiers.</li> <li>2023-09-01: Add a clause that allows embedding for revision resource   messages.</li> <li>2023-08-10: Explicitly disallow embedding resource messages in a resource.</li> <li>2023-03-24: Correction: full resource name contains the service name rather   than the service endpoint</li> <li>2023-03-17: Add <code>OUTPUT_ONLY</code> guidance for resource ID fields.</li> <li>2020-10-06: Added declarative-friendly guidance, and tightened character   set restrictions.</li> <li>2020-10-05: Clarified when full resource names are used.</li> <li>2020-05-19: Clarified that resource IDs avoid capital characters, not   the entire resource name.</li> <li>2020-04-27: Tighten the restriction on valid characters.</li> <li>2019-12-05: Added guidance for resource annotations.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership. Also changed the final   example from a Pub/Sub example to the usual Book example.</li> <li>2019-07-30: Changed the nested collection brevity suggestion from \"may\"   to \"should\"</li> </ul>"},{"location":"template/0123/","title":"Resource types","text":"<p>Most APIs expose resources (their primary nouns) which users are able to create, retrieve, and manipulate. APIs are allowed to name their resource types reasonably freely (within the requirements of this AIP), and are only required to ensure uniqueness within that API. This means that it is possible (and often desirable) for different APIs to use the same type name. For example, a Memcache and Redis API would both want to use <code>Instance</code> as a type name.</p> <p>When mapping the relationships between APIs and their resources, however, it becomes important to have a single, globally-unique type name. Additionally, tools such as Kubernetes or GraphQL interact with APIs from multiple providers.</p>"},{"location":"template/0123/#terminology","title":"Terminology","text":"<p>In the guidance below, we use the following terms:</p> <ul> <li>Service Name: This is the name defined in the service configuration.   This usually (but not necessarily) matches the hostname that users use to   call the service. Example: <code>pubsub.googleapis.com</code>. This is equivalent to an   API Group in Kubernetes.</li> <li>Type: This is the name used for the type within the API. This should   match the name of the protobuf message. This is equivalent to an Object in   Kubernetes.</li> </ul>"},{"location":"template/0123/#guidance","title":"Guidance","text":"<p>APIs must define a resource type for each resource in the API, according to the following pattern: <code>{Service Name}/{Type}</code>. The type name must:</p> <ul> <li>Start with an uppercase letter.</li> <li>Only contain alphanumeric characters.</li> <li>Be of the singular form of the noun.</li> <li>Use PascalCase (UpperCamelCase).</li> </ul>"},{"location":"template/0123/#examples","title":"Examples","text":"<p>Examples of resource types include:</p> <ul> <li><code>pubsub.googleapis.com/Topic</code></li> <li><code>pubsub.googleapis.com/Subscription</code></li> <li><code>spanner.googleapis.com/Database</code></li> <li><code>spanner.googleapis.com/Instance</code></li> <li><code>networking.istio.io/Instance</code></li> </ul>"},{"location":"template/0123/#annotating-resource-types","title":"Annotating resource types","text":"<p>APIs should annotate the resource types for each resource in the API using the <code>google.api.resource</code> annotation:</p> <pre><code>// A representation of a Pub/Sub topic.\nmessage Topic {\n  option (google.api.resource) = {\n    type: \"pubsub.googleapis.com/Topic\"\n    pattern: \"projects/{project}/topics/{topic}\"\n    singular: \"topic\"\n    plural: \"topics\"\n  };\n\n  // Name and other fields...\n}\n</code></pre> <ul> <li>Patterns must correspond to the resource name.</li> <li>Pattern variables (the segments within braces) must use <code>snake_case</code>, and   must not use an <code>_id</code> suffix.</li> <li>Pattern variables must conform to the format <code>[a-z][_a-z0-9]*[a-z0-9]</code>.</li> <li>Pattern variables must be unique within any given pattern. (e.g.   <code>projects/{abc}/topics/{abc}</code> is invalid; this is usually a natural   corollary of collection identifiers being unique within a pattern.)</li> <li>Resources with multiple patterns must   preserve ordering: new patterns must be added at the end of the list, and   existing patterns must not be removed or re-ordered, as this breaks client   library backward compatibility.</li> <li>Singular must be the lower camel case of the type.</li> <li>Pattern variables must be the singular form of the resource type e.g.     a pattern variable representing a <code>Topic</code> resource ID is named <code>{topic}</code>.</li> <li>Plural must be the lower camel case plural of the singular.</li> <li>Pattern collection identifier segments must match the plural of the     resources, except in the case of nested collections.</li> </ul>"},{"location":"template/0123/#pattern-uniqueness","title":"Pattern uniqueness","text":"<p>When multiple patterns are defined within a resource, these patterns must be mutually unique, where uniqueness is defined as being by-character identical once all resource ID path segments have been removed, leaving all <code>/</code> separators.</p> <p>Therefore the following two patterns must not be defined within the same resource:</p> <ul> <li><code>user/{user}</code></li> <li><code>user/{user_part_1}~{user_part_2}</code></li> </ul>"},{"location":"template/0123/#rationale","title":"Rationale","text":""},{"location":"template/0123/#singular-and-plural","title":"Singular and Plural","text":"<p>Well-defined singular and plurals of a resource enable clients to determine the proper name to use in code and documentation.</p> <p>lowerCamelCase can be translated into other common forms of a resource name such as UpperCamelCase and snake_case.</p>"},{"location":"template/0123/#changelog","title":"Changelog","text":"<ul> <li>2024-08-07: Added multi-pattern ordering compatibility requirements.</li> <li>2023-09-19: Prohibited duplicate pattern variables.</li> <li>2023-05-06: Added requirement of singular and plural.</li> <li>2023-01-28: Clarified guidance for the resource type name.</li> <li>2022-10-28: Added pattern variable format guidance.</li> <li>2020-05-14: Added pattern uniqueness.</li> <li>2019-12-05: Added guidance on patterns.</li> <li>2019-07-17: Fleshed out the annotation example somewhat.</li> </ul>"},{"location":"template/0124/","title":"Resource association","text":"<p>APIs sometimes have resource hierarchies that can not be cleanly expressed in the usual tree structure. For example, a resource may have a many-to-one relationship with two other resource types instead of just one. Alternatively, a resource may have a many-to-many relationship with another resource type.</p>"},{"location":"template/0124/#guidance","title":"Guidance","text":"<p>A resource must have at most one canonical parent, and <code>List</code> requests must not require two distinct \"parents\" to work.</p>"},{"location":"template/0124/#multiple-many-to-one-associations","title":"Multiple many-to-one associations","text":"<p>If a resource has a many-to-one relationship with multiple resource types, it must choose at most one of them to be the canonical parent. The resource may be associated with other resources through other fields on the resource.</p> <pre><code>message Book {\n  // The resource name pattern for Book indicates that Publisher is the\n  // canonical parent.\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The resource name for the book.\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The resource name for the book's author.\n  string author = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Author\"\n  }];\n}\n</code></pre> <p>When listing resources with multiple associations in this way, the RPC must treat the <code>string parent</code> field as required as discussed in AIP-132, and must not add additional required arguments. The RPC should include a <code>string filter</code> field that allows users to filter by other resource associations as discussed in AIP-160.</p> <p>Note: Resource reference fields must accept the same resource name format that is used in the <code>name</code> field of the referenced resource.</p>"},{"location":"template/0124/#many-to-many-associations","title":"Many-to-many associations","text":"<p>Many-to-many associations are less common in APIs than they are in relational databases, in part because they are more difficult to model and present over network interfaces.</p> <p>An API may contain many-to-many relationships, and should use a repeated field containing a list of resource names, following the principles described for repeated fields in AIP-144.</p> <pre><code>message Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The resource names for the book's authors.\n  repeated string authors = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Author\"\n  }];\n}\n</code></pre> <p>Note: See AIP-144 for more information on repeated fields, including how to handle common issues such as atomic changes.</p> <p>If the use of a repeated field is too restrictive, or if more metadata is required along with the association, an API may model a many-to-many relationship using a sub-resource with two one-to-many associations.</p> <pre><code>message BookAuthor {\n  // The resource pattern for BookAuthor indicates that Book is the\n  // canonical parent.\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/BookAuthor\"\n    pattern: \"publishers/{publisher}/books/{book}/authors/{book_author}\"\n  };\n\n  // The resource name for the book-author association.\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The resource name for the author.\n  string author = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Author\"\n  }];\n\n  // Other fields...\n}\n</code></pre> <p>Note: Using subresources to model an association between resources is only recommended if additional metadata is required in the relationship, or if the restrictions around the use of a repeated field preclude the use of that approach.</p>"},{"location":"template/0124/#changelog","title":"Changelog","text":"<ul> <li>2021-04-07: Clarified that resource reference fields accept resource   names with the same format as the <code>name</code> field of the resource.</li> </ul>"},{"location":"template/0126/","title":"Enumerations","text":"<p>It is common for a field to only accept or provide a discrete and limited set of values. In these cases, it can be useful to use enumerations (generally abbreviated \"enums\") in order to clearly communicate what the set of allowed values are.</p>"},{"location":"template/0126/#guidance","title":"Guidance","text":"<p>APIs may expose enum objects for sets of values that are expected to change infrequently:</p> <pre><code>// A representation of a book.\nmessage Book {\n  // Other fields...\n\n  // Possible formats in which the book may be published.\n  enum Format {\n    // Default value. This value is unused.\n    FORMAT_UNSPECIFIED = 0;\n\n    // The printed format, in hardback.\n    HARDBACK = 1;\n\n    // The printed format, in paperback.\n    PAPERBACK = 2;\n\n    // An electronic book format.\n    EBOOK = 3;\n\n    // An audio recording.\n    AUDIOBOOK = 4;\n  }\n\n  // The format of the book.\n  Format format = 99;\n\n  // Other fields...\n}\n</code></pre> <ul> <li>All enum values must use <code>UPPER_SNAKE_CASE</code>.</li> <li>The first value of the enum should be the name of the enum itself   followed by the suffix <code>_UNSPECIFIED</code>.</li> <li>An exception to this rule is if there is a clearly useful zero value. In     particular, if an enum needs to present an <code>UNKNOWN</code>, it is usually clearer     and more useful for it to be a zero value rather than having both.</li> <li>Enums which will only be used in a single message should be nested within that message.    In this case, the enum should be declared immediately before it is used.</li> <li>The non-zero values of such a nested enum definition should not be prefixed by the name      of the enum itself. This generally requires users to write <code>MyState.MYSTATE_ACTIVE</code> in their      code, which is unnecessarily verbose.</li> <li>Enums which will be used by multiple messages should be defined at the package level and    should be defined at the bottom of the proto file (see AIP-191).</li> <li>Some languages (including C++) hoist enum values into the parent namespace, which can result      in conflicts for enums with the same values in the same proto package. To avoid sharing values,      APIs should prefix package-level enum values with the name of the enum. </li> <li>Enums should document whether the enum is frozen or they expect to add   values in the future.</li> </ul>"},{"location":"template/0126/#when-to-use-enums","title":"When to use enums","text":"<p>Enums can be more accessible and readable than strings or booleans in many cases, but they do add overhead when they change. Therefore, enums should receive new values infrequently. While the definition of \"infrequently\" may change based on individual use cases, a good rule of thumb is no more than once a year. For enums that change frequently, the API should use a string and document the format.</p> <p>Additionally, enums should not be used when there is a competing, widely-adopted standard representation (such as with language codes or media types).</p> <p>Note: If an enumerated value needs to be shared across APIs, an enum may be used, but the assignment between enum values and their corresponding integers must match.</p>"},{"location":"template/0126/#alternatives","title":"Alternatives","text":"<p>For enumerated values where the set of allowed values changes frequently, APIs should use a <code>string</code> field instead, and must document the allowed values. String fields with enumerated values should use <code>kebab-case</code> for their values.</p> <p>For enumerated values where there is a competing, widely-adopted standard representation (generally, but not necessarily, a string), that standard representation should be used. This is true even if only a small subset of values are permitted, because using enums in this situation often leads to frustrating lookup tables when trying to use multiple APIs together.</p> <p>Boolean fields may be used in situations where it is clear that no further flexibility will be needed. The default value must be <code>false</code>.</p> <p>Note: When using protocol buffers, it is impossible to distinguish between <code>false</code> and unset. If this is a requirement, an enum may be a better design choice (although <code>google.protobuf.BoolValue</code> is also available).</p>"},{"location":"template/0126/#further-reading","title":"Further reading","text":"<ul> <li>For states, a special type of enum, see AIP-216.</li> </ul>"},{"location":"template/0127/","title":"HTTP and gRPC Transcoding","text":"<p>APIs that follow resource-oriented design are defined using RPCs, but the resource-oriented design framework allows them to also be presented as APIs that largely follow REST/JSON conventions. This is important in order to help developers use their existing knowledge: over 80% of the public APIs available follow most REST conventions, and developers are accustomed to that pattern.</p>"},{"location":"template/0127/#guidance","title":"Guidance","text":"<p>APIs must provide HTTP definitions for each RPC that they define, except for bi-directional streaming RPCs, which can not be natively supported using HTTP/1.1. When providing a bi-directional streaming method, an API should also offer an alternative method that does not rely on bi-directional streaming.</p>"},{"location":"template/0127/#http-method-and-path","title":"HTTP method and path","text":"<p>When using protocol buffers, each RPC must define the HTTP method and path using the <code>google.api.http</code> annotation:</p> <pre><code>rpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n}\n\nmessage CreateBookRequest {\n  // The publisher who will publish this book.\n  // When using HTTP/JSON, this field is automatically populated based\n  // on the URI, because of the `{parent=publishers/*}` syntax.\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The book to create.\n  // When using HTTP/JSON, this field is populated based on the HTTP body,\n  // because of the `body: \"book\"` syntax.\n  Book book = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // The user-specified ID for the book.\n  // When using HTTP/JSON, this field is populated based on a query string\n  // argument, such as `?bookId=foo`. This is the fallback for fields that\n  // are not included in either the URI or the body.\n  // Note that clients use camelCase format to communicate the field names\n  // to the service.\n  string book_id = 3;\n}\n</code></pre> <ul> <li>The first key (<code>post</code> in this example) corresponds to the HTTP method. RPCs   may use <code>get</code>, <code>post</code>, <code>patch</code>, or <code>delete</code>.</li> <li>RPCs must use the prescribed HTTP verb for each standard method, as     discussed in AIP-131, AIP-132, AIP-133, AIP-134, and     AIP-135</li> <li>RPCs should use the prescribed HTTP verb for custom methods, as     discussed in AIP-136.</li> <li>RPCs should not use <code>put</code> or <code>custom</code>.</li> <li>The corresponding value represents the URI.</li> <li>URIs must use the <code>{foo=bar/*}</code> syntax to represent a variable that     should be populated in the request proto. When extracting a resource     name, the variable must include the entire resource name, not     just the ID component.</li> <li>URIs may use nested fields for their variable names. (Additionally,     AIP-134 mandates this for <code>Update</code> requests.)</li> <li>URIs must use the <code>*</code> character to represent ID components, which     matches all URI-safe characters except for <code>/</code>. URIs may use <code>**</code> as     the final segment of a URI if matching <code>/</code> is required.</li> <li>The <code>body</code> key defines which single top-level field in the request will be   sent as the HTTP body. If the body is <code>*</code>, then this indicates that the   request object itself is the HTTP body. The request body is encoded as JSON   as defined by protocol buffers' canonical JSON encoding.</li> <li>RPCs must not define a <code>body</code> at all for RPCs that use the <code>GET</code> or     <code>DELETE</code> HTTP verbs.</li> <li>RPCs must use the prescribed <code>body</code> for Create (AIP-133) and Update     (AIP-134) requests.</li> <li>RPCs should use the prescribed <code>body</code> for custom methods (AIP-136).</li> <li>The <code>body</code> must not contain a nested field (or use the <code>.</code> character),</li> <li>The <code>body</code> must not be the same as a URI parameter.</li> <li>The <code>body</code> must not be a <code>repeated</code> field.</li> <li>Fields should not use the <code>json_name</code> annotation to alter the field     name in JSON, unless doing so for backwards-compatibility reasons.</li> </ul> <p>Note: Bi-directional streaming RPCs should not include a <code>google.api.http</code> annotation at all. If feasible, the service should provide non-streaming equivalent RPCs.</p>"},{"location":"template/0127/#multiple-uri-bindings","title":"Multiple URI bindings","text":"<p>Occasionally, an RPC needs to correspond to more than one URI:</p> <pre><code>rpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n    additional_bindings: {\n      post: \"/v1/{parent=authors/*}/books\"\n      body: \"book\"\n    }\n    additional_bindings: {\n      post: \"/v1/books\"\n      body: \"book\"\n    }\n  };\n}\n</code></pre> <ul> <li>RPCs may define any number of additional bindings. The structure is   identical to the <code>google.api.http</code> annotation (in fact, it is a recursive   reference).</li> <li>RPCs must not define an additional binding within an additional binding.</li> <li>The <code>body</code> clause must be identical in the top-level annotation and each   additional binding.</li> </ul>"},{"location":"template/0127/#changelog","title":"Changelog","text":"<ul> <li>2022-08-18: Added the comment that query string parameter names are   in camelCase.</li> <li>2021-01-06: Added clarification around <code>body</code> and nested fields.</li> <li>2019-09-23: Added a statement about request body encoding, and guidance   discouraging <code>json_name</code>.</li> </ul>"},{"location":"template/0128/","title":"Declarative-friendly interfaces","text":"<p>Many services need to interact with common DevOps tools, particularly those that create and manage network-addressable resources (such as virtual machines, load balancers, database instances, and so on). These tools revolve around the principle of \"configuration as code\": the user specifies the complete intended landscape, and tooling is responsible for making whatever changes are necessary to achieve the user's specification.</p> <p>These tools are declarative: rather than specifying specific actions to take, they specify the desired outcome, with the actions being derived based on the differences between the current landscape and the intended one.</p> <p>Furthermore, there are numerous popular DevOps tools, with more being introduced each year. Integrating hundreds of resource types with multiple tools requires uniformity, so that integration can be automated.</p>"},{"location":"template/0128/#guidance","title":"Guidance","text":""},{"location":"template/0128/#resources","title":"Resources","text":"<p>Resources that are declarative-friendly must use only strongly-consistent standard methods for managing resource lifecycle, which allows tools to support these resources generically, as well as conforming to other declarative-friendly guidance (see further reading).</p> <p>Declarative-friendly resources should designate that they follow the declarative-friendly style:</p> <pre><code>message Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n    style: DECLARATIVE_FRIENDLY\n  };\n\n  // Name and other fields...\n}\n</code></pre>"},{"location":"template/0128/#reconciliation","title":"Reconciliation","text":"<p>If a resource takes time (more than a few seconds) for updates to be realized, the resource should include a <code>bool reconciling</code> field to disclose that changes are in flight. This field must be output only.</p> <p>A resource must set the <code>reconciling</code> field to <code>true</code> if the current state of the resource does not match the user's intended state, and the system is working to reconcile them. This is regardless of whether the root cause of going into reconciliation was user or system action.</p> <p>Note: Services responding to a <code>GET</code> request must return the resource's current state (not the intended state).</p>"},{"location":"template/0128/#further-reading","title":"Further reading","text":"<p>A significant amount of guidance is more strict for declarative-friendly interfaces, due to the focus on automation on top of these resources. This list is a comprehensive reference to declarative-friendly guidance in other AIPs:</p> <ul> <li>Resources should not employ custom methods: see AIP-136.</li> <li>Resources must use the <code>Update</code> method for repeated fields: see AIP-144.</li> <li>Resources must include certain standard fields: see AIP-148.</li> <li>Resources must have an <code>etag</code> field: see AIP-154.</li> <li>Resources should provide change validation: see AIP-163.</li> <li>Resources should not implement soft-delete. If the id cannot be re-used,   the resource must implement soft-delete and the undelete RPC: see AIP-164</li> </ul>"},{"location":"template/0128/#annotations","title":"Annotations","text":"<p>See AIP-148 annotations.</p>"},{"location":"template/0128/#changelog","title":"Changelog","text":"<ul> <li>2023-07-13: Move <code>annotations</code> from AIP-148.</li> <li>2023-06-17: Definition of plane was removed and incorporated into AIP-111.</li> <li>2023-05-11: Removed must on resource_id, which was upstreamed to a general   must.</li> </ul>"},{"location":"template/0129/","title":"Server-Modified Values and Defaults","text":"<p>Services often provide default values for resource fields, and occasionally normalize the user input before returning it in the response. The guidance herein describes how services document such behavior for the benefit of consumers.</p>"},{"location":"template/0129/#guidance","title":"Guidance","text":""},{"location":"template/0129/#single-owner-fields","title":"Single Owner Fields","text":"<p>Fields must have a single owner, whether that is the client or the server. Server owned fields must be indicated with the <code>OUTPUT_ONLY</code> field_behavior. All other types of fields must be considered to be owned by the client. The server must respect the value (or lack thereof) for all client owned fields and not modify them.</p>"},{"location":"template/0129/#effective-values","title":"Effective Values","text":"<p>There are instances where a service will allocate, generate, or calculate a value if the client chooses not to specify one. For example: a client creates a virtual machine without specifying a static IP address for the virtual machine to be available on. Such a scenario is opting into dynamic IP address allocation.</p> <p>Some examples of these types of fields are ones that are:</p> <ul> <li>generated (UUID)</li> <li>allocated (dynamic IP address)</li> <li>assigned (most recent software package version)</li> </ul> <p>An attribute with an effective value must be expressed as two fields in the API:</p> <ul> <li>a mutable field that can be optionally set by the user and must not be modified by the service</li> <li>an <code>OUTPUT_ONLY</code> field that records the effective value decided on by the service</li> </ul> <p>Example: <pre><code>message VirtualMachine {\n  \u2026\n  string ip_address = 4;\n  string effective_ip_address = 5 [\n    (google.api.field_behavior) = OUTPUT_ONLY\n  ];\n}\n</code></pre></p>"},{"location":"template/0129/#naming","title":"Naming","text":"<p>Effective values must be named by prefixing <code>effective_</code> to the mutable field's name.</p>"},{"location":"template/0129/#user-specified-fields","title":"User-Specified Fields","text":"<p>For user-specified fields, the value in response from the service must be the same as provided by the create or update request. For string fields this means returning the value unchanged, with one exception: </p> <ul> <li>When a string field has a data type annotation, a normalized string that   represents the given value may be returned.</li> </ul>"},{"location":"template/0129/#normalizations","title":"Normalizations","text":"<p>A field that is normalized by the service must be annotated with the <code>google.api.field_info</code> extension. See (AIP-202) for guidance on using this extension The allowed set of normalizations includes the following formats:</p> <ul> <li>uuid</li> <li>ipv4</li> <li>ipv6</li> <li>email</li> </ul> <p>Normalizations on fields must be described using the <code>google.api.field_info</code> annotation.</p>"},{"location":"template/0129/#rationale","title":"Rationale","text":"<p>Server-modified and default values often make it harder to implement declarative clients. These clients are often unable to tell when their desired state matches the current state for these fields, as the rules by which a server may modify and return values are complex, not public, and not repeatable.</p>"},{"location":"template/0129/#rationale-for-single-owner-fields","title":"Rationale for Single Owner Fields","text":"<p>When fields do not have a single owner they can cause issues for declarative clients. These clients may attempt to set values for fields that are overwritten by server set values, leading to the client entering an infinite loop to correct the change.</p>"},{"location":"template/0129/#rationale-for-naming","title":"Rationale for Naming","text":"<p>Consistent naming is important for identifying standard behavior across APIs and fields. Programmatic association between user-specified and effective values depends on consistent naming.</p>"},{"location":"template/0129/#rationale-for-normalizations","title":"Rationale for Normalizations","text":"<p>Normalizations are important to allow services to store and return values in a standard way while communicating to clients what changes are semantically identical. Normalizing a value on the service side allows the service to accept a wider range of semantically identical inputs without needing to maintain every value as a raw string. Surfacing the normalization that is being applied to clients allows for client side comparison of sent and retrieved values to check for differences.</p> <p>For example, in a resource that accepts an email address on a particular field a client may specify a given email address in a variety of ways. For the email <code>ada@example.com</code> a client may choose to specify <code>ADA@example.com</code>, <code>aDa@example.com</code>, or <code>AdA@example.com</code>. These are semantically identical and should all be accepted by the service. The service then may choose to normalize the email address for storage and retrieval through downcasing or canonicalization. Importantly, the information surfaced to clients on the normalization of a field will not describe the normalization algorithm itself, but instead the comparison method used to accurately compute if two values should be considered equal.</p>"},{"location":"template/0129/#rationale-for-field-value-handling","title":"Rationale for Field Value Handling","text":"<p>For fields not using an allowed normalization, Declarative clients will not be able to identify which changes are semantically meaningful. When a Declarative client sends a particular value it will ensure that the value is being returned by the service to validate it was set correctly.</p>"},{"location":"template/0129/#changelog","title":"Changelog","text":"<ul> <li>2023-10-31: Update to approved.</li> </ul>"},{"location":"template/0130/","title":"Methods","text":"<p>An API is composed of one or more methods, which represent a specific operation that a service can perform on behalf of the consumer.</p>"},{"location":"template/0130/#guidance","title":"Guidance","text":""},{"location":"template/0130/#categories-of-methods","title":"Categories of Methods","text":"<p>The following enumerates multiple categories of methods that exist, often grouped up under some object (e.g. collection or resource) that the method operates upon.</p> Category Name Related AIPs Declarative client integration CLI / UI integration SDK integration Standard Methods Standard collection methods: operate on a collection of resources (List or Create). AIP-121, AIP-132, AIP-133 automatable automatable automatable Standard resource methods: fetch or mutate a single resource (Get, Update, Delete). AIP-121, AIP-131, AIP-134, AIP-135 automatable automatable automatable Batch resource methods: fetch or mutate multiple resources in a collection by name. AIP-231, AIP-233, AIP-234, AIP-235 may be used to optimize queries automatable automatable Aggregated list methods: fetch or mutate multiple resources of the same type across multiple collections. AIP-159 not useful nor automatable automatable automatable Custom Fetch Methods Custom collection fetch methods: fetch information across a collection that cannot be expressed via a standard method. AIP-136 handwritten automatable automatable Custom resource fetch methods: fetch information for a single resource that cannot be expressed via a standard method. AIP-136 handwritten automatable automatable Custom Mutation Methods Backing up a resource: storing a copy of a resource at a particular point in time. AIP-162 unused or handwritten automatable automatable Restoring a resource: setting a resource to a version from a particular point in time. AIP-162 unused or handwritten automatable automatable Renaming a resource: modify the resource's name or id while preserving configuration and data. AIP-136 unused or handwritten automatable automatable Custom collection mutation methods: perform an imperative operation referencing a collection that may mutate one or more resources within that collection in fashion that cannot be easily achieved by standard methods (e.g. state transitions). AIP-136 unused or handwritten automatable automatable Custom resource mutation methods: perform an imperative operation on a resource that may mutate it in a way a standard method cannot (e.g. state transitions). AIP-136 unused or handwritten automatable automatable Misc Custom Methods Stateless Methods: a method that has no permanent effect on any data within the API (e.g. translating text) AIP-136 unused or handwritten automatable automatable None of the above Streaming methods: methods that communicate via client, server, or bi-directional streams. handwritten handwritten automatable"},{"location":"template/0130/#choosing-a-method-category","title":"Choosing a method category","text":"<p>While designing a method, API authors should choose from the defined categories in the following order:</p> <ol> <li>Standard methods (on collections and resources)</li> <li>Standard batch or aggregate methods</li> <li>Custom methods (on collections, resources, or stateless)</li> <li>Streaming methods</li> </ol>"},{"location":"template/0130/#rationale","title":"Rationale","text":"<p>Resource-oriented standard and custom methods are recommended first, as they can be expressed in the widest variety of clients (Declarative clients, CLIs, UIs, and so on), and offer the most uniform experience that allows users to apply their knowledge of one API to another.</p> <p>If a standard method is unsuitable, then custom methods (that are mounted to a resource or collection) offer a lesser, but still valuable level of consistency, helping the user reason about the scope of the action and the object whose configuration is read to inform that action. Although mutative custom methods are not uniform enough to have a automated integration with exclusively resource-oriented clients such as Declarative clients, they are still a pattern that can easily recognized by CLIs, UIs, and SDKs.</p> <p>If one cannot express their APIs in a resource-oriented fashion at all, then the operation falls in a category where the lack of uniformity makes it difficult for any client aside from SDKs to model the operation. This category is preferred last due to the fact that a user cannot rely on their knowledge of similar APIs, as well as the issue that integration with many clients will likely have to be hand-written.</p>"},{"location":"template/0130/#changelog","title":"Changelog","text":"<ul> <li>2023-09-05: Update to approved.</li> </ul>"},{"location":"template/0131/","title":"Standard methods: Get","text":"<p>In REST APIs, it is customary to make a <code>GET</code> request to a resource's URI (for example, <code>/v1/publishers/{publisher}/books/{book}</code>) in order to retrieve that resource.</p> <p>Resource-oriented design (AIP-121) honors this pattern through the <code>Get</code> method. These RPCs accept the URI representing that resource and return the resource.</p>"},{"location":"template/0131/#guidance","title":"Guidance","text":"<p>APIs must provide a get method for resources. The purpose of the get method is to return data from a single resource.</p> <p>Get methods are specified using the following pattern:</p> <pre><code>rpc GetBook(GetBookRequest) returns (Book) {\n  option (google.api.http) = {\n    get: \"/v1/{name=publishers/*/books/*}\"\n  };\n  option (google.api.method_signature) = \"name\";\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Get</code>. The remainder of the RPC   name should be the singular form of the resource's message name.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message must be the resource itself. (There is no   <code>GetBookResponse</code>.)</li> <li>The response should usually include the fully-populated resource unless     there is a reason to return a partial response (see AIP-157).</li> <li>The HTTP verb must be <code>GET</code>.</li> <li>The URI should contain a single variable field corresponding to the   resource name.</li> <li>This field should be called <code>name</code>.</li> <li>The URI should have a variable corresponding to this field.</li> <li>The <code>name</code> field should be the only variable in the URI path. All     remaining parameters should map to URI query parameters.</li> <li>There must not be a <code>body</code> key in the <code>google.api.http</code> annotation.</li> <li>There should be exactly one <code>google.api.method_signature</code> annotation,   with a value of <code>\"name\"</code>.</li> </ul>"},{"location":"template/0131/#request-message","title":"Request message","text":"<p>Get methods implement a common request message pattern:</p> <pre><code>message GetBookRequest {\n  // The name of the book to retrieve.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n</code></pre> <ul> <li>A resource name field must be included. It should be called <code>name</code>.</li> <li>The field should be annotated as required.</li> <li>The field must identify the resource type that it     references.</li> <li>The comment for the <code>name</code> field should document the resource pattern.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in   another AIP.</li> </ul> <p>Note: The <code>name</code> field in the request object corresponds to the <code>name</code> variable in the <code>google.api.http</code> annotation on the RPC. This causes the <code>name</code> field in the request to be populated based on the value in the URL when the REST/JSON interface is used.</p>"},{"location":"template/0131/#errors","title":"Errors","text":"<p>See errors, in particular when to use PERMISSION_DENIED and NOT_FOUND errors.</p>"},{"location":"template/0131/#changelog","title":"Changelog","text":"<ul> <li>2023-03-17: Align with AIP-122 and make Get a must.</li> <li>2022-11-04: Aggregated error guidance to AIP-193.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-06-08: Added guidance on returning the full resource.</li> <li>2019-10-18: Added guidance on annotations.</li> <li>2019-08-12: Added guidance for error cases.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-05-29: Added an explicit prohibition on arbitrary fields in standard   methods.</li> </ul>"},{"location":"template/0132/","title":"Standard methods: List","text":"<p>In many APIs, it is customary to make a <code>GET</code> request to a collection's URI (for example, <code>/v1/publishers/1/books</code>) in order to retrieve a list of resources, each of which lives within that collection.</p> <p>Resource-oriented design (AIP-121) honors this pattern through the <code>List</code> method. These RPCs accept the parent collection (and potentially some other parameters), and return a list of responses matching that input.</p>"},{"location":"template/0132/#guidance","title":"Guidance","text":"<p>APIs must provide a <code>List</code> method for resources unless the resource is a singleton. The purpose of the <code>List</code> method is to return data from a finite collection (generally singular unless the operation supports reading across collections).</p> <p>List methods are specified using the following pattern:</p> <pre><code>rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {\n  option (google.api.http) = {\n    get: \"/v1/{parent=publishers/*}/books\"\n  };\n  option (google.api.method_signature) = \"parent\";\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>List</code>. The remainder of the RPC   name should be the plural form of the resource being listed.</li> <li>The request and response messages must match the RPC name, with   <code>Request</code> and <code>Response</code> suffixes.</li> <li>The HTTP verb must be <code>GET</code>.</li> <li>The collection whose resources are being listed should map to the URI   path.</li> <li>The collection's parent resource should be called <code>parent</code>, and     should be the only variable in the URI path. All remaining parameters     should map to URI query parameters.</li> <li>The collection identifier (<code>books</code> in the above example) must be a     literal string.</li> <li>The <code>body</code> key in the <code>google.api.http</code> annotation must be omitted.</li> <li>If the resource being listed is not a top-level resource, there should   be exactly one <code>google.api.method_signature</code> annotation, with a value of   <code>\"parent\"</code>. If the resource being listed is a top-level resource, there   should be either no <code>google.api.method_signature</code> annotation, or exactly   one <code>google.api.method_signature</code> annotation, with a value of <code>\"\"</code>.</li> </ul>"},{"location":"template/0132/#request-message","title":"Request message","text":"<p>List methods implement a common request message pattern:</p> <pre><code>message ListBooksRequest {\n  // The parent, which owns this collection of books.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The maximum number of books to return. The service may return fewer than\n  // this value.\n  // If unspecified, at most 50 books will be returned.\n  // The maximum value is 1000; values above 1000 will be coerced to 1000.\n  int32 page_size = 2;\n\n  // A page token, received from a previous `ListBooks` call.\n  // Provide this to retrieve the subsequent page.\n  //\n  // When paginating, all other parameters provided to `ListBooks` must match\n  // the call that provided the page token.\n  string page_token = 3;\n}\n</code></pre> <ul> <li>A <code>parent</code> field must be included unless the resource being listed is a   top-level resource. It should be called <code>parent</code>.</li> <li>The field should be annotated as required.</li> <li>The field must identify the resource type of the resource     being listed.</li> <li>The <code>page_size</code> and <code>page_token</code> fields, which support pagination, must   be specified on all list request messages. For more information, see   AIP-158.</li> <li>The comment above the <code>page_size</code> field should document the maximum     allowed value, as well as the default value if the field is omitted (or set     to <code>0</code>). If preferred, the API may state that the server will use a     sensible default. This default may change over time.</li> <li>If a user provides a value greater than the maximum allowed value, the API     should coerce the value to the maximum allowed.</li> <li>If a user provides a negative or other invalid value, the API must send     an <code>INVALID_ARGUMENT</code> error.</li> <li>The <code>page_token</code> field must be included on all list request messages.</li> <li>The request message may include fields for common design patterns   relevant to list methods, such as <code>string filter</code> and <code>string order_by</code>.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> </ul> <p>Note: List methods should return the same results for any user that has permission to make a successful List request on the collection. Search methods are more relaxed on this.</p>"},{"location":"template/0132/#response-message","title":"Response message","text":"<p>List methods implement a common response message pattern:</p> <pre><code>message ListBooksResponse {\n  // The books from the specified publisher.\n  repeated Book books = 1;\n\n  // A token, which can be sent as `page_token` to retrieve the next page.\n  // If this field is omitted, there are no subsequent pages.\n  string next_page_token = 2;\n}\n</code></pre> <ul> <li>The response message must include one repeated field corresponding to the   resources being returned, and should not include any other repeated   fields unless described in another AIP (for example, AIP-217).</li> <li>The response should usually include fully-populated resources unless     there is a reason to return a partial response (see AIP-157).</li> <li>The <code>next_page_token</code> field, which supports pagination, must be included   on all list response messages. It must be set if there are subsequent   pages, and must not be set if the response represents the final page. For   more information, see AIP-158.</li> <li>The message may include a <code>int32 total_size</code> (or <code>int64 total_size</code>)   field with the number of items in the collection.</li> <li>The value may be an estimate (the field should clearly document     this if so).</li> <li>If filtering is used, the <code>total_size</code> field should reflect the size of     the collection after the filter is applied.</li> </ul>"},{"location":"template/0132/#ordering","title":"Ordering","text":"<p><code>List</code> methods may allow clients to specify sorting order; if they do, the request message should contain a <code>string order_by</code> field.</p> <ul> <li>Values should be a comma separated list of fields. For example:   <code>\"foo,bar\"</code>.</li> <li>The default sorting order is ascending. To specify descending order for a   field, users append a <code>\" desc\"</code> suffix; for example: <code>\"foo desc, bar\"</code>.</li> <li>Redundant space characters in the syntax are insignificant.   <code>\"foo, bar desc\"</code>, <code>\" foo , bar desc \"</code>, and <code>\"foo,bar desc\"</code> are all   equivalent.</li> <li>Subfields are specified with a <code>.</code> character, such as <code>foo.bar</code> or   <code>address.street</code>.</li> </ul> <p>Note: Only include ordering if there is an established need to do so. It is always possible to add ordering later, but removing it is a breaking change.</p>"},{"location":"template/0132/#filtering","title":"Filtering","text":"<p>List methods may allow clients to specify filters; if they do, the request message should contain a <code>string filter</code> field. Filtering is described in more detail in AIP-160.</p> <p>Note: Only include filtering if there is an established need to do so. It is always possible to add filtering later, but removing it is a breaking change.</p>"},{"location":"template/0132/#soft-deleted-resources","title":"Soft-deleted resources","text":"<p>Some APIs need to \"soft delete\" resources, marking them as deleted or pending deletion (and optionally purging them later).</p> <p>APIs that do this should not include deleted resources by default in list requests. APIs with soft deletion of a resource should include a <code>bool show_deleted</code> field in the list request that, if set, will cause soft-deleted resources to be included.</p>"},{"location":"template/0132/#errors","title":"Errors","text":"<p>See errors, in particular when to use PERMISSION_DENIED and NOT_FOUND errors.</p>"},{"location":"template/0132/#further-reading","title":"Further reading","text":"<ul> <li>For details on pagination, see AIP-158.</li> <li>For listing across multiple parent collections, see AIP-159.</li> </ul>"},{"location":"template/0132/#changelog","title":"Changelog","text":"<ul> <li>2023-03-22: Fix guidance wording to mention AIP-159.</li> <li>2023-03-17: Align with AIP-122 and make Get a must.</li> <li>2022-11-04: Aggregated error guidance to AIP-193.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-09-02: Add link to the filtering AIP.</li> <li>2020-08-14: Added error guidance for permission denied cases.</li> <li>2020-06-08: Added guidance on returning the full resource.</li> <li>2020-05-19: Removed requirement to document ordering behavior.</li> <li>2020-04-15: Added guidance on List permissions.</li> <li>2019-10-18: Added guidance on annotations.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-07-30: Added guidance about documenting the ordering behavior.</li> <li>2019-05-29: Added an explicit prohibition on arbitrary fields in standard   methods.</li> </ul>"},{"location":"template/0133/","title":"Standard methods: Create","text":"<p>In REST APIs, it is customary to make a <code>POST</code> request to a collection's URI (for example, <code>/v1/publishers/{publisher}/books</code>) in order to create a new resource within that collection.</p> <p>Resource-oriented design (AIP-121) honors this pattern through the <code>Create</code> method. These RPCs accept the parent collection and the resource to create (and potentially some other parameters), and return the created resource.</p>"},{"location":"template/0133/#guidance","title":"Guidance","text":"<p>APIs should generally provide a create method for resources unless it is not valuable for users to do so. The purpose of the create method is to create a new resource in an already-existing collection.</p> <p>Create methods are specified using the following pattern:</p> <pre><code>rpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n  option (google.api.method_signature) = \"parent,book\";\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Create</code>. The remainder of the   RPC name should be the singular form of the resource being created.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message must be the resource itself. There is no   <code>CreateBookResponse</code>.</li> <li>The response should include the fully-populated resource, and must     include any fields that were provided unless they are input only (see     AIP-203).</li> <li>If the create RPC is long-running, the response     message must be a <code>google.longrunning.Operation</code> which resolves to the     resource itself.</li> <li>The HTTP verb must be <code>POST</code>.</li> <li>The collection where the resource is being added should map to the URI   path.</li> <li>The collection's parent resource should be called <code>parent</code>, and     should be the only variable in the URI path.</li> <li>The collection identifier (<code>books</code> in the above example) must be     a literal string.</li> <li>There must be a <code>body</code> key in the <code>google.api.http</code> annotation, and it   must map to the resource field in the request message.</li> <li>All remaining fields should map to URI query parameters.</li> <li>There should be exactly one <code>google.api.method_signature</code> annotation,   with a value of <code>\"parent,{resource},{resource}_id\"</code>, or \"<code>\"parent,{resource}\"</code>   if the resource ID is not required.</li> <li>If the API is operating on the management plane, the operation should have   strong consistency: the completion of a create operation must mean   that all user-settable values and the existence of the resource have reached a   steady-state and reading resource state returns a consistent response.</li> </ul>"},{"location":"template/0133/#request-message","title":"Request message","text":"<p>Create methods implement a common request message pattern:</p> <pre><code>message CreateBookRequest {\n  // The parent resource where this book will be created.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The ID to use for the book, which will become the final component of\n  // the book's resource name.\n  //\n  // This value should be 4-63 characters, and valid characters\n  // are /[a-z][0-9]-/.\n  string book_id = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // The book to create.\n  Book book = 3 [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A <code>parent</code> field must be included unless the resource being created is a   top-level resource. It should be called <code>parent</code>.</li> <li>The field should be annotated as required.</li> <li>The field must identify the resource type of the resource     being created.</li> <li>A <code>{resource}_id</code> field must be included for management plane resources,   and should be included for data plane resources.</li> <li>The resource field must be included and must map to the POST body.</li> <li>The request message must not contain any other required fields and   should not contain other optional fields except those described in this   or another AIP.</li> </ul>"},{"location":"template/0133/#long-running-create","title":"Long-running create","text":"<p>Some resources take longer to create a resource than is reasonable for a regular API request. In this situation, the API should use a long-running operation (AIP-151) instead:</p> <pre><code>rpc CreateBook(CreateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n</code></pre> <ul> <li>The response type must be set to the resource (what the return type would   be if the RPC was not long-running).</li> <li>Both the <code>response_type</code> and <code>metadata_type</code> fields must be specified.</li> </ul> <p>Important: Declarative-friendly resources (AIP-128) should use long-running operations. The service may return an LRO that is already set to done if the request is effectively immediate.</p>"},{"location":"template/0133/#user-specified-ids","title":"User-specified IDs","text":"<p>An API must allow a user to specify the ID component of a resource (the last segment of the resource name) on creation if the API is operating on the management plane.</p> <p>On the data plane, an API should allow a user to specify the ID. Exceptional cases should have the following behavior:</p> <ul> <li>The data plane resource allows identical records without a need to   disambiguate between the two (e.g. rows in a table with no primary key).</li> <li>The data plane resource will not be exposed in Declarative clients.</li> </ul> <p>An API may allow the <code>{resource}_id</code> field have the field_behavior <code>OPTIONAL</code>, and generate a system-generated ID if one is not specified.</p> <p>For example:</p> <pre><code>// Using user-specified IDs.\npublishers/lacroix/books/les-miserables\n\n// Using system-generated IDs.\npublishers/012345678-abcd-cdef/books/12341234-5678-abcd\n</code></pre> <ul> <li>The <code>{resource}_id</code> field must exist on the request message, not the   resource itself.</li> <li>The field may be required or optional. If it is required, it should     include the corresponding annotation.</li> <li>The <code>name</code> field on the resource must be ignored.</li> <li>There should be exactly one <code>google.api.method_signature</code> annotation on   the RPC, with a value of <code>\"parent,{resource},{resource}_id\"</code> if the resource   being created is not a top-level resource, or with a value of   <code>\"{resource},{resource}_id\"</code> if the resource being created is a top-level   resource.</li> <li>The documentation should explain what the acceptable format is, and the   format should follow the guidance for resource name formatting in   AIP-122.</li> <li>If a user tries to create a resource with an ID that would result in a   duplicate resource name, the service must error with <code>ALREADY_EXISTS</code>.</li> <li>However, if the user making the call does not have permission to see the     duplicate resource, the service must error with <code>PERMISSION_DENIED</code>     instead.</li> </ul> <p>Note: For REST APIs, the user-specified ID field, <code>{resource}_id</code>, is provided as a query parameters on the request URI.</p>"},{"location":"template/0133/#errors","title":"Errors","text":"<p>See errors, in particular when to use PERMISSION_DENIED and NOT_FOUND errors.</p>"},{"location":"template/0133/#further-reading","title":"Further reading","text":"<ul> <li>For ensuring idempotency in <code>Create</code> methods, see AIP-155.</li> <li>For naming resources involving Unicode, see AIP-210.</li> </ul>"},{"location":"template/0133/#rationale","title":"Rationale","text":""},{"location":"template/0133/#requiring-user-specified-ids","title":"Requiring user-specified ids","text":"<p>Declarative clients use the resource ID as a way to identify a resource for applying updates and for conflict resolution. The lack of a user-specified ID means a client is unable to find the resource unless they store the identifier locally, and can result in re-creating the resource. This in turn has a downstream effect on all resources that reference it, forcing them to update to the ID of the newly-created resource.</p> <p>Having a user-specified ID also means the client can precalculate the resource name and use it in references from other resources.</p>"},{"location":"template/0133/#changelog","title":"Changelog","text":"<ul> <li>2023-10-20: Clarify that {resource}_id is only required for management plane resources.</li> <li>2023-08-24: Adding consistency requirement.</li> <li>2023-05-11: Changing guidance around resource_id to a must.</li> <li>2022-11-04: Referencing aggregated error guidance in AIP-193, similar to   other CRUDL AIPs.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-10-06: Added declarative-friendly guidance.</li> <li>2020-08-14: Updated error guidance to use permission denied over   forbidden.</li> <li>2020-06-08: Added guidance on returning the full resource.</li> <li>2019-11-22: Added clarification on what error to use if a duplicate name   is sent.</li> <li>2019-10-18: Added guidance on annotations.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-06-10: Added guidance for long-running create.</li> <li>2019-05-29: Added an explicit prohibition on arbitrary fields in standard   methods.</li> </ul>"},{"location":"template/0134/","title":"Standard methods: Update","text":"<p>In REST APIs, it is customary to make a <code>PATCH</code> or <code>PUT</code> request to a resource's URI (for example, <code>/v1/publishers/{publisher}/books/{book}</code>) in order to update that resource.</p> <p>Resource-oriented design (AIP-121) honors this pattern through the <code>Update</code> method (which mirrors the REST <code>PATCH</code> behavior). These RPCs accept the URI representing that resource and return the resource.</p>"},{"location":"template/0134/#guidance","title":"Guidance","text":"<p>APIs should generally provide an update method for resources unless it is not valuable for users to do so. The purpose of the update method is to make changes to the resources without causing side effects.</p> <p>Update methods are specified using the following pattern:</p> <pre><code>rpc UpdateBook(UpdateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    patch: \"/v1/{book.name=publishers/*/books/*}\"\n    body: \"book\"\n  };\n  option (google.api.method_signature) = \"book,update_mask\";\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Update</code>. The remainder of the   RPC name should be the singular form of the resource's message name.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message must be the resource itself. (There is no   <code>UpdateBookResponse</code>.)</li> <li>The response should include the fully-populated resource, and must     include any fields that were sent and included in the update mask unless     they are input only (see AIP-203).</li> <li>If the update RPC is long-running, the response     message must be a <code>google.longrunning.Operation</code> which resolves to the     resource itself.</li> <li>The method should support partial resource update, and the HTTP verb   should be <code>PATCH</code>.</li> <li>If the method will only ever support full resource replacement, then the     HTTP verb may be <code>PUT</code>. However, this is strongly discouraged because     it becomes a backwards-incompatible change to add fields to the resource.</li> <li>The resource's <code>name</code> field should map to the URI path.</li> <li>The <code>{resource}.name</code> field should be the only variable in the URI     path.</li> <li>There must be a <code>body</code> key in the <code>google.api.http</code> annotation, and it   must map to the resource field in the request message.</li> <li>All remaining fields should map to URI query parameters.</li> <li>There should be exactly one <code>google.api.method_signature</code> annotation, with   a value of <code>\"{resource},update_mask\"</code>.</li> <li>If the API is operating on the management plane, the operation should have   strong consistency: the completion of an update operation must mean   that all user-settable values and the existence of the resource have reached a   steady-state and reading resource state returns a consistent response.</li> </ul> <p>Note: Unlike the other four standard methods, the URI path here references a nested field (<code>book.name</code>) in the example. If the resource field has a word separator, <code>snake_case</code> is used.</p>"},{"location":"template/0134/#request-message","title":"Request message","text":"<p>Update methods implement a common request message pattern:</p> <pre><code>message UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to update.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to update.\n  google.protobuf.FieldMask update_mask = 2;\n}\n</code></pre> <ul> <li>The request message must contain a field for the resource.</li> <li>The field must map to the <code>PATCH</code> body.</li> <li>The field should be annotated as required.</li> <li>A <code>name</code> field must be included in the resource message. It should     be called <code>name</code>.</li> <li>The field must identify the [resource type][aip-123] of the resource     being updated.</li> <li>If partial resource update is supported, a field mask must be included.   It must be of type <code>google.protobuf.FieldMask</code>, and it must be   called <code>update_mask</code>.</li> <li>The fields used in the field mask correspond to the resource being updated     (not the request message).</li> <li>The field must be optional, and the service must treat an omitted     field mask as an implied field mask equivalent to all fields that are     populated (have a non-empty value).</li> <li>Update masks must support a special value <code>*</code>, meaning full replacement     (the equivalent of <code>PUT</code>).</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> </ul>"},{"location":"template/0134/#side-effects","title":"Side effects","text":"<p>In general, update methods are intended to update the data within the resource. Update methods should not trigger other side effects. Instead, side effects should be triggered by custom methods.</p> <p>In particular, this entails that state fields must not be directly writable in update methods.</p>"},{"location":"template/0134/#patch-and-put","title":"PATCH and PUT","text":"<p>TL;DR: Google APIs generally use the <code>PATCH</code> HTTP verb only, and do not support <code>PUT</code> requests.</p> <p>We standardize on <code>PATCH</code> because Google updates stable APIs in place with backwards-compatible improvements. It is often necessary to add a new field to an existing resource, but this becomes a breaking change when using <code>PUT</code>.</p> <p>To illustrate this, consider a <code>PUT</code> request to a <code>Book</code> resource:</p> <pre><code>PUT /v1/publishers/123/books/456\n\n{\"title\": \"Mary Poppins\", \"author\": \"P.L. Travers\"}\n</code></pre> <p>Next consider that the resource is later augmented with a new field (here we add <code>rating</code>):</p> <pre><code>message Book {\n  string title = 1;\n  string author = 2;\n\n  // Subsequently added to v1 in place...\n  int32 rating = 3;\n}\n</code></pre> <p>If a rating is set on a book and the existing <code>PUT</code> request was executed, it would wipe out the book's rating. In essence, a <code>PUT</code> request unintentionally wiped out data because the previous version did not know about it.</p>"},{"location":"template/0134/#long-running-update","title":"Long-running update","text":"<p>Some resources take longer to update a resource than is reasonable for a regular API request. In this situation, the API should use a long-running operation (AIP-151) instead:</p> <pre><code>rpc UpdateBook(UpdateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    patch: \"/v1/{book.name=publishers/*/books/*}\"\n    body: \"book\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n</code></pre> <ul> <li>The response type must be set to the resource (what the return type would   be if the RPC was not long-running).</li> <li>Both the <code>response_type</code> and <code>metadata_type</code> fields must be specified.</li> </ul> <p>Note: Declarative-friendly resources (AIP-128) should use long-running update.</p>"},{"location":"template/0134/#create-or-update","title":"Create or update","text":"<p>If the service uses client-assigned resource names, <code>Update</code> methods may expose a <code>bool allow_missing</code> field, which will cause the method to succeed in the event that the user attempts to update a resource that is not present (and will create the resource in the process):</p> <pre><code>message UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to be updated.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to be updated.\n  google.protobuf.FieldMask update_mask = 2;\n\n  // If set to true, and the book is not found, a new book will be created.\n  // In this situation, `update_mask` is ignored.\n  bool allow_missing = 3;\n}\n</code></pre> <p>More specifically, the <code>allow_missing</code> flag triggers the following behavior:</p> <ul> <li>If the method call is on a resource that does not exist, the resource is   created. All fields are applied regardless of any provided field mask.</li> <li>However, if any required fields are missing or fields have invalid values,     an <code>INVALID_ARGUMENT</code> error is returned.</li> <li>If the method call is on a resource that already exists, and all fields   match, the existing resource is returned unchanged.</li> <li>If the method call is on a resource that already exists, only fields declared   in the field mask are updated.</li> </ul> <p>The user must have the update permissions to call <code>Update</code> even with <code>allow_missing</code> set to <code>true</code>. For customers that want to prevent users from creating resources using the update method, IAM conditions should be used.</p>"},{"location":"template/0134/#etags","title":"Etags","text":"<p>An API may sometimes need to allow users to send update requests which are guaranteed to be made against the most current data (a common use case for this is to detect and avoid race conditions). Resources which need to enable this do so by including a <code>string etag</code> field, which contains an opaque, server-computed value representing the content of the resource.</p> <p>In this situation, the resource should contain a <code>string etag</code> field:</p> <pre><code>message Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The resource name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The title of the book.\n  // Example: \"Mary Poppins\"\n  string title = 2;\n\n  // The author of the book.\n  // Example: \"P.L. Travers\"\n  string author = 3;\n\n  // The etag for this book.\n  // If this is provided on update, it must match the server's etag.\n  string etag = 4;\n}\n</code></pre> <p>The <code>etag</code> field may be either required or optional. If it is set, then the request must succeed if and only if the provided etag matches the server-computed value, and must fail with an <code>ABORTED</code> error otherwise. The <code>update_mask</code> field in the request does not affect the behavior of the <code>etag</code> field, as it is not a field being updated.</p>"},{"location":"template/0134/#expensive-fields","title":"Expensive fields","text":"<p>APIs sometimes encounter situations where some fields on a resource are expensive or impossible to reliably return.</p> <p>This can happen in a few situations:</p> <ul> <li>A resource may have some fields that are very expensive to compute, and that   are generally not useful to the customer on update requests.</li> <li>A single resource sometimes represents an amalgamation of data from multiple   underlying (and eventually consistent) data sources. In these situations, it   is impossible to return authoritative information on the fields that were not   changed.</li> </ul> <p>In this situation, an API may return back only the fields that were updated, and omit the rest, and should document this behavior if they do so.</p>"},{"location":"template/0134/#errors","title":"Errors","text":"<p>See errors, in particular when to use PERMISSION_DENIED and NOT_FOUND errors.</p> <p>In addition, if the user does have proper permission, but the requested resource does not exist, the service must error with <code>NOT_FOUND</code> (HTTP 404) unless <code>allow_missing</code> is set to <code>true</code>.</p>"},{"location":"template/0134/#changelog","title":"Changelog","text":"<ul> <li>2024-03-14: Make <code>update_mask</code> optional field_behaviour guidance a must.</li> <li>2023-08-26: Adding consistency requirement.</li> <li>2023-07-17: Make <code>update_mask</code> name guidance a must.</li> <li>2022-11-04: Aggregated error guidance to AIP-193.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2021-11-04: Changed the permission check if <code>allow_missing</code> is set.</li> <li>2021-07-08: Added error guidance for resource not found case.</li> <li>2021-03-05: Changed the etag error from <code>FAILED_PRECONDITION</code> (which   becomes HTTP 400) to <code>ABORTED</code> (409).</li> <li>2020-10-06: Added guidance for declarative-friendly resources.</li> <li>2020-10-06: Added guidance for <code>allow_missing</code>.</li> <li>2020-08-14: Added error guidance for permission denied cases.</li> <li>2020-06-08: Added guidance on returning the full resource.</li> <li>2019-10-18: Added guidance on annotations.</li> <li>2019-09-10: Added a link to the long-running operations AIP   ([AIP-151][]).</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-06-10: Added guidance for long-running update.</li> <li>2019-05-29: Added an explicit prohibition on arbitrary fields in standard   methods.</li> </ul>"},{"location":"template/0135/","title":"Standard methods: Delete","text":"<p>In REST APIs, it is customary to make a <code>DELETE</code> request to a resource's URI (for example, <code>/v1/publishers/{publisher}/books/{book}</code>) in order to delete that resource.</p> <p>Resource-oriented design (AIP-121) honors this pattern through the <code>Delete</code> method. These RPCs accept the URI representing that resource and usually return an empty response.</p>"},{"location":"template/0135/#guidance","title":"Guidance","text":"<p>APIs should generally provide a delete method for resources unless it is not valuable for users to do so.</p> <p>Delete methods are specified using the following pattern:</p> <pre><code>rpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) {\n  option (google.api.http) = {\n    delete: \"/v1/{name=publishers/*/books/*}\"\n  };\n  option (google.api.method_signature) = \"name\";\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Delete</code>. The remainder of the   RPC name should be the singular form of the resource's message name.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message should be <code>google.protobuf.Empty</code>.</li> <li>If the resource is soft deleted, the response message     should be the resource itself.</li> <li>If the delete RPC is long-running, the response     message must be a <code>google.longrunning.Operation</code> which resolves to the     correct response.</li> <li>The HTTP verb must be <code>DELETE</code>.</li> <li>The request message field receiving the resource name should map to the   URI path.</li> <li>This field should be called <code>name</code>.</li> <li>The <code>name</code> field should be the only variable in the URI path. All     remaining parameters should map to URI query parameters.</li> <li>There must not be a <code>body</code> key in the <code>google.api.http</code> annotation.</li> <li>There should be exactly one <code>google.api.method_signature</code> annotation,   with a value of <code>\"name\"</code>. If an etag or force field are used, they may be   included in the signature.</li> <li>If the API is operating on the Management Plane, the operation should have   strong consistency: the completion of a delete operation must mean   that the existence of the resource has reached a steady-state and reading   resource state returns a consistent response.</li> <li>The API must fail with a <code>FAILED_PRECONDITION</code> error if child resources   are present. See guidance on Cascading Delete if forcing   deletion of parent and child resources is necessary.</li> <li>If the only child resource type is a Singleton, deletion must     be allowed, because the lifecycle of a Singleton is tied to that of its     parent resource. This applies even if there are multiple different Singleton     resource types for the same parent resource.</li> </ul> <p>The Delete method should succeed if and only if a resource was present and was successfully deleted. If the resource did not exist, the method should send a <code>NOT_FOUND</code> error.</p>"},{"location":"template/0135/#request-message","title":"Request message","text":"<p>Delete methods implement a common request message pattern:</p> <pre><code>message DeleteBookRequest {\n  // The name of the book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n</code></pre> <ul> <li>A <code>name</code> field must be included. It should be called <code>name</code>.</li> <li>The field should be annotated as required.</li> <li>The field must identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> </ul>"},{"location":"template/0135/#soft-delete","title":"Soft delete","text":"<p>Note: This material was moved into its own document to provide a more comprehensive treatment: AIP-164.</p>"},{"location":"template/0135/#long-running-delete","title":"Long-running delete","text":"<p>Some resources take longer to delete a resource than is reasonable for a regular API request. In this situation, the API should use a long-running operation instead:</p> <pre><code>rpc DeleteBook(DeleteBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    delete: \"/v1/{name=publishers/*/books/*}\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"google.protobuf.Empty\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n</code></pre> <ul> <li>The response type must be set to the appropriate return type if the RPC   was not long-running: <code>google.protobuf.Empty</code> for most Delete RPCs, or the   resource itself for soft delete (AIP-164).</li> <li>Both the <code>response_type</code> and <code>metadata_type</code> fields must be specified   (even if they are <code>google.protobuf.Empty</code>).</li> </ul>"},{"location":"template/0135/#cascading-delete","title":"Cascading delete","text":"<p>Sometimes, it may be necessary for users to be able to delete a resource as well as all applicable child resources. However, since deletion is usually permanent, it is also important that users not do so accidentally, as reconstructing wiped-out child resources may be quite difficult.</p> <p>If an API allows deletion of a resource that may have child resources, the API should provide a <code>bool force</code> field on the request, which the user sets to explicitly opt in to a cascading delete.</p> <pre><code>message DeletePublisherRequest {\n  // The name of the publisher to delete.\n  // Format: publishers/{publisher}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Publisher\"\n    }];\n\n  // If set to true, any books from this publisher will also be deleted.\n  // (Otherwise, the request will only work if the publisher has no books.)\n  bool force = 2;\n}\n</code></pre> <p>The API must fail with a <code>FAILED_PRECONDITION</code> error if the <code>force</code> field is <code>false</code> (or unset) and child resources are present.</p>"},{"location":"template/0135/#protected-delete","title":"Protected delete","text":"<p>Sometimes, it may be necessary for users to ensure that no changes have been made to a resource that is being deleted. If a resource provides an etag, the delete request may accept the etag (as either required or optional):</p> <pre><code>message DeleteBookRequest {\n  // The name of the book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // Optional. The etag of the book.\n  // If this is provided, it must match the server's etag.\n  string etag = 2;\n}\n</code></pre> <p>If the etag is provided and does not match the server-computed etag, the request must fail with a <code>ABORTED</code> error code.</p> <p>Note: Declarative-friendly resources (AIP-128) must provide the <code>etag</code> field for Delete requests.</p>"},{"location":"template/0135/#delete-if-existing","title":"Delete if existing","text":"<p>If the service uses client-assigned resource names, <code>Delete</code> methods may expose a <code>bool allow_missing</code> field, which will cause the method to succeed in the event that the user attempts to delete a resource that is not present (in which case the request is a no-op):</p> <pre><code>message DeleteBookRequest {\n  // The book to delete.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"\n  ];\n\n  // If set to true, and the book is not found, the request will succeed\n  // but no action will be taken on the server\n  bool allow_missing = 2;\n}\n</code></pre> <p>More specifically, the <code>allow_missing</code> flag triggers the following behavior:</p> <ul> <li>If the method call is on a resource that does not exist, the request is a   no-op.</li> <li>The <code>etag</code> field is ignored.</li> <li>If the method call is on a resource that already exists, the resource is   deleted (subject to other checks).</li> </ul> <p>Note: Declarative-friendly resources (AIP-128) should expose the <code>bool allow_missing</code> field.</p>"},{"location":"template/0135/#errors","title":"Errors","text":"<p>If the user does not have permission to access the resource, regardless of whether or not it exists, the service must error with <code>PERMISSION_DENIED</code> (HTTP 403). Permission must be checked prior to checking if the resource exists.</p> <p>If the user does have proper permission, but the requested resource does not exist, the service must error with <code>NOT_FOUND</code> (HTTP 404) unless <code>allow_missing</code> is set to <code>true</code>.</p>"},{"location":"template/0135/#further-reading","title":"Further reading","text":"<ul> <li>For soft delete and undelete, see AIP-164.</li> <li>For bulk deleting large numbers of resources based on a filter, see AIP-165.</li> </ul>"},{"location":"template/0135/#changelog","title":"Changelog","text":"<ul> <li>2024-06-11: Add deletion behavior for parent resource deletion requests without a <code>force</code> field.</li> <li>2023-08-24: Adding consistency requirement.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2022-02-02: Changed eTag error from <code>FAILED_PRECONDITION</code> to <code>ABORTED</code> making it consistent with change to AIP-154 &amp; AIP-134 on 2021-03-05.</li> <li>2020-10-06: Added guidance for declarative-friendly resources.</li> <li>2020-10-06: Added guidance for allowing no-op delete for missing   resources.</li> <li>2020-10-06: Moved soft delete and undelete guidance into a new AIP-164.</li> <li>2020-06-08: Added guidance for <code>Get</code> of soft-deleted resources.</li> <li>2020-02-03: Added guidance for error cases.</li> <li>2019-10-18: Added guidance on annotations.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-06-10: Added guidance for long-running delete.</li> <li>2019-05-29: Added an explicit prohibition on arbitrary fields in standard   methods.</li> </ul>"},{"location":"template/0136/","title":"Custom methods","text":"<p>Resource-oriented design (AIP-121) uses custom methods to provide a means to express arbitrary actions that are difficult to model using only the standard methods. Custom methods are important because they provide a means for an API's vocabulary to adhere to user intent.</p>"},{"location":"template/0136/#guidance","title":"Guidance","text":"<p>Custom methods should only be used for functionality that can not be easily expressed via standard methods; prefer standard methods if possible, due to their consistent semantics. (Of course, this only applies if the functionality in question actually conforms to the normal semantics; it is not a good idea to contort things to endeavor to make the standard methods \"sort of work\".)</p> <p>While custom methods vary widely in how they are designed, many principles apply consistently:</p> <pre><code>// Archives the given book.\nrpc ArchiveBook(ArchiveBookRequest) returns (ArchiveBookResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:archive\"\n    body: \"*\"\n  };\n}\n</code></pre> <p>Note: The pattern above shows a custom method that operates on a specific resource. Custom methods can be associated with resources, collections, or services. The bullets below apply in all three cases.</p> <ul> <li>The name of the method should be a verb followed by a noun.</li> <li>The name must not contain prepositions (\"for\", \"with\", etc.).</li> <li>The verb in the name should not contain any of the standard method verbs (Get,     List, Create, Update, Delete).</li> <li>The name must not include the term <code>Async</code>. Instead, if the intention is     to differentiate between immediate and long-running RPCs, the suffix <code>LongRunning</code> may be used for this purpose. For example, to create a long-running book creation     RPC (if the standard <code>CreateBook</code> method was designed before long-running aspects were     considered), a custom <code>CreateBookLongRunning</code> method could be introduced.</li> <li>The HTTP method must be <code>GET</code> or <code>POST</code>:</li> <li><code>GET</code> must be used for methods retrieving data or resource state.</li> <li><code>POST</code> must be used if the method has side effects or mutates resources     or data.</li> <li>The HTTP URI must use a <code>:</code> character followed by the custom verb   (<code>:archive</code> in the above example), and the verb in the URI must match the   verb in the name of the RPC.</li> <li>If word separation is required, <code>camelCase</code> must be used.</li> <li>The <code>body</code> clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>See HTTP and gRPC Transcoding for more information.</li> <li>Custom methods should take a request message matching the RPC   name, with a <code>Request</code> suffix.</li> <li>Custom methods should return a response message matching the RPC   name, with a <code>Response</code> suffix.</li> <li>When operating on a specific resource, a custom method may return the     resource itself.</li> </ul>"},{"location":"template/0136/#resource-based-custom-methods","title":"Resource-based custom methods","text":"<p>Custom methods must operate on a resource if the API can be modeled as such:</p> <pre><code>// Archives the given book.\nrpc ArchiveBook(ArchiveBookRequest) returns (ArchiveBookResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:archive\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The parameter for the resource's name must be called <code>name</code>, and   be the only variable in the URI path.</li> </ul>"},{"location":"template/0136/#collection-based-custom-methods","title":"Collection-based custom methods","text":"<p>While most custom methods operate on a single resource, some custom methods may operate on a collection instead:</p> <pre><code>// Sorts the books from this publisher.\nrpc SortBooks(SortBooksRequest) returns (SortBooksResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:sort\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The collection's parent resource must be called <code>parent</code>, and   be the only variable in the URI path.</li> <li>The collection key (<code>books</code> in the above example) must be literal.</li> </ul>"},{"location":"template/0136/#stateless-methods","title":"Stateless methods","text":"<p>Some custom methods are not attached to resources at all. These methods are generally stateless: they accept a request and return a response, and have no permanent effect on data within the API.</p> <pre><code>// Translates the provided text from one language to another.\nrpc TranslateText(TranslateTextRequest) returns (TranslateTextResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{project=projects/*}:translateText\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>If the method runs in a particular scope (such as a project, as in the above   example), the field name in the request message should be the name of the   scope resource. If word separators are necessary, <code>snake_case</code> must be   used.</li> <li>The URI should place both the verb and noun after the <code>:</code> separator   (avoid a \"faux collection key\" in the URI in this case, as there is no   collection). For example, <code>:translateText</code> is preferable to <code>text:translate</code>.</li> <li>Stateless methods must use <code>POST</code> if they involve billing.</li> </ul>"},{"location":"template/0136/#declarative-friendly-resources","title":"Declarative-friendly resources","text":"<p>Declarative-friendly resources usually should not employ custom methods (except specific declarative-friendly custom methods discussed in other AIPs), because declarative-friendly tools are unable to automatically determine what to do with them.</p> <p>An exception to this is for rarely-used, fundamentally imperative operations, such as a <code>Move</code> or <code>Rename</code> operation, for which there would not be an expectation of declarative support.</p>"},{"location":"template/0136/#rationale","title":"Rationale","text":""},{"location":"template/0136/#http-path","title":"HTTP path","text":"<p>Similar to standard methods, a custom method that operates on a resource or collection needs a <code>name</code> or <code>parent</code> parameter to indicate the resource that it operates on. This convention allows clients to map custom methods to the appropriate resource.</p>"},{"location":"template/0136/#http-methods","title":"HTTP methods","text":"<p>Allowing both <code>GET</code> and <code>POST</code> HTTP verbs allows a clear distinction for which methods do not mutate data, and which ones do. Methods that only read data have first-class concepts in some clients (DataSources in Terraform) and clearly indicate to a user which methods can be called without risk of runtime impact.</p>"},{"location":"template/0136/#rpc-name","title":"RPC name","text":"<p>The term \"async\" is commonly used in programming languages to indicate whether a specific method call is synchronous or asynchronous, including for making RPCs. That sync/async aspect is at a different abstraction level to whether the RPC itself is intended to start a long-running operation. Using \"async\" within the RPC name itself causes confusion, and can even cause issues for client libraries which generate both synchronous and asynchronous methods to call the RPC in some languages.</p>"},{"location":"template/0136/#changelog","title":"Changelog","text":"<ul> <li>2023-11-16: Included link to AIP-127 \"HTTP and gRPC Transcoding\" for guidance on body definition.</li> <li>2023-05-16: Added prohibition of the term \"async\" within RPC names.</li> <li>2023-05-09: Adding guidance for POST and GET, require parent instead of   the resource singular.</li> <li>2023-03-02: Explicitly discourage use of standard method verbs.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-10-06: Added declarative-friendly guidance.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0140/","title":"Field names","text":"<p>Naming fields in a way that is intuitive to users can often be one of the most challenging aspects of designing an API. This is true for many reasons; often a field name that seems entirely intuitive to the author can baffle a reader.</p> <p>Additionally, users rarely use only one API; they use many APIs together. As a result, a single company using the same name to mean different things (or different names to mean the same thing) can often cause unnecessary confusion, because users can no longer take what they've already learned from one API and apply that to another.</p> <p>In short, APIs are easiest to understand when field names are simple, intuitive, and consistent with one another.</p>"},{"location":"template/0140/#guidance","title":"Guidance","text":"<p>Field names should be in correct American English.</p> <p>Field names should clearly and precisely communicate the concept being presented and avoid overly general names that are ambiguous. That said, field names should avoid including unnecessary words. In particular, avoid including adjectives that always apply and add little cognitive value. For example, a <code>proxy_settings</code> field might be as helpful as <code>shared_proxy_settings</code> if there is no unshared variant.</p> <p>Important: Field names often appear in generated client surfaces. Ensure they  are appropriately descriptive and of suitable length.</p>"},{"location":"template/0140/#case","title":"Case","text":"<p>Field definitions in protobuf files must use <code>lower_snake_case</code> names. These names are mapped to an appropriate naming convention in JSON and in generated code.</p> <p>Additionally, each word in the field must not begin with a number, because it creates ambiguity when converting between snake case and camel case. Similarly, fields must not contain leading, trailing, or adjacent underscores.</p>"},{"location":"template/0140/#uniformity","title":"Uniformity","text":"<p>APIs should endeavor to use the same name for the same concept and different names for different concepts wherever possible. This includes names across multiple APIs, in particular if those APIs are likely to be used together.</p>"},{"location":"template/0140/#repeated-fields","title":"Repeated fields","text":"<p>Repeated fields must use the proper plural form, such as <code>books</code> or <code>authors</code>. On the other hand, non-repeated fields should use the singular form such as <code>book</code> or <code>author</code>. This implies that resource names should use the singular form as well, since the field name should follow the resource name (e.g., use <code>repeated Book books</code>, not <code>Books books = 1</code>).</p>"},{"location":"template/0140/#prepositions","title":"Prepositions","text":"<p>Field names should not include prepositions (such as \"with\", \"for\", \"at\", \"by\", etc). For example:</p> <ul> <li><code>error_reason</code> (not <code>reason_for_error</code>)</li> <li><code>author</code> (not <code>written_by</code>)</li> </ul> <p>It is easier for field names to match more often when following this convention. Additionally, prepositions in field names may also indicate a design concern, such as an overly-restrictive field or a sub-optimal data type. This is particularly true regarding \"with\": a field named <code>book_with_publisher</code> likely indicates that the book resource may be improperly structured and worth redesigning.</p> <p>Note: The word \"per\" is an exception to this rule, particularly in two cases. Often \"per\" is part of a unit (e.g. \"miles per hour\"), in which case the preposition must be present to accurately convey the unit. Additionally, \"per\" is often appropriate in reporting scenarios (e.g. \"nodes per instance\" or \"failures per hour\").</p>"},{"location":"template/0140/#adjectives","title":"Adjectives","text":"<p>For uniformity, field names that contain both a noun and an adjective should place the adjective before the noun. For example:</p> <ul> <li><code>collected_items</code> (not <code>items_collected</code>)</li> <li><code>imported_objects</code> (not <code>objects_imported</code>)</li> </ul>"},{"location":"template/0140/#verbs","title":"Verbs","text":"<p>Field names must not be named to reflect an intent or action. They must not be verbs. Rather, because the field defines the desired value for mutations, e.g. Create and Update, and the current value for reads, e.g.  Get and List, the name must be a noun. It defines what is so, not what to do.</p> <ul> <li><code>collected_items</code> (not <code>collect_items</code>)</li> <li><code>disabled</code> (not <code>disable</code>)</li> </ul> <p>In contrast, method names, whether standard or custom, change facets of resources and are named as verbs.</p>"},{"location":"template/0140/#booleans","title":"Booleans","text":"<p>Boolean fields should omit the prefix \"is\". For example:</p> <ul> <li><code>disabled</code> (not <code>is_disabled</code>)</li> <li><code>required</code> (not <code>is_required</code>)</li> </ul> <p>Note: Field names that would otherwise be reserved words are an exception to this rule. For example, <code>is_new</code> (not <code>new</code>).</p>"},{"location":"template/0140/#string-vs-bytes","title":"String vs. bytes","text":"<p>When using <code>bytes</code>, the contents of the field are base64-encoded when using JSON on the wire. Services should use <code>bytes</code> when there is a need to send binary contents over the wire, and should not ask the user to manually base64-encode a field into a <code>string</code> field. The one exception is when the API is designed to handle data that is meant to be base64-encoded at rest and the double base64-encoding as a result of using <code>bytes</code> is undesirable - in this case, services may use a <code>string</code>.</p>"},{"location":"template/0140/#uris","title":"URIs","text":"<p>Field names representing URLs or URIs should always use <code>uri</code> rather than <code>url</code>. This is because while all URLs are URIs, not all URIs are URLs. Field names may use a prefix in front of <code>uri</code> as appropriate.</p>"},{"location":"template/0140/#reserved-words","title":"Reserved words","text":"<p>Field names should avoid using names that are likely to conflict with keywords in common programming languages, such as <code>new</code>, <code>class</code>, <code>function</code>, <code>import</code>, etc. Reserved keywords can cause hardship for developers using the API in that language.</p>"},{"location":"template/0140/#conflicts","title":"Conflicts","text":"<p>Messages should not include a field with the same name as the enclosing message (ignoring case transformations). This causes conflicts when generating code in some languages.</p>"},{"location":"template/0140/#display-names","title":"Display names","text":"<p>Many resources have a human-readable name, often used for display in UI. This field should be called <code>display_name</code>, and should not have a uniqueness requirement.</p> <p>If an entity has an official, formal name (such as a company name or the title of a book), an API may use <code>title</code> as the field name instead. The <code>title</code> field should not have a uniqueness requirement.</p>"},{"location":"template/0140/#further-reading","title":"Further reading","text":"<ul> <li>For naming resource fields, see AIP-122.</li> <li>For naming fields representing quantities, see AIP-141.</li> <li>For naming fields representing time, see AIP-142.</li> </ul>"},{"location":"template/0140/#changelog","title":"Changelog","text":"<ul> <li>2024-08-26: Codify exception to string and base64 guidance </li> <li>2024-05-18: Documented the effect of field names on client surfaces.</li> <li>2023-04-25: Field names must not be expressed as verbs.</li> <li>2021-07-12: Normalized display name guidance to \"should\".</li> <li>2021-04-07: Added base64 and bytes guidance.</li> <li>2021-03-05: Added prohibition on leading, trailing, or adjacent   underscores.</li> <li>2020-06-10: Added prohibition on starting any word with a number.</li> <li>2020-05-29: Added guidance around URIs.</li> <li>2020-03-24: Added guidance around conflicting field and message names.</li> <li>2020-01-30: Added guidance around <code>display_name</code> and <code>title</code>.</li> </ul>"},{"location":"template/0141/","title":"Quantities","text":"<p>Many services need to represent a discrete quantity of items (number of bytes, number of miles, number of nodes, etc.).</p>"},{"location":"template/0141/#guidance","title":"Guidance","text":"<p>Quantities with a clear unit of measurement (such as bytes, miles, and so on) must include the unit of measurement as the suffix. When appropriate, units should use generally accepted abbreviations (for example, <code>distance_km</code> rather than <code>distance_kilometers</code>).</p> <pre><code>// A representation of a non-stop air route.\nmessage Route {\n  // The airport where the route begins.\n  string origin = 1;\n\n  // The destination airport.\n  string destination = 2;\n\n  // The distance between the origin and destination airports.\n  // This value is also used to determine the credited frequent flyer miles.\n  int32 distance_miles = 3;\n}\n</code></pre> <p>If the quantity is a number of items (for example, the number of nodes in a cluster), then the field should use the suffix <code>_count</code> (not the prefix <code>num_</code>):</p> <pre><code>// A cluster of individual nodes.\nmessage Cluster {\n  // The number of nodes in the cluster.\n  int32 node_count = 1;\n}\n</code></pre> <p>Note: Fields must not use unsigned integer types, because many programming languages and systems do not support them well.</p>"},{"location":"template/0141/#specialized-messages","title":"Specialized messages","text":"<p>It is sometimes useful to create a message that represents a particular quantity. This is particularly valuable in two situations:</p> <ul> <li>Grouping two or more individual quantities together. Example:   <code>google.protobuf.Duration</code></li> <li>Representing a common concept where the unit of measurement may itself vary.   Example: <code>google.type.Money</code></li> </ul> <p>APIs may create messages to represent quantities when appropriate. When using these messages as fields, APIs should use the name of the message as the suffix for the field name if it makes intuitive sense to do so.</p>"},{"location":"template/0141/#changelog","title":"Changelog","text":"<ul> <li>2019-09-13: Added the prohibition on uint and fixed types.</li> </ul>"},{"location":"template/0142/","title":"Time and duration","text":"<p>Many services need to represent the concepts surrounding time. Representing time can be challenging due to the intricacies of calendars and time zones, as well as the fact that common exchange formats (such as JSON) lack a native concept of time.</p>"},{"location":"template/0142/#guidance","title":"Guidance","text":"<p>Fields representing time should use the common, generally used components (such as <code>google.protobuf.Timestamp</code> or <code>google.type.Date</code>) for representing time or duration types. These types are common components, and using them consistently allows infrastructure and tooling to provide a better experience when interacting with time values.</p>"},{"location":"template/0142/#timestamps","title":"Timestamps","text":"<p>Fields that represent an absolute point in time (independent of any time zone or calendar) should use the <code>google.protobuf.Timestamp</code> type, (which uses UNIX timestamps under the hood and hold nanosecond precision).</p> <p>These fields should have names ending in <code>_time</code>, such as <code>create_time</code> or <code>update_time</code>. For repeated fields, the names should end in <code>_times</code> instead.</p> <p>Many timestamp fields refer to an activity (for example, <code>create_time</code> refers to when the applicable resource was created). For these, the field should be named with the <code>{imperative}_time</code> form. For example, if a book is being published, the field storing the time when this happens would use the imperative form of the verb \"to publish\" (\"publish\") resulting in a field called <code>publish_time</code>. Fields should not be named using the past tense (such as <code>published_time</code>, <code>created_time</code> or <code>last_updated_time</code>).</p>"},{"location":"template/0142/#durations","title":"Durations","text":"<p>Fields that represent a span between two points in time (independent of any time zone or calendar) should use the <code>google.protobuf.Duration</code> type.</p> <p>To illustrate the distinction between timestamps and durations, consider a flight record:</p> <pre><code>// A representation of a (very incomplete) flight log.\nmessage FlightRecord {\n  // The absolute point in time when the plane took off.\n  google.protobuf.Timestamp takeoff_time = 1;\n\n  // The length (duration) of the flight, from takeoff to landing.\n  google.protobuf.Duration flight_duration = 2;\n}\n</code></pre> <p>Note: Observant readers may notice that the timestamp and duration messages have the same structure (<code>int64 seconds</code> and <code>int32 nanos</code>). However, the distinction between these is important, because they have different semantic meaning. Additionally, tooling is able to base behavior off of which message is used. For example, a Python-based tool could convert timestamps to datetime objects and durations to timedelta objects.</p>"},{"location":"template/0142/#relative-time-segments","title":"Relative time segments","text":"<p>In some cases, it may be necessary to represent a time segment inside a stream. In these cases, the <code>google.protobuf.Duration</code> type should be used, and the field name should end with <code>_offset</code>. To ensure that the meaning is clear, the field must have a comment noting the point that the offset is relative to.</p> <p>To illustrate this, consider a resource representing a segment of an audio stream:</p> <pre><code>message AudioSegment {\n  // The duration relative to the start of the stream representing the\n  // beginning of the segment.\n  google.protobuf.Duration start_offset = 1;\n\n  // The total length of the segment.\n  google.protobuf.Duration segment_duration = 2;\n}\n</code></pre>"},{"location":"template/0142/#civil-dates-and-times","title":"Civil dates and times","text":"<p>Fields that represent a calendar date or wall-clock time should use the appropriate common components:</p> <ul> <li>Civil date: <code>google.type.Date</code></li> <li>Wall-clock time: <code>google.type.TimeOfDay</code></li> </ul> <p>Fields representing civil dates should have names ending in <code>_date</code>, while fields representing civil times or datetimes should have names ending in <code>_time</code>.</p> <p>Note: Both the <code>Date</code> and <code>TimeOfDay</code> components are timezone-na\u00efve. Fields that require timezone-awareness should use <code>DateTime</code> (see below).</p>"},{"location":"template/0142/#civil-timestamps","title":"Civil timestamps","text":"<p>Fields that represent a civil timestamp (date and time, optionally with a time zone) should use the <code>google.type.DateTime</code> component, and the field name should end in <code>_time</code>.</p>"},{"location":"template/0142/#compatibility","title":"Compatibility","text":"<p>Occasionally, APIs are unable to use the common structures for legacy or compatibility reasons. For example, an API may conform to a separate specification that mandates that timestamps be integers or ISO-8601 strings.</p> <p>In these situations, fields may use other types. If possible, the following naming conventions apply:</p> <ul> <li>For integers, include the meaning (examples: <code>time</code>, <code>duration</code>, <code>delay</code>,   <code>latency</code>) and the unit of measurement (valid values: <code>seconds</code>,   <code>millis</code>, <code>micros</code>, <code>nanos</code>) as a final suffix. For example,   <code>send_time_millis</code>.</li> <li>For strings, include the meaning (examples: <code>time</code>, <code>duration</code>, <code>delay</code>,   <code>latency</code>) but no unit suffix.</li> </ul> <p>In all cases, clearly document the expected format, and the rationale for its use.</p>"},{"location":"template/0143/","title":"Standardized codes","text":"<p>Many common concepts, such as spoken languages, countries, currency, and so on, have common codes (usually formalized by the International Organization for Standardization) that are used in data communication and processing. These codes address the issue that there are often different ways to express the same concept in written language (for example, \"United States\" and \"USA\", or \"Espa\u00f1ol\" and \"Spanish\").</p>"},{"location":"template/0143/#guidance","title":"Guidance","text":"<p>For concepts where a standardized code exists and is in common use, fields representing these concepts should use the standardized code for both input and output.</p> <pre><code>// A message representing a book.\nmessage Book {\n  // Other fields...\n\n  // The IETF BCP-47 language code representing the language in which\n  // the book was originally written.\n  // https://en.wikipedia.org/wiki/IETF_language_tag\n  string language_code = 99;\n}\n</code></pre> <ul> <li>Fields representing standardized concepts must use the appropriate data   type for the standard code (usually <code>string</code>).</li> <li>Fields representing standardized concepts should not use enums, even if     they only allow a small subset of possible values. Using enums in this     situation often leads to frustrating lookup tables when using multiple APIs     together.</li> <li>Fields representing standardized concepts must indicate which standard     they follow, preferably with a link (either to the standard itself, the     Wikipedia description, or something similar).</li> <li>The field name should end in <code>_code</code> or <code>_type</code> unless the concept has an   obviously clearer suffix.</li> <li>When accepting values provided by users, validation should be   case-insensitive unless this would introduce ambiguity (for example, accept   both <code>en-gb</code> and <code>en-GB</code>). When providing values to users, APIs should   use the canonical case (in the example above, <code>en-GB</code>).</li> </ul>"},{"location":"template/0143/#content-types","title":"Content types","text":"<p>Fields representing a content or media type must use IANA media types. For legacy reasons, the field should be called <code>mime_type</code>.</p>"},{"location":"template/0143/#countries-and-regions","title":"Countries and regions","text":"<p>Fields representing individual countries or nations must use the Unicode CLDR region codes (list), such as <code>US</code> or <code>CH</code>, and the field must be called <code>region_code</code>.</p> <p>Important: We use <code>region_code</code> and not <code>country_code</code> to include regions distinct from any country, and avoid political disputes over whether or not some regions are countries.</p>"},{"location":"template/0143/#currency","title":"Currency","text":"<p>Fields representing currency must use ISO-4217 currency codes, such as <code>USD</code> or <code>CHF</code>, and the field must be called <code>currency_code</code>.</p> <p>Note: For representing an amount of money in a particular currency, rather than the currency code itself, use <code>google.protobuf.Money</code>.</p>"},{"location":"template/0143/#language","title":"Language","text":"<p>Fields representing spoken languages must use IETF BCP-47 language codes (list), such as <code>en-US</code> or <code>de-CH</code>, and the field must be called <code>language_code</code>.</p>"},{"location":"template/0143/#time-zones","title":"Time zones","text":"<p>Fields representing a time zone should use the IANA TZ codes, and the field must be called <code>time_zone</code>.</p> <p>Fields also may represent a UTC offset rather than a time zone (note that these are subtly different). In this case, the field must use the ISO-8601 format to represent this, and the field must be named <code>utc_offset</code>.</p>"},{"location":"template/0143/#changelog","title":"Changelog","text":"<ul> <li>2020-05-12: Replaced <code>country_code</code> guidance with <code>region_code</code>,   correcting an original error.</li> </ul>"},{"location":"template/0144/","title":"Repeated fields","text":"<p>Representing lists of data in an API is trickier than it often appears. Users often need to modify lists in place, and longer data series within a single resource pose a challenge for pagination.</p>"},{"location":"template/0144/#guidance","title":"Guidance","text":"<p>Resources may use repeated fields where appropriate.</p> <pre><code>message Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  repeated string authors = 2;\n}\n</code></pre> <ul> <li>Repeated fields must use a plural field name.</li> <li>If the English singular and plural words are identical (\"moose\", \"info\"),     the dictionary word must be used rather than attempting to coin a new     plural form.</li> <li>Repeated fields should have an enforced upper bound that will not cause a   single resource payload to become too large. A good rule of thumb is 100   elements.</li> <li>If repeated data has the chance of being too large, the API should use     a sub-resource instead.</li> <li>Repeated fields must not represent the body of another resource inline.   Instead, the message should provide the resource names of the associated   resources.</li> </ul>"},{"location":"template/0144/#scalars-and-messages","title":"Scalars and messages","text":"<p>Repeated fields should use a scalar type (such as <code>string</code>) if they are certain that additional data will not be needed in the future, as using a message type adds significant cognitive overhead and leads to more complicated code.</p> <p>However, if additional data is likely to be needed in the future, repeated fields should use a message instead of a scalar proactively, to avoid parallel repeated fields.</p>"},{"location":"template/0144/#update-strategies","title":"Update strategies","text":"<p>A resource may use two strategies to enable updating a repeated field: direct update using the standard <code>Update</code> method, or custom <code>Add</code> and <code>Remove</code> methods.</p> <p>A standard <code>Update</code> method has one key limitation: the user is only able to update the entire list. Field masks are unable to address individual entries in a repeated field. This means that the user must read the resource, make modifications to the repeated field value as needed, and send it back. This is fine for many situations, particularly when the repeated field is expected to have a small size (fewer than 10 or so) and race conditions are not an issue, or can be guarded against with ETags.</p> <p>Note: Declarative-friendly resources must use the standard <code>Update</code> method, and not introduce <code>Add</code> and <code>Remove</code> methods. If declarative tools need to reason about particular relationships while ignoring others, consider using a subresource instead.</p> <p>If atomic modifications are required, the API should define custom methods using the verbs <code>Add</code> and <code>Remove</code>:</p> <p>Note: If both of these strategies are too restrictive, consider using a subresource instead.</p> <pre><code>rpc AddAuthor(AddAuthorRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{book=publishers/*/books/*}:addAuthor\"\n    body: \"*\"\n  };\n}\n\nrpc RemoveAuthor(RemoveAuthorRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{book=publishers/*/books/*}:removeAuthor\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The data being added or removed should be a primitive (usually a   <code>string</code>).</li> <li>For more complex data structures with a primary key, the API should use     a map with the <code>Update</code> method instead.</li> <li>The RPC's name must begin with the word <code>Add</code> or <code>Remove</code>. The remainder   of the RPC name should be the singular form of the field being added.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message should be the resource itself, unless there is useful   context to provide in the response, in which case the response message must   match the RPC name, with a <code>Response</code> suffix.</li> <li>When the response is the resource itself, it should include the     fully-populated resource.</li> <li>The HTTP verb must be <code>POST</code>, as is usual for custom methods.</li> <li>The HTTP URI must end with <code>:add*</code> or <code>:remove*</code>, where <code>*</code> is the   snake-case singular name of the field being added or removed.</li> <li>The request message field receiving the resource name should map to the   URI path.</li> <li>The HTTP variable should be the name of the resource (such as <code>book</code>)     rather than <code>name</code> or <code>parent</code>.</li> <li>That variable should be the only variable in the URI path.</li> <li>The body clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>If the data being added in an <code>Add</code> RPC is already present, the method   must error with <code>ALREADY_EXISTS</code>.</li> <li>If the data being removed in a <code>Remove</code> RPC is not present, the method   must error with <code>NOT_FOUND</code>.</li> </ul>"},{"location":"template/0144/#request-message","title":"Request Message","text":"<pre><code>message AddAuthorRequest {\n  // The name of the book to add an author to.\n  string book = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"\n  ];\n\n  string author = 2 [(google.api.field_behavior) = REQUIRED];\n}\n\nmessage RemoveAuthorRequest {\n  // The name of the book to remove an author from.\n  string book = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"\n  ];\n\n  string author = 2 [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A resource field must be included. It should be the name of the   resource (such as <code>book</code>) rather than <code>name</code> or <code>parent</code>.</li> <li>The field should be annotated as required.</li> <li>The field should identify the resource type that it     references.</li> <li>A field for the value being added or removed must be included. It   should be the singular name of the field.</li> <li>The field should be annotated as required.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> </ul>"},{"location":"template/0144/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-10-17: Recommended returning the resource itself in Add and Remove   RPCs over separate response types.</li> <li>2020-10-17: Added guidance for Add and Remove RPCs and requests.</li> </ul>"},{"location":"template/0145/","title":"Ranges","text":"<p>Services often need to represent ranges of discrete or continuous values. These have wide differences in meaning, and come in many types: integers, floats, and timestamps, just to name a few, and the expected meaning of a range can vary in subtle ways depending on the type of range being discussed.</p>"},{"location":"template/0145/#guidance","title":"Guidance","text":"<p>A resource or message representing a range should ordinarily use two separate fields of the same type, with prefixes <code>start_</code> and <code>end_</code>:</p> <pre><code>// A representation of a chapter in a book.\nmessage Chapter {\n  string title = 1;\n\n  // The page where this chapter begins.\n  int32 start_page = 2;\n\n  // The page where the next chapter or section begins.\n  int32 end_page = 3;\n}\n</code></pre>"},{"location":"template/0145/#inclusive-or-exclusive-ranges","title":"Inclusive or exclusive ranges","text":"<p>Fields representing ranges should use inclusive start values and exclusive end values (half-closed intervals) in most situations; in interval notation: <code>[start_xxx, end_xxx)</code>.</p> <p>Exclusive end values are preferable for the following reasons:</p> <ul> <li>It conforms to user expectations, particularly for continuous values such as   timestamps, and avoids the need to express imprecise \"limit values\" (e.g.   <code>2012-04-20T23:59:59</code>).</li> <li>It is consistent with most common programming languages, including C++, Java,   Python, and Go.</li> <li>It is easier to reason about abutting ranges: <code>[0, x), [x, y), [y, z)</code>, where   values are chainable from one range to the next.</li> </ul>"},{"location":"template/0145/#timestamp-intervals","title":"Timestamp intervals","text":"<p>The following section describes the use of the google.type.Interval type, found amongst the common protos that are described in AIP-213. This type represents a range between two timestamps, with an inclusive start value and exclusive end value.</p> <p>Ranges between two timestamps which conform to the expectations of the <code>Interval</code> message should use this rather than having separate start and end fields. This allows client code to be written against the <code>Interval</code> message (such as checking whether a given timestamp occurs within the interval) and reused across multiple intervals in the same API, or even across multiple APIs.</p> <p>APIs may use start and end timestamp fields instead. In particular, if a message within an API is inherently describing an interval with extra information about that interval, the additional level of nesting introduced by using the <code>Interval</code> message may be undesirable.</p>"},{"location":"template/0145/#exceptions","title":"Exceptions","text":"<p>In some cases, there is significant colloquial precedent for inclusive start and end values (closed intervals), to the point that using an exclusive end value would be confusing even for people accustomed to them.</p> <p>For example, when discussing dates (not to be confused with timestamps), most people use inclusive end: a conference with dates \"April 21-23\" is expected to run for three days: April 21, April 22, and April 23. This is also true for days of the week: a business that is open \"Monday through Friday\" is open, not closed, on Fridays.</p> <p>In this situation, the prefixes <code>first</code> and <code>last</code> should be used instead:</p> <pre><code>// A representation of a chapter in a book.\nmessage Chapter {\n  string title = 1;\n\n  // The first page of the chapter.\n  int32 first_page = 2;\n\n  // The last page of the chapter.\n  int32 last_page = 3;\n}\n</code></pre> <p>Fields representing ranges with significant colloquial precedent for inclusive start and end values should use inclusive end values with <code>first_</code> and <code>last_</code> prefixes for those ranges only. The service should still use exclusive end values for other ranges where this does not apply, and must clearly document each range as inclusive or exclusive.</p>"},{"location":"template/0146/","title":"Generic fields","text":"<p>Most fields in any API, whether in a request, a resource, or a custom response, have a specific type or schema. This schema is part of the contract that developers write their code against.</p> <p>However, occasionally it is appropriate to have a generic or polymorphic field of some kind that can conform to multiple schemata, or even be entirely free-form.</p>"},{"location":"template/0146/#guidance","title":"Guidance","text":"<p>While generic fields are generally rare, a service may introduce generic field where necessary. There are several approaches to this depending on how generic the field needs to be; in general, services should attempt to introduce the \"least generic\" approach that is able to satisfy the use case.</p>"},{"location":"template/0146/#oneof","title":"Oneof","text":"<p>A <code>oneof</code> may be used to introduce a type union: the user or service is able to specify one of the fields inside the <code>oneof</code>. Additionally, a <code>oneof</code> may be used with the same type (usually strings) to represent a semantic difference between the options.</p> <p>Because the individual fields in the <code>oneof</code> have different keys, a developer can programmatically determine which (if any) of the fields is populated.</p> <p>A <code>oneof</code> preserves the largest degree of type safety and semantic meaning for each option, and services should generally prefer them over other generic or polymorphic options when feasible. However, the <code>oneof</code> construct is ill-suited when there is a large (or unlimited) number of potential options, or when there is a large resource structure that would require a long series of \"cascading oneofs\".</p> <p>Note: Adding additional possible fields to an existing <code>oneof</code> is a non-breaking change, but moving existing fields into or out of a <code>oneof</code> is breaking (it creates a backwards-incompatible change in Go protobuf stubs).</p>"},{"location":"template/0146/#maps","title":"Maps","text":"<p>Maps may be used in situations where many values of the same type are needed, but the keys are unknown or user-determined.</p> <p>Maps are usually not appropriate for generic fields because the map values all share a type, but occasionally they are useful. In particular, a map can sometimes be suited to a situation where many objects of the same type are needed, with different behavior based on the names of their keys (for example, using keys as environment names).</p>"},{"location":"template/0146/#struct","title":"Struct","text":"<p>The <code>google.protobuf.Struct</code> object may be used to represent arbitrary nested JSON. Keys can be strings, and values can be floats, strings, booleans, arrays, or additional nested structs, allowing for an arbitrarily nested structure that can be represented as JSON (and is automatically represented as JSON when using REST/JSON).</p> <p>A <code>Struct</code> is most useful when the service does not know the schema in advance, or when a service needs to store and retrieve arbitrary but structured user data. Using a <code>Struct</code> is convenient for users in this case because they can easily get JSON objects that can be natively manipulated in their environment of choice.</p> <p>If a service needs to reason about the schema of a <code>Struct</code>, it should use JSONSchema for this purpose. Because JSONSchema is itself JSON, a valid JSONSchema document can itself be stored in a <code>Struct</code>.</p>"},{"location":"template/0146/#any","title":"Any","text":"<p>The <code>google.protobuf.Any</code> object can be used to send an arbitrary serialized protocol buffer and a type definition.</p> <p>However, this introduces complexity, because an <code>Any</code> becomes useless for any task other than blind data propagation if the consumer does not have access to the proto. Additionally, even if the consumer does have the proto, the consumer has to ensure the type is registered and then deserialize manually, which is an often-unfamiliar process.</p> <p>Because of this, <code>Any</code> should not be used unless other options are infeasible.</p>"},{"location":"template/0147/","title":"Sensitive fields","text":"<p>Sometimes APIs need to collect sensitive information such as private encryption keys meant to be stored by the underlying service but not intended to be read after writing due to the sensitive nature of the data. For this type of data, extra consideration is required for the representation of the sensitive data in API requests and responses.</p>"},{"location":"template/0147/#guidance","title":"Guidance","text":"<p>If the sensitive information is required for the resource as a whole to exist, the data should be accepted as an input-only field with no corresponding output field. Because the sensitive data must be present for the resource to exist, users of the API may assume that existence of the resource implies storage of the sensitive data. For example:</p> <pre><code>message SelfManagedKeypair {\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The public key data in PEM-encoded form.\n  bytes public_key = 2;\n\n  // The private key data in PEM-encoded form.\n  bytes private_key = 3 [\n    (google.api.field_behavior) = INPUT_ONLY];\n}\n</code></pre> <p>If the sensitive information is optional within the containing resource, an output-only boolean field with a postfix of <code>_set</code> should be used to indicate whether or not the sensitive information is present. For example:</p> <pre><code>message Integration {\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n  string uri = 2;\n\n  // A secret to be passed in the `Authorization` header of the webhook.\n  string shared_secret = 3 [\n    (google.api.field_behavior) = INPUT_ONLY];\n\n  // True if a `shared_secret` has been set for this Integration.\n  bool shared_secret_set = 4 [\n    (google.api.field_behavior) = OUTPUT_ONLY];\n}\n</code></pre> <p>If it is important to be able to identify the sensitive information without allowing it to be read back entirely, a field of the same type with an <code>obfuscated_</code> prefix may be used instead of the boolean <code>_set</code> field to provide contextual information about the sensitive information. The specific nature of the obfuscation is outside the scope of this AIP. For example:</p> <pre><code>message AccountRecoverySettings {\n  // An email to use for account recovery.\n  string email = 1 [\n    (google.api.field_behavior) = INPUT_ONLY];\n\n  // An obfuscated representation of the recovery email. For example,\n  // `ada@example.com` might be represented as `a**@e*****e.com`.\n  string obfuscated_email = 2 [\n    (google.api.field_behavior) = OUTPUT_ONLY];\n}\n</code></pre>"},{"location":"template/0148/","title":"Standard fields","text":"<p>Certain concepts are common throughout any corpus of APIs. In these situations, it is useful to have a standard field name and behavior that is used consistently to communicate that concept.</p>"},{"location":"template/0148/#guidance","title":"Guidance","text":"<p>Standard fields should be used to describe their corresponding concept, and should not be used for any other purpose.</p>"},{"location":"template/0148/#resource-names-and-ids","title":"Resource names and IDs","text":""},{"location":"template/0148/#name","title":"name","text":"<p>Every resource must have a <code>string name</code> field, used for the resource name (AIP-122), which should be the first field in the resource.</p> <p>Note: The <code>_name</code> suffix should not be used to describe other types of names unless otherwise covered in this AIP.</p>"},{"location":"template/0148/#parent","title":"parent","text":"<p>The <code>string parent</code> field refers to the resource name of the parent of a collection, and should be used in most <code>List</code> (AIP-132) and <code>Create</code> (AIP-133) requests.</p>"},{"location":"template/0148/#other-names","title":"Other names","text":""},{"location":"template/0148/#display_name","title":"display_name","text":"<p>The <code>string display_name</code> field must be a mutable, user-settable field where the user can provide a human-readable name to be used in user interfaces. Declarative-friendly resources should include this field.</p> <p>Display names should not have uniqueness requirements, and should be limited to &lt;= 63 characters.</p>"},{"location":"template/0148/#title","title":"title","text":"<p>The <code>string title</code> field should be the official name of an entity, such as a company's name. This is a more formal variant of <code>string display_name</code>.</p>"},{"location":"template/0148/#given_name","title":"given_name","text":"<p>The <code>string given_name</code> field must refer to a human or animal's given name. Resources must not use <code>first_name</code> for this concept, because the given name is not placed first in many cultures.</p>"},{"location":"template/0148/#family_name","title":"family_name","text":"<p>The <code>string family_name</code> field must refer to a human or animal's family name. Resources must not use <code>last_name</code> for this concept, because the family name is not placed last in many cultures.</p>"},{"location":"template/0148/#timestamps","title":"Timestamps","text":""},{"location":"template/0148/#create_time","title":"create_time","text":"<p>The output only <code>google.protobuf.Timestamp create_time</code> field must represent the timestamp when the resource was created. This may be either the time creation was initiated or the time it was completed. Declarative-friendly resources should include this field.</p>"},{"location":"template/0148/#update_time","title":"update_time","text":"<p>The output only <code>google.protobuf.Timestamp update_time</code> field must represent the timestamp when the resource was most recently updated. Any change to the resource made by users must refresh this value; changes to a resource made internally by the service may refresh this value. Declarative-friendly resources should include this field.</p>"},{"location":"template/0148/#delete_time","title":"delete_time","text":"<p>The output only <code>google.protobuf.Timestamp delete_time</code> field must represent the timestamp that a resource was soft deleted. This may correspond to either the time when the user requested deletion, or when the service successfully soft deleted the resource. If a resource is not soft deleted, the <code>delete_time</code> field must be empty.</p> <p>Resources that support soft delete (AIP-164) should provide this field.</p>"},{"location":"template/0148/#expire_time","title":"expire_time","text":"<p>The <code>google.protobuf.Timestamp expire_time</code> field should represent the time that a given resource or resource attribute is no longer useful or valid (e.g. a rotating security key). It may be used for similar forms of expiration as described in AIP-214.</p> <p>Services may provide an <code>expire_time</code> value that is inexact, but the resource must not expire before that time.</p>"},{"location":"template/0148/#purge_time","title":"purge_time","text":"<p>The <code>google.protobuf.Timestamp purge_time</code> field should represent the time when a soft deleted resource will be purged from the system (see AIP-164). It may be used for similar forms of expiration as described in AIP-214. Resources that support soft delete should include this field.</p> <p>Services may provide a <code>purge_time</code> value that is inexact, but the resource must not be purged from the system before that time.</p>"},{"location":"template/0148/#annotations","title":"Annotations","text":"<p>To store small amounts of arbitrary data, a <code>map&lt;string, string&gt; annotations</code> field may be added.</p> <p>The <code>annotations</code> field must use the Kubernetes limits to maintain wire compatibility, and should require dot-namespaced annotation keys to prevent tools from trampling over one another.</p> <p>Examples of information that might be valuable to store in annotations include:</p> <ul> <li>For CI/CD, an identifier of the pipeline run or version control identifier   used to propagate.</li> </ul> <p>Note: Annotations are distinct from various forms of labels. Labels can be used by server-side policies, such as IAM conditions. Annotations exist to allow client tools to store their own state information without requiring a database.</p>"},{"location":"template/0148/#well-known-string-fields","title":"Well known string fields","text":""},{"location":"template/0148/#ip-address","title":"IP address","text":"<p>A field that represents an IP address must comply with the following:</p> <ul> <li>use type <code>string</code></li> <li>use the name <code>ip_address</code> or end with the suffix <code>_ip_address</code> e.g.   <code>resolved_ip_address</code></li> <li>specify the IP address version format via one of the supported formats <code>IPV4</code>,   <code>IPV6</code>, or if it can be either, <code>IPV4_OR_IPV6</code> (see AIP-202)</li> </ul>"},{"location":"template/0148/#uid","title":"uid","text":"<p>The output only <code>string uid</code> field refers to a system-assigned unique identifier for a resource. When provided, this field must be a UUID4 and must specify this format via the <code>UUID4</code> format extension (see AIP-202). Declarative-friendly resources should include this field.</p>"},{"location":"template/0148/#further-reading","title":"Further reading","text":"<ul> <li>For standardized codes, see AIP-143.</li> <li>For the <code>etag</code> field, see AIP-154.</li> <li>For the <code>request_id</code> field, see AIP-155.</li> <li>For the <code>filter</code> field, see AIP-160.</li> <li>For fields related to resource revisions, see AIP-162.</li> <li>For the <code>validate_only</code> field, see AIP-163.</li> <li>For fields related to soft delete and undelete, see AIP-164.</li> </ul>"},{"location":"template/0148/#rationale","title":"Rationale","text":""},{"location":"template/0148/#well-known-string-fields_1","title":"Well known string fields","text":"<p>Some fields represent very well defined concepts or artifacts that sometimes also have strict governance of their semantics. For such fields, presenting an equally standardized API surface is important. This enables development of improved API consumer tools and documentation, as well as a more unified user experience across the platform.</p>"},{"location":"template/0148/#history","title":"History","text":"<p>Before 2023-07, <code>purge_time</code> for soft-deleted resources was also called <code>expire_time</code>. <code>purge_time</code> was introduced to reduce user confusion.</p>"},{"location":"template/0148/#changelog","title":"Changelog","text":"<ul> <li>2023-10-05: Introduce well known string fields with IP Address and <code>uid</code>.</li> <li>2023-08-14: Introduce the term <code>annotations</code> from AIP-128.</li> <li>2023-07-13: Introduce the term <code>purge_time</code>.</li> <li>2021-04-06: Require output only field behavior for <code>uid</code> and <code>delete_time</code>   fields.</li> </ul>"},{"location":"template/0149/","title":"Unset field values","text":"<p>In many messages, many fields are optional: the user is not required to provide them, or for output fields, the service might not populate the field.</p> <p>In most cases, there is no meaningful difference between setting it to a default value (such as <code>0</code>) as opposed to not setting it at all; however, occasionally this distinction is meaningful.</p>"},{"location":"template/0149/#guidance","title":"Guidance","text":"<p>Services defined in protocol buffers should use the <code>optional</code> keyword for primitives if and only if it is necessary to distinguish setting the field to its default value (<code>0</code>, <code>false</code>, or empty string) from not setting it at all:</p> <pre><code>// A representation of a book in a library.\nmessage Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The name of the book.\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The rating for the book, from 0 to 5.\n  // 0 is distinct from no rating.\n  optional int32 rating = 2;\n}\n</code></pre> <p>Important: Services should not need to distinguish between the default value and unset most of the time; if an alternative design does not require such a distinction, it is usually preferred. In practice, this means <code>optional</code> should only ever be used for integers and floats.</p> <p>Important: Tracking field presence is not the same as documenting API field behavior as defined in AIP-203. For example, a field labeled with <code>optional</code> for presence tracking may also be annotated as <code>google.api.field_behavior = REQUIRED</code> if the field must be set. If you only want to document the server perceived behavior of a field, read AIP-203.</p>"},{"location":"template/0149/#backwards-compatibility","title":"Backwards compatibility","text":"<p>It is a backwards incompatible change to add or remove the <code>optional</code> qualifier to an existing field. This is because the compiled src API is changed (in some languages). For example, in Golang, adding <code>optional</code> changes the field type of primitives to be the pointer variant of their original type, e.g. a field formerly of type <code>string</code> becomes <code>*string</code>, etc. Accordingly, this change requires that both clients and servers update their usage of the changed field in unison, which is risky and error prone. Additional information is documented by Protobuf.</p>"},{"location":"template/0149/#rationale","title":"Rationale","text":""},{"location":"template/0149/#field-behavior-and-optional","title":"field behavior and <code>optional</code>","text":"<p>The field behavior annotation and <code>optional</code> label are not mutually exclusive, because they address different problems. The former, <code>google.api.field_behavior</code>, focuses on communicating the server's perception of a field within the API e.g. if it is required or not, if it is immutable, etc. The latter, proto3's <code>optional</code>, is a wire format and code generation option that is strictly for toggling field presence tracking. While it might be confusing for a field to be simultaneously annotated with <code>google.api.field_behavior = REQUIRED</code> and labeled as <code>optional</code>, they are unrelated in practice and can reasonably be used together.</p>"},{"location":"template/0149/#changelog","title":"Changelog","text":"<ul> <li>2024-06-05: Add backwards compatibility considerations</li> <li>2023-06-20: Differentiate from field behavior documentation</li> </ul>"},{"location":"template/0151/","title":"Long-running operations","text":"<p>Occasionally, an API may need to expose a method that takes a significant amount of time to complete. In these situations, it is often a poor user experience to simply block while the task runs; rather, it is better to return some kind of promise to the user and allow the user to check back in later.</p> <p>The long-running operations pattern is roughly analogous to a Python Future, or a Node.js Promise. Essentially, the user is given a token that can be used to track progress and retrieve the result.</p>"},{"location":"template/0151/#guidance","title":"Guidance","text":"<p>Individual API methods that might take a significant amount of time to complete should return a <code>google.longrunning.Operation</code> object instead of the ultimate response message.</p> <pre><code>// Create a book.\nrpc CreateBook(CreateBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n</code></pre> <ul> <li>The response type must be <code>google.longrunning.Operation</code>. The <code>Operation</code>   proto definition must not be copied into individual APIs.</li> <li>The response must not be a streaming response.</li> <li>The method must include a <code>google.longrunning.operation_info</code> annotation,   which must define both response and metadata types.</li> <li>The response and metadata types must be defined in the file where the     RPC appears, or a file imported by that file.</li> <li>If the response and metadata types are defined in another package, the     fully-qualified message name must be used.</li> <li>The response type should not be <code>google.protobuf.Empty</code> (except for     <code>Delete</code> methods), unless it is certain that response data will     never be needed. If response data might be added in the future, define an     empty message for the RPC response and use that.</li> <li>The metadata type is used to provide information such as progress, partial     failures, and similar information on each <code>GetOperation</code> call. The metadata     type should not be <code>google.protobuf.Empty</code>, unless it is certain that     metadata will never be needed. If metadata might be added in the future,     define an empty message for the RPC metadata and use that.</li> <li>APIs with messages that return <code>Operation</code> must implement the   <code>Operations</code> service. Individual APIs must not define their own   interfaces for long-running operations to avoid non-uniformity.</li> <li>If an RPC supports a validate-only mode, the response to a   validation request must be one of the following:</li> <li>A successful response with an <code>Operation</code> which is already complete, with     the <code>done</code> field set to <code>true</code>, and a valid (but potentially empty) response     message in the <code>response</code> field, wrapped in a <code>google.protobuf.Any</code> message.     The <code>name</code> field may be empty, to avoid the service having to maintain     state for successful validation.</li> <li>An immediate error response (typically \"bad request\")</li> <li>An <code>Operation</code> with the <code>done</code> field set to <code>false</code>, to indicate     long-running validation. In this case, the <code>name</code> field must be set,     to allow clients to poll the long-running validation operation until it     has completed. Successful validation must eventually be represented by     an operation with <code>done=true</code> and a valid (but potentially empty) wrapped     response message in the <code>response</code> field. Unsuccessful validation must     eventually be represented by an operation with <code>done=true</code> and the error     details provided in the <code>error</code> field.</li> </ul> <p>Note: User expectations can vary on what is considered \"a significant amount of time\" depending on what work is being done. A good rule of thumb is 10 seconds.</p>"},{"location":"template/0151/#standard-methods","title":"Standard methods","text":"<p>APIs may return an <code>Operation</code> from the <code>Create</code>, <code>Update</code>, or <code>Delete</code> standard methods if appropriate. In this case, the response type in the <code>operation_info</code> annotation must be the standard and expected response type for that standard method.</p> <p>When creating or deleting a resource with a long-running operation, the resource should be included in <code>List</code> and <code>Get</code> calls; however, the resource should indicate that it is not usable, generally with a state enum.</p>"},{"location":"template/0151/#parallel-operations","title":"Parallel operations","text":"<p>A resource may accept multiple operations that will work on it in parallel, but is not obligated to do so:</p> <ul> <li>Resources that accept multiple parallel operations may place them in a   queue rather than work on the operations simultaneously.</li> <li>Resources that do not permit multiple operations in parallel (denying any   new operation until the one that is in progress finishes) must return   <code>ABORTED</code> if a user attempts a parallel operation, and include an error   message explaining the situation.</li> <li>Resources with declarative-friendly APIs may allow subsequent   updates to preempt existing operations. In this case, the latest update   begins processing and previous operations are marked as <code>ABORTED</code> with an   error message explaining the situation.</li> </ul>"},{"location":"template/0151/#expiration","title":"Expiration","text":"<p>APIs may allow their operation resources to expire after sufficient time has elapsed after the operation completed.</p> <p>Note: A good rule of thumb for operation expiry is 30 days.</p>"},{"location":"template/0151/#errors","title":"Errors","text":"<p>Errors that prevent a long-running operation from starting must return an error response (AIP-193), similar to any other method.</p> <p>Errors that occur over the course of an operation may be placed in the metadata message. The errors themselves must still be represented with a google.rpc.Status object.</p>"},{"location":"template/0151/#backwards-compatibility","title":"Backwards compatibility","text":"<p>Changing either the <code>response_type</code> or <code>metadata_type</code> of a long-running operation is a breaking change.</p>"},{"location":"template/0151/#rationale","title":"Rationale","text":""},{"location":"template/0151/#validate-only-behavior","title":"Validate-only behavior","text":"<p>The guidance for validate-only responses comes from a tension between clients, which benefit from \"fully formed\" operations that can be treated uniformly, and servers, which don't wish to maintain additional state for trivial operations. It seems counterintuitive that just validating a request should generate more state, but a full operation response that can be fetched later would either require that or \"special\" singleton operation IDs. The guidance provided is a compromise: by returning a \"done\" operation, clients can use existing logic to check that the operation has completed successfully (and therefore doesn't need to be fetched for an updated status) but server don't need to maintain any additional state.</p>"},{"location":"template/0151/#changelog","title":"Changelog","text":"<ul> <li>2024-04-23: Provided pattern for validation on RPCs returning   long-running operations.</li> <li>2022-05-31: Added compatibility section.</li> <li>2020-08-24: Clarified that responses are not streaming responses.</li> <li>2020-06-24: Added guidance for parallel operations.</li> <li>2020-03-20: Clarified that both <code>response_type</code> and <code>metadata_type</code> are   required.</li> <li>2019-11-22: Added a short explanation of what <code>metadata_type</code> is for.</li> <li>2019-09-23: Added guidance on errors.</li> <li>2019-08-23: Added guidance about fully-qualified message names when the   message name is in another package.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0152/","title":"Jobs","text":"<p>Occasionally, APIs may need to expose a task that takes significant time to complete, and where a transient long-running operation is not appropriate. For example, a task could need to run repeatedly, or have separate permissions for configuring the task as opposed to running it.</p>"},{"location":"template/0152/#guidance","title":"Guidance","text":"<p>An API may define a <code>Job</code> resource to represent a particular task with distinct setup, configuration, and execution:</p> <pre><code>message WriteBookJob {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/WriteBookJob\"\n    pattern: \"publishers/{publisher}/writeBookJobs/{write_book_job}\"\n  };\n\n  // Name and other fields...\n}\n</code></pre> <ul> <li>The name of the resource must end with the word \"Job\".</li> <li>The prefix should be a valid RPC name, with a verb and a noun.</li> <li>The service should define all five of the standard methods (AIP-131,   AIP-132, AIP-133, AIP-134, AIP-135), and use them as the   primary way to configure the job.</li> </ul>"},{"location":"template/0152/#run-method","title":"Run method","text":"<p>The service should define a <code>Run</code> custom method that executes the job immediately:</p> <pre><code>rpc RunWriteBookJob(RunWriteBookJobRequest)\n    returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/writeBookJobs/*}:run\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"RunWriteBookJobResponse\"\n    metadata_type: \"RunWriteBookJobMetadata\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Run</code>. The remainder of the   RPC name should be the singular form of the job resource being run.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The method should return a long-running operation, which   must resolve to a response message that includes the result of running   the job.</li> <li>The response message name must match the RPC name, with a <code>Response</code>     suffix.</li> <li>The method may use any metadata message it wishes.</li> <li>The HTTP verb must be <code>POST</code>, as is usual for custom methods.</li> <li>The body clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>The URI path should contain a single <code>name</code> variable corresponding to the   name of the job resource being run.</li> <li>The URI path must end with <code>:run</code>.</li> <li>Errors that prevent execution of the job from starting must return an   error response (AIP-193), similar to any other method. Errors that occur   over the course of the job execution may be placed in the metadata   message. The errors themselves must still be represented with a   <code>google.rpc.Status</code> object.</li> </ul>"},{"location":"template/0152/#run-request-message","title":"Run request message","text":"<p>Run methods implement a common request message pattern:</p> <pre><code>message RunWriteBookJobRequest {\n  // The name of the job to run.\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/WriteBookJob\"\n    }];\n}\n</code></pre> <ul> <li>A singular <code>string name</code> field must be included.</li> <li>The field should be annotated as required.</li> <li>The field should identify the resource type that it     references.</li> </ul>"},{"location":"template/0152/#executions-and-results","title":"Executions and results","text":"<p>Ordinarily, the API should provide results to the user as the final response of the <code>Run</code> method. However, this is sometimes insufficient; for example, a job that runs on a recurring schedule in the background can not deliver results to the user in this way.</p> <p>The service may store resources representing individual executions along with their result as a sub-collection of resources under the job, which allows the user to list past job executions. A service that does this should define the <code>Get</code>, <code>List</code>, and <code>Delete</code> methods for the execution resources:</p> <pre><code>message WriteBookJobExecution {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/WriteBookJobExecution\"\n    pattern: \"publishers/{publisher}/writeBookJobs/{write_book_job}/executions/{execution}\"\n  };\n\n  // Name and other information about the execution, such as metadata, the\n  // result, error information, etc.\n}\n</code></pre> <p>In this case, the operation returned by job's <code>Run</code> method should refer to the child resource.</p>"},{"location":"template/0152/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-11-02: Expanded guidance on HTTP, field behavior, and resource   reference annotations and request format.</li> </ul>"},{"location":"template/0153/","title":"Import and export","text":"<p>Many users want to be able to load data into an API, or get their existing data out of an API. This is particularly important for enterprise users, who are often concerned about vendor lock-in.</p>"},{"location":"template/0153/#guidance","title":"Guidance","text":"<p>APIs may support import and export operations, which may create multiple new resources, or they may populate data into a single resource.</p>"},{"location":"template/0153/#multiple-resources","title":"Multiple resources","text":"<p>Services may support importing and exporting multiple resources into or out of an API, and should implement a common pattern to do so:</p> <pre><code>rpc ImportBooks(ImportBooksRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:import\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"ImportBooksResponse\"\n    metadata_type: \"ImportBooksMetadata\"\n  };\n}\n\nrpc ExportBooks(ExportBooksRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:export\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"ExportBooksResponse\"\n    metadata_type: \"ExportBooksMetadata\"\n  };\n}\n</code></pre> <ul> <li>The method must return a long-running operation (see AIP-151) unless   the service can guarantee that it will never need more than a few seconds   to complete.</li> <li>The HTTP verb must be <code>POST</code>, and the <code>body</code> must be <code>\"*\"</code>.</li> <li>A <code>parent</code> field should be included as part of the URI.</li> <li>If importing into or exporting from multiple resources is required, the API     should keep the <code>parent</code> field and allow the user to use the <code>-</code>     character to indicate multiple parents (see AIP-159).</li> <li>On import, if the user provides a specific parent, the API must reject     any imported resources that would be added to a different parent.</li> <li>The URI suffix should be <code>:import</code> or <code>:export</code>.</li> </ul>"},{"location":"template/0153/#data-for-a-single-resource","title":"Data for a single resource","text":"<p>Services may support importing and exporting data into or out of a single resource, and should implement a common pattern to do so:</p> <pre><code>rpc ImportPages(ImportPagesRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{book=publishers/*/books/*}:importPages\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"ImportPagesResponse\"\n    metadata_type: \"ImportPagesMetadata\"\n  };\n}\n\nrpc ExportPages(ExportPagesRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{book=publishers/*/books/*}:exportPages\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"ExportPagesResponse\"\n    metadata_type: \"ExportPagesMetadata\"\n  };\n}\n</code></pre> <ul> <li>The method must return a long-running operation (see AIP-151) unless   the service can guarantee that it will never need more than a few seconds   to complete.</li> <li>The HTTP verb must be <code>POST</code>, and the <code>body</code> must be <code>\"*\"</code>.</li> <li>A field representing the resource that data is being imported into should   be included as part of the URI. The field should be named after the   resource (and should not be called <code>name</code>).</li> <li>The URI suffix should include both the verb and a noun for the data itself,   such as <code>:importPages</code> or <code>:exportPages</code>.</li> </ul>"},{"location":"template/0153/#request-object","title":"Request object","text":"<p>Imports and exports often require two fundamentally different types of configuration:</p> <ol> <li>Configuration specific to the source or destination.</li> <li>Configuration regarding the imported or exported data itself.</li> </ol> <p>Source or destination configuration should be grouped into a single message and placed inside a oneof:</p> <pre><code>message ImportBooksRequest {\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n  oneof source {\n    AuthorSource author_source = 2;\n    TranslatorSource translator_source = 3;\n  }\n  string isbn_prefix = 4;\n}\n\nmessage ExportBooksRequest {\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n  oneof destination {\n    PrinterDestination printer_destination = 2;\n    TranslatorDestination translator_destination = 3;\n  }\n  string filter = 4;\n}\n</code></pre> <ul> <li>The source configuration messages must be placed within a <code>oneof source</code>   (for import) or <code>oneof destination</code> (for export), even if there is only one.   (This maintains flexibility to add more later.)</li> <li>Configuration related to the data itself (and therefore common across all   sources) must be placed at the top-level of the request message.</li> </ul> <p>Note: The configuration for import and export may be different from one another. (For example, it would be sensible to import from a file but export to a directory.)</p>"},{"location":"template/0153/#inline-sources","title":"Inline sources","text":"<p>APIs may also permit import and export \"inline\", where the contents to be imported or exported are provided in the request or response.</p> <pre><code>message InlineSource {\n  repeated Book books = 1;\n}\n</code></pre> <ul> <li>The source or destination should be named <code>InlineSource</code> or   <code>InlineDestination</code>.</li> <li>The message should include a repeated field representing the resource.   However, if the resource structure is complex, the API may use a separate   inline representation. In this situation, the same format must be used   for both import and export.</li> </ul>"},{"location":"template/0153/#partial-failures","title":"Partial failures","text":"<p>While partial failures are normally discouraged, import and export RPCs should include partial failure information in the metadata object. Each individual error should be a <code>google.rpc.Status</code> object describing the error. For more on errors, see AIP-193.</p>"},{"location":"template/0154/","title":"Resource freshness validation","text":"<p>APIs often need to validate that a client and server agree on the current state of a resource before taking some kind of action on that resource. For example, two processes updating the same resource in parallel could create a race condition, where the latter process \"stomps over\" the effort of the former one.</p> <p>ETags provide a way to deal with this, by allowing the server to send a checksum based on the current content of a resource; when the client sends that checksum back, the server can ensure that the checksums match before acting on the request.</p>"},{"location":"template/0154/#guidance","title":"Guidance","text":"<p>A resource may include an <code>etag</code> field on any resource where it is important to ensure that the client has an up to date resource before acting on certain requests:</p> <pre><code>// A representation of a book.\nmessage Book {\n  // Other fields...\n\n  // This checksum is computed by the server based on the value of other\n  // fields, and may be sent on update and delete requests to ensure the\n  // client has an up-to-date value before proceeding.\n  string etag = 99;\n}\n</code></pre> <ul> <li>The etag field must be a string, and must be named <code>etag</code>.</li> <li>The etag field on the resource should not be given any behavior   annotations.</li> <li>The etag field must be provided by the server on output, and values   should conform to RFC 7232.</li> <li>If a user sends back an etag which matches the current etag value, the   service must permit the request (unless there is some other reason for   failure).</li> <li>If a user sends back an etag which does not match the current etag value, the   service must send an <code>ABORTED</code> error response (unless another error takes   precedence, such as <code>PERMISSION_DENIED</code> if the user is not authorized).</li> <li>If the user does not send an etag value at all, the service should permit   the request. However, services with strong consistency or parallelism   requirements may require users to send etags all the time and reject the   request with an <code>INVALID_ARGUMENT</code> error in this case.</li> </ul> <p>Note: ETag values should include quotes as described in RFC 7232. For example, a valid etag is <code>\"foo\"</code>, not <code>foo</code>.</p>"},{"location":"template/0154/#declarative-friendly-resources","title":"Declarative-friendly resources","text":"<p>A resource that is declarative-friendly (AIP-128) must include an <code>etag</code> field.</p>"},{"location":"template/0154/#etags-on-request-methods","title":"Etags on request methods","text":"<p>In some situations, the etag needs to belong on a request message rather than the resource itself. For example, an <code>Update</code> standard method can \"piggyback\" off the <code>etag</code> field on the resource, but the <code>Delete</code> standard method can not:</p> <pre><code>message DeleteBookRequest {\n  // The name of the book.\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n\n  // The current etag of the book.\n  // If an etag is provided and does not match the current etag of the book,\n  // deletion will be blocked and an ABORTED error will be returned.\n  string etag = 2 [(google.api.field_behavior) = OPTIONAL];\n}\n</code></pre> <p>On a request message, the <code>etag</code> field should be given a behavior annotation - either <code>REQUIRED</code> or <code>OPTIONAL</code>. See AIP-203 for more information.</p> <p>An <code>etag</code> field may also be used on custom methods, similar to the example above.</p>"},{"location":"template/0154/#strong-and-weak-etags","title":"Strong and weak etags","text":"<p>ETags can be either \"strongly validated\" or \"weakly validated\":</p> <ul> <li>A strongly validated etag means that two resources bearing the same etag are   byte-for-byte identical.</li> <li>A weakly validated etag means that two resources bearing the same etag are   equivalent, but may differ in ways that the service does not consider to be   important.</li> </ul> <p>Resources may use either strong or weak etags, as it sees fit, but should document the behavior. Additionally, weak etags must have a <code>W/</code> prefix as mandated by RFC 7232.</p>"},{"location":"template/0154/#further-reading","title":"Further reading","text":"<ul> <li>For how to retry on errors in client libraries, see AIP-194.</li> </ul>"},{"location":"template/0154/#changelog","title":"Changelog","text":"<ul> <li>2021-04-01: Updated an additional reference to <code>FAILED_PRECONDITION</code>   to <code>ABORTED</code>.</li> <li>2021-03-05: Changed the etag error from <code>FAILED_PRECONDITION</code> (which   becomes HTTP 400) to <code>ABORTED</code> (409).</li> <li>2020-10-06: Added declarative-friendly resource requirement.</li> <li>2020-09-02: Clarified that other errors may take precedence over   <code>FAILED_PRECONDITION</code> for etag mismatches.</li> <li>2020-09-02: Add guidance for etags on request messages.</li> <li>2019-09-23: Changed the title to \"resource freshness validation\".</li> </ul>"},{"location":"template/0155/","title":"Request identification","text":"<p>It is sometimes useful for an API to have a unique, customer-provided identifier for particular requests. This can be useful for several purposes, such as de-duplicating requests from parallel processes, ensuring the safety of retries, or auditing.</p> <p>The most important purpose for request IDs is to provide idempotency guarantees: allowing the same request to be issued more than once without subsequent calls having any effect. In the event of a network failure, the client can retry the request, and the server can detect duplication and ensure that the request is only processed once.</p>"},{"location":"template/0155/#guidance","title":"Guidance","text":"<p>APIs may add a <code>string request_id</code> parameter to request messages (including those of standard methods) in order to uniquely identify particular requests.</p> <pre><code>message CreateBookRequest {\n  // The parent resource where this book will be created.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The ID to use for the book, which will become the final component of\n  // the book's resource name.\n  //\n  // This value should be 4-63 characters, and valid characters\n  // are /[a-z][0-9]-/.\n  string book_id = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // The book to create.\n  Book book = 3 [(google.api.field_behavior) = REQUIRED];\n\n  // A unique identifier for this request. Restricted to 36 ASCII characters.\n  // A random UUID is recommended.\n  // This request is only idempotent if a `request_id` is provided.\n  string request_id = 4 [(google.api.field_info).format = UUID4];\n}\n</code></pre> <ul> <li>Providing a request ID must guarantee idempotency.</li> <li>If a duplicate request is detected, the server should return the     response for the previously successful request, because the client most     likely did not receive the previous response.</li> <li>APIs may choose any reasonable timeframe for honoring request IDs.</li> <li>The <code>request_id</code> field must be provided on the request message to which   it applies (and it must not be a field on resources themselves).</li> <li>Request IDs should be optional.</li> <li>Request IDs should be able to be UUIDs, and may allow UUIDs to be the   only valid format. The format restrictions for request IDs must be   documented.</li> <li>Request IDs that are UUIDs must be annotated with the     <code>google.api.FieldInfo.Format</code> value <code>UUID4</code> using the extension     <code>(google.api.field_info).format = UUID4</code>. See AIP-202 for more.</li> </ul>"},{"location":"template/0155/#stale-success-responses","title":"Stale success responses","text":"<p>In some unusual situations, it may not be possible to return an identical success response. For example, a duplicate request to create a resource may arrive after the resource has not only been created, but subsequently updated; because the service has no other need to retain the historical data, it is no longer feasible to return an identical success response.</p> <p>In this situation, the method may return the current state of the resource instead. In other words, it is permissible to substitute the historical success response with a similar response that reflects more current data.</p>"},{"location":"template/0155/#further-reading","title":"Further reading","text":"<ul> <li>For which codes to retry, see AIP-194.</li> <li>For how to retry errors in client libraries, see   AIP-4221.</li> </ul>"},{"location":"template/0155/#rationale","title":"Rationale","text":""},{"location":"template/0155/#using-uuids-for-request-identification","title":"Using UUIDs for request identification","text":"<p>When a value is required to be unique, leaving the format open-ended can lead to API consumers incorrectly providing a duplicate identifier. As such, standardizing on a universally unique identifier drastically reduces the chance for collisions when done correctly.</p>"},{"location":"template/0155/#changelog","title":"Changelog","text":"<ul> <li>2024-01-08: Add book_id to request message.</li> <li>2023-10-02: Add UUID format extension guidance.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0156/","title":"Singleton resources","text":"<p>APIs sometimes need to represent a resource where exactly one instance of the resource always exists within any given parent. A common use case for this is for a config object.</p>"},{"location":"template/0156/#guidance","title":"Guidance","text":"<p>An API may define singleton resources. A singleton resource must always exist by virtue of the existence of its parent, with one and exactly one per parent.</p> <p>For example:</p> <pre><code>message Config {\n  option (google.api.resource) = {\n    type: \"api.googleapis.com/Config\"\n    pattern: \"users/{user}/config\"\n    singular: \"config\"\n    plural: \"configs\"\n  };\n\n  // additional fields including name\n}\n</code></pre> <p>The <code>Config</code> singleton would have the following RPCs:</p> <pre><code>rpc GetConfig(GetConfigRequest) returns (Config) {\n  option (google.api.http) = {\n    get: \"/v1/{name=users/*/config}\"\n  };\n}\n\nrpc UpdateConfig(UpdateConfigRequest) returns (Config) {\n  option (google.api.http) = {\n    patch: \"/v1/{config.name=users/*/config}\"\n    body: \"config\"\n  };\n}\n</code></pre> <ul> <li>Singleton resources must not have a user-provided or system-generated ID;   their resource name includes the name of their parent followed by   one static-segment.</li> <li>Example: <code>users/1234/config</code></li> <li>Singleton resources are always singular.</li> <li>Example: <code>users/1234/thing</code></li> <li>Singleton resource definitions must provide both the <code>singular</code> and   <code>plural</code> fields (see above example).</li> <li>Singleton resources may parent other resources.</li> <li>Singleton resources must not define the <code>Create</code> or   <code>Delete</code> standard methods. The singleton is implicitly created or   deleted when its parent is created or deleted.</li> <li>Singleton resources should define the <code>Get</code> and   <code>Update</code> methods, and may define custom methods as   appropriate.</li> <li>However, singleton resources must not define the <code>Update</code>     method if all fields on the resource are output only.</li> <li>Singleton resources may define the <code>List</code> method, but must   implement it according to AIP-159. See the example below.</li> <li>The trailing segment in the path pattern that typically represents the     collection should be the <code>plural</code> form of the Singleton resource e.g.     <code>/v1/{parent=users/*}/configs</code>.</li> <li>If a parent resource ID is provided instead of the hyphen <code>-</code> as per     AIP-159, then the service should return a collection of one Singleton     resource corresponding to the specified parent resource.</li> </ul> <pre><code>rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {\n  option (google.api.http) = {\n    get: \"/v1/{parent=users/*}/configs\"\n  };\n}\n\nmessage ListConfigsRequest {\n  // To list all configs, use `-` as the user id.\n  // Formats:\n  // * `users/-`\n  // * `users/{user}`\n  //\n  // Note: Specifying an actual user id will return a collection of one config.\n  // Use GetConfig instead.\n  string parent = 1 [\n    (google.api.resource_reference).child_type = \"api.googleapis.com/Config\"];\n\n  // other standard pagination fields...\n}\n</code></pre>"},{"location":"template/0156/#rationale","title":"Rationale","text":""},{"location":"template/0156/#support-for-standard-list","title":"Support for Standard List","text":"<p>While Singleton resources are not directly part of a collection themselves, they can be viewed as part of their parent's collection. The one-to-one relationship of parent-to-singleton means that for every one parent there is one singleton instance, naturally enabling some collection-based methods when combined with the pattern of Reading Across Collections. The Singleton can present as a collection to the API consumer as it is indirectly one based on its parent. Furthermore, presenting the Singleton resource as a pseudo-collection in such methods enables future expansion to a real collection, should a Singleton be found lacking.</p>"},{"location":"template/0156/#including-plural-definition","title":"Including <code>plural</code> definition","text":"<p>While a Singleton is by definition singular, there are certain cases where a Singleton resource may appear in a plural form e.g., if the service supports Standard List (as defined here). As such, it is better to forward declare the plural form of the Singleton resource type than to not have it when needed.</p>"},{"location":"template/0156/#changelog","title":"Changelog","text":"<ul> <li>2024-04-15: Singletons must specify <code>singular</code> and <code>plural</code> in resource.</li> <li>2023-08-10: Add Standard <code>List</code> support.</li> <li>2023-07-26: Clarified that read-only singletons should not have <code>Update</code>.</li> <li>2021-11-02: Added an example message and state parent eligibility.</li> <li>2021-01-14: Changed example from <code>settings</code> to <code>config</code> for clarity.</li> </ul>"},{"location":"template/0157/","title":"Partial responses","text":"<p>Sometimes, a resource can be either large or expensive to compute, and the API needs to give the user control over which fields it sends back.</p>"},{"location":"template/0157/#guidance","title":"Guidance","text":"<p>APIs may support partial responses in one of two ways:</p>"},{"location":"template/0157/#field-masks-parameter","title":"Field masks parameter","text":"<p>Field masks (<code>google.protobuf.FieldMask</code>) can be used for granting the user fine-grained control over what fields are returned. An API should support the mask in a side channel. For example, the parameter can be specified either using an HTTP query parameter, an HTTP header, or a gRPC metadata entry. Google Cloud APIs specify field masks as a system parameter.</p> <p>Field masks should not be specified in the request.</p> <ul> <li>The value of the field mask parameter must be a <code>google.protobuf.FieldMask</code>.</li> <li>The field mask parameter must be optional:</li> <li>An explicit value of <code>\"*\"</code> should be supported, and must return all     fields.</li> <li>If the field mask parameter is omitted, it must default to <code>\"*\"</code>, unless otherwise documented.</li> <li>An API may allow read masks with non-terminal repeated fields (unlike   update masks), but is not obligated to do so.</li> </ul> <p>Note: Changing the default value of the field mask parameter is a breaking change.</p>"},{"location":"template/0157/#view-enumeration","title":"View enumeration","text":"<p>Alternatively, an API may support partial responses with view enums. View enums are useful for situations where an API only wants to expose a small number of permutations to the user:</p> <pre><code>enum BookView {\n  // The default / unset value.\n  // The API will default to the BASIC view.\n  BOOK_VIEW_UNSPECIFIED = 0;\n\n  // Include basic metadata about the book, but not the full contents.\n  // This is the default value (for both ListBooks and GetBook).\n  BOOK_VIEW_BASIC = 1;\n\n  // Include everything.\n  BOOK_VIEW_FULL = 2;\n}\n</code></pre> <ul> <li>The enum should be specified as a <code>view</code> field on the request message.</li> <li>The enum should be named something ending in <code>-View</code></li> <li>The enum should at minimum have values named <code>BASIC</code> and <code>FULL</code> (although   it may have values other than these).</li> <li>The <code>UNSPECIFIED</code> value must be valid (not an error), and the API   must document what the unspecified value will do).</li> <li>For List RPCs, the effective default value should be <code>BASIC</code>.</li> <li>For Get RPCs, the effective default value should be either <code>BASIC</code> or     <code>FULL</code>.</li> <li>The enum should be defined at the top level of the proto file (as it is   likely to be needed in multiple requests, e.g. both <code>Get</code> and <code>List</code>). See   AIP-126 for more guidance on top-level enumerations.</li> <li>APIs may add fields to a given view over time. APIs must not remove a   field from a given view (this is a breaking change).</li> </ul> <p>Note: If a service requires (or might require) multiple views with   overlapping but distinct values, there is a potential for a namespace   conflict. In this situation, the service should nest the view enum within   the individual resource.</p>"},{"location":"template/0157/#read-masks-as-a-request-field","title":"Read masks as a request field","text":"<p>Warning: Read masks as a single field on the request message, for example: <code>google.protobuf.FieldMask read_mask</code> are DEPRECATED.</p>"},{"location":"template/0157/#changelog","title":"Changelog","text":"<ul> <li>2023-05-09: Fix top-level enum example and link to AIP-126.</li> <li>2022-03-14: Updated guidance on default value and how to specify a read mask.</li> <li>2021-10-06: Updated the guidance with system parameters.</li> <li>2021-03-04: Added guidance for conflicting view enums.</li> </ul>"},{"location":"template/0158/","title":"Pagination","text":"<p>APIs often need to provide collections of data, most commonly in the List standard method. However, collections can often be arbitrarily sized, and also often grow over time, increasing lookup time as well as the size of the responses being sent over the wire. Therefore, it is important that collections be paginated.</p>"},{"location":"template/0158/#guidance","title":"Guidance","text":"<p>RPCs returning collections of data must provide pagination at the outset, as it is a backwards-incompatible change to add pagination to an existing method.</p> <pre><code>// The request structure for listing books.\nmessage ListBooksRequest {\n  // The parent, which owns this collection of books.\n  // Format: publishers/{publisher}\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The maximum number of books to return. The service may return fewer than\n  // this value.\n  // If unspecified, at most 50 books will be returned.\n  // The maximum value is 1000; values above 1000 will be coerced to 1000.\n  int32 page_size = 2;\n\n  // A page token, received from a previous `ListBooks` call.\n  // Provide this to retrieve the subsequent page.\n  //\n  // When paginating, all other parameters provided to `ListBooks` must match\n  // the call that provided the page token.\n  string page_token = 3;\n}\n\n// The response structure from listing books.\nmessage ListBooksResponse {\n  // The books from the specified publisher.\n  repeated Book books = 1;\n\n  // A token that can be sent as `page_token` to retrieve the next page.\n  // If this field is omitted, there are no subsequent pages.\n  string next_page_token = 2;\n}\n</code></pre> <ul> <li>Request messages for collections should define an <code>int32 page_size</code>   field, allowing users to specify the maximum number of results to return.</li> <li>The <code>page_size</code> field must not be required.</li> <li>If the user does not specify <code>page_size</code> (or specifies <code>0</code>), the API     chooses an appropriate default, which the API should document. The API     must not return an error.</li> <li>If the user specifies <code>page_size</code> greater than the maximum permitted by the     API, the API should coerce down to the maximum permitted page size.</li> <li>If the user specifies a negative value for <code>page_size</code>, the API must     send an <code>INVALID_ARGUMENT</code> error.</li> <li>The API may return fewer results than the number requested (including     zero results), even if not at the end of the collection.</li> <li>Request messages for collections should define a <code>string page_token</code>   field, allowing users to advance to the next page in the collection.</li> <li>The <code>page_token</code> field must not be required.</li> <li>If the user changes the <code>page_size</code> in a request for subsequent pages, the     service must honor the new page size.</li> <li>The user is expected to keep all other arguments to the RPC the same; if     any arguments are different, the API should send an <code>INVALID_ARGUMENT</code>     error.</li> <li>The response must not be a streaming response.</li> <li>Response messages for collections should define a   <code>string next_page_token</code> field, providing the user with a page token that may   be used to retrieve the next page.</li> <li>The field containing pagination results should be the first field in     the message and have a field number of <code>1</code>. It should be a repeated     field containing a list of resources constituting a single page of results.</li> <li>If the end of the collection has been reached, the <code>next_page_token</code> field     must be empty. This is the only way to communicate     \"end-of-collection\" to users.</li> <li>If the end of the collection has not been reached (or if the API can not     determine in time), the API must provide a <code>next_page_token</code>.</li> <li>Response messages for collections may provide an <code>int32 total_size</code>   field, providing the user with the total number of items in the list.</li> <li>This total may be an estimate (but the API should explicitly     document that).</li> </ul>"},{"location":"template/0158/#skipping-results","title":"Skipping results","text":"<p>The request definition for a paginated operation may define an <code>int32 skip</code> field to allow the user to skip results.</p> <p>The <code>skip</code> value must refer to the number of individual resources to skip, not the number of pages.</p> <p>For example:</p> <ul> <li>A request with no page token and a <code>skip</code> value of <code>30</code> returns a single page   of results starting with the 31st result.</li> <li>A request with a page token corresponding to the 51st result (because the   first 50 results were returned on the first page) and a <code>skip</code> value of <code>30</code>   returns a single page of results starting with the 81st result.</li> </ul> <p>If a <code>skip</code> value is provided that causes the cursor to move past the end of the collection of results, the response must be <code>200 OK</code> with an empty result set, and not provide a <code>next_page_token</code>.</p>"},{"location":"template/0158/#opacity","title":"Opacity","text":"<p>Page tokens provided by APIs must be opaque (but URL-safe) strings, and must not be user-parseable. This is because if users are able to deconstruct these, they will do so. This effectively makes the implementation details of your API's pagination become part of the API surface, and it becomes impossible to update those details without breaking users.</p> <p>Warning: Base-64 encoding an otherwise-transparent page token is not a sufficient obfuscation mechanism.</p> <p>For page tokens which do not need to be stored in a database, and which do not contain sensitive data, an API may obfuscate the page token by defining an internal protocol buffer message with any data needed, and send the serialized proto, base-64 encoded.</p> <p>Page tokens must be limited to providing an indication of where to continue the pagination process only. They must not provide any form of authorization to the underlying resources, and authorization must be performed on the request as with any other regardless of the presence of a page token.</p>"},{"location":"template/0158/#expiring-page-tokens","title":"Expiring page tokens","text":"<p>Many APIs store page tokens in a database internally. In this situation, APIs may expire page tokens a reasonable time after they have been sent, in order not to needlessly store large amounts of data that is unlikely to be used. It is not necessary to document this behavior.</p> <p>Note: While a reasonable time may vary between APIs, a good rule of thumb is three days.</p>"},{"location":"template/0158/#backwards-compatibility","title":"Backwards compatibility","text":"<p>Adding pagination to an existing RPC is a backwards-incompatible change. This may seem strange; adding fields to proto messages is generally backwards compatible. However, this change is behaviorally incompatible.</p> <p>Consider a user whose collection has 75 resources, and who has already written and deployed code. If the API later adds pagination fields, and sets the default to 50, then that user's code breaks; it was getting all resources, and now is only getting the first 50 (and does not know to advance pagination). Even if the API set a higher default limit, such as 100, the user's collection could grow, and then the code would break.</p> <p>Additionally, client libraries implement automatic pagination, typically representing paginated RPCs using different method signatures to unpaginated ones. This means that adding pagination to a previously-unpaginated method causes a breaking change in those libraries.</p> <p>For this reason, it is important to always add pagination to RPCs returning collections up front; they are consistently important, and they can not be added later without causing problems for existing users.</p> <p>Warning: This also entails that, in addition to presenting the pagination fields, they must be actually implemented with a non-infinite default value. Implementing an in-memory version (which might fetch everything then paginate) is reasonable for initially-small collections.</p>"},{"location":"template/0158/#changelog","title":"Changelog","text":"<ul> <li>2020-05-24: Clarified that adding pagination breaks client   libraries.</li> <li>2020-05-13: Added guidance for skipping results.</li> <li>2020-08-24: Clarified that responses are not streaming responses.</li> <li>2020-06-24: Clarified that page size is always optional for users.</li> <li>2019-02-12: Added guidance on the field being paginated over.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> <li>2019-07-19: Update the opacity requirement from \"should\" to \"must\".</li> </ul>"},{"location":"template/0159/","title":"Reading across collections","text":"<p>Sometimes, it is useful for a user to be able to retrieve resources across multiple collections, or retrieve a single resource without needing to know what collection it is in.</p>"},{"location":"template/0159/#guidance","title":"Guidance","text":"<p>APIs may support reading resources across multiple collections by allowing users to specify a <code>-</code> (the hyphen or dash character) as a wildcard character in a standard <code>List</code> method:</p> <pre><code>GET /v1/publishers/-/books?filter=...\n</code></pre> <ul> <li>The URI pattern must still be specified with <code>*</code> and permit the   collection to be specified; a URI pattern must not hard-code the <code>-</code>   character.</li> <li>The method must explicitly document that this behavior is supported.</li> <li>The resources provided in the response must use the canonical name of the   resource, with the actual parent collection identifiers (instead of <code>-</code>).</li> <li>Services may support reading across collections on <code>List</code> requests   regardless of whether the identifiers of the child resources are guaranteed   to be unique. However, services must not support reading across   collections on <code>Get</code> requests if the child resources might have a collision.</li> <li>Cross-parent requests should not support <code>order_by</code>. If they do, the   field must document that it is best effort. This is because cross-parent   requests introduce ambiguity around ordering, especially if there is   difficulty reaching a parent (see AIP-217).</li> </ul> <p>Important: If listing across multiple collections introduces the possibility of partial failures due to unreachable parents (such as when listing across locations), the method must indicate this following the guidance in AIP-217.</p>"},{"location":"template/0159/#unique-resource-lookup","title":"Unique resource lookup","text":"<p>Sometimes, a resource within a sub-collection has an identifier that is unique across parent collections. In this case, it may be useful to allow a <code>Get</code> method to retrieve that resource without knowing which parent collection contains it. In such cases, APIs may allow users to specify the wildcard collection ID <code>-</code> (the hyphen or dash character) to represent any parent collection:</p> <pre><code>GET https://example.googleapis.com/v1/publishers/-/books/{book}\n</code></pre> <ul> <li>The URI pattern must still be specified with <code>*</code> and permit the   collection to be specified; a URI pattern must not hard-code the <code>-</code>   character.</li> <li>The method must explicitly document that this behavior is supported.</li> <li>The resource name in the response must use the canonical name of the   resource, with actual parent collection identifiers (instead of <code>-</code>). For   example, the request above returns a resource with a name like   <code>publishers/123/books/456</code>, not <code>publishers/-/books/456</code>.</li> <li>The resource ID must be unique within parent collections.</li> </ul>"},{"location":"template/0159/#further-reading","title":"Further reading","text":"<ul> <li>For partial failures due to unreachable resources, see AIP-217.</li> </ul>"},{"location":"template/0159/#changelog","title":"Changelog","text":"<ul> <li>2019-08-26: Added a reference to guidance for unreachable resources.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0160/","title":"Filtering","text":"<p>Often, when listing resources (using a list method as defined in AIP-132 or something reasonably similar), it is desirable to filter over the collection and only return results that the user is interested in.</p> <p>It is tempting to define a structure to handle the precise filtering needs for each API. However, filtering requirements evolve frequently, and therefore it is prudent to use a string field with a structured syntax accessible to a non-technical audience. This allows updates to be able to be made transparently, without waiting for UI or client updates.</p> <p>Note: Because list filters are intended for a potentially non-technical audience, they sometimes borrow from patterns of colloquial speech rather than common patterns found in code.</p>"},{"location":"template/0160/#guidance","title":"Guidance","text":"<p>APIs may provide filtering to users on <code>List</code> methods (or similar methods to query a collection, such as <code>Search</code>). If they choose to do so, they should follow the common specification for filters discussed here. The syntax is formally defined in the EBNF grammar.</p> <p>When employing filtering, a request message should have exactly one filtering field, <code>string filter</code>. Filtering of related objects is handled through traversal or functions.</p> <p>Note: List Filters have fuzzy matching characteristics with support for result ranking and scoring. For developers interested in deterministic evaluation of list filters, see CEL.</p>"},{"location":"template/0160/#literals","title":"Literals","text":"<p>A bare literal value (examples: \"42\", \"Hugo\") is a value to be matched against. Literals appearing alone (with no specified field) should usually be matched anywhere it may appear in an object's field values.</p> <p>However, a service may choose to only consider certain fields; if so, it must document which fields it considers. A service may include new fields over time, but should do so judiciously and consider impact on existing users.</p> <p>Note: Literals separated by whitespace are considered to have a fuzzy variant of <code>AND</code>. Therefore, <code>Victor Hugo</code> is roughly equivalent to <code>Victor AND Hugo</code>.</p>"},{"location":"template/0160/#logical-operators","title":"Logical Operators","text":"<p>Filtering implementations should provide the binary operators:</p> Operator Example Meaning <code>AND</code> <code>a AND b</code> True if <code>a</code> and <code>b</code> are true. <code>OR</code> <code>a OR b OR c</code> True if any of <code>a</code>, <code>b</code>, <code>c</code> are true. <p>Note: To match common patterns of speech, the <code>OR</code> operator has higher precedence than <code>AND</code>, unlike what is found in most programming languages. The expression <code>a AND b OR c</code> evaluates: <code>a AND (b OR c)</code>. API documentation and examples should encourage the use of explicit parentheses to avoid confusion, but should not require explicit parentheses.</p>"},{"location":"template/0160/#negation-operators","title":"Negation Operators","text":"<p>Filtering implementations should provide the unary operators <code>NOT</code> and <code>-</code>. These are used interchangeably, and a service that supports negation must support both formats.</p> Operator Example Meaning <code>NOT</code> <code>NOT a</code> True if <code>a</code> is not true. <code>-</code> <code>-a</code> True if <code>a</code> is not true."},{"location":"template/0160/#comparison-operators","title":"Comparison Operators","text":"<p>Filtering implementations should provide the binary comparison operators <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, and <code>&gt;=</code> for string, numeric, timestamp, and duration fields (but should not provide them for booleans or enums).</p> Operator Example Meaning <code>=</code> <code>a = true</code> True if <code>a</code> is true. <code>!=</code> <code>a != 42</code> True unless <code>a</code> equals 42. <code>&lt;</code> <code>a &lt; 42</code> True if <code>a</code> is a numeric value below 42. <code>&gt;</code> <code>a &gt; \"foo\"</code> True if <code>a</code> is lexically ordered after \"foo\". <code>&lt;=</code> <code>a &lt;= \"foo\"</code> True if <code>a</code> is \"foo\" or lexically before it. <code>&gt;=</code> <code>a &gt;= 42</code> True if <code>a</code> is a numeric value of 42 or higher. <p>Note: Unlike in most programming languages, field names must appear on the left-hand side of a comparison operator; the right-hand side only accepts literals and logical operators.</p> <p>Because filters are accepted as query strings, type conversion takes place to translate the string to the appropriate strongly-typed value:</p> <ul> <li>Enums expect the enum's string representation (case-sensitive).</li> <li>Booleans expect <code>true</code> and <code>false</code> literal values.</li> <li>Numbers expect the standard integer or float representations. For floats,   exponents are supported (e.g. <code>2.997e9</code>).</li> <li>Durations expect a numeric representation followed by an <code>s</code> suffix (for   seconds). Examples: <code>20s</code>, <code>1.2s</code>.</li> <li>Timestamps expect an RFC-3339 formatted string (e.g.   <code>2012-04-21T11:30:00-04:00</code>). UTC offsets are supported.</li> </ul> <p>Warning: The identifiers <code>true</code>, <code>false</code>, and <code>null</code> only carry intrinsic meaning when used in the context of a typed field reference.</p> <p>Additionally, when comparing strings for equality, services should support wildcards using the <code>*</code> character; for example, <code>a = \"*.foo\"</code> is true if <code>a</code> ends with \".foo\".</p>"},{"location":"template/0160/#traversal-operator","title":"Traversal operator","text":"<p>Filtering implementations should provide the <code>.</code> operator, which indicates traversal through a message, map, or struct.</p> Example Meaning <code>a.b = true</code> True if <code>a</code> has a boolean <code>b</code> field that is true. <code>a.b &gt; 42</code> True if <code>a</code> has a numeric <code>b</code> field that is above 42. <code>a.b.c = \"foo\"</code> True if <code>a.b</code> has a string <code>c</code> field that is \"foo\". <p>Traversal must be written using the field names from the resource. If a service wishes to support \"implicit fields\" of some kind, they must do so through well-documented functions. A service may specify a subset of fields that are supported for traversal.</p> <p>If a user attempts to traverse to a field that is not defined on the message, the service should return an error with <code>INVALID_ARGUMENT</code>. A service may permit traversal to undefined keys on maps and structs, and should document how it behaves in this situation.</p> <p>Important: The <code>.</code> operator must not be used to traverse through a repeated field or list, except for specific use with the <code>:</code> operator.</p>"},{"location":"template/0160/#has-operator","title":"Has Operator","text":"<p>Filtering implementations must provide the <code>:</code> operator, which means \"has\". It is usable with collections (repeated fields or maps) as well as messages, and behaves slightly differently in each case.</p> <p>Repeated fields query to see if the repeated structure contains a matching element:</p> Example Meaning <code>r:42</code> True if <code>r</code> contains 42. <code>r.foo:42</code> True if <code>r</code> contains an element <code>e</code> such that <code>e.foo = 42</code>. <p>Important: Filters can not query a specific element on a repeated field for a value. For example, <code>e.0.foo = 42</code> and <code>e[0].foo = 42</code> are not valid filters.</p> <p>Maps, structs, messages can query either for the presence of a field in the map or a specific value:</p> Example Meaning <code>m:foo</code> True if <code>m</code> contains the key \"foo\". <code>m.foo:*</code> True if <code>m</code> contains the key \"foo\". <code>m.foo:42</code> True if <code>m.foo</code> is 42. <p>There are two slight distinctions when parsing messages:</p> <ul> <li>When traversing messages, a field is only considered to be present if it has   a non-default value.</li> <li>When traversing messages, field names are snake case, although   implementations may choose to support automatic conversion between camel   case and snake case.</li> </ul>"},{"location":"template/0160/#functions","title":"Functions","text":"<p>The filtering language supports a function call syntax in order to support API-specific extensions. An API may define a function using the <code>call(arg...)</code> syntax, and must document any specific functions it supports.</p>"},{"location":"template/0160/#limitations","title":"Limitations","text":"<p>A service may specify further structure or limitations for filter queries, above what is defined here. For example, a service may support the logical operators but only permit a certain number of them (to avoid \"queries of death\" or other performance concerns).</p> <p>Further structure or limitations must be clearly documented, must not violate requirements set forth in this document, and a non-compliant filter query must error with <code>INVALID_ARGUMENT</code>.</p>"},{"location":"template/0161/","title":"Field masks","text":"<p>Often, when updating resources (using an update method as defined in AIP-134 or something reasonably similar), it is desirable to specify exactly which fields are being updated, so that the service can ignore the rest, even if the user sends new values.</p> <p>It is tempting to define a mask format to handle the precise needs for each API. However, masking requirements evolve, and therefore it is prudent to use a structured syntax. This allows updates to be able to be made transparently, without waiting for UI or client updates.</p>"},{"location":"template/0161/#guidance","title":"Guidance","text":"<p>These masks of field names are called \"field masks\". Fields representing a field mask must use the <code>google.protobuf.FieldMask</code> type. Field masks are most common on Update requests (AIP-134).</p> <p>Field masks must always be relative to the resource:</p> <p>Warning: Read masks as a single field on the request message, for example: <code>google.protobuf.FieldMask read_mask</code> are DEPRECATED.</p> <pre><code>message UpdateBookRequest {\n  // The book to update.\n  //\n  // The book's `name` field is used to identify the book to update.\n  // Format: publishers/{publisher}/books/{book}\n  Book book = 1 [(google.api.field_behavior) = REQUIRED];\n\n  // The list of fields to update.\n  // Fields are specified relative to the book\n  // (e.g. `title`, `rating`; *not* `book.title` or `book.rating`).\n  google.protobuf.FieldMask update_mask = 2;\n}\n</code></pre>"},{"location":"template/0161/#read-write-consistency","title":"Read-write consistency","text":"<p>Read and write behavior for field masks must be self-consistent if a mask is present:</p> <ul> <li>If a user updates a resource with a given mask, and then reads the same   resource with the same mask, the exact same data must be returned.</li> <li>Exception: Output only fields.</li> <li>Similarly, reading a resource with a given mask and then updating the   resource with the returned data and the same mask must be a no-op.</li> </ul> <p>Note: This implies that any mask that is valid for either read or write must be valid for both.</p>"},{"location":"template/0161/#specifying-specific-fields","title":"Specifying specific fields","text":"<p>Field masks must permit the specification of specific fields in a defined struct, using the <code>.</code> character for traversal.</p> <p>Because field masks are always relative to the resource, direct fields on the resource require no traversal (examples: <code>title</code>, <code>rating</code>). Traversal is used when resources contain messages (example: <code>author.given_name</code>).</p> <p>Note: A user must be able to specify either a field as a whole, or one of its subfields: <code>author</code> and <code>author.given_name</code> are both valid.</p>"},{"location":"template/0161/#map-fields","title":"Map fields","text":"<p>Field masks may permit the specification of specific fields in a map, if and only if the map's keys are either strings or integers, using the <code>.</code> character for traversal.</p> <p>Field masks should support string keys that contain characters that are problematic for the field mask syntax, using the backtick character.</p> <pre><code>message Book {\n  // The name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1;\n\n  // Reviews for the back cover. The key is the author of the review,\n  // and the value is the text of the review.\n  //\n  // Valid field masks: reviews, reviews.smith, reviews.`John Smith`\n  map&lt;string, string&gt; reviews = 2;\n}\n</code></pre>"},{"location":"template/0161/#wildcards","title":"Wildcards","text":"<p>Field masks may permit the use of the <code>*</code> character on a repeated field or map to indicate the specification of particular sub-fields in the collection:</p> <pre><code>message Book {\n  option (google.api.resource) = {\n    type: \"library.googleapis.com/Book\"\n    pattern: \"publishers/{publisher}/books/{book}\"\n  };\n\n  // The name of the book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [(google.api.field_behavior) = IDENTIFIER];\n\n  // The author or authors of the book.\n  // Valid field masks: authors, authors.*.given_name, authors.*.family_name\n  // Invalid field masks: authors.0, authors.0.given_name\n  repeated Author authors = 2;\n}\n\nmessage Author {\n  // The author's given name.\n  string given_name = 1;\n\n  // The author's family name.\n  string family_name = 2;\n}\n</code></pre> <p>Note: Field masks must not permit accessing a particular element of a repeated field by index, and must return an <code>INVALID_ARGUMENT</code> error if this is attempted.</p>"},{"location":"template/0161/#output-only-fields","title":"Output only fields","text":"<p>If a user includes an output only field in an update mask indirectly (by using a wildcard or specifying an overall message that includes an output-only subfield), the service must ignore any output only fields provided as input, even if they are cleared or modified.</p> <p>If a user directly specifies an output only field in an update mask, the service must ignore the output only fields provided as input, even if they are cleared or modified, to permit the same field mask to be used for input and output.</p>"},{"location":"template/0161/#invalid-field-mask-entries","title":"Invalid field mask entries","text":"<p>When reading data, field masks may ignore entries that point to a value that can not exist (either a field that does not exist, or a map key that the service considers invalid).</p> <p>When writing data, field masks should return an <code>INVALID_ARGUMENT</code> error if an entry points to a value that can not exist; however, the service may permit deletions.</p>"},{"location":"template/0161/#changelog","title":"Changelog","text":"<ul> <li>2023-10-18: Update guidance for presence of output only fields in update   mask.</li> <li>2023-07-17: Move <code>update_mask</code> guidance to AIP-134.</li> </ul>"},{"location":"template/0162/","title":"Resource Revisions","text":"<p>Some APIs need to have resources with a revision history, where users can reason about the state of the resource over time. There are several reasons for this:</p> <ul> <li>Users may want to be able to roll back to a previous revision, or diff   against a previous revision.</li> <li>An API may create data which is derived in some way from a resource at a   given point in time. In these cases, it may be desirable to snapshot the   resource for reference later.</li> </ul> <p>Note: We use the word revision to refer to a historical reference for a particular resource, and intentionally avoid the term version, which refers to the version of an API as a whole.</p>"},{"location":"template/0162/#guidance","title":"Guidance","text":"<p>APIs may store a revision history for a resource. Examples of when it is useful include:</p> <ul> <li>When it is valuable to expose older versions of a resource via an API. This   can avoid the overhead of the customers having to write their own API to store   and enable retrieval of revisions.</li> <li>Other resources depend on different revisions of a resource.</li> <li>There is a need to represent the change of a resource over time.</li> </ul> <p>APIs implementing resources with a revision history should abstract resource revisions as nested collection of the resource. Sometimes, the revisions collection can be a top level collection, exceptions include:</p> <ul> <li>If resource revisions are meant to have longer lifespan than the parent resource. In other words, resource revisions exist after resource deletion.</li> </ul> <pre><code>message BookRevision {\n  // The name of the book revision.\n  string name = 1;\n\n  // The snapshot of the book\n  Book snapshot = 2\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n\n  // The timestamp that the revision was created.\n  google.protobuf.Timestamp create_time = 3\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n\n  // Other revision IDs that share the same snapshot.\n  repeated string alternate_ids = 4\n    [(google.api.field_behavior) = OUTPUT_ONLY];\n}\n</code></pre> <ul> <li>The <code>message</code> must be annotated as a resource (AIP-123).</li> <li>The <code>message</code> name must be named <code>{ResourceType}Revision</code>.</li> <li>The resource revision must contain a field with a message type of the   parent resource, with a field name of <code>snapshot</code>.<ul> <li>The value of <code>snapshot</code> must be the configuration of the parent   at the point in time the revision was created.</li> </ul> </li> <li>The resource revision must contain a <code>create_time</code> field (see AIP-142).</li> <li>The resource revision may contain a repeated field <code>alternate_ids</code>, which would   contain a list of resource IDs that the revision is also known by (e.g. <code>latest</code>)</li> </ul>"},{"location":"template/0162/#creating-revisions","title":"Creating Revisions","text":"<p>Depending on the resource, different APIs may have different strategies for</p> <ul> <li>Create a new revision any time that there is a change to the parent resource</li> <li>Create a new revision when important system state changes</li> <li>Create a new revision when specifically requested</li> </ul> <p>APIs may use any of these strategies. APIs must document their revision creation strategy.</p>"},{"location":"template/0162/#resource-names-for-revisions","title":"Resource names for revisions","text":"<p>When referring to specific revision of a resource, the subcollection name must be named <code>revisions</code>. Resource revisions have names with the format <code>{resource_name}/revisions/{revision_id}</code>. For example: <pre><code>publishers/123/books/les-miserables/revisions/c7cfa2a8\n</code></pre></p>"},{"location":"template/0162/#server-specified-aliases","title":"Server-specified Aliases","text":"<p>Services may reserve specific IDs to be aliases (e.g. <code>latest</code>). These are read-only and managed by the service.</p> <pre><code>GET /v1/publishers/{publisher}/books/{book}/revisions/{revision_id}\n</code></pre> <ul> <li>If a <code>latest</code> ID exists, it must represent the most recently created revision. The content of <code>publishers/{publisher}/books/{book}/revisions/latest</code> and <code>publishers/{publisher}/books/{book}</code> can differ, as the latest revision may be different from the current state of the resource.</li> </ul>"},{"location":"template/0162/#user-specified-aliases","title":"User-Specified Aliases","text":"<p>APIs may provide a mechanism for users to assign an alias ID to an existing revision with a custom method \"alias\":</p> <pre><code>rpc AliasBookRevision(TagBookRevisionRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*/revisions/*}:alias\"\n    body: \"*\"\n  };\n}\n</code></pre> <pre><code>message AliasBookRevisionRequest {\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/BookRevision\"\n    }];\n\n  // The ID of the revision to alias to, e.g. `CURRENT` or a semantic\n  // version.\n  string alias_id = 2 [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>The request message must have a <code>name</code> field:</li> <li>The field must be [annotated as required][aip-203].</li> <li>The field must identify the [resource type][aip-123] that it     references.</li> <li>The request message must have a <code>alias_id</code> field:</li> <li>The field must be [annotated as required][aip-203].</li> <li>If the user calls the method with an existing <code>alias_id</code>, the request must   succeed and the alias will be updated to refer to the provided revision. This   allows users to write code against a specific alias (e.g. <code>published</code>) and the   revision can change with no code change.</li> </ul>"},{"location":"template/0162/#rollback","title":"Rollback","text":"<p>A common use case for a resource with a revision history is the ability to roll back to a given revision. APIs should handle this with a <code>Rollback</code> custom method:</p> <pre><code>rpc RollbackBook(RollbackBookRequest) returns (BookRevision) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*/revisions/*}:rollback\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The method must use the <code>POST</code> HTTP verb.</li> <li>The method should return a resource revision.</li> </ul> <pre><code>message RollbackBookRequest {\n  // The revision that the book should be rolled back to.\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/BookRevision\"\n    }];\n}\n</code></pre> <ul> <li>The request message must have a <code>name</code> field, referring to the resource   revision whose configuration the resource should be rolled back to.</li> <li>The field must be [annotated as required][aip-203].</li> <li>The field must identify the [resource type][aip-123] that it     references.</li> </ul>"},{"location":"template/0162/#child-resources","title":"Child resources","text":"<p>Resources with a revision history may have child resources. If they do, there are two potential variants:</p> <ul> <li>Child resources where each child resource is a child of the parent resource   as a whole.</li> <li>Child resources where each child resource is a child of a single revision   of the parent resource.</li> </ul> <p>APIs should not include multiple levels of resources with revisions, as this quickly becomes difficult to reason about.</p>"},{"location":"template/0162/#standard-methods","title":"Standard methods","text":"<p>Any standard methods must implement the corresponding AIPs (AIP-131, AIP-132, AIP-133, AIP-134, AIP-135), with the following additional behaviors:</p> <ul> <li>List methods: By default, revisions in the list response must be ordered   in reverse chronological order. User can supply <code>order_by</code> to override the   default behavior.</li> <li>If the revision supports aliasing, a delete method with the resource name   of the alias (e.g. <code>revisions/1.0.2</code>) must remove the alias instead of   deleting the resource.</li> </ul> <p>As revisions are nested under the resource, also see cascading delete.</p>"},{"location":"template/0162/#rationale","title":"Rationale","text":""},{"location":"template/0162/#abstract-revisions-as-nested-collection","title":"Abstract revisions as nested collection","text":"<p>Revisions being resources under nested collection make revisions a first class citizen.</p> <ul> <li>Revisions can offer standard get, list, and delete methods.</li> <li>It retains the flexibility of extending new fields to revision in addition to   the resource message.</li> </ul>"},{"location":"template/0162/#tagging-to-aliases","title":"Tagging to Aliases","text":"<p>Previously, a concept of <code>tag</code> existed. This concept was redundant with that of an alias, and the terms were consolidated to reduce complexity in the AIPs.</p>"},{"location":"template/0162/#output-only-resource-configuration","title":"Output only resource configuration","text":"<p>Although it was an option to have the revision take in the resource configuration as part of the create method, doing so would have allowed users to submit resource configuration for a revision that the resource was never in.</p> <p><code>OUTPUT_ONLY</code> and requiring that a created revision represents the resource at current point in time eliminates that issue.</p>"},{"location":"template/0162/#history","title":"History","text":""},{"location":"template/0162/#switching-from-a-collection-extension-to-a-subcollection","title":"Switching from a collection extension to a subcollection","text":"<p>In 2023-09, revisions are abstracted as a nested resource collection. Prior to this, revisions are more like extension of an existing resource by using <code>@</code> symbol. List and delete revisions were custom methods on the resource collection. A single Get method was used to retrieve either the resource revision, or the resource.</p> <p>Its primary advantage was allowing a resource reference to seamlessly refer to a resource, or its revision.</p> <p>It also had several disadvantages:</p> <ul> <li>List revisions is a custom method (:listRevisions) on the resource collection</li> <li>Delete revision is a custom method on the resource collection</li> <li>Not visible in API discovery doc</li> <li>Resource ID cannot use <code>@</code></li> </ul> <p>The guidance was modified ultimately to enable revisions to behave like a resource, which reduces the users cognitive load and allows resource-oriented clients to easily list, get, create, and update revisions.</p>"},{"location":"template/0162/#using-resource-id-instead-of-tag","title":"Using resource ID instead of tag","text":"<p>In the previous design, revisions had a separate identifer for a revision known as a <code>tag</code>, that would live in a revision.</p> <p>Tags were effectively a shadow resource ID, requiring methods to create, get and filter revisions based on the value of the tag.</p> <p>By consolidating the concept of a tag into the revision ID, the user no longer needs to be familiar with a second set of retrieval and identifier methods.</p>"},{"location":"template/0162/#changelog","title":"Changelog","text":"<ul> <li>2023-09-01: AIP was updated to be a sub-collection.</li> <li>2021-04-27: Added guidance on returning the resource from Delete Revision.</li> </ul>"},{"location":"template/0163/","title":"Change validation","text":"<p>Occasionally, a user wants to validate an intended change to see what the result will be before actually making the change. For example, a request to provision new servers in a fleet will have an impact on the overall fleet size and cost, and could potentially have unexpected downstream effects.</p>"},{"location":"template/0163/#guidance","title":"Guidance","text":"<p>APIs may provide an option to validate, but not actually execute, a request, and provide the same response (status code, headers, and response body) that it would have provided if the request was actually executed.</p> <p>To provide this option, the method should include a <code>bool validate_only</code> field in the request message:</p> <pre><code>message ReviewBookRequest {\n  string name = 1 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Book\"\n  }];\n  int32 rating = 2;\n  string comment = 3;\n\n  // If set, validate the request and preview the review, but do not actually\n  // post it.\n  bool validate_only = 4;\n}\n</code></pre> <p>The API must perform permission checks and any other validation that would be performed on a \"live\" request; a request using <code>validate_only</code> must fail if it determines that the actual request would fail.</p> <p>Note: It may occasionally be infeasible to provide the full output. For example, if creating a resource would create an auto-generated ID, it does not make sense to do this on validation. APIs should omit such fields on validation requests in this situation.</p>"},{"location":"template/0163/#declarative-friendly-resources","title":"Declarative-friendly resources","text":"<p>A resource that is declarative-friendly (AIP-128) must include a <code>validate_only</code> field on methods that mutate the resource.</p>"},{"location":"template/0163/#changelog","title":"Changelog","text":"<ul> <li>2020-10-06: Added declarative-friendly resource requirement.</li> </ul>"},{"location":"template/0164/","title":"Soft delete","text":"<p>There are several reasons why a client could desire soft delete and undelete functionality, but one over-arching reason stands out: recovery from mistakes. A service that supports undelete makes it possible for users to recover resources that were deleted by accident.</p>"},{"location":"template/0164/#guidance","title":"Guidance","text":"<p>APIs may support the ability to \"undelete\", to allow for situations where users mistakenly delete resources and need the ability to recover.</p> <p>If a resource needs to support undelete, the <code>Delete</code> method must simply mark the resource as having been deleted, but not completely remove it from the system. If the method behaves this way, it should return the updated resource instead of <code>google.protobuf.Empty</code>.</p> <p>Resources that support soft delete should have both a <code>delete_time</code> and <code>purge_time</code> field as described in AIP-148. Additionally, resources should include a <code>DELETED</code> state value if the resource includes a <code>state</code> field (AIP-216).</p>"},{"location":"template/0164/#undelete","title":"Undelete","text":"<p>A resource that supports soft delete should provide an <code>Undelete</code> method:</p> <pre><code>rpc UndeleteBook(UndeleteBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:undelete\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The HTTP verb must be <code>POST</code>.</li> <li>The <code>body</code> clause must be <code>\"*\"</code>.</li> <li>The response message must be the resource itself. There is no   <code>UndeleteBookResponse</code>.</li> <li>The response should include the fully-populated resource unless it is     infeasible to do so.</li> <li>If the undelete RPC is long-running, the response     message must be a <code>google.longrunning.Operation</code> which resolves to the     resource itself.</li> </ul>"},{"location":"template/0164/#undelete-request-message","title":"Undelete request message","text":"<p>Undelete methods implement a common request message pattern:</p> <pre><code>message UndeleteBookRequest {\n  // The name of the deleted book.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference).type = \"library.googleapis.com/Book\"];\n}\n</code></pre> <ul> <li>A <code>name</code> field must be included. It should be called <code>name</code>.</li> <li>The field should be annotated as required.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> </ul>"},{"location":"template/0164/#long-running-undelete","title":"Long-running undelete","text":"<p>Some resources take longer to undelete a resource than is reasonable for a regular API request. In this situation, the API should use a long-running operation (AIP-151) instead:</p> <pre><code>rpc UndeleteBook(UndeleteBookRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:undelete\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"Book\"\n    metadata_type: \"OperationMetadata\"\n  };\n}\n</code></pre> <ul> <li>The response type must be set to the resource (what the return type would   be if the RPC was not long-running).</li> <li>Both the <code>response_type</code> and <code>metadata_type</code> fields must be specified.</li> </ul>"},{"location":"template/0164/#list-and-get","title":"List and Get","text":"<p>Soft-deleted resources should not be returned in <code>List</code> (AIP-132) responses by default (unless <code>bool show_deleted</code> is true). <code>Get</code> (AIP-131) requests for soft-deleted resources should return the resource (rather than a <code>NOT_FOUND</code> error).</p> <p>APIs that soft delete resources may choose a reasonable strategy for purging those resources, including automatic purging after a reasonable time (such as 30 days), allowing users to set an expiry time (AIP-214), or retaining the resources indefinitely. Regardless of what strategy is selected, the API should document when soft deleted resources will be completely removed.</p>"},{"location":"template/0164/#declarative-friendly-resources","title":"Declarative-friendly resources","text":"<p>Soft-deletable resources have a poorer experience than hard-deleted resources in declarative clients: since an ID on a soft-deleted resource is not re-usable unless a custom method (undelete) is called, an imperative client must be introduced or hand-written code is required to incorporate the usage of the custom method.</p>"},{"location":"template/0164/#errors","title":"Errors","text":"<p>If the user does not have permission to access the resource, regardless of whether or not it exists, the service must error with <code>PERMISSION_DENIED</code> (HTTP 403). Permission must be checked prior to checking if the resource exists.</p> <p>If the user does have proper permission, but the requested resource does not exist (either it was never created or already expunged), the service must error with <code>NOT_FOUND</code> (HTTP 404).</p> <p>If the user calling a soft <code>Delete</code> has proper permission, but the requested resource is already deleted, the service must succeed if <code>allow_missing</code> is <code>true</code>, and should error with <code>NOT_FOUND</code> (HTTP 404) if <code>allow_missing</code> is <code>false</code>.</p> <p>If the user calling <code>Undelete</code> has proper permission, but the requested resource is not deleted, the service must respond with <code>ALREADY_EXISTS</code> (HTTP 409).</p>"},{"location":"template/0164/#further-reading","title":"Further reading","text":"<ul> <li>For the <code>Delete</code> standard method, see AIP-135.</li> <li>For long-running operations, see AIP-151.</li> <li>For resource freshness validation (<code>etag</code>), see AIP-154.</li> <li>For change validation (<code>validate_only</code>), see AIP-163.</li> </ul>"},{"location":"template/0164/#changelog","title":"Changelog","text":"<ul> <li>2024-09-24: Included missing requirement for <code>delete_time</code>.</li> <li>2023-07-13: Renamed overloaded <code>expire_time</code> to <code>purge_time</code>.</li> <li>2021-07-12: Added error behavior when soft deleting a deleted resource.</li> <li>2021-07-12: Clarified that <code>ALREADY_EXISTS</code> errors apply to <code>Undelete</code>.</li> <li>2021-07-12: Changed the <code>expire_time</code> field to \"should\" for consistency   with AIP-148.</li> <li>2020-09-23: Soft delete material in AIP-135 migrated to this AIP.</li> </ul>"},{"location":"template/0165/","title":"Criteria-based delete","text":"<p>Occasionally, an API may need to provide a mechanism to delete a large number of resources based on some set of filter parameters, rather than requiring the individual resource name of the resources to be deleted.</p> <p>This is a rare case, reserved for situations where users need to delete thousands or more resources at once, in which case the normal Batch Delete pattern (AIP-235) becomes unwieldy and inconvenient.</p>"},{"location":"template/0165/#guidance","title":"Guidance","text":"<p>Important: Most APIs should use only Delete (AIP-135) or Batch Delete (AIP-235) for deleting resources, and should not implement deleting based on criteria. This is because deleting is generally irreversible and this type of operation makes it easy for a user to accidentally lose significant amounts of data.</p> <p>An API may implement a Purge method to permit deleting a large number of resources based on a filter string; however, this should only be done if the Batch Delete (AIP-235) pattern is insufficient to accomplish the desired goal:</p> <pre><code>rpc PurgeBooks(PurgeBooksRequest) returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:purge\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"PurgeBooksResponse\"\n    metadata_type: \"PurgeBooksMetadata\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with the word <code>Purge</code>. The remainder of the   RPC name should be the plural form of the resource being purged.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response type must be a <code>google.longrunning.Operation</code> (see   AIP-151) that resolves to a message whose name matches the RPC name, with   a <code>Response</code> suffix.</li> <li>The HTTP verb must be <code>POST</code>, and the <code>body</code> must be <code>\"*\"</code>.</li> <li>The URI path should represent the collection for the resource.</li> <li>The <code>parent</code> field should be included in the URI. If the API wishes to   support deletion across multiple parents, it should accept the <code>-</code>   character consistent with AIP-159.</li> </ul>"},{"location":"template/0165/#request-message","title":"Request message","text":"<p>Purge methods implement a common request message pattern:</p> <pre><code>message PurgeBooksRequest {\n  // The publisher to purge books from.\n  // To purge books across publishers, send \"publishers/-\".\n  string parent = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // A filter matching the books to be purged.\n  string filter = 2 [(google.api.field_behavior) = REQUIRED];\n\n  // Actually perform the purge.\n  // If `force` is set to false, the method will return a sample of\n  // resource names that would be deleted.\n  bool force = 3;\n}\n</code></pre> <ul> <li>A singular <code>string parent</code> field should be included, unless the resource   is top-level.</li> <li>The field should be annotated as required.</li> <li>The field should identify the resource type that it     references.</li> <li>A singular <code>string filter</code> field must be included and must follow the   same semantics as in List methods (AIP-160).</li> <li>It should be annotated as required.</li> <li>A singular <code>bool force</code> field must be included. If it is not set, the API   must return a count of the resources that would be deleted as well as a   sample of those resources, without actually performing the deletion.</li> </ul>"},{"location":"template/0165/#response-message","title":"Response message","text":"<p>Purge methods implement a common response message pattern:</p> <pre><code>message PurgeBooksResponse {\n  // The number of books that this request deleted (or, if `force` is false,\n  // the number of books that will be deleted).\n  int32 purge_count = 1;\n\n  // A sample of the resource names of books that will be deleted.\n  // Only populated if `force` is set to false.\n  repeated string purge_sample = 2 [(google.api.resource_reference) = {\n    type: \"library.googleapis.com/Book\"\n  }];\n}\n</code></pre> <ul> <li>A singular <code>int32 purge_count</code> field should be included, and provide the   number of resources that were deleted (or would be deleted). This count   may be an estimate similar to <code>total_size</code> in AIP-158 (but the service   should document this if so).</li> <li>A <code>repeated string purge_sample</code> field should be included: If <code>force</code> is   <code>false</code>, it should provide a sample of resource names that will be   deleted. If <code>force</code> is true, this field should not be populated.</li> <li>The sample should be a sufficient size to catch clearly obvious     mistakes: A good rule of thumb is 100. The API should document the     size, and should document that it is a maximum (it is possible to send     fewer).</li> <li>The sample may be random or may be deterministic (such as the first     matched resource names). The API should document which approach is     used.</li> <li>The field should identify the resource type that it     references.</li> </ul> <p>Note: Even if <code>purge_count</code> and <code>purge_sample</code> are not included, the <code>force</code> field must still be included in the request.</p>"},{"location":"template/0165/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-10-29: Expanded guidance on HTTP, field behavior, and resource   reference annotations.</li> </ul>"},{"location":"template/0180/","title":"Backwards compatibility","text":"<p>APIs are fundamentally contracts with users, and users often write code against APIs that is then launched into a production service with the expectation that it continues to work (unless the API has a stability level that indicates otherwise). Therefore, it is important to understand what constitutes a backwards compatible change and what constitutes a backwards incompatible change.</p>"},{"location":"template/0180/#guidance","title":"Guidance","text":"<p>Existing client code must not be broken by a service updating to a new minor or patch release. Old clients must be able to work against newer servers (with the same major version number).</p> <p>Important: It is not always clear whether a change is compatible or not. The guidance here should be treated as indicative, rather than as a comprehensive list of every possible change.</p> <p>There are three distinct types of compatibility to consider:</p> <ol> <li>Source compatibility: Code written against a previous version must    compile against a newer version, and successfully run with a newer version    of the client library.</li> <li>Wire compatibility: Code written against a previous version must be able    to communicate correctly with a newer server. In other words, not only are    inputs and outputs compatible, but the serialization and deserialization    expectations continue to match.</li> <li>Semantic compatibility: Code written against a previous version must    continue to receive what most reasonable developers would expect. (This can    be tricky in practice, however, and sometimes determining what users will    expect can involve a judgment call.)</li> </ol> <p>Note: In general, the specific guidance here assumes use of protocol buffers and JSON as transport formats. Other transport formats may have slightly different rules.</p> <p>Note: This guidance assumes that APIs are intended to be called from a range of consumers, written in multiple languages and with no control over how and when consumers update. Any API which has a more limited scope (for example, an API which is only called by client code written by the same team as the API producer, or deployed in a way which can enforce updates) should carefully consider its own compatibility requirements.</p>"},{"location":"template/0180/#adding-components","title":"Adding components","text":"<p>In general, new components (interfaces, methods, messages, fields, enums, or enum values) may be added to existing APIs in the same major version.</p> <p>However, keep the following guidelines in mind when doing this:</p> <ul> <li>Code written against the previous surface (and thus is unaware of the new   components) must continue to be treated the same way as before.</li> <li>New required fields must not be added to existing request messages or     resources.</li> <li>Any field being populated by clients must have a default behavior     matching the behavior before the field was introduced.</li> <li>Any field previously populated by the server must continue to be     populated, even if it introduces redundancy.</li> <li>For enum values specifically, be aware that it is possible that user code   does not handle new values gracefully.</li> <li>Enum values may be freely added to enums which are only used in request     messages.</li> <li>Enums that are used in response messages or resources and which are     expected to receive new values should document this. Enum values still     may be added in this situation; however, appropriate caution should     be used.</li> </ul> <p>Note: It is possible when adding a component closely related to an existing component (for example, <code>string foo_value</code> when <code>string foo</code> already exists) to enter a situation where generated code will conflict. Service owners should be aware of subtleties in the tooling they or their users are likely to use (and tool authors should endeavor to avoid such subtleties if possible).</p>"},{"location":"template/0180/#removing-or-renaming-components","title":"Removing or renaming components","text":"<p>Existing components (interfaces, methods, messages, fields, enums, or enum values) must not be removed from existing APIs in the same major version. Removing a component is a backwards incompatible change.</p> <p>Important: Renaming a component is semantically equivalent to \"remove and add\". In cases where these sorts of changes are desirable, a service may add the new component, but must not remove the existing one. In situations where this can allow users to specify conflicting values for the same semantic idea, the behavior must be clearly specified.</p>"},{"location":"template/0180/#moving-components-between-files","title":"Moving components between files","text":"<p>Existing components must not be moved between files.</p> <p>Moving a component from one proto file to another within the same package is wire compatible, however, the code generated for languages like C++ or Python will result in breaking change since <code>import</code> and <code>#include</code> will no longer point to the correct code location.</p>"},{"location":"template/0180/#moving-into-oneofs","title":"Moving into oneofs","text":"<p>Existing fields must not be moved into or out of a oneof. This is a backwards-incompatible change in the Go protobuf stubs.</p>"},{"location":"template/0180/#changing-the-type-of-fields","title":"Changing the type of fields","text":"<p>Existing fields and messages must not have their type changed, even if the new type is wire-compatible, because type changes alter generated code in a breaking way.</p>"},{"location":"template/0180/#changing-resource-names","title":"Changing resource names","text":"<p>A resource must not change its name.</p> <p>Unlike most breaking changes, this affects major versions as well: in order for a client to expect to use v2.0 access a resource that was created in v1.0 or vice versa, the same resource name must be used in both versions.</p> <p>More subtly, the set of valid resource names should not change either, for the following reasons:</p> <ul> <li>If resource name formats become more restrictive, a request that would   previously have succeeded will now fail.</li> <li>If resource name formats become less restrictive than previously documented,   then code making assumptions based on the previous documentation could break.   Users are very likely to store resource names elsewhere, in ways that may be   sensitive to the set of permitted characters and the length of the name.   Alternatively, users might perform their own resource name validation to   follow the documentation.</li> <li>For example, Amazon gave customers a lot of warning and had a     migration period when they started allowing longer EC2 resource IDs.</li> </ul>"},{"location":"template/0180/#semantic-changes","title":"Semantic changes","text":"<p>Code will often depend on API behavior and semantics, even when such behavior is not explicitly supported or documented. Therefore, APIs must not change visible behavior or semantics in ways that are likely to break reasonable user code, as such changes will be seen as breaking by those users.</p> <p>Note: This does involve some level of judgment; it is not always clear whether a proposed change is likely to break users, and an expansive reading of this guidance could ostensibly prevent any change (which is not the intent).</p>"},{"location":"template/0180/#default-values-must-not-change","title":"Default values must not change","text":"<p>Default values are the values set by servers for resources when they are not specified by the client. This section only applies to static default values within fields on resources and does not apply to dynamic defaults such as the default IP address of a resource.</p> <p>Changing the default value is considered breaking and must not be done. The default behavior for a resource is determined by its default values, and this must not change across minor versions.</p> <p>For example:</p> <pre><code>message Book {\n    // google.api.resource and other annotations and fields\n\n    // The genre of the book\n    // If this is not set when the book is created, the field will be given a value of FICTION.\n    enum Genre {\n      UNSPECIFIED = 0;\n      FICTION = 1;\n      NONFICTION = 2;\n    }\n}\n</code></pre> <p>Changing to:</p> <pre><code>message Book {\n    // google.api.resource and other annotations and fields\n\n    // The genre of the book\n    // If this is not set when the book is created, the field will be given a value of NONFICTION.\n    enum Genre {\n      UNSPECIFIED = 0;\n      FICTION = 1;\n      NONFICTION = 2;\n    }\n}\n</code></pre> <p>would constitute a breaking change.</p>"},{"location":"template/0180/#serializing-defaults","title":"Serializing defaults","text":"<p>APIs must not change the way a field with a default value is serialized. For example if a field does not appear in the response if the value is equal to the default, the serialization must not change to include the field with the default. Clients may depend on the presence or absence of a field in a resource as semantically meaningful, so a change to how serialization is done for absent values must not occur in a minor version.</p> <p>Consider the following proto, where the default value of <code>wheels</code> is <code>2</code>:</p> <pre><code>// A representation of an automobile\nmessage Automobile {\n    // google.api.resource and other annotations and fields\n\n    // The number of wheels on the automobile.\n    // The default value is 2, when no value is sent by the client.\n    int wheels = 2;\n}\n</code></pre> <p>First the proto serializes to JSON when the value of <code>wheels</code> is <code>2</code> as follows:</p> <pre><code>{\n    \"name\": \"my-car\"\n}\n</code></pre> <p>Then, the API service changes the serialization to include <code>wheel</code> even if the value is equal to the default value, <code>2</code> as follows:</p> <pre><code>{\n    \"name\": \"my-car\",\n    \"wheels\": 2\n}\n</code></pre> <p>This constitutes a change that is not backwards compatible within a major version.</p>"},{"location":"template/0180/#further-reading","title":"Further reading","text":"<ul> <li>For compatibility around field behavior, see AIP-203.</li> <li>For compatibility around pagination, see AIP-158.</li> <li>For compatibility around long-running operations, see AIP-151.</li> <li>For understanding stability levels and expectations, see AIP-181.</li> <li>For compatibility with client library resource name parsing, see AIP-4231</li> <li>For compatibility with client library method signatures, see AIP-4232</li> <li>For compatibility around field presence changes, see AIP-149.</li> <li>For compatibility around resource types, see AIP-123.</li> </ul>"},{"location":"template/0180/#changelog","title":"Changelog","text":"<ul> <li>2024-08-07: Added reference to resource type compatibility.</li> <li>2024-06-05: Added reference to field presence compatibility.</li> <li>2023-07-26: Added reference to field behavior compatibility.</li> <li>2023-07-26: Added note on APIs which have limited clients.</li> <li>2022-08-11: Added \"Moving components between files\" section.</li> <li>2022-06-01: Added more links to other AIPs with compatibility concerns</li> <li>2019-12-16: Clarified that moving existing fields into oneofs is   breaking.</li> </ul>"},{"location":"template/0181/","title":"Stability levels","text":"<p>While different organizations (both inside Google and outside) have different product life cycles, AIPs refer to the stability of an API component using the following terms.</p> <p>Note: These stability levels roughly correspond to the product launch stages (alpha, beta, GA) in Google Cloud, but are not identical. GCP imposes its own additional expectations and commitments on top of what is outlined here.</p>"},{"location":"template/0181/#alpha","title":"Alpha","text":"<p>An alpha component undergoes rapid iteration with a known set of users who must be tolerant of change. The number of users should be a curated, manageable set, such that it is feasible to communicate with all of them individually.</p> <p>Breaking changes must be both allowed and expected in alpha components, and users must have no expectation of stability.</p>"},{"location":"template/0181/#beta","title":"Beta","text":"<p>A beta component must be considered complete and ready to be declared stable, subject to public testing. Beta components should be exposed to an unknown and potentially large set of users. In other words, beta components should not be behind an allowlist; instead, they should be available to the public.</p> <p>Because users of beta components tend to have a lower tolerance of change, beta components should be as stable as possible; however, the beta component must be permitted to change over time. These changes should be minimal but may include backwards-incompatible changes to beta components. Backwards-incompatible changes must be made only after a reasonable deprecation period to provide users with an opportunity to migrate their code. This deprecation period must be defined at the time of being marked beta.</p> <p>Beta components should be time-boxed and promoted to stable if no issues are found in the specified timeframe, which should be specified at the time of being marked beta. A reasonable time period may vary, but a good rule of thumb is 90 days.</p>"},{"location":"template/0181/#stable","title":"Stable","text":"<p>A stable component must be fully-supported over the lifetime of the major API version. Because users expect such stability from components marked stable, there must be no breaking changes to these components, subject to the caveats described below.</p>"},{"location":"template/0181/#major-versions","title":"Major versions","text":"<p>When breaking changes become necessary, the API producer should create the next major version of the API, and start a deprecation clock on the existing version.</p> <p>Turn-down of any version containing stable components must have a formal process defined at the time of being marked stable. This process must specify a deprecation period for users which provides them with reasonable advance warning.</p>"},{"location":"template/0181/#isolated-changes","title":"Isolated changes","text":"<p>On very rare occasions, it could be preferable to make a small, isolated breaking change, if this will only cause inconvenience to a small subset of users. (Creating a new major version is an inconvenience to all users.) In this case, the API producer may deprecate the component, but must continue to support the component for the normal turndown period for a stable component.</p> <p>Important: Making an in-place breaking change in a stable API is considered an extreme course of action, and should be treated with equal or greater gravity as creating a new major version. For example, at Google, this requires the approval of the API Governance team.</p>"},{"location":"template/0181/#emergency-changes","title":"Emergency changes","text":"<p>In certain exceptional cases, such as security concerns or regulatory requirements, any API component may be changed in a breaking manner regardless of its stability level, and a deprecation is not promised in these situations.</p>"},{"location":"template/0182/","title":"External software dependencies","text":"<p>Some services have a particular type of dependency on external software: they allow users to create resources that run on or expose the external software in some way. For example:</p> <ul> <li>A database admin service can allow users to create databases running on a   particular version of a particular database engine (for example, PostgreSQL   13.4).</li> <li>A virtual machine service can allow users to create VMs running a particular   operating system (for example, Ubuntu 20.04).</li> <li>An application or function platform service can allow users to write code   that runs against a particular version of a programming language (for   example, Node.js 16.6).</li> </ul> <p>Services that provide external software to users in this way will eventually need to address the fact that all of these types of software have release lifecycles, and the versions they currently expose will eventually reach end-of-life.</p>"},{"location":"template/0182/#guidance","title":"Guidance","text":"<p>Services that expose external software dependencies should allow users to create resources using any currently-supported LTS (long-term support) version of the supported software, and may allow users to create resources using non-LTS versions.</p> <p>Services should not indefinitely allow users to create new resources using versions that have reached end-of-life, although they may have a transition period between when the software version reaches end-of-life and when support for creating new resources with that version is removed.</p> <p>Note: Restricting or removing the ability to create resources using end-of-life versions of software is not considered a breaking change for the service for the purpose of AIP-181, even though it actually is one. However, because the change can break existing users' workflows, services must notify users who are using resources approaching end-of-life.</p> <p>If possible, services should allow previously-created resources to remain, and may warn users of the risks associated with continuing to use end-of-life software. Services should not proactively remove resources using end-of-life software, or impose other restrictions on existing resources, unless critical security concerns require the service to do so.</p>"},{"location":"template/0182/#continued-support","title":"Continued support","text":"<p>If supporting a version that has reached end-of-life is necessary for business reasons (usually because the end-of-life software still has significant adoption), the service may choose to officially support the end-of-life version, but must take on the responsibility of patching and maintaining the software if it does so.</p>"},{"location":"template/0185/","title":"API Versioning","text":"<p>This topic describes the versioning strategies used by Google APIs. In general, these strategies apply to all Google-managed services.</p>"},{"location":"template/0185/#guidance","title":"Guidance","text":"<p>All Google API interfaces must provide a major version number, which is encoded at the end of the protobuf package, and included as the first part of the URI path for REST APIs. In the event an API needs to make an incompatible change, consult AIP-180 and AIP-181 for necessary steps based on the stability level of the surface in question.</p> <p>Note: The use of the term \"major version number\" above is taken from semantic versioning. However, unlike in traditional semantic versioning, Google APIs must not expose minor or patch version numbers. For example, Google APIs use <code>v1</code>, not <code>v1.0</code>, <code>v1.1</code>, or <code>v1.4.2</code>. From a user's perspective, major versions are updated in place, and users receive new functionality without migration.</p> <p>A new major version of an API must not depend on a previous major version of the same API. An API surface must not depend on other APIs, except for in the cases outlined in AIP-213 and AIP-215.</p> <p>Different versions of the same API must be able to work at the same time within a single client application for a reasonable transition period. This time period allows the client to transition smoothly to the newer version. An older version must go through a reasonable, well-communicated deprecation period before being shut down.</p> <p>For releases which have alpha or beta stability, APIs must append the stability level after the major version number in the protobuf package and URI path using one of these strategies:</p> <ul> <li>Channel-based versioning (recommended)</li> <li>Release-based versioning</li> <li>Visibility-based versioning</li> </ul>"},{"location":"template/0185/#channel-based-versioning","title":"Channel-based versioning","text":"<p>A stability channel is a long-lived release at a given stability level that receives in-place updates. There is no more than one channel per stability level for a major version. Under this strategy, there are up to three channels available: alpha, beta, and stable.</p> <p>The alpha and beta channel must have their stability level appended to the version, but the stable channel must not have the stability level appended. For example, <code>v1</code> is an acceptable version for the stable channel, but <code>v1beta</code> or <code>v1alpha</code> are not. Similarly, <code>v1beta</code> or <code>v1alpha</code> are acceptable versions for the respective beta and alpha channel, but <code>v1</code> is not acceptable for either. Each of these channels receives new features and updates \"in-place\".</p> <p>The beta channel's functionality must be a superset of the stable channel's functionality, and the alpha channel's functionality must be a superset of the beta channel's functionality.</p>"},{"location":"template/0185/#deprecating-api-functionality","title":"Deprecating API functionality","text":"<p>API elements (fields, messages, RPCs) may be marked deprecated in any channel to indicate that they should no longer be used:</p> <pre><code>// Represents a scroll. Books are preferred over scrolls.\nmessage Scroll {\n  option deprecated = true;\n\n  // ...\n}\n</code></pre> <p>Deprecated API functionality must not graduate from alpha to beta, nor beta to stable. In other words, functionality must not arrive \"pre-deprecated\" in any channel.</p> <p>The beta channel's functionality may be removed after it has been deprecated for a sufficient period; we recommend 180 days. For functionality that exists only in the alpha channel, deprecation is optional, and functionality may be removed without notice. If functionality is deprecated in an API's alpha channel before removal, the API should apply the same annotation, and may use any timeframe it wishes.</p>"},{"location":"template/0185/#release-based-versioning","title":"Release-based versioning","text":"<p>Important: This pattern is not commonly used for new services. There are existing services that follow it, but Channel-based Versioning is the preferred mechanism.</p> <p>An individual release is an alpha or beta release that is expected to be available for a limited time period before its functionality is incorporated into the stable channel, after which the individual release will be shut down. When using release-based versioning strategy, an API may have any number of individual releases at each stability level.</p> <p>Note: Both the channel-based and release-based strategies update the stable version in-place. There is a single stable channel, rather than individual stable releases, even when using the release-based strategy.</p> <p>Alpha and beta releases must have their stability level appended to the version, followed by an incrementing release number. For example, <code>v1beta1</code> or <code>v1alpha5</code>. APIs should document the chronological order of these versions in their documentation (such as comments).</p> <p>Each alpha or beta release may be updated in place with backwards-compatible changes. For beta releases, backwards-incompatible updates should be made by incrementing the release number and publishing a new release with the change. For example, if the current version is <code>v1beta1</code>, then <code>v1beta2</code> is released next.</p> <p>Alpha and beta releases should be shut down after their functionality reaches the stable channel. An alpha release may be shut down at any time, while a beta release should allow users a reasonable transition period; we recommend 180 days.</p>"},{"location":"template/0185/#visibility-based-versioning","title":"Visibility-based versioning","text":"<p>API visibility is an advanced feature provided by Google API infrastructure. It allows API producers to expose multiple external API views from one internal API surface, and each view is associated with an API visibility label, such as:</p> <pre><code>import \"google/api/visibility.proto\";\n\nmessage Resource {\n  string name = 1;\n\n  // Preview. Do not use this feature for production.\n  string display_name = 2\n    [(google.api.field_visibility).restriction = \"PREVIEW\"];\n}\n</code></pre> <p>A visibility label is a case-sensitive string that can be used to tag any API element. By convention, visibility labels should always use UPPER case. An implicit <code>PUBLIC</code> label is applied to all API elements unless an explicit visibility label is applied as in the example above.</p> <p>Each visibility label is an allow-list. API producers need to grant visibility labels to API consumers for them to use API features associated with the labels. In other words, an API visibility label is like an ACL'ed API version.</p> <p>Multiple visibility labels may be applied to an element by using a comma-separated string (e.g. <code>\"PREVIEW,TRUSTED_TESTER\"</code>). When multiple visibility labels are used, then the client needs only one of the visibility labels (logical <code>OR</code>).</p> <p>By default, the visibility labels granted to the API consumer are used to verify incoming requests. However, a client can send requests with an explicit visibility label as follows:</p> <pre><code>GET /v1/projects/my-project/topics HTTP/1.1\nHost: pubsub.googleapis.com\nAuthorization: Bearer y29....\nX-Goog-Visibilities: PREVIEW\n</code></pre> <p>A single API request can specify at most one visibility label.</p> <p>API producers can use API visibility for API versioning, such as <code>INTERNAL</code> and <code>PREVIEW</code>. A new API feature starts with the <code>INTERNAL</code> label, then moves to the <code>PREVIEW</code> label. When the feature is stable and becomes generally available, all API visibility labels are removed from the API definition.</p> <p>In general, API visibility is easier to implement than API versioning for incremental changes, but it depends on sophisticated API infrastructure support. Google Cloud APIs often use API visibility for Preview features.</p>"},{"location":"template/0191/","title":"File and directory structure","text":"<p>A consistent file and directory structure, while making minimal difference technically, makes API surface definitions easier for users and reviewers to read.</p>"},{"location":"template/0191/#guidance","title":"Guidance","text":"<p>Note: The following guidance applies to APIs defined in protocol buffers, such as those used throughout Google. While the spirit of this guidance applies to APIs defined using other specification languages or formats, some of the particular recommendations might be irrelevant.</p>"},{"location":"template/0191/#syntax","title":"Syntax","text":"<p>APIs defined in protocol buffers must use <code>proto3</code> syntax.</p>"},{"location":"template/0191/#single-package","title":"Single package","text":"<p>APIs defined in protocol buffers must define each individual API in a single package, which must end in a version component. For example:</p> <pre><code>syntax = \"proto3\";\n\npackage google.cloud.translation.v3;\n</code></pre> <p>Google APIs must reside in a directory that matches the protocol buffer <code>package</code> directive. For example, the package above dictates that the directory be <code>google/cloud/translation/v3</code>.</p>"},{"location":"template/0191/#file-names","title":"File names","text":"<p>It is often useful to divide API definitions into multiple files. File names must use <code>snake_case</code>.</p> <p>APIs should have an obvious \"entry\" file, generally named after the API itself. An API with a small number of discrete services (Google Cloud Pub/Sub's <code>Publisher</code> and <code>Subscriber</code> is a good example) may have a separate entry file per service.</p> <p>APIs with only one file should use a filename corresponding to the name of the API.</p> <p>API <code>service</code> definitions and associated RPC request and response <code>message</code> definitions should be defined in the same file.</p> <p>Bear in mind that the file names often become module names in client libraries, and customers use them in <code>import</code> or <code>use</code> statements. Therefore, choosing a descriptive and language keyword-free filename does matter. For example, a file called <code>import.proto</code> may be problematic in Python.</p> <p>Note: The version must not be used as a filename, because this creates bizarre imports in client libraries. Filenames such as <code>v3.proto</code> or <code>v1beta1.proto</code> are prohibited.</p>"},{"location":"template/0191/#file-layout","title":"File layout","text":"<p>Individual files should place higher level and more important definitions before lower level and less important definitions.</p> <p>In a proto file, components should be in the following order, and each of these should be separated by a blank line:</p> <ul> <li>Copyright and license notice (if applicable).</li> <li>The proto <code>syntax</code> statement.</li> <li>The proto <code>package</code> statement.</li> <li>Any <code>import</code> statements, in alphabetical order.</li> <li>Any file-level <code>option</code> statements.</li> <li>Any <code>service</code> definitions.</li> <li>Methods should be grouped by the resource they impact, and standard     methods should precede custom methods.</li> <li>Resource <code>message</code> definitions. A parent resource must be defined before   its child resources.</li> <li>The RPC request and response <code>message</code> definitions, in the same order of the   corresponding methods. Each request message must precede its   corresponding response message (if any).</li> <li>Any remaining <code>message</code> definitions.</li> <li>Any top-level <code>enum</code> definitions.</li> </ul>"},{"location":"template/0191/#packaging-annotations","title":"Packaging annotations","text":"<p>Protocol buffers ships with annotations to declare the package or namespace (depending on the vocabulary of the target language) of the generated files. For example, setting <code>go_package</code> or <code>csharp_namespace</code> will override the inferred package name.</p> <p>When defining APIs, the following rules apply:</p> <ul> <li>Java</li> <li>The <code>java_package</code> annotation must be set. The correct value is usually     the proto package with the appropriate TLD prefixed. Example:     <code>com.google.example.v1</code>.</li> <li>The <code>java_multiple_files</code> annotation must be set to <code>true</code>.</li> <li>The <code>java_outer_classname</code> annotation must be set, and should be     set to the name of the proto filename, in <code>PascalCase</code>, with <code>Proto</code>     appended. Example: <code>LibraryProto</code>.</li> <li>Other languages</li> <li>Package or namespace directives for other languages must be set either     in every file in the proto package, or none of them. If they are set, the     values must be identical in every file.</li> <li>If any part of the protobuf package is a compound name (such as     accessapproval), C#, Ruby and PHP options must be specified in order     to take account of the word breaks using PascalCase (UpperCamelCase).     Example:     <pre><code>option csharp_namespace = \"Google.Cloud.AccessApproval.V1\";\noption php_namespace = \"Google\\\\Cloud\\\\AccessApproval\\\\V1\";\noption ruby_package = \"Google::Cloud::AccessApproval::V1\";\n</code></pre></li> <li>The <code>go_package</code> value depends directly on how the Go code is managed i.e.     if the module name is based on the VCS provider or using a remote import     path, but often has a consistent structure.<ul> <li>The module may differ based on product area e.g.   <code>google.cloud.accessapproval.v1</code> would be in module   <code>cloud.google.com/go/accessapproval</code>.</li> <li>The package import path should be derived from the proto package.</li> <li>An API version in the proto package should be prefixed with <code>api</code> e.g.   the proto package segment <code>v1</code> becomes <code>apiv1</code>.</li> <li>The terminal import path segment should be based on the product name   found within the proto package and must be suffixed with <code>pb</code> e.g.   <code>accessapproval</code> becomes <code>accessapprovalpb</code>.</li> <li>This value should be left to the team owning the generated code to   decide on.</li> </ul> </li> </ul> <p>All packaging annotations should be specified in alphabetical order of name. Refer to the Protobuf documentation for more about language package options.</p> <p>Important: While languages other than Java have sensible defaults for APIs which don't include compound names, be aware that adding this annotation (with a value not equivalent to the default) constitutes a breaking change in that language. When releasing protos, be sure that omissions are intentional.</p>"},{"location":"template/0191/#rationale","title":"Rationale","text":""},{"location":"template/0191/#java-packaging-options","title":"Java packaging options","text":"<p>Set the option, <code>java_multiple_files</code>, to true to get a cleaner file structure. Doing so instructs <code>protoc</code> to create one output file per Protobuf type, which allows for more fine-grained imports. The option, <code>java_outer_classname</code>, is required in combination with <code>java_multiple_files</code>. It instructs <code>protoc</code> to wrap each compiled Protobuf type in a Java class whose name is the value of the option. This prevents potential naming collisions between generated types.</p>"},{"location":"template/0191/#go-packaging-option","title":"Go packaging option","text":"<p>The Go packaging option needs to be decided by the team that owns the generated code, because it is directly tied to the source code management practices of the team. Allowing every proto package to decide on their own Go package creates inconsistencies and friction in management of the code. Within that owning team, having a consistent structure in the Go package naming is critical to a  consistent end user experience.</p>"},{"location":"template/0191/#changelog","title":"Changelog","text":"<ul> <li>2024-06-13: Added guidance for Go packaging annotation.</li> <li>2024-06-05: Added rationale for Java packaging options.</li> <li>2023-02-24: Added guidance on protobuf syntax.</li> <li>2022-10-18: Added guidance on Ruby/PHP/C# options.</li> <li>2019-11-18: Added guidance on the packaging annotations.</li> </ul>"},{"location":"template/0192/","title":"Documentation","text":"<p>Documentation is one of the most critical aspects of API design. Users of your API are unable to dig into the implementation to understand the API better; often, the API surface definition and its corresponding documentation will be the only things a user has. Therefore, it is important that documentation be as clear, complete, and unambiguous as possible.</p>"},{"location":"template/0192/#guidance","title":"Guidance","text":"<p>In APIs defined in protocol buffers, public comments must be included over every component (service, method, message, field, enum, and enum value) using the protocol buffers comment format. This is important even in cases where the comment is terse and uninteresting, as numerous tools read these comments and use them.</p> <p>Services, in particular, should have descriptive comments that explain what the service is and what users are able to do with it.</p> <p>Note: Many readers will not be native English speakers. Comments should avoid jargon, slang, complex metaphors, pop culture references, or anything else that will not easily translate. Additionally, many readers will have different backgrounds and viewpoints; if writing examples involving people, comments should use people who are non-controversial and no longer alive.</p>"},{"location":"template/0192/#style","title":"Style","text":"<p>Comments should be in grammatically correct American English. However, the first sentence of each comment should omit the subject and be in the third-person present tense:</p> <pre><code>// Creates a book under the given publisher.\nrpc CreateBook(CreateBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books\"\n    body: \"book\"\n  };\n}\n</code></pre>"},{"location":"template/0192/#descriptions","title":"Descriptions","text":"<p>Descriptions of messages and fields should be brief but complete. Sometimes comments are necessarily perfunctory because there is little to be said; however, before jumping to that conclusion, consider whether some of the following questions are relevant:</p> <ul> <li>What is it?</li> <li>How do you use it?</li> <li>What does it do if it succeeds? What does it do if it fails?</li> <li>Is it idempotent?</li> <li>What are the units? (Examples: meters, degrees, pixels)</li> <li>What are the side effects?</li> <li>What are common errors that may break it?</li> <li>What is the expected input format?</li> <li>What range of values does it accept? (Examples: <code>[0.0, 1.0)</code>, <code>[1, 10]</code>)<ul> <li>Is the range inclusive or exclusive?</li> </ul> </li> <li>For strings, what is the minimum and maximum length, and what characters     are allowed?<ul> <li>If a value is above the maximum length, do you truncate or send an error?</li> </ul> </li> <li>Is it always present? (Example: \"Container for voting information. Present   only when voting information is recorded.\")</li> <li>Does it have a default setting? (Example: \"If <code>page_size</code> is omitted, the   default is 50.\")</li> </ul>"},{"location":"template/0192/#formatting","title":"Formatting","text":"<p>Any formatting in comments must be in CommonMark. Headings and tables must not be used, as these cause problems for several tools, and are unsuitable for client library reference documentation.</p> <p>Comments should use <code>code font</code> for field or method names and for literals (such as <code>true</code>).</p> <p>Raw HTML must not be used.</p> <p>\"ASCII art\" attempts to present a diagram within the protos must not be used. The Markdown within the protos is consumed by a large number of renderers, and any ASCII art is very unlikely to be well-presented by all of them. If a diagram is useful in order to understand the API, include a link to a documentation page containing the diagram as an image.</p>"},{"location":"template/0192/#cross-references","title":"Cross-references","text":"<p>Comments may \"link\" to another component (service, method, message, field, enum, or enum value) by using the fully-qualified name of the element as a Markdown reference link. For example: <code>[Book][google.example.v1.Book]</code></p>"},{"location":"template/0192/#external-links","title":"External links","text":"<p>Comments may link to external pages to provide background information beyond what is described in the public comments themselves. External links must use absolute (rather than relative) URLs, including the protocol (usually <code>https</code>), and should not assume the documentation is located on any particular host. For example: <code>[Spanner Documentation](https://cloud.google.com/spanner/docs)</code></p>"},{"location":"template/0192/#trademarked-names","title":"Trademarked names","text":"<p>When referring to the proper, trademarked names of companies or products in comments, acronyms should not be used, unless the acronym is such dominant colloquial use that avoiding it would obscure the reference (example: IBM).</p> <p>Comments should spell and capitalize trademarked names consistent with the trademark owner's current branding.</p>"},{"location":"template/0192/#deprecations","title":"Deprecations","text":"<p>To deprecate a component (service, method, message, field, enum, or enum value), the <code>deprecated</code> option must be set to <code>true</code>, and the first line of the respective comment must start with <code>\"Deprecated: \"</code> and provide alternative solutions for developers. If there is no alternative solution, a deprecation reason must be given.</p>"},{"location":"template/0192/#internal-comments","title":"Internal comments","text":"<p>Comments may be explicitly marked as internal by wrapping internal content in <code>(--</code> and <code>--)</code>.</p> <p>Non-public links, internal implementation notes (such as <code>TODO</code> and <code>FIXME</code> directives), and other such material must be marked as internal.</p> <p>Note: Comments should use only leading comments (not trailing comments or detached comments). In particular, comments must not use both a leading and trailing comment to describe any component, because this is a common source of inadvertent omissions of the internal content annotation.</p>"},{"location":"template/0192/#changelog","title":"Changelog","text":"<ul> <li>2023-08-11: Expand deprecated comment requirement to all components.</li> <li>2021-04-20: Added guidance for deprecated services and RPCs.</li> <li>2020-04-01: Added guidance requiring absolute URLs for external links.</li> <li>2020-02-14: Added guidance around the use of trademarked names.</li> <li>2019-09-23: Added guidance about not using both leading and trailing   comments.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0193/","title":"Errors","text":"<p>Effective error communication is an important part of designing simple and intuitive APIs. Services returning standardized error responses enable API clients to construct centralized common error handling logic. This common logic simplifies API client applications and eliminates the need for cumbersome custom error handling code.</p>"},{"location":"template/0193/#guidance","title":"Guidance","text":"<p>Services must return a <code>google.rpc.Status</code> message when an API error occurs, and must use the canonical error codes defined in <code>google.rpc.Code</code>.  More information about the particular codes is available in the gRPC status code documentation.</p> <p>Error messages should help a reasonably technical user understand and resolve the issue, and should not assume that the user is an expert in your particular API. Additionally, error messages must not assume that the user will know anything about its underlying implementation.</p> <p>Error messages should be brief but actionable. Any extra information should be provided in the <code>details</code> field. If even more information is necessary, you should provide a link where a reader can get more information or ask questions to help resolve the issue. It is also important to set the right tone when writing messages.</p> <p>The following sections describe the fields of <code>google.rpc.Status</code>.</p>"},{"location":"template/0193/#statusmessage","title":"Status.message","text":"<p>The <code>message</code> field is a developer-facing, human-readable \"debug message\" which should be in English. (Localized messages are expressed using a <code>LocalizedMessage</code> within the <code>details</code> field. See <code>LocalizedMessage</code> for more details.) Any dynamic aspects of the message must be included as metadata within the <code>ErrorInfo</code> that appears in <code>details</code>.</p> <p>The message is considered a problem description. It is intended for developers to understand the problem and is more detailed than <code>ErrorInfo.reason</code>, discussed later.</p> <p>Messages should use simple descriptive language that is easy to understand (without technical jargon) to clearly state the problem that results in an error, and offer an actionable resolution to it.</p> <p>For pre-existing (brownfield) APIs which have previously returned errors without machine-readable identifiers, the value of <code>message</code> must remain the same for any given error. For more information, see Changing Error Messages.</p>"},{"location":"template/0193/#statuscode","title":"Status.code","text":"<p>The <code>code</code> field is the status code, which must be the numeric value of one of the elements of the <code>google.rpc.Code</code> enum.</p> <p>For example, the value <code>5</code> is the numeric value of the <code>NOT_FOUND</code> enum element.</p>"},{"location":"template/0193/#statusdetails","title":"Status.details","text":"<p>The <code>details</code> field allows messages with additional error information to be included in the error response, each packed in a <code>google.protobuf.Any</code> message.</p> <p>Google defines a set of standard detail payloads for error details, which cover most common needs for API errors.  Services should use these standard detail payloads when feasible.</p> <p>Each type of detail payload must be included at most once. For example, there must not be more than one <code>BadRequest</code> message in the <code>details</code>, but there may be a <code>BadRequest</code> and a <code>PreconditionFailure</code>.</p> <p>All error responses must include an <code>ErrorInfo</code> within <code>details</code>. This provides machine-readable identifiers so that users can write code against specific aspects of the error.</p> <p>The following sections describe the most common standard detail payloads.</p>"},{"location":"template/0193/#errorinfo","title":"ErrorInfo","text":"<p>The <code>ErrorInfo</code> message is the primary way to send a machine-readable identifier. Contextual information should be included in <code>metadata</code> in <code>ErrorInfo</code> and must be included if it appears within an error message.</p> <p>The <code>reason</code> field is a short snake_case description of the cause of the error. Error reasons are unique within a particular domain of errors. The reason must be at most 63 characters and match a regular expression of <code>[A-Z][A-Z0-9_]+[A-Z0-9]</code>. (This is UPPER_SNAKE_CASE, without leading or trailing underscores, and without leading digits.)</p> <p>The reason should be terse, but meaningful enough for a human reader to understand what the reason refers to.</p> <p>Good examples:</p> <ul> <li><code>CPU_AVAILABILITY</code></li> <li><code>NO_STOCK</code></li> <li><code>CHECKED_OUT</code></li> <li><code>AVAILABILITY_ERROR</code></li> </ul> <p>Bad examples:</p> <ul> <li><code>THE_BOOK_YOU_WANT_IS_NOT_AVAILABLE</code> (overly verbose)</li> <li><code>ERROR</code> (too general)</li> </ul> <p>The <code>domain</code> field is the logical grouping to which the <code>reason</code> belongs. The domain must be a globally unique value, and is typically the name of the service that generated the error, e.g. <code>pubsub.googleapis.com</code>.</p> <p>The (reason, domain) pair form a machine-readable way of identifying a particular error. Services must use the same (reason, domain) pair for the same error, and must not use the same (reason, domain) pair for logically different errors. The decision about whether two errors are \"the same\" or not is not always clear, but should generally be considered in terms of the expected action a client might take to resolve them.</p> <p>The <code>metadata</code> field is a map of key/value pairs providing additional dynamic information as context. Each key within <code>metadata</code> must be at most 64 characters long, and conform to the regular expression <code>[a-z][a-zA-Z0-9-_]+</code>.</p> <p>Any request-specific information which contributes to the <code>Status.message</code> or <code>LocalizedMessage.message</code> messages must be represented within <code>metadata</code>. This practice is critical so that machine actors do not need to parse error messages to extract information.</p> <p>For example consider the following message:</p> <p>An &lt;e2-medium&gt; VM instance with &lt;local-ssd=3,nvidia-t4=2&gt; is currently unavailable in the &lt;us-east1-a&gt; zone. Consider trying your request in the &lt;us-central1-f,us-central1-c&gt; zone(s), which currently has/have capacity to accommodate your request. Alternatively, you can try your request again with a different VM hardware configuration or at a later time. For more information, see the troubleshooting documentation.</p> <p>The <code>ErrorInfo.metadata</code> map for the same error could be:</p> <ul> <li><code>\"zone\": \"us-east1-a\"</code></li> <li><code>\"vmType\": \"e2-medium\"</code></li> <li><code>\"attachment\": \"local-ssd=3,nvidia-t4=2\"</code></li> <li><code>\"zonesWithCapacity\": \"us-central1-f,us-central1-c\"</code></li> </ul> <p>Additional contextual information that does not appear in an error message may also be included in <code>metadata</code> to allow programmatic use by the client.</p> <p>The metadata included for any given (reason,domain) pair can evolve over time:</p> <ul> <li>New keys may be included</li> <li>All keys that have been included must continue to be included (but may have empty values)</li> </ul> <p>In other words, once a user has observed a given key for a (reason, domain) pair, the service must allow them to rely on it continuing to be present in the future.</p> <p>The set of keys provided in each (reason, domain) pair is independent from other pairs, but services should aim for consistent key naming. For example, two error reasons within the same domain should not use metadata keys of <code>vmType</code> and <code>virtualMachineType</code>.</p>"},{"location":"template/0193/#localizedmessage","title":"LocalizedMessage","text":"<p><code>google.rpc.LocalizedMessage</code> is used to provide an error message which should be localized to a user-specified locale where possible.</p> <p>If the <code>Status.message</code> field has a sub-optimal value which cannot be changed due to the constraints in the Changing Error Messages section, <code>LocalizedMessage</code> may be used to provide a better error message even when no user-specified locale is available.</p> <p>Regardless of how the locale for the message was determined, both the <code>locale</code> and <code>message</code> fields must be populated.</p> <p>The <code>locale</code> field specifies the locale of the message, following IETF bcp47 (Tags for Identifying Languages). Example values: <code>\"en-US\"</code>, <code>\"fr-CH\"</code>, <code>\"es-MX\"</code>.</p> <p>The <code>message</code> field contains the localized text itself. This should include a brief description of the error and a call to action to resolve the error. The message should include contextual information to make the message as specific as possible. Any contextual information in the message must be included in <code>ErrorInfo.metadata</code>. See <code>ErrorInfo</code> for more details of how contextual information may be included in a message and the corresponding metadata.</p> <p>The <code>LocalizedMessage</code> payload should contain the complete resolution to the error. If more information is needed than can reasonably fit in this payload, then additional resolution information must be provided in a <code>Help</code> payload.  See the Help section for guidance.</p>"},{"location":"template/0193/#help","title":"Help","text":"<p>When other textual error messages (in <code>Status.message</code> or <code>LocalizedMessage.message</code>) don't provide the user sufficient context or actionable next steps, or if there are multiple points of failure that need to be considered in troubleshooting, a link to supplemental troubleshooting documentation must be provided in the <code>Help</code> payload.</p> <p>Provide this information in addition to a clear problem definition and actionable resolution, not as an alternative to them. The linked documentation must clearly relate to the error. If a single page contains information about multiple errors, the <code>ErrorInfo.reason</code> value must be used to narrow down the relevant information.</p> <p>The <code>description</code> field is a textual description of the linked information. This must be suitable to display to a user as text for a hyperlink. This must be plain text (not HTML, Markdown etc).</p> <p>Example <code>description</code> value: <code>\"Troubleshooting documentation for STOCKOUT errors\"</code></p> <p>The <code>url</code> field is the URL to link to. This must be an absolute URL, including scheme.</p> <p>Example <code>url</code> value: <code>\"https://cloud.google.com/compute/docs/resource-error\"</code></p> <p>For publicly-documented services, even those with access controls on actual usage, the linked content must be accessible without authentication.</p> <p>For privately-documented services, the linked content may require authentication.</p>"},{"location":"template/0193/#error-messages","title":"Error messages","text":"<p>Textual error messages can be present in both <code>Status.message</code> and <code>LocalizedMessage.message</code> fields. Messages should be succinct but actionable, with request-specific information (such as a resource name or region) providing precise details where appropriate. Any request-specific details must be present in <code>ErrorInfo.metadata</code>.</p>"},{"location":"template/0193/#changing-error-messages","title":"Changing error messages","text":"<p>Changing the content of <code>Status.message</code> over time must be done carefully, to avoid breaking clients who have previously had to rely on the message for all information. See the rationale section for more details.</p> <p>For a given RPC:</p> <ul> <li>If the RPC has always returned <code>ErrorInfo</code> with machine-readable   information, the content of <code>Status.message</code> may change over time.   (For example, the API producer may provide a clearer explanation,   or more request-specific information.)</li> <li>Otherwise, the content of <code>Status.message</code> must be stable,   providing the same text with the same request-specific information.   Instead of changing <code>Status.message</code>, the API should include a   <code>LocalizedMessage</code> within <code>Status.details</code>.</li> </ul> <p>Even if an RPC has always returned <code>ErrorInfo</code>, the API may keep the existing <code>Status.message</code> stable and add a <code>LocalizedMessage</code> within <code>Status.details</code>.</p> <p>The content of <code>LocalizedMessage.details</code> may change over time.</p>"},{"location":"template/0193/#partial-errors","title":"Partial errors","text":"<p>APIs should not support partial errors. Partial errors add significant complexity for users, because they usually sidestep the use of error codes, or move those error codes into the response message, where the user must write specialized error handling logic to address the problem.</p> <p>However, occasionally partial errors are necessary, particularly in bulk operations where it would be hostile to users to fail an entire large request because of a problem with a single entry.</p> <p>Methods that require partial errors should use long-running operations, and the method should put partial failure information in the metadata message. The errors themselves must still be represented with a <code>google.rpc.Status</code> object.</p>"},{"location":"template/0193/#permission-denied","title":"Permission Denied","text":"<p>If the user does not have permission to access the resource or parent, regardless of whether or not it exists, the service must error with <code>PERMISSION_DENIED</code> (HTTP 403). Permission must be checked prior to checking if the resource or parent exists.</p> <p>If the user does have proper permission, but the requested resource or parent does not exist, the service must error with <code>NOT_FOUND</code> (HTTP 404).</p>"},{"location":"template/0193/#http11json-representation","title":"HTTP/1.1+JSON representation","text":"<p>When clients use HTTP/1.1 as per AIP-127, the error information is returned in the body of the response, as a JSON object. For backward compatibility reasons, this does not map precisely to <code>google.rpc.Status</code>, but contains the same core information. The schema is defined in the following proto:</p> <pre><code>message Error {\n  message Status {\n    // The HTTP status code that corresponds to `google.rpc.Status.code`.\n    int32 code = 1;\n    // This corresponds to `google.rpc.Status.message`.\n    string message = 2;\n    // This is the enum version for `google.rpc.Status.code`.\n    google.rpc.Code status = 4;\n    // This corresponds to `google.rpc.Status.details`.\n    repeated google.protobuf.Any details = 5;\n  }\n\n  Status error = 1;\n}\n</code></pre> <p>The most important difference is that the <code>code</code> field in the JSON is an HTTP status code, not the direct value of <code>google.rpc.Status.code</code>. For example, a <code>google.rpc.Status</code> message with a <code>code</code> value of 5 would be mapped to an object including the following code-related fields (as well as the message, details etc):</p> <pre><code>{\n  \"error\": {\n    \"code\": 404,          // The HTTP status code for \"not found\"\n    \"status\": \"NOT_FOUND\" // The name in google.rpc.Code for value 5\n  }\n}\n</code></pre> <p>The following JSON shows a fully populated HTTP/1.1+JSON representation of an error response.</p> <pre><code>{\n  \"error\": {\n    \"code\": 429,\n    \"message\": \"The zone 'us-east1-a' does not have enough resources available to fulfill the request. Try a different zone, or try again later.\",\n    \"status\": \"RESOURCE_EXHAUSTED\",\n    \"details\": [\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\n        \"reason\": \"RESOURCE_AVAILABILITY\",\n        \"domain\": \"compute.googleapis.com\",\n        \"metadata\": {\n          \"zone\": \"us-east1-a\",\n          \"vmType\": \"e2-medium\",\n          \"attachment\": \"local-ssd=3,nvidia-t4=2\",\n          \"zonesWithCapacity\": \"us-central1-f,us-central1-c\"\n        }\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.LocalizedMessage\",\n        \"locale\": \"en-US\",\n        \"message\": \"An &lt;e2-medium&gt; VM instance with &lt;local-ssd=3,nvidia-t4=2&gt; is currently unavailable in the &lt;us-east1-a&gt; zone. Consider trying your request in the &lt;us-central1-f,us-central1-c&gt; zone(s), which currently has/have capacity to accommodate your request. Alternatively, you can try your request again with a different VM hardware configuration or at a later time. For more information, see the troubleshooting documentation.\"\n      },\n      {\n        \"@type\": \"type.googleapis.com/google.rpc.Help\",\n        \"links\": [\n          {\n            \"description\": \"Additional information on this error\",\n            \"url\": \"https://cloud.google.com/compute/docs/resource-error\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"template/0193/#rationale","title":"Rationale","text":""},{"location":"template/0193/#requiring-errorinfo","title":"Requiring ErrorInfo","text":"<p><code>ErrorInfo</code> is required because it further identifies an error. With only approximately twenty available values for <code>Status.status</code>, it is difficult to disambiguate one error from another across an entire API Service.</p> <p>Also, error messages often contain dynamic segments that express variable information, so there needs to be machine-readable component of every error response that enables clients to use such information programmatically.</p>"},{"location":"template/0193/#including-localizedmessage","title":"Including LocalizedMessage","text":"<p><code>LocalizedMessage</code> was selected as the location to present alternate error messages. While <code>LocalizedMessage</code> may use a locale specified in the request, a service may provide a <code>LocalizedMessage</code> even without a user-specified locale, typically to provide a better error message in situations where <code>Status.message</code> cannot be changed. Where the locale is not specified by the user, it should be <code>en-US</code> (US English).</p> <p>A service may include <code>LocalizedMessage</code> even when the same message is provided in <code>Status.message</code> and when localization into a user-specified locale is not supported. Reasons for this include:</p> <ul> <li>An intention to support user-specified localization in the near future, allowing   clients to consistently use <code>LocalizedMessage</code> and not change their error-reporting   code when the functionality is introduced.</li> <li>Consistency across all RPCs within a service: if some RPCs include   <code>LocalizedMessage</code> and some only use <code>Status.message</code> for error messages, clients   have to be aware of which RPCs will do what, or implement a fall-back mechanism.   Providing <code>LocalizedMessage</code> on all RPCs allows simple and consistent client code   to be written.</li> </ul>"},{"location":"template/0193/#updating-statusmessage","title":"Updating Status.message","text":"<p>If a client has ever observed an error with <code>Status.message</code> populated (which it always will be) but without <code>ErrorInfo</code>, the developer of that client may well have had to resort to parsing <code>Status.message</code> in order to find out information beyond just what <code>Status.code</code> conveys. That information may be found by matching specific text (e.g. \"Connection closed with unknown cause\") or by parsing the message to find out metadata values (e.g. a region with insufficient resources). At that point, <code>Status.message</code> is implicitly part of the API contract, so must not be updated - that would be a breaking change. This is one reason for introducing <code>LocalizedMessage</code> into the <code>Status.details</code>.</p> <p>RPCs which have always included <code>ErrorInfo</code> are in a better position: the contract is then more about the stability of <code>ErrorInfo</code> for any given error. The reason and domain need to be consistent over time, and the metadata provided for any given (reason,domain) can only be expanded. It's still possible that clients could be parsing <code>Status.message</code> instead of using <code>ErrorInfo</code>, but they will always have had a more robust option available to them.</p>"},{"location":"template/0193/#further-reading","title":"Further reading","text":"<ul> <li>For which error codes to retry, see [AIP-194][aip-194].</li> <li>For how to retry errors in client libraries, see   AIP-4221.</li> </ul>"},{"location":"template/0193/#changelog","title":"Changelog","text":"<ul> <li>2024-10-18: Rewrite/restructure for clarity.</li> <li>2024-01-10: Incorporate guidance for writing effective messages.</li> <li>2023-05-17: Change the recommended language for <code>Status.message</code> to be   the service's native language rather than English.</li> <li>2023-05-17: Specify requirements for changing error messages.</li> <li>2023-05-10: Require <code>ErrorInfo</code> for all error responses.</li> <li>2023-05-04: Require uniqueness by message type for error details.</li> <li>2022-11-04: Added guidance around PERMISSION_DENIED errors previously   found in other AIPs.</li> <li>2022-08-12: Reworded/Simplified intro to add clarity to the intent.</li> <li>2020-01-22: Added a reference to the <code>ErrorInfo</code> message.</li> <li>2019-10-14: Added guidance restricting error message mutability to if   there is a machine-readable identifier present.</li> <li>2019-09-23: Added guidance about error message strings being able to     change.</li> </ul>"},{"location":"template/0194/","title":"Automatic retry configuration","text":"<p>RPCs sometimes fail. When one does, the client performing the RPC needs to know whether it is safe to retry the operation. When status codes are used consistently across multiple APIs, clients can respond to failures appropriately.</p>"},{"location":"template/0194/#guidance","title":"Guidance","text":"<p>Clients should automatically retry requests for which repeated runs would not cause unintended state changes, which are non-transactional, and which are unary.</p> <p>Clients should not automatically retry transactional requests; instead these requests should have application-level retry logic that retries the entire transaction block from the start.</p> <p>Clients should not automatically retry requests in which repeated runs would cause unintended state changes.</p> <p>Note: This AIP does not cover client streaming or bi-directional streaming.</p> <p>Note: For client side retry behavior in the client libraries: see [AIP-4221][].</p>"},{"location":"template/0194/#retryable-codes","title":"Retryable codes","text":"<p>For methods listed as retryable above, clients should retry the following error codes:</p> <ul> <li><code>UNAVAILABLE</code>: This code generally results from network hiccups, and is   generally transient. It is retryable under the expectation that the   connection will become available (soon).</li> </ul>"},{"location":"template/0194/#non-retryable-codes","title":"Non-retryable codes","text":"<p>The following codes should not be automatically retried for any request:</p> <ul> <li><code>OK</code>: The request succeeded.</li> <li><code>CANCELLED</code>: An application can cancel a request, which must be honored.</li> <li><code>DEADLINE_EXCEEDED</code>: An application can set a deadline, which must be   honored.</li> <li><code>INVALID_ARGUMENT</code>: Retrying a request with an invalid argument will never   succeed.</li> <li><code>DATA_LOSS</code>: This is an unrecoverable error and must immediately be   surfaced to the application.</li> </ul>"},{"location":"template/0194/#generally-non-retryable-codes","title":"Generally non-retryable codes:","text":"<p>The following codes generally should not be automatically retried for any request:</p> <ul> <li><code>RESOURCE_EXHAUSTED</code>: This code may be a signal that quota is exhausted.   Retries therefore may not be expected to work for several hours; meanwhile   the retries may have billing implications. If <code>RESOURCE_EXHAUSTED</code> is used   for other reasons than quota and the expected time for the resource to become   available is much shorter, it may be retryable.</li> <li><code>INTERNAL</code>: This code generally means that some internal part of the system   has failed, and usually means a bug should be filed against the system. These   should immediately be surfaced to the application.</li> <li><code>UNKNOWN</code>: Unlike <code>INTERNAL</code>, this code is reserved for truly   unknown-to-the-system errors, and therefore may not be safe to retry. These   should immediately be surfaced to the application.</li> <li><code>ABORTED</code>: This code typically means that the request failed due to a   sequencer check failure or transaction abort. These should not be retried   for an individual request; they should be retried at a level higher (the   entire transaction, for example).</li> </ul> <p>Some codes may be automatically retried if a system is designed without synchronization or signaling between various components. For example, client might retry <code>NOT_FOUND</code> on a read operation, which is designed to hang forever until the resource is created. However, these types of systems are generally discouraged.</p> <p>Therefore, the following codes should not be automatically retried for any request:</p> <ul> <li><code>NOT_FOUND</code>: A client should not retry until a resource is created.</li> <li><code>ALREADY_EXISTS</code>: A client should not retry until a resource is deleted.</li> <li><code>PERMISSION_DENIED</code>: A client should not retry until it has permission.</li> <li><code>UNAUTHORIZED</code>: A client should not retry until it is authorized.</li> <li><code>UNAUTHENTICATED</code>: A client should not retry until it is authenticated.</li> <li><code>FAILED_PRECONDITION</code>: A client should not retry until system state   changes.</li> <li><code>OUT_OF_RANGE</code>: A client should not retry until the range is extended.</li> <li><code>UNIMPLEMENTED</code>: A client should not retry until the RPC is implemented.</li> </ul>"},{"location":"template/0194/#further-reading","title":"Further reading","text":"<ul> <li>For parallel or retried request disambiguation, see AIP-154.</li> </ul>"},{"location":"template/0200/","title":"Precedent","text":"<p>Many times, APIs are written in ways that do not match new guidance that is added to these standards after those APIs have already been released. Additionally, sometimes it can make sense to intentionally violate standards for particular reasons, such as maintaining consistency with established systems, meeting stringent performance requirements, or other practical concerns. Finally, as carefully as everyone reviews APIs before they are released, sometimes mistakes can slip through.</p> <p>Since it often is not feasible to fix past mistakes or make the standards serve every use case, APIs may be stuck with these exceptions for quite some time. Further, since new APIs often base their designs (names, types, structures, etc) on existing APIs, it is possible that a standards violation in one API could spill over into other APIs, even if original reason for the exception is not applicable to the other APIs.</p> <p>As a result of this problem, it is important to \"stop the bleeding\" of these standards exceptions into new APIs, and additionally document the reasons for each exception so that historical wisdom is not lost.</p>"},{"location":"template/0200/#guidance","title":"Guidance","text":"<p>If an API violates the AIP standards for any reason, there must be an internal comment linking to this document using its descriptive link (aip.dev/not-precedent) to ensure others do not copy the violations or cite the errors as precedent of a \"previously approved API\".</p> <p>The comment should also include an explanation of what violates standards and why it is necessary. For example:</p> <pre><code>message DailyMaintenanceWindow {\n  // Time within the maintenance window to start the maintenance operations.\n  // It must use the format \"HH MM\", where HH : [00-23] and MM : [00-59] GMT.\n  // (-- aip.dev/not-precedent: This was designed for consistency with crontab,\n  //     and preceded the AIP standards.\n  //     Ordinarily, this type should be `google.type.TimeOfDay`. --)\n  string start_time = 2;\n\n  // Output only. Duration of the time window, automatically chosen to be\n  // smallest possible in the given scenario.\n  // (-- aip.dev/not-precedent: This preceded the AIP standards.\n  //     Ordinarily, this type should be `google.protobuf.Duration`. --)\n  string duration = 3;\n}\n</code></pre> <p>Important: APIs should only be considered to be precedent-setting if they are in beta or GA.</p>"},{"location":"template/0200/#local-consistency","title":"Local consistency","text":"<p>If an API violates a standard throughout, it would be jarring and frustrating to users to break the existing pattern only for the sake of adhering to the global standard.</p> <p>For example, if all of an API's resources use <code>creation_time</code> (instead of the standard field <code>create_time</code> described in AIP-142), a new resource in that API should continue to follow the local pattern.</p> <p>However, others who might otherwise copy that API should be made aware that this is contra-standard and not something to cite as precedent when launching new APIs.</p> <pre><code>// ...\nmessage Book {\n  // (-- aip.dev/not-precedent: This field was present before there was a\n  //     standard field.\n  //     Ordinarily, it should be spelled `create_time`. --)\n  google.protobuf.Timestamp creation_time = 1;\n}\n\n// ...\nmessage Author {\n  // (-- aip.dev/not-precedent: `Book` had `creation_time` before there was\n  //     a standard field, so we match that here for consistency. Ordinarily,\n  //     this would be spelled `create_time`. --)\n  google.protobuf.Timestamp creation_time = 1;\n}\n</code></pre>"},{"location":"template/0200/#pre-existing-functionality","title":"Pre-existing functionality","text":"<p>Standards violations are sometimes overlooked before launching, resulting in APIs that become stable and therefore can not easily be modified. Additionally, a stable API may pre-date a standards requirement.</p> <p>In these scenarios, it is difficult to make the API fit the standard. However, the API should still cite that the functionality is contra-standard so that other APIs do not copy the mistake and cite the existing API as a reason why their design should be approved.</p>"},{"location":"template/0200/#adherence-to-external-spec","title":"Adherence to external spec","text":"<p>Occasionally, APIs must violate standards because specific requests are implementations of an external specification (for example, OAuth), and their specification may be at odds with AIP guidelines. In this case, it is likely to be appropriate to follow the external specification.</p>"},{"location":"template/0200/#adherence-to-existing-systems","title":"Adherence to existing systems","text":"<p>Similar to the example of an external specification above, it may be proper for an API to violate AIP guidelines to fit in with an existing system in some way. This is a fundamentally similar case where it is wise to meet the customer where they are. A potential example of this might be integration with or similarity to a partner API.</p>"},{"location":"template/0200/#expediency","title":"Expediency","text":"<p>Sometimes there are users who need an API surface by a very hard deadline or money walks away. Since most APIs serve a business purpose, there will be times when an API could be better but cannot get it that way and into users' hands before the deadline. In those cases, API review councils may grant exceptions to ship APIs that violate guidelines due to time and business constraints.</p>"},{"location":"template/0200/#technical-concerns","title":"Technical concerns","text":"<p>Internal systems sometimes have very specific implementation needs (e.g., they rely on operation transforms that speak UTF-16, not UTF-8) and adhering to AIP guidelines would require extra work that does not add significant value to API consumers. Future systems which are likely to expose an API at some point should bear this in mind to avoid building underlying infrastructure which makes it difficult to follow AIP guidelines.</p>"},{"location":"template/0200/#changelog","title":"Changelog","text":"<ul> <li>2020-03-27: Reworded much of this AIP to follow AIP-8, and remove   first and second person. No semantic changes.</li> <li>2019-05-04: Changed to a public link (aip.dev/not-precedent), and   changed references to \"the style guide\" to use the more generic term   \"standards\" (to account for a general shift to AIPs).</li> </ul>"},{"location":"template/0202/","title":"Fields","text":"<p>The <code>google.api.FieldInfo</code> type, through its accompanying extension <code>google.api.field_info</code>, enriches a field's schema beyond the basic name and type information.</p>"},{"location":"template/0202/#guidance","title":"Guidance","text":"<p>Decorating a field with <code>google.api.field_info</code> is only necessary when explicitly stated in this AIP or another that leverages <code>google.api.FieldInfo</code> information. As such, the guidance herein applies to those scenarios as well.</p>"},{"location":"template/0202/#format","title":"Format","text":"<p>Fields with a primitive type can still have a specific format. To convey that type format, the <code>FieldInfo.Format</code> enumeration is used via the <code>(google.api.field_info).format</code> extension field. The following guidance conveys the meaning of and requirements for use of each <code>FieldInfo.Format</code> value.</p>"},{"location":"template/0202/#uuid4","title":"UUID4","text":"<p>The <code>UUID4</code> format represents a UUID version 4 value as governed by RFC 4122. It must only be used on a field of type <code>string</code>.</p> <p>Such a value may be normalized by the service to entirely lowercase letters. For example, the value <code>F47AC10B-58CC-0372-8567-0E02B2C3D479</code> would be normalized to <code>f47ac10b-58cc-0372-8567-0e02b2c3d479</code>.</p> <p>As such, equivalence comparison must not be done via primitive text comparison. Instead, an RFC 4122 compliant implementation must be used.</p>"},{"location":"template/0202/#ipv4","title":"IPv4","text":"<p>The <code>IPV4</code> format represents an IP v4 address as governed by RFC 791. It must only be used on a field of type <code>string</code>.</p> <p>Such a value may be condensed by the service, with leading zeros in each octet stripped. For example, <code>001.022.233.040</code> would be condensed to <code>1.22.233.40</code>.</p> <p>As such, equivalence comparison must not be done via primitive text comparison. Instead, an RFC 791 compliant implementation must be used.</p>"},{"location":"template/0202/#ipv6","title":"IPv6","text":"<p>The <code>IPV6</code> format represents an IP v6 address as governed by RFC 4291. It must only be used on a field of type <code>string</code>.</p> <p>Such a value may be normalized by the service to entirely lowercase letters with zeros compressed, following RFC 5952. For example, the value <code>2001:0DB8:0::0</code> would be normalized to <code>2001:db8::</code>.</p> <p>As such, equivalence comparison must not be done via primitive text comparison. Instead, an RFC 4291 compliant implementation must be used.</p>"},{"location":"template/0202/#ipv4-or-ipv6","title":"IPv4 or IPv6","text":"<p>The <code>IPV4_OR_IPV6</code> value indicates that the field can be either an IP v4 or v6 address, as described in the IPv4 and IPv6 sections.</p>"},{"location":"template/0202/#format-compatibility","title":"Format Compatibility","text":"<p>Adding a format specifier to an existing, unspecified field is not backwards compatible, unless the field in question has always conformed to the format being specified.</p> <p>Changing an existing format specifier to a different one in all cases is not backwards compatible.</p>"},{"location":"template/0202/#extending-format","title":"Extending Format","text":"<p>Any new <code>FieldInfo.Format</code> value must be governed by an IETF-approved RFC or a Google-approved AIP.</p>"},{"location":"template/0202/#rationale","title":"Rationale","text":""},{"location":"template/0202/#why-add-a-format-specifier","title":"Why add a format specifier?","text":"<p>The format of a primitive-typed field can be critical to its usability. Some programming languages may convey a specific type format as a standalone type, as Java does with UUID. Most have specific structural requirements that are validated by the service, so conveying the format to the user ahead of time is critical to their experience.</p>"},{"location":"template/0202/#why-discourage-primitive-equality-comparisons","title":"Why discourage primitive equality comparisons?","text":"<p>The text representations of the supported formats have many nuances and transforming the value into a canonical representation is non-trivial. As such, aligning implementations between each consumer and each service without any issue is infeasiable.</p>"},{"location":"template/0202/#why-document-value-normalizations","title":"Why document value normalizations?","text":"<p>While primitive comparison is not recommended for any of the supported formats, uniform normalization of values is important to set consumer expectations, and create a user-friendly surface.</p>"},{"location":"template/0202/#why-require-an-rfc-or-aip-for-new-formats","title":"Why require an RFC or AIP for new formats?","text":"<p>Those formats which are sufficiently standardized to merit an RFC or AIP are stable enough and widely enough known to be incorporated as a supported value and see usage in Google APIs. Requiring such extra guidance means that governing the format specification is not the responsibility of the <code>FieldInfo.Format</code> enumeration itself.</p>"},{"location":"template/0203/","title":"Field behavior documentation","text":"<p>When defining fields in protocol buffers, it is customary to explain to users certain aspects of the field's behavior (such as whether it is required or optional). Additionally, it can be useful for other tools to understand this behavior (for example, to optimize client library signatures).</p>"},{"location":"template/0203/#guidance","title":"Guidance","text":"<p>APIs use the <code>google.api.field_behavior</code> annotation to describe well-understood field behavior, such as a field being required or immutable.</p> <pre><code>// The audio data to be recognized.\nRecognitionAudio audio = 2 [(google.api.field_behavior) = REQUIRED];\n</code></pre> <ul> <li>APIs must apply the <code>google.api.field_behavior</code> annotation on every field   on a message or sub-message used in a request.</li> <li>The annotation must include any google.api.FieldBehavior values that   accurately describe the behavior of the field.</li> <li><code>FIELD_BEHAVIOR_UNSPECIFIED</code> must not be used.</li> <li>APIs must at minimum use one of <code>REQUIRED</code>, <code>OPTIONAL</code>, or <code>OUTPUT_ONLY</code>.</li> </ul> <p>Warning: Although <code>field_behavior</code> does not impact proto-level behavior, many clients (e.g. CLIs and SDKs) rely on them to generate code. Thoroughly review and consider which values are relevant when adding a new field.</p> <p>Fields with no annotation are interpreted as <code>OPTIONAL</code> for backwards-compatility. Nontheless, this annotation must not be omitted.</p> <p>Note: The vocabulary given in this document is for descriptive purposes only, and does not itself add any validation. The purpose is to consistently document this behavior for clients.</p>"},{"location":"template/0203/#field-behavior-of-nested-messages","title":"field behavior of nested messages","text":"<p><code>google.api.field_behavior</code> annotations on a nested message are independent of the annotations of the parent.</p> <p>For example, a nested message can have a field behavior of <code>REQUIRED</code> while the parent field can be <code>OPTIONAL</code>:</p> <pre><code>message Title {\n  string text = 1 [(google.api.field_behavior) = REQUIRED];\n}\n\nmessage Slide {\n  Title title = 1 [(google.api.field_behavior) = OPTIONAL];\n}\n</code></pre> <p>In the case above, if a <code>title</code> is specified, the <code>text</code> field is required.</p>"},{"location":"template/0203/#vocabulary","title":"Vocabulary","text":""},{"location":"template/0203/#identifier","title":"Identifier","text":"<p>The use of <code>IDENTIFIER</code> indicates that a field within a resource message is used to identify the resource. It must be attached to the <code>name</code> field and must not be attached to any other field (see fields representing resource names).</p> <p>The <code>IDENTIFIER</code> value conveys that the field is not accepted as input (i.e. <code>OUTPUT_ONLY</code>) in the context of a create method, while also being considered <code>IMMUTABLE</code> and accepted as input for mutation methods that accept the resource as the primary input e.g. Standard Update.</p> <p>This annotation must not be applied to references to other resources within a message.</p>"},{"location":"template/0203/#immutable","title":"Immutable","text":"<p>The use of <code>IMMUTABLE</code> indicates that a field on a resource cannot be changed after its creation. This can apply to either fields that are input or outputs, required or optional.</p> <p>When a service receives an immutable field in an update request (or similar), even if included in the update mask, the service should ignore the field if the value matches, but should error with <code>INVALID_ARGUMENT</code> if a change is requested.</p> <p>Potential use cases for immutable fields (this is not an exhaustive list) are:</p> <ul> <li>Attributes of resources that are not modifiable for the lifetime of the   application (e.g. a disk type).</li> </ul> <p>Note: Fields which are \"conditionally immutable\" must not be given the immutable annotation.</p>"},{"location":"template/0203/#input-only","title":"Input only","text":"<p>The use of <code>INPUT_ONLY</code> indicates that the field is provided in requests and that the corresponding field will not be included in output.</p> <p>Additionally, a field should only be described as input only if it is a field in a resource message or a field of a message included within a resource message. Notably, fields in request messages (a message which only ever acts as an argument to an RPC, with a name usually ending in <code>Request</code>) should not be described as input only because this is already implied.</p> <p>Potential use cases for input only fields (this is not an exhaustive list) are:</p> <ul> <li>The <code>ttl</code> field as described in AIP-214.</li> </ul> <p>Warning: Input only fields are rare and should be considered carefully before use.</p>"},{"location":"template/0203/#optional","title":"Optional","text":"<p>The use of <code>OPTIONAL</code> indicates that a field is not required.</p> <p>A field may be described as optional if it is a field on a request message (a message that is an argument to an RPC, usually ending in <code>Request</code>), or a field on a submessage.</p>"},{"location":"template/0203/#output-only","title":"Output only","text":"<p>The use of <code>OUTPUT_ONLY</code> indicates that the field is provided in responses, but that including the field in a message in a request does nothing (the server must clear out any value in this field and must not throw an error as a result of the presence of a value in this field on input). Similarly, services must ignore the presence of output only fields in update field masks (see: AIP-161).</p> <p>Additionally, a field should only be described as output only if it is a field in a resource message, or a field of a message farther down the tree. Notably, fields in response messages (a message which only ever acts as a return value to an RPC, usually ending in <code>Response</code>) should not be described as output only because this is already implied.</p> <p>Output only fields may be set to empty values if appropriate to the API.</p> <p>Potential use cases for output only fields (this is not an exhaustive list) are:</p> <ul> <li>Create or update timestamps.</li> <li>Derived or structured information based on original user input.</li> <li>Properties of a resource assigned by the service which can not be altered.</li> </ul>"},{"location":"template/0203/#required","title":"Required","text":"<p>The use of <code>REQUIRED</code> indicates that the field must be present (and set to a non-empty value) on the request or resource.</p> <p>A field should only be described as required if either:</p> <ul> <li>It is a field on a resource that a user provides somewhere as input. In this   case, the resource is only valid if a \"truthy\" value is stored.</li> <li>When creating the resource, a value must be provided for the     field on the create request.</li> <li>When updating the resource, the user may omit the field     provided that the field is also absent from the field mask, indicating no     change to the field (otherwise it must be provided).</li> <li>It is a field on a request message (a message that is an argument to an RPC,   with a name usually ending in <code>Request</code>). In this case, a value must be   provided as part of the request, and failure to do so must cause an error   (usually <code>INVALID_ARGUMENT</code>).</li> </ul> <p>We define the term \"truthy\" above as follows:</p> <ul> <li>For primitives, values other than <code>0</code>, <code>0.0</code>, empty string/bytes, and <code>false</code></li> <li>For repeated fields maps, values with at least one entry</li> <li>For messages, any message with at least one \"truthy\" field.</li> </ul> <p>Fields should not be described as required in order to signify:</p> <ul> <li>A field which will always be present in a response.</li> <li>A field which is conditionally required in some situations.</li> <li>A field on any message (including messages that are resources) which is never   used as user input.</li> </ul> <p>Note: In most cases, empty values (such as <code>false</code> for booleans, <code>0</code> for integers, or the unspecified value for enums) are indistinguishable from unset values, and therefore setting a required field to a falsy value yields an error. A corollary to this is that a required boolean must be set to <code>true</code>.</p>"},{"location":"template/0203/#unordered-list","title":"Unordered List","text":"<p>The use of <code>UNORDERED_LIST</code> on a repeated field of a resource indicates that the service does not guarantee the order of the items in the list.</p> <p>A field should be described as an unordered list if the service does not guarantee that the order of the elements in the list will match the order that the user sent, including a situation where the service will sort the list on the user's behalf.</p> <p>A resource with an unordered list may return the list in a stable order, or may return the list in a randomized, unstable order.</p>"},{"location":"template/0203/#backwards-compatibility","title":"Backwards compatibility","text":"<p>Adding or changing <code>google.api.field_behavior</code> values can represent a semantic change in the API that is perceived as incompatible for existing clients. The following are examples of backwards incompatible changes with <code>google.api.field_behavior</code>:</p> <ul> <li>Adding <code>REQUIRED</code> to an existing field previously considered <code>OPTIONAL</code> (implicitly or otherwise)</li> <li>Adding a new field annotated as <code>REQUIRED</code> to an existing request message</li> <li>Adding <code>OUTPUT_ONLY</code> to an existing field previously accepted as input</li> <li>Adding <code>INPUT_ONLY</code> to an existing field previously emitted as output</li> <li>Adding <code>IMMUTABLE</code> to an existing field previously considered mutable</li> <li>Removing <code>OUTPUT_ONLY</code> from an existing field previously ignored as input</li> <li>Removing <code>IDENTIFIER</code> from an existing field.</li> </ul> <p>There are some changes that are backwards compatible, which are as follows:</p> <ul> <li>Adding <code>OPTIONAL</code> to an existing field</li> <li>Adding <code>IDENTIFIER</code> to an existing <code>name</code> field</li> <li>Changing from <code>REQUIRED</code> to <code>OPTIONAL</code> on an existing field</li> <li>Changing from <code>OUTPUT_ONLY</code> and/or <code>IMMUTABLE</code> to <code>IDENTIFIER</code> on an existing   field</li> <li>Removing <code>REQUIRED</code> from an existing field</li> <li>Removing <code>INPUT_ONLY</code> from an existing field previously excluded in responses</li> <li>Removing <code>IMMUTABLE</code> from an existing field previously considered immutable</li> </ul>"},{"location":"template/0203/#rationale","title":"Rationale","text":""},{"location":"template/0203/#identifier-field-behavior","title":"Identifier field behavior","text":"<p>Resource names, the primary identifiers for any compliant resource, are never fully constructed by the user on create. Such fields are typically assigned <code>OUTPUT_ONLY</code> field behavior. They are, however, also often consumed as the primary identifier in scenarios where the resource itself is the primary request payload. Such fields could not be considered <code>OUTPUT_ONLY</code>. Furthermore, in mutation requests, like Standard Update, the resource name as the primary identifier cannot be changed in place. Such fields are typically assigned <code>IMMUTABLE</code> field behavior. These conflicting and context-dependent field behaviors meant that a new value was necessary to single out and convey the behavior of the resource name field.</p>"},{"location":"template/0203/#required-set-of-annotations","title":"Required set of annotations","text":"<p>A field used in a request message must be either an input or an output.</p> <p>In the case of an output, the <code>OUTPUT_ONLY</code> annotation is sufficient.</p> <p>In the case of an input, a field is either required or optional, and therefore should have at least the <code>REQUIRED</code> or <code>OPTIONAL</code> annotation, respectively. Only providing <code>INPUT_ONLY</code> does not convey the necessity of the field, so specifying either <code>REQUIRED</code> or <code>OPTIONAL</code> is still necessary.</p>"},{"location":"template/0203/#requiring-field-behavior","title":"Requiring field behavior","text":"<p>By including the field behavior annotation for each field, the overall behavior that the resource exhibits is more clearly defined. Clearly defined field behavior improves programmatic clients and user understanding.</p> <p>Requiring the annotation also forces the API author to explicitly consider the behavior when initially authoring of the API.</p> <p>Modifying field behavior after initial authoring can result in backwards-incompatible changes in clients. For example, making an optional field required results in backwards-incompatible changes in the method signature of an RPC or a resource in a Declarative client. See the Backwards compatibility section for more detailed compatibility guidance.</p>"},{"location":"template/0203/#history","title":"History","text":"<p>In 2023-05 field_behavior was made mandatory. Prior to this change, the annotation was often omitted. Its values are relied upon to produce high quality clients. Furthermore, adding or changing some of the field_behavior values after the fact within a major version can be backwards-incompatible. See the Backwards compatibility section for more detailed compatibility guidance.</p> <p>The benefits of requiring field_behavior at the time that the API is authored surpass the costs to clients and API users of not doing so.</p>"},{"location":"template/0203/#changelog","title":"Changelog","text":"<ul> <li>2023-09-14: Clarify that nested behavior and parent behavior are   independent.</li> <li>2023-08-25: Add guidance on <code>IDENTIFIER</code>.</li> <li>2023-07-20: Describe compatibility guidance with new section.</li> <li>2023-05-24: Clarify that <code>IMMUTABLE</code> does not imply input nor required.</li> <li>2023-05-10: Added guidance to require the annotation.</li> <li>2020-12-15: Added guidance for <code>UNORDERED_LIST</code>.</li> <li>2020-05-27: Clarify behavior when receiving an immutable field in an   update.</li> <li>2019-12-05: Added guidance on output only fields in field masks.</li> <li>2019-06-18: Use the machine-readable annotation, not comments.</li> </ul>"},{"location":"template/0205/","title":"Beta-blocking changes","text":"<p>APIs often release an Alpha version of their API in order to get early feedback from customers. This API is provisional and can change many times before the important feedback is incorporated and the API is made stable for Beta.</p> <p>Since the purpose of Alpha is to gather feedback, the API does not need to be perfect yet, and it's not strictly necessary for API authors to address every usability concern or address every point in the API standards. Often, API authors and API reviewers will not agree on the best design, and the best way to find out is by having users try out the API.</p> <p>However, once the feedback has been collected and the API is going to be promoted to Beta, usability concerns and style issues do need to be addressed. In order to ensure that these issues are not forgotten, they should be explicitly documented in the API.</p>"},{"location":"template/0205/#guidance","title":"Guidance","text":"<p>If an API has usability concerns or violates API standards, and the present design should receive additional scrutiny before being carried through to the Beta version, there must be an internal comment linking to this document using its descriptive link (aip.dev/beta-blocker) to ensure that the design is corrected before the API is released to Beta.</p> <p>The comment must also indicate what kind of change should be made for Beta. For example:</p> <pre><code>message InputConfig {\n  // Parameters for input.\n  // (-- aip.dev/beta-blocker: Convert well-known parameters into explicit\n  //     fields before the Beta launch. --)\n  map&lt;string, string&gt; parameters = 1;\n}\n</code></pre> <p>If an exception to API standards does need to be carried through to Beta and GA, see AIP-200.</p>"},{"location":"template/0210/","title":"Unicode","text":"<p>APIs should be consistent on how they explain, limit, and bill for string values and their encodings. This ranges from little ambiguities (like fields \"limited to 1024 characters\") all the way to billing confusion (are names and values of properties in Datastore billed based on characters or bytes?).</p> <p>In general, if we talk about limits measured in bytes, we are discriminating against non-ASCII text since it takes up more space. On the other hand, if we talk about \"characters\", we are ambiguous about whether those are Unicode \"code points\", \"code units\" for a particular encoding (e.g. UTF-8 or UTF-16), \"graphemes\", or \"grapheme clusters\".</p>"},{"location":"template/0210/#unicode-primer","title":"Unicode primer","text":"<p>Character encoding tends to be an area we often gloss over, so a quick primer:</p> <ul> <li>Strings are just bytes that represent numbers according to some encoding   format.</li> <li>When we talk about characters, we sometimes mean Unicode code points,   which are numbers in the Unicode spec (up to 21 bits).</li> <li>Other times we might mean graphemes or grapheme clusters, which may   have multiple numeric representations and may be represented by more than one   code point. For example, <code>\u00e1</code> may be represented as a composition of   <code>U+0061 + U+0301</code> (the <code>a</code> + the accent combining mark) or as a single code   point, <code>U+00E1</code>.</li> <li>Protocol buffers uses UTF-8 (\"Unicode Transformation Format\") which is a   variable-length encoding scheme using up to 4 code units (8-bit bytes)   per code point.</li> </ul>"},{"location":"template/0210/#guidance","title":"Guidance","text":""},{"location":"template/0210/#character-definition","title":"Character definition","text":"<p>TL;DR: In our APIs, \"characters\" means \"Unicode code points\".</p> <p>In API documentation (e.g., API reference documents, blog posts, marketing documentation, billing explanations, etc), \"character\" must be defined as a Unicode code point.</p>"},{"location":"template/0210/#length-units","title":"Length units","text":"<p>TL;DR: Set size limits in \"characters\" (as defined above).</p> <p>All string field length limits defined in API comments must be measured and enforced in characters as defined above. This means that there is an underlying maximum limit of (<code>4 * characters</code>) bytes, though this limit will only be hit when using exclusively characters that consist of 4 UTF-8 code units (32 bits).</p> <p>If you use a database system (e.g. Spanner) which allows you to define a limit in characters, it is safe to assume that this byte-defined requirement is handled by the underlying storage system.</p>"},{"location":"template/0210/#billing-units","title":"Billing units","text":"<p>APIs may use either code points or bytes (using the UTF-8 encoding) as the unit for billing or quota measurement (e.g., Cloud Translation chooses to use characters). If an API does not define this, the assumption is that the unit of billing is characters (e.g., $0.01 per character, not $0.01 per byte).</p>"},{"location":"template/0210/#unique-identifiers","title":"Unique identifiers","text":"<p>TL;DR: Unique identifiers should limit to ASCII, generally only letters, numbers, hyphens, and underscores, and should not start with a number.</p> <p>Strings used as unique identifiers should limit inputs to ASCII characters, typically letters, numbers, hyphens, and underscores (<code>[a-zA-Z][a-zA-Z0-9_-]*</code>). This ensures that there are never accidental collisions due to normalization. If an API decides to allow all valid Unicode characters in unique identifiers, the API must reject any inputs that are not in Normalization Form C. Generally, unique identifiers should not start with a number as that prefix is reserved for Google-generated identifiers and gives us an easy way to check whether we generated a unique numeric ID for or whether the ID was chosen by a user.</p> <p>Unique identifiers should use a maximum length of 64 characters, though this limit may be expanded as necessary. 64 characters should be sufficient for most purposes as even UUIDs only require 36 characters.</p> <p>Note: See AIP-122 for recommendations about resource ID segments.</p>"},{"location":"template/0210/#normalization","title":"Normalization","text":"<p>TL;DR: Unicode values should be stored in Normalization Form C.</p> <p>Values should always be normalized into Normalization Form C. Unique identifiers must always be stored in Normalization Form C (see the next section).</p> <p>Imagine we're dealing with Spanish input \"estar\u00e9\" (the accented part will be bolded throughout). This text has what we might visualize as 6 \"characters\" (in this case, they are grapheme clusters). It has two possible Unicode representations:</p> <ul> <li>Using 6 code points: <code>U+0065</code> <code>U+0073</code> <code>U+0074</code> <code>U+0061</code> <code>U+0072</code> <code>U+00E9</code></li> <li>Using 7 code points: <code>U+0065</code> <code>U+0073</code> <code>U+0074</code> <code>U+0061</code> <code>U+0072</code> <code>U+0065</code> <code>U+0301</code></li> </ul> <p>Further, when encoding to UTF-8, these code points have two different serialized representations:</p> <ul> <li>Using 7 code-units (7 bytes): <code>0x65</code> <code>0x73</code> <code>0x74</code> <code>0x61</code> <code>0x72</code> <code>0xC3</code> <code>0xA9</code></li> <li>Using 8 code-units (8 bytes): <code>0x65</code> <code>0x73</code> <code>0x74</code> <code>0x61</code> <code>0x72</code> <code>0x65</code> <code>0xCC</code> <code>0x81</code></li> </ul> <p>To avoid this discrepancy in size (both code units and code points), use Normalization Form C which provides a canonical representation for strings.</p>"},{"location":"template/0210/#uniqueness","title":"Uniqueness","text":"<p>TL;DR: Unicode values must be normalized to Normalization Form C before checking uniqueness.</p> <p>For the purposes of unique identification (e.g., <code>name</code>, <code>id</code>, or <code>parent</code>), the value must be normalized into Normalization Form C (which happens to be the most compact). Otherwise we may have what is essentially \"the same string\" used to identify two entirely different resources.</p> <p>In our example above, there are two ways of representing what is essentially the same text. This raises the question about whether the two representations should be treated as equivalent or not. In other words, if someone were to use both of those byte sequences in a string field that acts as a unique identifier, would it violate a uniqueness constraint?</p> <p>The W3C recommends using Normalization Form C for all content moving across the internet. It is the most compact normalized form on Unicode text, and avoids most interoperability problems. If we were to treat two Unicode byte sequences as different when they have the same representation in NFC, we'd be required to reply to possible \"Get\" requests with content that is not in normalized form. Since that is definitely unacceptable, we must treat the two as identical by transforming any incoming string data into Normalized Form C or rejecting identifiers not in the normalized form.</p> <p>There is some debate about whether we should view strings as sequences of code points represented as bytes (leading to uniqueness determined based on the byte-representation of said string) or to interpret strings as a higher level abstraction having many different possible byte-representations. The stance taken here is that we already have a field type for handling that: <code>bytes</code>. Fields of type <code>string</code> already express an opinion of the validity of an input (it must be valid UTF-8). As a result, treating two inputs that have identical normalized forms as different due to their underlying byte representation seems to go against the original intent of the <code>string</code> type. This distinction typically doesn't matter for strings that are opaque to our services (e.g., <code>description</code> or <code>display_name</code>), however when we rely on strings to uniquely identify resources, we are forced to take a stance.</p> <p>Put differently, our goal is to allow someone with text in any encoding (ASCII, UTF-16, UTF-32, etc) to interact with our APIs without a lot of \"gotchas\".</p>"},{"location":"template/0210/#references","title":"References","text":"<ul> <li>Unicode normalization forms</li> <li>Datastore pricing \"name and value of each property\"   doesn't clarify this.</li> <li>Natural Language pricing   uses charges based on UTF-8 code points rather than code units.</li> <li>Text matching and normalization</li> </ul>"},{"location":"template/0211/","title":"Authorization checks","text":"<p>The majority of operations, whether reads or writes, require authorization: permission to do the thing the user is asking to do. Additionally, it is important to be careful how much information is provided to unauthorized users, since leaking information can be a security concern.</p>"},{"location":"template/0211/#guidance","title":"Guidance","text":"<p>Services must check authorization before validating any request, to ensure both a secure API surface and a consistent user experience. An operation may require multiple permissions or preconditions in order to grant authorization.</p> <p>If a request can not pass the authorization check for any reason, the service must error with <code>PERMISSION_DENIED</code>, and the corresponding error message should look like: \"Permission <code>{p}</code> denied on resource <code>{r}</code> (or it might not exist).\" This avoids leaking resource existence.</p> <p>If it is not possible to determine authorization for a resource because the resource does not exist, the service should check authorization to read children on the parent resource, and return <code>NOT_FOUND</code> if the authorization check passes.</p>"},{"location":"template/0211/#multiple-operations","title":"Multiple operations","text":"<p>A service could encounter a situation where it has two different operations with two different permissions, either of which would reveal the existence of a resource if called, but a user only has permission to call one of them.</p> <p>In this situation, the service should still only check for authorization applicable to the operation being called, and should not try to \"help out\" by checking for related authorization that would provide permission to reveal existence, because such algorithms are complicated to implement correctly and prone to accidental leaks.</p> <p>For example, posit a scenario where:</p> <ul> <li>A resource exists within a given collection that a user is unable to read.</li> <li>The user does have the ability to create other resources, and the   collection uses user-specified IDs (meaning that a failure because of a   duplicate ID would reveal existence).</li> </ul> <p>In this situation, the get or create methods should still only check their permissions when determining what error to return, and not one another's.</p>"},{"location":"template/0211/#rationale","title":"Rationale","text":"<p>RFC 7231 \u00a76.5.3 states that services are permitted to use <code>404 Not Found</code> in lieu of <code>403 Forbidden</code> in situations where the service does not want to divulge existence, whereas this AIP argues for the use of <code>PERMISSION_DENIED</code> (which corresponds to <code>403 Forbidden</code> in HTTP) instead. We take this position for the following reasons:</p> <ul> <li>The practice of \"getting <code>404 Not Found</code> until you have enough permission to   get <code>403 Forbidden</code>\" is counter-intuitive and increases the difficulty of   troubleshooting.</li> <li>A service could ameliorate this by sending information about missing     permissions while still using the <code>404 Not Found</code> status code, but this     constitutes a mixed message.</li> <li>While <code>403 Forbidden</code> is essentially always an error requiring manual action,   <code>404 Not Found</code> is often a valid response that the application can handle   (e.g. \"get or create\"); overloading it for permission errors deprives   applications of this benefit.</li> <li>RFC 7231 \u00a76.5.4 states that <code>404 Not Found</code> results are cacheable, but   permission errors are not generally cacheable. Sending explicit cache   controls on a conditional basis could ameliorate this, but would defeat the   purpose.</li> <li>The guidance here is more consistent with most other real-world authorization   systems.</li> </ul>"},{"location":"template/0211/#changelog","title":"Changelog","text":"<ul> <li>2021-05-11: Added a more detailed \"Rationale\" section.</li> </ul>"},{"location":"template/0213/","title":"Common components","text":"<p>As specified in AIP-215, APIs must be self-contained except for the use of \"common component\" packages which are intended for use by multiple APIs.</p> <p>There are two kinds of common component packages:</p> <ul> <li>Organization-specific common components, covering organization-specific   concepts such as a \"viewport\" in Maps.</li> <li>Global common components which are generic (i.e. not domain-specific),   such as \"timestamp\" or \"postal address\".</li> </ul> <p>Where it is safe to share a single representation across multiple APIs, common components can make it easier for clients to interact with those APIs. Concept-specific client code can be written once, and messages can be used from the response of one API in the request of another without clunky copying, for example.</p> <p>This benefit comes with significant restrictions and limitations, however, and should not be attempted lightly.</p> <p>Note that even if the domain of a component is common, the requirements of a component may be organization-specific. For example, some organizations may have particular requirements of how financial values are represented, leading to multiple finance-oriented organization-specific common components - because any global common component would either not meet the organization-specific requirements, or be too complex for general use.</p>"},{"location":"template/0213/#guidance","title":"Guidance","text":"<ul> <li>Organization-wide common component packages must end with <code>.type</code>, e.g.   <code>google.geo.type</code> or <code>google.shopping.type</code>.</li> <li>Organizations must consult the API design team before creating a new   organization-wide common component package.</li> <li>Organization-wide common component packages must be published in the   <code>googleapis</code> repository.</li> <li>Organizations creating and publishing a new organization-wide common component   package must update this AIP to include it in the   list below.</li> <li>Organizations must not define generic components in organization-specific   common component packages, instead preferring global common components.</li> <li>Common components must not be \"moved\" (that is, deleted from one common   component package and added to a different one) from an organization-specific   common component package to a global common component package or vice versa.</li> <li>A common component may be copied from an organization-specific common     component package to a global common component package (without deleting the     original component) if it is found to be more widely-applicable than     originally expected.</li> <li>Fields should not be added to existing messages.</li> <li>Values should not be added to existing enums.</li> <li>Fields must not be removed from existing messages.</li> <li>Values must not be removed from existing enums.</li> <li>While documentation may be clarified, it should not change the   meanings of existing values, including the validity of any given message   or set of messages.</li> <li>New proto messages and enums may be added to common component packages.</li> <li>API teams  should allow sufficient time for propagation to clients     before using the new messages and enums in their APIs. Fields may take some     time for any changes to propagate through publication to client libraries     and other surfaces.</li> <li>API teams should consult widely within their organization, and ideally     with the API design team, before adding a new message or enum, due to the     limitations listed above.</li> </ul>"},{"location":"template/0213/#existing-global-common-components","title":"Existing global common components","text":"<p>The global common components, which public-facing protos for an API may safely import, are as follows:</p> <ul> <li><code>google.api.*</code> (but not subpackages of <code>google.api</code>)</li> <li><code>google.longrunning.Operation</code></li> <li><code>google.protobuf.*</code></li> <li><code>google.rpc.*</code></li> <li><code>google.type.*</code></li> </ul> <p>Note that some common components may have internal-only fields. APIs should generally only rely on fields which have been released into open source.</p> <p>Google APIs may also import <code>google.iam.v1.*</code>, which provides the IAM messages used throughout Google.</p> <p>Note: Many APIs also import components from other packages for internal-only use (e.g. to apply visibility labels or provide instructions to internal infrastructure). This is acceptable provided that the public components do not contain such references.</p>"},{"location":"template/0213/#protobuf-types","title":"Protobuf types","text":"<p>The <code>google.protobuf</code> package is somewhat special in that it is shipped with protocol buffers itself, rather than with API tooling. (For most API designers, this should be an implementation detail).</p> <p>This package includes a small library of types useful for representing common programming language constructs:</p> <ul> <li><code>google.protobuf.Duration</code>: Durations, with nanosecond-level   precision. The protobuf runtime provides helper functions to convert to and   from language-native duration objects where applicable (such as Python's   <code>timedelta</code>).</li> <li><code>google.protobuf.Struct</code>: JSON-like structures (a dictionary of   primitives, lists, and other dictionaries). The protobuf runtime provides   helper functions in most languages to convert struct objects to and from   JSON.</li> <li><code>google.protobuf.Timestamp</code>: Timestamps, with nanosecond-level   precision. The protobuf runtime provides helper functions in most languages   to convert to and from language-native timestamp objects (such as Python's   <code>datetime</code>).</li> </ul>"},{"location":"template/0213/#api-types","title":"API Types","text":"<p>The <code>google.type</code> package provides a \"standard library\" of types useful for representing common concepts in APIs. While types are added from time to time and the definitive list is always the code, several types deserve note:</p> <ul> <li><code>google.type.Color</code>: RGB or RGBA colors.</li> <li><code>google.type.Date</code>: Calendar dates, with no time or time zone   component.</li> <li><code>google.type.DayOfWeek</code>: The day of the week, with no other   date, time, or time zone component.</li> <li><code>google.type.LatLng</code>: Geographic coordinates.</li> <li><code>google.type.Money</code>: Currency.</li> <li><code>google.type.PostalAddress</code>: Postal addresses in most   countries.</li> <li><code>google.type.TimeOfDay</code>: Wall-clock time, with no date or time   zone component.</li> </ul>"},{"location":"template/0213/#adding-to-common-protos","title":"Adding to common protos","text":"<p>Occasionally, it may be useful to add protos to these packages or to add to the list of commonly-available protos. In order to do this, open an issue on the AIP repository in GitHub, noting the guidelines above.</p>"},{"location":"template/0213/#existing-organization-specific-common-component-packages","title":"Existing organization-specific common component packages","text":"<p>The following organization-specific common component packages exist and conform with the above guidance:</p> <ul> <li><code>google.apps.script.type</code>   Common component package for Google Apps Script.</li> <li><code>google.geo.type</code>   Common component package for Google Maps and the Geo organization.</li> <li><code>google.actions.type</code>   Common component package for Actions on Google APIs.</li> </ul>"},{"location":"template/0213/#non-conformant-common-component-packages","title":"Non-conformant common component packages","text":"<p>The following common component packages exist, but do not conform with the above guidance, and do not form a precedent for further such packages.</p> <ul> <li><code>google.cloud.common</code>:   This does not conform to the requirement for the package name to end in <code>.type</code>. (This would otherwise   be acceptable, and this package should be considered as the Cloud common component package.)</li> <li><code>google.logging.type</code>:   This appears to be API-specific, although it's used from multiple APIs; some aspects should probably   be global or in a Cloud common component package.</li> <li><code>google.cloud.workflows.type</code>:   API-specific types.</li> <li><code>google.cloud.oslogin.common</code>:   API-specific types, and a non-conformant name.</li> <li><code>google.identity.accesscontextmanager.type</code>:   API-specific types.</li> <li><code>google.networking.trafficdirector.type</code>:   API-specific types.</li> </ul>"},{"location":"template/0213/#rationale","title":"Rationale","text":"<p>Common components are effectively unversioned: APIs evolve independently of each other, both in terms of definition and implementation. A change such as adding a field is backward-compatible and predictable in specific APIs, and the API team can ensure that the server implementation is available before the API definition is published. By contrast, a change in a common component would effectively be universally available even if most API implementations did not take it into account.</p> <p>Adding a new message or enum is backward-compatible, as it does not affect existing APIs that may import other messages or enums from the same common component package.</p> <p>Consultation with the API design team is required for global common components and suggested for organization-specific common components as the border between \"generic\" and \"organization-specific\" is a gray area; some generic concepts have organization-specific use cases which surface through the components.</p>"},{"location":"template/0213/#changelog","title":"Changelog","text":"<ul> <li>2023-06-27: Restructured AIPs 215 and 213 for clarity, and introduced the   concept of organization-wide common protos more formally.</li> <li>2018-08-17: Initial AIP written.</li> </ul>"},{"location":"template/0214/","title":"Resource expiration","text":"<p>Customers often want to provide the time that a given resource or resource attribute is no longer useful or valid (e.g. a rotating security key). Currently we recommend that customers do this by specifying an exact \"expiration time\" into a <code>google.protobuf.Timestamp expire_time</code> field; however, this adds additional strain on the user when they want to specify a relative time offset until expiration rather than a specific time until expiration.</p> <p>Furthermore, the world understands the concept of a \"time-to-live\", often abbreviated to TTL, but the typical format of this field (an integer, measured in seconds) results in a sub-par experience when using an auto-generated client library.</p>"},{"location":"template/0214/#guidance","title":"Guidance","text":"<ol> <li>APIs wishing to convey an expiration must rely on a     <code>google.protobuf.Timestamp</code> field called <code>expire_time</code>.</li> <li>APIs wishing to allow a relative expiration time must define a <code>oneof</code>     called <code>expiration</code> (or <code>{something}_expiration</code>) containing both the     <code>expire_time</code> field and a separate <code>google.protobuf.Duration</code>     field called <code>ttl</code>, the latter marked as input only.</li> <li>APIs must always return the expiration time in the <code>expire_time</code> field     and leave the <code>ttl</code> field blank when retrieving the resource.</li> <li>APIs that rely on the specific semantics of a \"time to live\" (e.g., DNS     which must represent the TTL as an integer) may use an <code>int64 ttl</code>     field (and should provide an aip.dev/not-precedent comment     in this case).</li> </ol>"},{"location":"template/0214/#example","title":"Example","text":"<pre><code>message ExpiringResource {\n  // google.api.resource and other annotations and fields\n\n  oneof expiration {\n    // Timestamp in UTC of when this resource is considered expired.\n    // This is *always* provided on output, regardless of what was sent\n    // on input.\n    google.protobuf.Timestamp expire_time = 2;\n\n    // Input only. The TTL for this resource.\n    google.protobuf.Duration ttl = 3 [(google.api.field_behavior) = INPUT_ONLY];\n  }\n}\n</code></pre>"},{"location":"template/0214/#rationale","title":"Rationale","text":""},{"location":"template/0214/#alternatives-considered","title":"Alternatives considered","text":""},{"location":"template/0214/#a-new-standard-field-called-ttl","title":"A new standard field called <code>ttl</code>","text":"<p>We considered allowing a standard field called <code>ttl</code> as an alternative way of defining the expiration, however doing so would require that API services continually update the field, like a clock counting down. This could potentially cause problems with the read-modify-write lifecycle where a resource is being processed for some time, and effectively has its life extended as a result of that processing time.</p>"},{"location":"template/0214/#always-use-expire_time","title":"Always use <code>expire_time</code>","text":"<p>This is the current state of the world with a few exceptions. In this scenario, we could potentially push the computation of <code>now + ttl = expire_time</code> into client libraries; however, this leads to a somewhat frustrating experience in the command-line and using REST/JSON. Leaving things as they are is typically the default, but it seems many customers want the ability to define relative expiration times as it is quite a bit easier and removes questions of time zones, stale clocks, and other silly mistakes.</p>"},{"location":"template/0215/","title":"API-specific protos","text":"<p>APIs are mostly defined in terms of protos which are API-specific, with occasional dependencies on common components. Keeping APIs isolated from each other avoids versioning problems and client library packaging problems.</p>"},{"location":"template/0215/#guidance","title":"Guidance","text":"<ul> <li>All protos specific to an API must be within a package with a major version   (e.g., <code>google.library.v1</code>).</li> <li>References to resources in other APIs must be expressed in terms of   resource names (AIP-122), rather than using the resource messages.</li> <li>When two versions of an API use effectively the same (API-specific) proto   that proto must be duplicated in each version. (In other words, APIs   must not create their own \"API-specific common component\" packages.)</li> <li>Organization-specific common components may be placed in a common package,   as described in AIP-213, but must not be used by any API outside   that organization.</li> <li>Global common components (also described in AIP-213) may be freely used by any API.</li> </ul>"},{"location":"template/0215/#rationale","title":"Rationale","text":"<p>When one API depends on protos defined by another API, this introduces uncertainty in terms of customer-expected behavior and client library dependency management. Suppose <code>google.cloud.library.v1</code> depends on the protos (rather than abstract resources) in <code>google.cloud.movies.v2</code>. Any change to <code>google.cloud.movies.v2</code> can cause problems.</p> <p>For example:</p> <ul> <li>If a field is added to a message in <code>google.cloud.movies.v2</code>, should customers using   <code>google.cloud.library.v1</code> expect to see it? If so, how soon after the field has   been added? What about other API changes?</li> <li>If the whole major version <code>google.cloud.movies.v2</code> is deprecated   (typically after v3 has been released), does that mean <code>google.cloud.library.v1</code> has   to change to use <code>google.cloud.movies.v3</code>, and if so, does that require a new major version   for the library API as well?</li> <li>How should client library versioning reflect changes to dependent APIs?</li> </ul> <p>Keeping APIs isolated from each other, with a limited set of common components which are maintained in a highly disciplined way, reduces a lot of the issues with dependencies.</p> <p>API-specific common components shared across versions add complexity for client library generation and packaging, and are inflexible in terms of versioning. When protos are duplicated because they start off the same in multiple versions, they can still diverge over time as they are isolated from each other.</p>"},{"location":"template/0215/#changelog","title":"Changelog","text":"<ul> <li>2023-06-27: Restructured AIPs 215 and 213 for clarity.</li> <li>2023-05-11: Changed \"PA\" to \"organization\".</li> <li>2018-10-01: Initial AIP written.</li> </ul>"},{"location":"template/0216/","title":"States","text":"<p>Many API resources carry a concept of \"state\": ordinarily, the resource's place in its life cycle. For example, a virtual machine may be being provisioned, available for use, being spun down, or potentially be in one of several other situations. A job or query may be preparing to run, be actively running, have completed, and so on.</p>"},{"location":"template/0216/#guidance","title":"Guidance","text":"<p>Resources needing to communicate their state should use an enum, which should be called <code>State</code> (or, if more specificity is required, end in the word <code>State</code>). This enum should be nested within the message it describes when only used as a field within that message.</p> <p>Important: We use the term <code>State</code>, and not <code>Status</code> (which is reserved for the HTTP and gRPC statuses).</p>"},{"location":"template/0216/#enum-values","title":"Enum values","text":"<p>Ideally, Google APIs use the same terminology throughout when expressing the same semantic concepts. There are usually many words available to express a given state, but our customers often use multiple APIs together, and it is easier for them when our terms are consistent.</p> <p>At a high level:</p> <ul> <li>Resources that are available for use are <code>ACTIVE</code> (preferred over terms such   as \"ready\" or \"available\").</li> <li>Resources that have completed a (usually terminal) requested action use past   participles (usually ending in <code>-ED</code>), such as <code>SUCCEEDED</code> (not   \"successful\"), <code>FAILED</code> (not \"failure\"), <code>DELETED</code>, <code>SUSPENDED</code>, and so on.</li> <li>Resources that are currently undergoing a state change use present   participles (usually ending in <code>-ING</code>), such as <code>RUNNING</code>, <code>CREATING</code>,   <code>DELETING</code>, and so on. In this case, it is expected that the state is   temporary and will resolve to another state on its own, with no further user   action.</li> </ul> <p>Note: Remember to only add states that are useful to customers. Exposing a large number of states simply because they exist in your internal system is unnecessary and adds confusion for customers. Each state must come with a use case for why it is necessary.</p>"},{"location":"template/0216/#output-only","title":"Output only","text":"<p>The field referencing the <code>State</code> enum in a resource should behave and be documented as \"Output only\", in accordance with AIP-203.</p> <p>APIs should not allow a <code>State</code> enum to be directly updated through an \"update\" method (or directly set through the \"create\" method), and should instead use custom state transition methods.</p> <p>This is because update methods are generally not expected to have side effects, and also because updating state directly implies that it is possible to set the state to any available value, whereas states generally reflect a resource's progression through a lifecycle.</p>"},{"location":"template/0216/#state-transition-methods","title":"State transition methods","text":"<p>State transition methods are a special type of custom method that are responsible for transitioning a state field from one enum value to another. As part of the transition, other fields may also change, e.g. an <code>update_time</code> field. The method definition should look like the following:</p> <pre><code>// Publishes a book.\n// The `state` of the book after publishing is `PUBLISHED`.\n// `PublishBook` can be called on Books in the state `DRAFT`; Books in a\n// different state (including `PUBLISHED`) returns an error.\nrpc PublishBook(PublishBookRequest) returns (Book) {\n  option (google.api.http) = {\n    post: \"/v1/{name=publishers/*/books/*}:publish\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The name of the method should be a verb followed by the singular form of   the resource's message name.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message should be the resource itself.</li> <li>If the RPC is long-running, the response message should be a     <code>google.longrunning.Operation</code> which resolves to the resource itself.</li> <li>The HTTP verb must be <code>POST</code>.</li> <li>The HTTP URI must use a <code>:</code> character followed by the custom verb   (<code>:publish</code> in the above example), and the verb in the URI must match the   verb in the name of the RPC.</li> <li>If word separation is required, <code>camelCase</code> must be used.</li> <li>The <code>body</code> clause in the <code>google.api.http</code> annotation must be <code>\"*\"</code>.</li> <li>The request message field receiving the resource name should map to the   URI path.</li> <li>This field should be called <code>name</code>.</li> <li>The <code>name</code> field should be the only variable in the URI path. All     remaining parameters should map to URI query parameters.</li> <li>If the state transition is not allowed, the service must error with   <code>FAILED_PRECONDITION</code> (HTTP 400).</li> </ul> <p>The request message should look like this:</p> <pre><code>message PublishBookRequest {\n  // The name of the book to publish.\n  // Format: publishers/{publisher}/books/{book}\n  string name = 1 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n</code></pre> <ul> <li>A resource name field must be included. It should be called <code>name</code>.</li> <li>The comment for the field should document the resource pattern.</li> <li>Other fields may be included.</li> </ul>"},{"location":"template/0216/#additional-guidance","title":"Additional Guidance","text":""},{"location":"template/0216/#default-value","title":"Default value","text":"<p>The zero value of each state enum should adhere to the following convention:</p> <pre><code>enum State {\n  // The default value. This value is used if the state is omitted.\n  STATE_UNSPECIFIED = 0;\n\n  // Other values...\n}\n</code></pre> <p>Resources should not provide an unspecified state to users, and this value should not actually be used.</p>"},{"location":"template/0216/#value-uniqueness","title":"Value uniqueness","text":"<p>Multiple top-level enums within the same package must not share the same values. This is because the C++ protoc code generator flattens top-level enum values into a single namespace.</p> <p>State enums should live inside the resource definition.</p>"},{"location":"template/0216/#prefixes","title":"Prefixes","text":"<p>Using a <code>STATE_</code> prefix on every enum value is unnecessary. State enum values should not be prefixed with the enum name, except for the default value <code>STATE_UNSPECIFIED</code>.</p>"},{"location":"template/0216/#breaking-changes","title":"Breaking changes","text":"<p>TL;DR: Clearly communicate to users that state enums may receive new values in the future, and be conscientious about adding states to an existing enum.</p> <p>Even though adding states to an existing states enum can break existing user code, adding states is not considered a breaking change. Consider a state with only two values: <code>ACTIVE</code> and <code>DELETED</code>. A user may add code that checks <code>if state == ACTIVE</code>, and in the else cases simply assumes the resource is deleted. If the API later adds a new state for another purpose, that code will break.</p> <p>We ultimately can not control this behavior, but API documentation should actively encourage users to code against state enums with the expectation that they may receive new values in the future.</p> <p>APIs may add new states to an existing State enum when appropriate, and adding a new state is not considered a breaking change.</p>"},{"location":"template/0216/#when-to-avoid-states","title":"When to avoid states","text":"<p>Sometimes, a <code>State</code> enum may not be what is best for your API, particularly in situations where a state has a very small number of potential values, or when states are not mutually exclusive.</p> <p>Consider the example of a state with only <code>ACTIVE</code> and <code>DELETED</code>, as discussed above. In this situation, the API may be better off exposing a <code>google.protobuf.Timestamp delete_time</code>, and instructing users to rely on whether it is set to determine deletion.</p>"},{"location":"template/0216/#common-states","title":"Common states","text":"<p>The following is a list of states in common use. APIs should consider prior art when determining state names, and should value local consistency above global consistency in the case of conflicting precedent.</p>"},{"location":"template/0216/#resting-states","title":"Resting states","text":"<p>\"Resting states\" are lifecycle states that, absent user action, are expected to remain indefinitely. However, the user can initiate an action to move a resource in a resting state into certain other states (resting or active).</p> <ul> <li><code>ACCEPTED</code></li> <li><code>ACTIVE</code></li> <li><code>CANCELLED</code></li> <li><code>DELETED</code></li> <li><code>FAILED</code></li> <li><code>SUCCEEDED</code></li> <li><code>SUSPENDED</code></li> <li><code>VERIFIED</code></li> </ul>"},{"location":"template/0216/#active-states","title":"Active states","text":"<p>\"Active states\" are lifecycle states that typically resolve on their own into a single expected resting state.</p> <p>Note: Remember only to expose states that are useful to customers. Active states are valuable only if the resource will be in that state for a sufficient period of time. If state changes are immediate, active states are not necessary.</p> <ul> <li><code>CREATING</code> (usually becomes <code>ACTIVE</code>)</li> <li><code>DELETING</code> (usually becomes <code>DELETED</code>)</li> <li><code>PENDING</code> (usually becomes <code>RUNNING</code>)</li> <li><code>REPAIRING</code> (usually becomes <code>ACTIVE</code>)</li> <li><code>RUNNING</code> (usually becomes <code>SUCCEEDED</code>)</li> <li><code>SUSPENDING</code> (usually becomes <code>SUSPENDED</code>)</li> </ul>"},{"location":"template/0216/#further-reading","title":"Further reading","text":"<ul> <li>For information on enums generally, see AIP-126.</li> </ul>"},{"location":"template/0216/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-10-20: Added guidance on prefixing enum values with enum name.</li> <li>2020-09-02: Clarified that states are not directly set on create either.</li> <li>2019-12-05: Changed guidance on state transition methods, downgrading   must to should on the response type.</li> <li>2019-08-16: Added guidance for state transition methods.</li> <li>2019-07-18: Added explicit guidance on the unspecified value.</li> </ul>"},{"location":"template/0217/","title":"Unreachable resources","text":"<p>Occasionally, a user may ask for a list of resources, and some set of resources in the list are temporarily unavailable. The most typical use case is while supporting Reading Across Collections. For example, a user may ask to list resources across multiple parent locations, but one of those locations is temporarily unreachable. In this situation, it is still desirable to provide the user with all the available resources, while indicating that something is missing.</p>"},{"location":"template/0217/#guidance","title":"Guidance","text":"<p>If a method to retrieve data is capable of partially failing due to one or more resources being temporarily unreachable, the response message must include a field to indicate this:</p> <pre><code>message ListBooksResponse {\n  // The books matching the request.\n  repeated Book books = 1;\n\n  // The next page token, if there are more books matching the\n  // request.\n  string next_page_token = 2;\n\n  // Unreachable resources.\n  repeated string unreachable = 3 [\n    (google.api.field_behavior) = UNORDERED_LIST\n  ];\n}\n</code></pre> <ul> <li>The field must be a repeated string, and should be named   <code>unreachable</code>.</li> <li>The field must contain the resource names of the resources that are   unreachable or those that impede reaching the requested collection, such as   the parent resource of the collection that could not be reached.</li> <li>For example, if an entire location is unreachable, preventing access to the     localized collection of resources requested, the location resource is     included.</li> <li>The field must contain service-relative resource names, and must not   contain full resource names, resource URIs, or simple resource IDs. See   AIP-122 for definitions.</li> <li>For example, if a <code>Book</code> resource is unreachable, the service-relative     resource name <code>\"shelves/scifi1/books/starwars4\"</code> is included in     <code>unreachable</code>, as opposed to the full resource name     <code>\"//library.googleapis.com/shelves/scifi1/books/starwars4\"</code>, the     parent-relative resource <code>\"books/starwars4\"</code>, the resource ID     <code>\"starwars4\"</code>, or the resource URI.</li> <li>The response must not provide any other information about the issue(s)   that made the listed resources unreachable.</li> <li>For example, the response cannot contain an extra field with error reasons     for each <code>unreachable</code> entry.</li> <li>The service must provide a way for the user to make a more specific   request and receive an error with additional information e.g. via a Standard   Get or a Standard List targeted at the unreachable collection parent.</li> <li>The service must also allow the user to repeat the original call with     more restrictive parameters.</li> <li>The resource names that appear in <code>unreachable</code> may be heterogeneous.</li> <li>The <code>unreachable</code> field definition should document what potential     resources could be provided in this field, and note that it might expand     later.</li> <li>For example, if both an entire location and a specific resource in a     different location are unreachable, the unreachable location's name      e.g. <code>\"projects/example123/locations/us-east1\"</code> and the unreachable     resource's name e.g.     <code>\"projects/example123/locations/europe-west2/instances/example456\"</code> will     both appear in <code>unreachable</code>.</li> <li>The <code>unreachable</code> field must not have semantically meaningful ordering or   structure within the list. Put differently, <code>unreachable</code> must be an   unordered list.</li> <li>As such, the <code>unreachable</code> field must be annotated with <code>UNORDERED_LIST</code>     field behavior (see AIP-203).</li> </ul> <p>Important: If a single unreachable location or resource prevents returning any data by definition (for example, a list request for a single publisher where that publisher is unreachable), the service must fail the entire request with an error.</p>"},{"location":"template/0217/#pagination","title":"Pagination","text":"<p>While preparing a page of results to fulfill a page fetch RPC e.g. an [AIP-132][aip-132] Standard List call, if the service encounters any unreachable resources or collections they must do the following:</p> <ul> <li>Include the resource name for the unreachable resource in the <code>unreachable</code>   response field.</li> <li>The resource name must be the most appropriately scoped for the     unreachable resource or collection.<ul> <li>For example, if a specific zone within a region is unreachable, the   unreachable resource name would be a zonal Location e.g.   <code>projects/example/locations/us-west1-a</code>, but if an entire region is   unreachable, the resource name would be a regional Location e.g.   <code>projects/example/locations/us-west1</code>.</li> </ul> </li> <li>The resource name must be included, regardless of restrictive paging     parameters e.g. <code>order_by</code>, when it is identified as unreachable.</li> <li>Populate results that were previously considered unreachable on a following   page if their availability is restored and the paging parameters allow for   their inclusion.</li> <li>Determining inclusion eligibility based on paging parameters also includes     any documented default ordering behavior in the absence of user-specified     ordering in the request.</li> <li>For example, if region <code>projects/example/locations/us-west1</code> was unavailable     in the first page of an ordered paging call, and including its resources     would violate the ordering, those out-of-order resources are not included in     the following page.</li> <li>Similarly, if the same exact request is made, and resources previously     considered unreachable are available again, they must be populated,     within the constraints of the paging parameters.</li> <li>Limit the number of unreachable resource names returned in a given response   if, even after up-scoping the unreachable resource name, the number of   unreachable resource names exceeds a documented maximum.</li> <li>This maximum must be documented in the <code>unreachable</code> field comments     directly.</li> <li>This is independent of the <code>page_size</code> set by the caller.</li> </ul>"},{"location":"template/0217/#retaining-previous-behavior","title":"Retaining previous behavior","text":"<p>Services may continue with previously implemented <code>unreachable</code> pagination behavior where changing it would induce an incompatible change as per AIP-180, but must document said behavior on the <code>unreachable</code> field(s) directly.</p>"},{"location":"template/0217/#adopting-partial-success","title":"Adopting partial success","text":"<p>In order for an existing API that has a default behavior differing from the aforementioned guidance i.e. the API call returns an error status instead of a partial result, to adopt the <code>unreachable</code> pattern the API must do the following:</p> <ul> <li>The default behavior must be retained to avoid incompatible behavioral   changes</li> <li>For example, if the default behavior is to return an error if any location     is unreachable, that default behavior must be retained.</li> <li>The request message must have a <code>bool return_partial_success</code> field</li> <li>The response message must have the standard   <code>repeated string unreachable</code> field</li> <li>The two aforementioned fields must be added simultaneously</li> </ul> <p>When the <code>bool return_partial_success</code> field is set to <code>true</code> in a request, the API must behave as described in the aforementioned guidance with regards to populating the <code>repeated string unreachable</code> response field.</p> <pre><code>message ListBooksRequest {\n  // Standard List request fields...\n\n  // Setting this field to `true` will opt the request into returning the\n  // resources that are reachable, and into including the names of those that\n  // were unreachable in the [ListBooksResponse.unreachable] field. This can\n  // only be `true` when reading across collections e.g. when `parent` is set to\n  //  `\"projects/example/locations/-\"`.\n  bool return_partial_success = 4;\n}\n\nmessage ListBooksResponse {\n  // Standard List Response fields...\n\n  // Unreachable resources. Populated when the request opts into\n  // `return_partial_success` and reading across collections e.g. when\n  // attempting to list all resources across all supported locations.\n  repeated string unreachable = 3 [\n    (google.api.field_behavior) = UNORDERED_LIST\n  ];\n}\n</code></pre>"},{"location":"template/0217/#partial-success-granularity","title":"Partial success granularity","text":"<p>If the <code>bool return_partial_success</code> field is set to <code>true</code> in a request that is scoped beyond the supported granualirty of the API's ability to reasonably report unreachable resources, the API should return an <code>INVALID_ARGUMENT</code> error with details explaining the issue. For example, if the API only supports <code>return_partial_success</code> when [Reading Across Collections][aip159], it returns an <code>INVALID_ARGUMENT</code> error when given a request scoped to a specific parent resource collection. The supported granularity must be documented on the <code>return_partial_success</code> field.</p>"},{"location":"template/0217/#rationale","title":"Rationale","text":""},{"location":"template/0217/#using-service-relative-resource-names","title":"Using service-relative resource names","text":"<p>In general, relative resource names, as defined in AIP-122, are the best practice for referring to resources by name within a service and in other services when that other service is obvious. The full resource name format is strictly less consumable (e.g., requires extra parsing client side), and over-specified for the uses of <code>unreachable</code>. Resource URIs are not transport agnostic, as they are unusable in standard methods for gRPC users, and simple resource IDs do not provide enough information about exactly which resource was unreachable in a heterogenous list of resources.</p>"},{"location":"template/0217/#minimizing-extra-error-details-in-response","title":"Minimizing extra error details in response","text":"<p>The context in which an unreachable resource is discovered may be sensitive and the state of the system fluid between calls. As such, it is preferred to defer to the service by making a more specific RPC to get more details about a specific resource or parent. This allows the parent to handle all necessary RPC checks and system state resolution on at time of request, rather than by shoehorning potentially privileged or stale information into the broader list call it was unreachable for.</p>"},{"location":"template/0217/#unordered-unreachable-contents","title":"Unordered <code>unreachable</code> contents","text":"<p>It is important for broad API consistency that the contents of <code>unreachable</code> not have a specific or order semantic structure. If each API baked a specific ordering into a standard field, no single implementation, client or server side, would be correct.</p>"},{"location":"template/0217/#per-page-unreachable-resources","title":"Per page <code>unreachable</code> resources","text":"<p>Populating <code>unreachable</code> resources on a per page basis allows end users to identify immediately when a page is incomplete, rather than after paging through all results. Paging to completion is not guaranteed, so it is important to communicate as soon as possible when there are unreachable resource missing from a given page. Furthermore, it allows users to identify when there is a potential issue that they need to account for in subsequent calls. Finally, retaining unreachable resources until the end of paging results requires services to retain the state for what should be indepedent and fully isolated API calls.</p>"},{"location":"template/0217/#using-request-field-to-opt-in","title":"Using request field to opt-in","text":"<p>Introducing a new request field as means of opting into the partial success behavior is the best way to communicate user intent while keeping the  default behavior backwards compatible. The alternative, changing the default behavior with the introduction of the <code>unreachable</code> response field, presents a backwards incompatible change. Users that previously expected failure when any resource was unreachable, assume the successful response means all resources are accounted for in the response.</p>"},{"location":"template/0217/#introducing-fields-simultaneously","title":"Introducing fields simultaneously","text":"<p>Introducing the request and response fields simultaneously is to prevent an invalid intermediate state that is presented by only adding one or the other. If only <code>unreachable</code> is added, then it could be assumed that it being empty means all resources were returned when that may not be true. If only <code>return_partial_success</code> is added, then the user wouldn't have a means of knowing which resources were unreachable.</p>"},{"location":"template/0217/#partial-success-granularity-limitations","title":"Partial success granularity limitations","text":"<p>At a certain level of request scope granularity, an API is simply unable to enumerate the resources that are unreachable. For example, global-only APIs may be unable to provide granularity at a localized collection level. In such a case, preemptively returning an error when <code>return_partial_success=true</code> protects the user from the risks of the alternative - expecting unreachable resources if there was an issue, but not getting any, thus falsely assuming everything was retrieved. This aligns with guidance herein that suggests failing requests that cannot be fulfilled preemptively.</p>"},{"location":"template/0217/#history","title":"History","text":""},{"location":"template/0217/#pagination-guidance","title":"Pagination guidance","text":"<p>The original guidance for how to populate the <code>unreachable</code> field revolved around consuming the contents as if they were the paged results. This meant that paged resources and unreachable resources couldn't be returned in the same response i.e. page, and users needed to completely page through all results in order to see if any were unreachable. See the Rationale section for the reasoning around the changes.</p>"},{"location":"template/0217/#further-reading","title":"Further reading","text":"<ul> <li>For listing across collections, see AIP-159.</li> </ul>"},{"location":"template/0217/#changelog","title":"Changelog","text":"<ul> <li>2024-07-29: Reformat guidance, add explicit resource name format</li> <li>2024-07-26: Change pagination guidance.   requirement.</li> <li>2024-07-19: Add guidance for brownfield adoption of partial success.</li> </ul>"},{"location":"template/0231/","title":"Batch methods: Get","text":"<p>Some APIs need to allow users to get a specific set of resources at a consistent time point (e.g. using a read transaction). A batch get method provides this functionality.</p>"},{"location":"template/0231/#guidance","title":"Guidance","text":"<p>APIs may support Batch Get using the following pattern:</p> <pre><code>rpc BatchGetBooks(BatchGetBooksRequest) returns (BatchGetBooksResponse) {\n  option (google.api.http) = {\n    get: \"/v1/{parent=publishers/*}/books:batchGet\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with <code>BatchGet</code>. The remainder of the RPC name   should be the plural form of the resource being retrieved.</li> <li>The request and response messages must match the RPC name, with   <code>Request</code> and <code>Response</code> suffixes.</li> <li>The HTTP verb must be <code>GET</code>.</li> <li>The HTTP URI must end with <code>:batchGet</code>.</li> <li>The URI path should represent the collection for the resource, matching   the collection used for simple CRUD operations. If the operation spans   parents, a dash (<code>-</code>) may be accepted as a wildcard.</li> <li>There must not be a body key in the <code>google.api.http</code> annotation.</li> <li>The operation must be atomic: it must fail for all resources or   succeed for all resources (no partial success). For situations requiring   partial failures, <code>List</code> (AIP-132) methods should be used.</li> <li>If the operation covers multiple locations and at least one location is     down, the operation must fail.</li> </ul>"},{"location":"template/0231/#request-message","title":"Request message","text":"<p>The request for a batch get method should be specified with the following pattern:</p> <pre><code>message BatchGetBooksRequest {\n  // The parent resource shared by all books being retrieved.\n  // Format: publishers/{publisher}\n  // If this is set, the parent of all of the books specified in `names`\n  // must match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The names of the books to retrieve.\n  // A maximum of 1000 books can be retrieved in a batch.\n  // Format: publishers/{publisher}/books/{book}\n  repeated string names = 2 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included, unless the resource being retrieved   is a top-level resource, to facilitate inclusion in the URI as   well to permit a single permissions check. If a caller sets this field, and   the parent collection in the name of any resource being retrieved does not   match, the request must fail.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   resource names specifying the resources to retrieve. The field should be   named <code>names</code>.</li> <li>If no resource names are provided, the API should error with     <code>INVALID_ARGUMENT</code>.</li> <li>The field should be required.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>Other fields besides <code>name</code> may be \"hoisted\" from the standard Get   request. There is no way to allow for these fields to   accept different values for different resources; if this is needed, use the   alternative request message form.</li> <li>Batch get should not support pagination because transactionality across   API calls would be extremely difficult to implement or enforce, and the   request defines the exact scope of the response anyway.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>names</code> field should document the maximum number of   requests allowed.</li> </ul>"},{"location":"template/0231/#response-message","title":"Response message","text":"<p>The response for a batch get method should be specified with the following pattern:</p> <pre><code>message BatchGetBooksResponse {\n  // Books requested.\n  repeated Book books = 1;\n}\n</code></pre> <ul> <li>The response message must include one repeated field corresponding to the   resources being retrieved.</li> <li>The order of books in the response must be the same as the names in the   request.</li> </ul>"},{"location":"template/0231/#nested-request-objects","title":"Nested request objects","text":"<p>If the standard Get request message contains a field besides the resource name that needs to be different between different resources being requested, the batch message may alternatively hold a <code>repeated</code> field of the standard Get request message. This is generally discouraged unless your use case really requires it.</p> <p>The request for a batch get method using this approach should be specified with the following pattern:</p> <pre><code>message BatchGetBooksRequest {\n  // The parent resource shared by all books being retrieved.\n  // Format: publishers/{publisher}\n  // If this is set, the parent field in the GetBookRequest messages\n  // must either be empty or match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The requests specifying the books to retrieve.\n  // A maximum of 1000 books can be retrieved in a batch.\n  repeated GetBookRequest requests = 2\n    [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included. If a caller sets this field, and the   parent collection in the name of any resource being retrieved does not match,   the request must fail.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   request messages specifying the resources to retrieve, as specified for   standard Get methods. The field should be named   <code>requests</code>.</li> <li>The field should be required.</li> <li>Other fields may be \"hoisted\" from the standard Get   request, which means that the field can be set at either   the batch level or child request level. Similar to <code>parent</code>, if both the   batch level and child request level are set for the same field, the values   must match.</li> <li>Batch get should not support pagination because transactionality across   API calls would be extremely difficult to implement or enforce, and the   request defines the exact scope of the response anyway.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>requests</code> field should document the maximum number   of requests allowed.</li> </ul>"},{"location":"template/0231/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-09-16: Suggested annotating <code>parent</code>, <code>names</code>, and <code>requests</code> fields.</li> <li>2020-08-27: Removed parent recommendations for top-level resources.</li> <li>2020-03-24: Clarified behavior if no resource names are sent.</li> <li>2019-09-11: Changed the primary recommendation to specify a repeated   string instead of a repeated standard Get request message. Moved the original   recommendation into its own section.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0233/","title":"Batch methods: Create","text":"<p>Some APIs need to allow users to create multiple resources in a single transaction. A batch create method provides this functionality.</p>"},{"location":"template/0233/#guidance","title":"Guidance","text":"<p>APIs may support Batch Create using the following pattern:</p> <pre><code>rpc BatchCreateBooks(BatchCreateBooksRequest) returns (BatchCreateBooksResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:batchCreate\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with <code>BatchCreate</code>. The remainder of the RPC   name should be the plural form of the resource being created.</li> <li>The request and response messages must match the RPC name, with   <code>Request</code> and <code>Response</code> suffixes.</li> <li>However, in the event that the request may take a significant amount of     time, the response message must be a <code>google.longrunning.Operation</code>     which ultimately resolves to the <code>Response</code> type.</li> <li>The HTTP verb must be <code>POST</code>.</li> <li>The HTTP URI must end with <code>:batchCreate</code>.</li> <li>The URI path should represent the collection for the resource, matching   the collection used for simple CRUD operations. If the operation spans   parents, a dash (<code>-</code>) may be accepted as a wildcard.</li> <li>The body clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>The operation should be atomic: it should fail for all resources or   succeed for all resources (no partial success).</li> <li>If the operation covers multiple locations and at least one location is     down, the operation must fail.</li> <li>In cases where supporting partial responses cannot be avoided, the design     should follow the guidelines of AIP-193.</li> </ul>"},{"location":"template/0233/#request-message","title":"Request message","text":"<p>The request for a batch create method should be specified with the following pattern:</p> <pre><code>message BatchCreateBooksRequest {\n  // The parent resource shared by all books being created.\n  // Format: publishers/{publisher}\n  // If this is set, the parent field in the CreateBookRequest messages\n  // must either be empty or match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The request message specifying the resources to create.\n  // A maximum of 1000 books can be created in a batch.\n  repeated CreateBookRequest requests = 2\n    [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included, unless the resource being created is   a top-level resource. If a caller sets this field, and the   <code>parent</code> field of any child request message does not match, the request   must fail. The <code>parent</code> field of child request messages can be omitted if   the <code>parent</code> field in this request is set.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   request messages specifying the resources to create, as specified for   standard Create methods. The field should be named   <code>requests</code>.</li> <li>The field should be required.</li> <li>Other fields may be \"hoisted\" from the standard Create   request, which means that the field can be set at either   the batch level or child request level. Similar to <code>parent</code>, if both the   batch level and child request level are set for the same field, the values   must match.</li> <li>Fields which must be unique cannot be hoisted (e.g. Customer-provided id     fields).</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>requests</code> field should document the maximum number   of requests allowed.</li> </ul>"},{"location":"template/0233/#response-message","title":"Response message","text":"<p>The response for a batch create method should be specified with the following pattern:</p> <pre><code>message BatchCreateBooksResponse {\n  // Books created.\n  repeated Book books = 1;\n}\n</code></pre> <ul> <li>The response message must include one repeated field corresponding to the   resources that were created.</li> </ul>"},{"location":"template/0233/#changelog","title":"Changelog","text":"<ul> <li>2023-04-18: Changed the recommendation to allow returning partial    successes.</li> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-09-16: Suggested annotating <code>parent</code> and <code>requests</code> fields.</li> <li>2020-08-27: Removed parent recommendations for top-level resources.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0234/","title":"Batch methods: Update","text":"<p>Some APIs need to allow users to modify a set of resources in a single transaction. A batch update method provides this functionality.</p>"},{"location":"template/0234/#guidance","title":"Guidance","text":"<p>APIs may support Batch Update using the following pattern:</p> <pre><code>rpc BatchUpdateBooks(BatchUpdateBooksRequest) returns (BatchUpdateBooksResponse) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:batchUpdate\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with <code>BatchUpdate</code>. The remainder of the RPC   name should be the plural form of the resource being updated.</li> <li>The request and response messages must match the RPC name, with   <code>Request</code> and <code>Response</code> suffixes.</li> <li>However, in the event that the request may take a significant amount of     time, the response message must be a <code>google.longrunning.Operation</code>     which ultimately resolves to the <code>Response</code> type.</li> <li>The HTTP verb must be <code>POST</code>.</li> <li>The HTTP URI must end with <code>:batchUpdate</code>.</li> <li>The URI path should represent the collection for the resource, matching   the collection used for simple CRUD operations. If the operation spans   parents, a dash (<code>-</code>) may be accepted as a wildcard.</li> <li>The body clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>The operation must be atomic: it must fail for all resources or   succeed for all resources (no partial success).</li> <li>If the operation covers multiple locations and at least one location is     down, the operation must fail.</li> </ul>"},{"location":"template/0234/#request-message","title":"Request message","text":"<p>The request for a batch update method should be specified with the following pattern:</p> <pre><code>message BatchUpdateBooksRequest {\n  // The parent resource shared by all books being updated.\n  // Format: publishers/{publisher}\n  // If this is set, the parent field in the UpdateBookRequest messages\n  // must either be empty or match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The request message specifying the resources to update.\n  // A maximum of 1000 books can be modified in a batch.\n  repeated UpdateBookRequest requests = 2\n    [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included, unless the resource being updated is   a top-level resource. If a caller sets this field, and the   parent collection in the name of any resource being updated does not match,   the request must fail.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   request messages specifying the resources to update, as specified for   standard Update methods. The field should be named   <code>requests</code>.</li> <li>The field should be required.</li> <li>Other fields may be \"hoisted\" from the standard Update   request, which means that the field can be set at either   the batch level or child request level. Similar to <code>parent</code>, if both the   batch level and child request level are set for the same field, the values   must match.</li> <li>The <code>update_mask</code> field is a good candidate for hoisting.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>requests</code> field should document the maximum number of   requests allowed.</li> </ul>"},{"location":"template/0234/#response-message","title":"Response message","text":"<p>The response for a batch update method should be specified with the following pattern:</p> <pre><code>message BatchUpdateBooksResponse {\n  // Books updated.\n  repeated Book books = 1;\n}\n</code></pre> <ul> <li>The response message must include one repeated field corresponding to the   resources that were updated.</li> </ul>"},{"location":"template/0234/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-09-16: Suggested annotating <code>parent</code> and <code>requests</code> fields.</li> <li>2020-08-27: Removed parent recommendations for top-level resources.</li> <li>2019-09-11: Fixed the wording about which child field the <code>parent</code> field   should match.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0235/","title":"Batch methods: Delete","text":"<p>Some APIs need to allow users to delete a set of resources in a single transaction. A batch delete method provides this functionality.</p>"},{"location":"template/0235/#guidance","title":"Guidance","text":"<p>Batch delete methods are specified using the following pattern:</p> <pre><code>rpc BatchDeleteBooks(BatchDeleteBooksRequest) returns (google.protobuf.Empty) {\n  option (google.api.http) = {\n    post: \"/v1/{parent=publishers/*}/books:batchDelete\"\n    body: \"*\"\n  };\n}\n</code></pre> <ul> <li>The RPC's name must begin with <code>BatchDelete</code>. The remainder of the RPC   name should be the plural form of the resource being deleted.</li> <li>The request message must match the RPC name, with a <code>Request</code> suffix.</li> <li>The response message should be <code>google.protobuf.Empty</code>.</li> <li>If the resource is soft deleted, the response message     should be a response message containing the updated resources.</li> <li>In the event that the request may take a significant amount of time, the     response message must be a <code>google.longrunning.Operation</code> which     resolves to the correct response.</li> <li>The HTTP verb must be <code>POST</code> (not <code>DELETE</code>).</li> <li>The HTTP URI must end with <code>:batchDelete</code>.</li> <li>The URI path should represent the collection for the resource, matching   the collection used for simple CRUD operations. If the operation spans   parents, a dash (<code>-</code>) may be accepted as a wildcard.</li> <li>The body clause in the <code>google.api.http</code> annotation should be <code>\"*\"</code>.</li> <li>The operation should be atomic: it should fail for all resources or   succeed for all resources (no partial success).</li> <li>If the operation covers multiple locations and at least one location is     down, the operation must fail.</li> </ul>"},{"location":"template/0235/#request-message","title":"Request message","text":"<p>The request for a batch delete method should be specified with the following pattern:</p> <pre><code>message BatchDeleteBooksRequest {\n  // The parent resource shared by all books being deleted.\n  // Format: publishers/{publisher}\n  // If this is set, the parent of all of the books specified in `names`\n  // must match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The names of the books to delete.\n  // A maximum of 1000 books can be deleted in a batch.\n  // format: publishers/{publisher}/books/{book}\n  repeated string names = 2 [\n    (google.api.field_behavior) = REQUIRED,\n    (google.api.resource_reference) = {\n      type: \"library.googleapis.com/Book\"\n    }];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included, unless the resource being deleted is   a top-level resource. If a caller sets this field, and the   parent collection in the name of any resource being deleted does not match,   the request must fail.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   resource names specifying the resources to delete. The field should be   named <code>names</code>.</li> <li>The field should be required.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>Other fields besides <code>name</code> may be \"hoisted\" from the standard Delete   request. There is no way to allow for these fields to   accept different values for different resources; if this is needed, use the   alternative request message form.</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>names</code> field should document the maximum number of   requests allowed.</li> <li>Filter-based matching must not be supported.</li> </ul>"},{"location":"template/0235/#request-message-containing-standard-delete-request-messages","title":"Request message containing standard delete request messages","text":"<p>If the standard Delete request message contains a field besides the resource name that needs to be different between different resources being requested, the batch message may alternatively hold a <code>repeated</code> field of the standard Delete request message. This is generally discouraged unless your use case really requires it.</p> <p>The request for a batch delete method should be specified with the following pattern:</p> <pre><code>message BatchDeleteBooksRequest {\n  // The parent resource shared by all books being deleted.\n  // Format: publishers/{publisher}\n  // If this is set, the parent of all of the books specified in the\n  // DeleteBookRequest messages must match this field.\n  string parent = 1 [\n    (google.api.resource_reference) = {\n      child_type: \"library.googleapis.com/Book\"\n    }];\n\n  // The requests specifying the books to delete.\n  // A maximum of 1000 books can be deleted in a batch.\n  repeated DeleteBookRequest requests = 2\n    [(google.api.field_behavior) = REQUIRED];\n}\n</code></pre> <ul> <li>A <code>parent</code> field should be included. If a caller sets this field, and the   parent collection in the name of any resource being deleted does not match,   the request must fail.</li> <li>This field should be required if only 1 parent per request is allowed.</li> <li>The field should identify the resource type that it     references.</li> <li>The comment for the field should document the resource pattern.</li> <li>The request message must include a repeated field which accepts the   request messages specifying the resources to delete, as specified for   standard Delete methods. The field should be named   <code>requests</code>.</li> <li>The field should be required.</li> <li>Other fields may be \"hoisted\" from the standard Delete   request, which means that the field can be set at either   the batch level or child request level. Similar to <code>parent</code>, if both the   batch level and child request level are set for the same field, the values   must match.</li> <li>Fields which must be unique cannot be hoisted (e.g. <code>etag</code>).</li> <li>The request message must not contain any other required fields, and   should not contain other optional fields except those described in this   or another AIP.</li> <li>The comment above the <code>requests</code> field should document the maximum number   of requests allowed.</li> <li>Filter-based matching must not be supported unless it is infeasible to   support critical use cases without it, because it makes it too easy for users   to accidentally delete important data. If it is unavoidable, see AIP-165.</li> </ul>"},{"location":"template/0235/#response-message-soft-delete-only","title":"Response message (soft-delete only)","text":"<p>In the case where a response message is necessary because the resource is soft-deleted, the response should be specified with the following pattern:</p> <pre><code>message BatchDeleteBooksResponse {\n  // Books deleted.\n  repeated Book books = 1;\n}\n</code></pre> <ul> <li>The response message must include one repeated field corresponding to the   resources that were soft-deleted.</li> </ul>"},{"location":"template/0235/#changelog","title":"Changelog","text":"<ul> <li>2022-06-02: Changed suffix descriptions to eliminate superfluous \"-\".</li> <li>2020-09-16: Suggested annotating <code>parent</code>, <code>names</code>, and <code>requests</code> fields.</li> <li>2020-08-27: Removed parent recommendations for top-level resources.</li> <li>2020-03-27: Added reference to AIP-165 for criteria-based deletion.</li> <li>2019-10-11: Changed the primary recommendation to specify a repeated   string instead of a repeated standard Delete message. Moved the original   recommendation into its own section.</li> <li>2019-09-11: Fixed the wording about which child field the <code>parent</code> field   should match.</li> <li>2019-08-01: Changed the examples from \"shelves\" to \"publishers\", to   present a better example of resource ownership.</li> </ul>"},{"location":"template/0236/","title":"Policy preview","text":"<p>A policy is a resource that provides rules that admit or deny access to other resources. Generally, the outcome of a policy can be evaluated to a specific set of outcomes.</p> <p>Changes to policies without proper validation may have unintended consequences that can severely impact a customer\u2019s overall infrastructure setup. To safely update resources, it is beneficial to test these changes via policy rollout APIs.</p> <p>Preview is a rollout safety mechanism for policy resources, which gives the customer the ability to validate the effect of their proposed changes against production traffic prior to the changes going live. The result of the policy evaluation against traffic is logged in order to give the customer the data required to test the correctness of the change.</p> <p>Firewall policies exemplify a case that is suitable for previewing. A new configuration can be evaluated against traffic to observe which IPs would be allowed or denied. This gives the customer the data to guide a decision on whether to promote the proposed changes to live.</p> <p>The expected flow for previewing a policy is as follows:</p> <ol> <li>The user creates an experiment containing a new policy configuration    intended to replace the live policy.</li> <li>The user uses the \"startPreview\" method to start generating logs which compare    the live and experiment policy evaluations against live traffic.</li> <li>The user inspects the logs to determine whether the experiment has the    intended result.</li> <li>The user uses the \"commit\" method to promote the experiment to live.</li> </ol>"},{"location":"template/0236/#guidance","title":"Guidance","text":""},{"location":"template/0236/#non-goals","title":"Non-goals","text":"<p>This proposal is for a safety mechanism for policy rollouts only. Safe rollouts for non-policy resources are not in scope.</p>"},{"location":"template/0236/#experiments","title":"Experiments","text":"<p>A new configuration of a policy to be previewed is stored as a nested collection under the policy. These nested collections are known as experiments.</p> <p>A hypothetical policy resource called, <code>Policy</code>, is used throughout. It has the following resource name pattern:</p> <p><code>projects/{project}/locations/{location}/policies/{policy}</code></p> <p>The experimental versions of the resource used for previewing or other safe rollout practices are represented as a nested collection under <code>Policy</code> using a new resource type. The resource type must follow the naming convention RegularResourceType<code>Experiment</code>.</p> <p>The following pattern is used for the experiment collection:</p> <p><code>projects/{project}/locations/{location}/policies/{policy}/experiments/{experiment}</code></p> <p>A proto used to represent an experiment must contain the following:</p> <ol> <li>The required top-level fields for a resource, like <code>name</code> and <code>etag</code></li> <li>The policy message that is being tested itself</li> <li>The field, <code>preview_metadata</code>, which contains metadata specific to      previewing the experiment of a specific resource type.</li> </ol> <pre><code>message PolicyExperiment {\n\n  // google.api.resource, name, and other annotations and fields\n\n  // The policy experiment. This Policy will be used to preview the effects of\n  // the change but will not affect live traffic.\n  Policy policy = 2;\n\n  // The metadata associated with this policy experiment.\n  PolicyPreviewMetadata preview_metadata = 3\n      [(google.api.field_behavior) = OUTPUT_ONLY];\n\n  // Allows clients to store small amounts of arbitrary data.\n  map&lt;string, string&gt; annotations = 4;\n}\n</code></pre> <ul> <li>The experiment proto must have a top-level field with the same type as the   live policy.</li> <li>It must be named as the live resource type. For example, if the     experiment is for FirewallPolicy, then this field must be named     <code>firewall_policy</code>.</li> <li>The name inside the embedded <code>policy</code> message must be the name of the     live policy.</li> <li>When the user is ready to promote an experiment, they must copy the   <code>policy</code> message into the live policy and delete the experiment. This can be   done manually or via a \"commit\" custom method.</li> <li>A product may support multiple experiments concurrently being previewed   for a single live policy.</li> <li>Each experiment must generate logs having each entry preceded by log_prefix     so that the user can compare the results of the experiment with the behavior     of the live policy.</li> <li>The number of experimental configurations for a given live policy may be     capped at a certain number and the cap must be documented.</li> <li>Cascading deletes must occur: if the live policy is deleted, all   experiments must also be deleted.</li> <li><code>map&lt;string,string&gt;</code> annotations must allow clients   to store small amounts of arbitrary data.</li> </ul>"},{"location":"template/0236/#metadata","title":"Metadata","text":"<p><code>preview_metadata</code> tracks all metadata of previewing the experiment. The messages must follow the convention: RegularResourceType<code>PreviewMetadata</code>. This is so the proto can be defined uniquely for each resource type in the same service with experiments.</p> <pre><code>message PolicyPreviewMetadata {\n  // Possible values of the state of previewing the experiment.\n  enum State {\n    // Default value. This value is unused.\n    STATE_UNDEFINED = 0;\n\n    // The experiment is actively previewing.\n    ACTIVE = 1;\n\n    // The previewing of the experiment has been stopped.\n    SUSPENDED = 2;\n  }\n\n  // The state of previewing the experiment.\n  State state = 1;\n\n  // An identifying string common to all logs generated when previewing the\n  // experiment. Searching all logs for this string will isolate the results.\n  string log_prefix = 2;\n\n  // The most recent time at which this experiment started previewing.\n  google.protobuf.Timestamp start_time = 3;\n\n  // The most recent time at which this experiment stopped previewing.\n  google.protobuf.Timestamp stop_time = 4;\n}\n</code></pre> <ul> <li><code>PolicyPreviewMetadata</code> must have the fields defined in the proto above.</li> <li>It may have additional fields if the service or resource requires it.</li> <li>When an experiment is first previewed, <code>preview_metadata</code> must be   absent.</li> <li>It is present on the experiment once the \"startPreview\" method is used.</li> <li>All <code>preview_metadata</code> fields must be output only.</li> <li><code>state</code> changes between <code>ACTIVE</code> and <code>SUSPENDED</code> when previewing is started   or stopped. This happens when the \"startPreview\" or \"stopPreview custom methods   are invoked, respectively.</li> <li>The first time the \"startPreview\" custom method is used, the system must   create <code>preview_metadata</code> and do the following:</li> <li>It must set the <code>state</code> to <code>ACTIVE</code></li> <li>It must populate <code>start_time</code> with the current time.<ul> <li><code>start_time</code> must be updated every time <code>state</code> is changed to   <code>ACTIVE</code>.</li> </ul> </li> <li>It must set a system generated <code>log_prefix</code> string, which is a     predefined constant hard coded by the system developers.</li> <li>The same value is used for previewing experiments for the given resource     type. For example, \"FirewallPolicyPreviewLog\" for FirewallPolicy.</li> <li>When the \"stopPreview\" custom method is used, the system must do the   following:</li> <li>It must set the <code>state</code> to <code>SUSPENDED</code></li> <li>It must populate the <code>stop_time</code> with the current time.</li> </ul>"},{"location":"template/0236/#methods","title":"Methods","text":""},{"location":"template/0236/#create","title":"create","text":"<ul> <li>The resource must be created using long-running   Create and   <code>google.longrunning.operation_info.response_type</code> must be   <code>PolicyExperiment</code>.</li> <li>Creating a new experiment to preview must support the following use cases:</li> <li>Preview a new policy.</li> <li>Preview an update to an already live policy.</li> <li>Preview a deletion of a current policy.</li> <li>For the update and delete use cases, the <code>policy</code> field in the experiment   must have the full payload of the live policy copied into it, including   the name.</li> <li>The user must set the rules to the new intended state to preview an     update.</li> <li>The user must set set the rules to represent a no-op to preview a     delete.</li> <li>To preview a new policy, the system must do the following:</li> <li>If the system does not support a nested collection without a live policy,     the user must create a live policy and set the rules to represent a     no-op. For example, the rules of a no-op policy may be empty.<ul> <li>An experiment is created as a child of the no-op policy.</li> </ul> </li> <li>If the system supports previewing multiple experiments for a live policy,   calling \"create\" more than once must create multiple experiments.</li> </ul>"},{"location":"template/0236/#update","title":"update","text":"<ul> <li>The resource must be updated using long-running   Update and   <code>google.longrunning.operation_info.response_type</code> must be   <code>PolicyExperiment</code>.</li> <li>The name inside <code>policy</code> must not change but the other fields can in   order to change the experiment being previewed because this <code>policy</code> is   intended to replace the live policy, and the name of the live policy   must not change.</li> <li>The system must set the <code>state</code> to <code>SUSPENDED</code> if the <code>state</code> was <code>ACTIVE</code>   at the time of an update.</li> <li>This is so the user can easily distinguish between different versions of     the experiment being previewed.</li> </ul>"},{"location":"template/0236/#get","title":"get","text":"<ul> <li>The standard method, Get, must be included for   <code>PolicyExperiment</code> resource types.</li> </ul>"},{"location":"template/0236/#list","title":"list","text":"<ul> <li>The standard method, List, must be included for   <code>PolicyExperiment</code> resource types.</li> <li>Filtering on <code>PolicyPreviewMetadata</code> indicates which experiments are actively   previewed.</li> <li>For example, the following filter string returns a List response with     experiments being previewed: preview_metadata.state = ACTIVE.</li> </ul>"},{"location":"template/0236/#delete","title":"delete","text":"<ul> <li>The resource must be deleted using long-running   Delete and   <code>google.longrunning.operation_info.response_type</code> must be   <code>PolicyExperiment</code>.</li> </ul>"},{"location":"template/0236/#startpreview","title":"startPreview","text":"<pre><code>// Starts previewing a PolicyExperiment. This triggers the system to start\n// generating logs to evaluate the PolicyExperiment.\nrpc StartPreviewPolicyExperiment(StartPreviewPolicyExperimentRequest)\n    returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=policies/*/experiments/*}:startPreview\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"PolicyExperiment\"\n    metadata_type: \"StartPreviewPolicyExperimentMetadata\"\n  };\n}\n\n// The request message for the startPreview custom method.\nmessage StartPreviewPolicyExperimentRequest {\n  // The name of the PolicyExperiment.\n  string name = 1;\n}\n</code></pre> <ul> <li>This custom method is required.</li> <li><code>google.longrunning.Operation.metadata_type</code> must follow guidance on   Long-running operations</li> <li>This method must trigger the system to start generating logs to preview   the experiment.</li> <li>Whenever the method is called successfully, the system must set the   following values in the <code>PolicyPreviewMetadata</code>:</li> <li><code>log_prefix</code> to the predefined constant.</li> <li><code>start_time</code> to the current time</li> <li><code>state</code> to <code>ACTIVE</code>.</li> <li>If the method is called on an experiment with the rules representing a no-op,   then the system must preview the deletion of the live policy.</li> </ul>"},{"location":"template/0236/#stoppreview","title":"stopPreview","text":"<pre><code>// Stops previewing a PolicyExperiment. This triggers the system to stop\n// generating logs to evaluate the PolicyExperiment.\nrpc StopPreviewPolicyExperiment(StopPreviewPolicyExperimentRequest)\n    returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=policies/*/experiments/*}:stopPreview\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"PolicyExperiment\"\n    metadata_type: \"StopPreviewPolicyExperimentMetadata\"\n  };\n}\n\n// The request message for the stopPreview custom method.\nmessage StopPreviewPolicyExperimentRequest {\n  // The name of the PolicyExperiment.\n  string name = 1;\n}\n</code></pre> <ul> <li>This custom method is required.</li> <li><code>google.longrunning.Operation.metadata_type</code> must follow guidance on   Long-running operations</li> <li>This method must trigger the system to stop generating logs to preview the   experiment.</li> <li>Whenever the method is called successfully, the system must set the   following values in the <code>PolicyPreviewMetadata</code>:</li> <li><code>stop_time</code> to the current time</li> <li><code>state</code> to <code>SUSPENDED</code></li> </ul>"},{"location":"template/0236/#commit","title":"commit","text":"<p>The resource may expose a new custom method called \"commit\" to promote an experiment. The system copies <code>policy</code> from the experiment into the live policy and then deletes the experiment.</p> <p>Declarative clients may manually copy fields from an experiment into the live policy and then delete the experiment rather than calling \"commit\" if preferable.</p> <pre><code>// Commits a PolicyExperiment. This copies the PolicyExperiment's policy message\n// to the live policy then deletes the PolicyExperiment.\nrpc CommitPolicyExperiment(CommitPolicyExperimentRequest)\n    returns (google.longrunning.Operation) {\n  option (google.api.http) = {\n    post: \"/v1/{name=policies/*/experiments/*}:commit\"\n    body: \"*\"\n  };\n  option (google.longrunning.operation_info) = {\n    response_type: \"google.protobuf.Empty\"\n    metadata_type: \"CommitPolicyExperimentMetadata\"\n  };\n}\n\n// The request message for the commit custom method.\nmessage CommitPolicyExperimentRequest {\n  string name = 1;\n  string etag = 2;\n  string parent_etag = 3;\n}\n</code></pre> <ul> <li><code>google.longrunning.Operation.metadata_type</code> must follow guidance on   Long-running operations</li> <li>The method must atomically copy <code>policy</code> from the experiment into the live   policy, and then delete the experiment.</li> <li>If any experiment fails \"commit\", previewing it must not stop, and the   live policy must not be updated.</li> <li>The method can be called on an experiment in any state.</li> <li>The <code>etag</code> must match that of the experiment in order for commit to be   successful. This is so the user does not commit an unintended version of the   experiment.</li> <li>If no <code>etag</code> is provided, the API must not succeed to prevent the user     from unintentionally committing a different version of the experiment as     intended.</li> <li>A <code>parent_etag</code> may be provided to guarantee that the experiment     overwrites a specific version of the live policy.</li> <li>The method is not idempotent and calling it twice on the same experiment   must return a 404 NOT_FOUND as the experiment is deleted as part of the   first call.</li> </ul>"},{"location":"template/0236/#changes-to-live-policy-api-methods","title":"Changes to live policy API methods","text":""},{"location":"template/0236/#delete_1","title":"delete","text":"<ul> <li>A delete of the live policy must delete all experiments.</li> <li>To maintain the experiments while negating the effect of the live policy, the   live policy must be changed to a no-op policy instead of using this   method.</li> </ul>"},{"location":"template/0236/#logging","title":"Logging","text":"<p>Logging is crucial for the user to evaluate whether an experiment should be promoted to live.</p> <p>Logs must contain the results of the evaluated experiment, the <code>etag</code> associated with that experiment alongside that of the live policy, and be preceded by the value of <code>log_prefix</code>.   - The <code>etag</code> fields help the user identify which     configurations of the live and experiment are evaluated in the log.   - <code>log_prefix</code> helps the user separate logs specifically generated for     previewing the experiment from other use cases.</p> <p>Overall, these logs help the user make a decision about whether to promote the experiment to live.</p>"},{"location":"template/0236/#changelog","title":"Changelog","text":"<ul> <li>2023-04-27: Methods for start and stop renamed. State to enum. Annotations   added.</li> <li>2023-03-30: Initial AIP written.</li> </ul>"}]}