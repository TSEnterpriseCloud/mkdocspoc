{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The TSE in Cloud API is a RESTful API Client Libraries. The API exposes most of the features available in the TSE in Cloud Web interface.</p> <p> API vs SDK</p> <p>If you need more information about what APIs and SDKs are, you can watch this video.</p>","tags":["getting started","introduction"]},{"location":"#how-can-i-start","title":"How can I start?","text":"<p>In this documentation, you will find three modalities you can use to start developing your TSE in Cloud integration.</p>","tags":["getting started","introduction"]},{"location":"#step-by-step-guide","title":"Step-by-step Guide","text":"<p>The Step-by-step page is a guide that will tell you exactly what to do to be ready to develop in no time, including some tricky procedures such as the app configuration and the permission request. You can find most of the steps under the Basics category. If you don't know a lot about TSE in Cloud, or you are uncertain about which option to select, then we strongly suggest you start from here!</p>","tags":["getting started","introduction"]},{"location":"#quickstarts","title":"Quickstarts","text":"<p>If you prefer actions over words, and you feel pretty confident about your knowledge of Token authentication then probably you would prefer to start developing immediately, following one of our Quickstarts. Even so, we don't assure you that you will never have to explore the Basics category! </p>","tags":["getting started","introduction"]},{"location":"#guides","title":"\ud83d\udee0\ufe0f Guides","text":"<p>If you want to focus on your specific use case from the first moment, you can check our Guides. Here we explained how to implement our customer's most common use cases, and yours could be already included there too! Please, notice that you will most probably need to start with one of the previous options to be ready to follow our guides because they are more focused on the final result rather than on helping you get started.</p>","tags":["getting started","introduction"]},{"location":"#faqs","title":"FAQs","text":"<p>In the FAQs section we collected the most common questions we received from the other developers. In most of the cases, this will be enough to help you overcome your issues!</p>","tags":["getting started","introduction"]},{"location":"#can-you-help-me","title":"Can you help me?","text":"<p>Sure! Please, check the Support page to discover the available options!</p>","tags":["getting started","introduction"]},{"location":"basics/","title":"Basics","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>This category offers you all you need to start interacting with TSE in Cloud APIs.</p> <p>The easiest way to learn from scratch is to follow our Step-by-step guide, but you can also jump to one of the other pages if you prefer </p> <p>These are the available guides:</p>","tags":["basics"]},{"location":"basics/debug-your-integration/","title":"Debug your integration","text":"<p>If you are struggling while trying to use our APIs using one of our SDKs or your custom code here you can find simple steps to successfully resolve the issues you are experiencing.</p> <p>:::danger Try first It is always suggested to try using the API reference or Postman before trying to use the API, to be faster while implementing the needed methods with custom code or SDKs. :::</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#permission-errors","title":"Permission errors","text":"<p>If you are getting 401 Unauthorized or 403 Forbidden http status codes there are a few things you have to check:</p> <ul> <li> <p>401 Unauthorized: This error is returned when there is some problem with the Access Token (it could be missing or invalid) or with the Company Id (it could be invalid, or the Access Token could have been issued for a different company). Be sure to set up the token correctly, and check if the Company Id is valid using our List User Companies method.</p> </li> <li> <p>403 Forbidden: It means that you are trying to access some resource without having the proper permissions, most probably because your token is missing the correct scopes for the action you're trying to perform.</p> </li> </ul>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#memo-print-the-request-json","title":":memo:\u00a0 Print the request JSON","text":"<p>The most common issues the developers report to us are related to POST and PUT requests, and usually are due to errors while composing the request body.</p> <p>First, be sure to provide your payload correctly to the API invocation: we had many cases of customers sending us an empty request because they didn't pass the parameter correctly in their code.</p> <p>Then, check the request validity: since the body structure can be really big and complicated, it is really easy to put a parameter in the wrong position while composing the payload by hand; using the models included in our SDKs should prevent this kind of issue.</p> <p>If you still want to avoid our SDKs, then we suggest you use at least a JSON Marshaller: this will help you to generate valid JSON strings. If you are brave enough to compose your JSON by hand, then we suggest you at least check the body validity using a JSON Validator: you could have missed a comma somewhere.</p> <p>Next, you should check if the structure of the body reflects the Schema published in our API reference. If you're experiencing this kind of issue while using our SDKs, you can check the generated JSON by printing it as explained in the Use raw JSON as request body\u200b section included on every SDK introduction page. If you want to be sure that your JSON is valid, you can always try to send a request using our API Reference: if you obtain a valid response then your JSON is 100% valid.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#check-the-documentation","title":"Check the documentation","text":"<p>Here in our Developers Hub, you can find several complete examples for many languages and API methods, most notably in the create an invoice. If you can't find what you need, we provide a Search Box to help you with the research. If you are using one of our SDKs, then you can also check the GitHub repository of the SDK: in the README you can find the description of every available method implemented in our libraries. Additionally, you can check the Test files to check some examples of the SDK usage.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/debug-your-integration/#nuclear-option","title":"Nuclear option","text":"<p>If at this point you're still facing the same issue, then we suggest you contact us. The problem could be related to your environment, or there could be an actual bug in our SDKs or APIs, so it requires further investigation.</p>","tags":["code example","no permission","authorization","invalid json","the i dati field is required"]},{"location":"basics/errors/","title":"Errors","text":"<p>In this page we'll explain how to manage the errors that could arise while using our APIs. Our APIs use conventional HTTP status codes to indicate the result of a request.</p> <p>The request codes can be categorized in this way:</p> <ul> <li>2xx codes indicate success</li> <li>4xx codes indicate a client error</li> <li>5xx codes indicate a server error</li> </ul> <p>Each error comes with a payload that describes what has occurred. The response body may be structured in different ways, depending on the error type.</p> <p>Below you can find a list of the error codes used by the TSE in Cloud APIs:</p> Code Title Meaning 401 Unauthorized The token is missing, invalid or expired. To fix this, you should re-authenticate. 403 Forbidden The user or the token you\u2019re using does not have the right permissions to fulfill the request. This can also happen if the license is expired or if you\u2019ve reached the API usage limits. 404 Not Found The resource you are looking for does not exist. 409 Conflict Cannot perform the operation. 422 Unprocessable Entity The request is invalid. This can happen if the body of the request does not pass validation. 429 Too Many Requests Your application is making too many requests and has exceeded the quotas. You should wait for the number of seconds specified in the Retry-After response header before trying again. 5xx Server Errors An error occured on TSE in Cloud\u2019s servers. These errors are rare. If you encounter one of these, please contact us.","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#no_good_man-authentication-errors","title":":no_good_man:\u00a0 Authentication errors","text":"<p>Gli errori di autorizzazione sono di seguito elencati per le rispettive categorie di status code.</p> <p>Access Token Request Errors</p> <p>400 Bad Request</p> Scope Response grant_type - missing <code>http {\"errors\":[{\"errorType\":\"invalid_request\",\"message\":\"Missing \u2018grant_type\u2019 parameter value.\"}],\"success\":false}</code> grant_type - invalid <code>http {\"errors\":[{\"errorType\":\"unsupported_grant_type\", \"message\":\"The authorization grant_type is not supported.\"}],\"success\":false}</code> <p>401 Unauthorized</p> Scope Response authorization header - missing <code>http {'errors': [{'errorType': invalid_client, 'message': 'Authorization header required.' }], \"success\": false}</code> authorization header invalid <code>http [{'errorType': invalid_client, \"message\": \"Invalid authorization header format.\"}], \"success\": false}</code> client_id - missing <code>http {\"errors\":[{\"errorType\":\"invalid_client\",\"message\": Invalid authorization header format.\"}],\"success\":false}</code> client_id - invalid <code>http{\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header. Client id invalid.\"}],\"success\":false}</code> client_secret - missing <code>http {\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header format.\"}],\"success\":false}}</code> client_secret - invalid <code>{\"errors\":[{\"errorType\":\"invalid_client\",\"message\": \"Invalid authorization header. Client secret invalid.\"}],\"success\":false}</code>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#raising_hand_man","title":":raising_hand_man:","text":"<p>Other errors that do not involve authorization or permissions, for example as a result of an invalid request or due to a non-existent resource, generate a response with an error object containing all the parameters useful to resolve the issue. This object contains a message and may contain a code parameters. Errors due to validation issues will include the validation_result object, which contains the list of the fields that generated the error and an explanatory message.</p> <pre><code>HTTP/1.0 404 Not Found\n{\n  \"error\": {\n    \"message\": \"La risorsa richiesta non esiste.\"\n  }\n}\n</code></pre>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/errors/#additional-resources","title":"Additional Resources","text":"<ul> <li>HTTP Status Codes</li> <li>List of HTTP status codes</li> <li>OAuth 2.0 Authorization Code - Possible Errors</li> <li>OAuth 2.0 Authorization Code - The Authorization Response</li> <li>OAuth 2.0 Device Authorization Flow - Token Request</li> </ul>","tags":["basics","errors","http","response","status","codes","server","client","unauthorized","forbidden","not found","unprocessable entity","too many requests","4xx",401,403,404,409,422,429,"2xx","5xx"]},{"location":"basics/limits-and-quotas/","title":"Limits and Quotas","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>To prevent abuse, avoid slowdowns, and ensure that all users make responsible use of our APIs, we enforce quota limits. If you perform too many requests you may exceed your quota; in this case, you will receive an error as a response until when your quota will be restored.</p> <p>We enforce two different kinds of limits, based on the time range that they apply to.</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#long-term-usage-limits","title":"Long-term usage limits","text":"<p>Long-term usage limits are meant to avoid improper usage of the APIs, by setting a limit on the maximum amount of requests in a certain period.</p> <p>:::note Long-term Usage quotas are different based on the app visibility!</p> <p>If the app is public every user that has access to a specific company through a specific app shares (and consumes) the same quotas as other users that have access to the same company through the same app, if the app is private the quotas are no more related to the app but only to the company, this means that creating a new private app won't increase your quotas.</p> <p>:::</p> <p>The quota limits are the following:</p> API limit type Limit Requests per hour 1.000 requests per hour on a company-app couple Requests per month 40.000 requests per month on a company-app couple for public apps Requests per month 40.000 requests per month per company for private apps <p>Long-term limits use fixed time windows: these quotas are reset at the beginning of a new hour or month.</p> <p>If the limit is exceeded, the API returns a 403 Forbidden HTTP status code; the response also includes a Retry-After header, indicating how long you should wait before retrying the request (in seconds).</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#short-term-rate-limits","title":"Short-term rate limits","text":"<p>Short-term rate limits are meant to avoid usage spikes that could affect the system availability, by preventing applications from sending too many requests in a short-time interval.</p> <p>:::note Short-term Usage quotas are company-related!!!</p> <p>This means that every app and user that has access to a specific company shares (and consumes) the same quotas with other apps and users that have access to the same company.</p> <p>:::</p> <p>The quota limit is the following:</p> API limit type Limit Requests every 5 minutes 300 requests every 5 minutes <p>Short-term usage limits use a sliding-window algorithm, check the additional resources for further info.</p> <p>If the limit is exceeded, the API returns a 429 Too Many Requests HTTP status code. The response also includes a Retry-After header, indicating how long you should wait before the request (in seconds).</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#http-headers-and-response-codes","title":"HTTP Headers and response codes","text":"<p>Every response contains several HTTP headers containing info about long-term usage limits.</p> Header Description RateLimit-HourlyRemaining The number of requests remaining for the current hour. RateLimit-HourlyLimit The maximum number of requests you are permitted to make per hour. RateLimit-MonthlyRemaining The number of requests remaining for the current month. RateLimit-MonthlyLimit The maximum number of requests you are permitted to make per month. <p>Here you can find an example of the HTTP response:</p> <pre><code>HTTP/1.1 200 OK\nDate: Tue, 05 May 2020 17:27:06 GMT\nStatus: 200 OK\nRateLimit-HourlyRemaining: 840\nRateLimit-HourlyLimit: 1000\nRateLimit-MonthlyRemaining: 1430\nRateLimit-MonthlyLimit: 20000\n</code></pre>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#is-it-still-not-enough","title":"Is it still not enough?","text":"<p>We designed our quotas to be able to satisfy the needs of the majority of the use cases. Nevertheless, in some cases, the default quotas could prove to be scarce, and in this situation, the only way is to increment the quota limit.</p> <p>If you think that your use case requires a higher quota, you can try to request us additional quota. It isn't automatic though, you'll have to explain your use case in detail to our team and demonstrate why our quotas are not sufficient to resolve it.</p> <p>We can increment only the long-term usage limits.</p> <p>:::danger Short-term rate quotas can't be incremented!</p> <p>If you're facing an issue with short-term rate quota, e.g. you're obtaining a 429 Too Many Requests error response, it means that you're not managing our APIs correctly. If that's the case, we'll reject every additional quota request we'll receive, and you should instead read the next section.</p> <p>:::</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#massage_man-keep-calm-and-deal-with-quotas","title":":massage_man:\u00a0 Keep calm and deal with quotas!","text":"<p>As explained above, if the rate limit will be exceeded you'll receive a 429 response to your requests. This is not a fatal error and we expect you to retry the request after a short interval; if the requests will keep arriving too quickly, your requests will result in another error result, and so on.</p> <p>It is then important to gradually increase the delay between requests to overcome this issue, this is usually done by applying exponential back-off to your requests.</p> <p>Here you can find some code examples that you can use to introduce exponential back-off on your code:</p> <pre><code>// We apply exponential backoff to our C# SDK\n// https://github.com/fattureincloud/fattureincloud-csharp-sdk/\n\n// We suppose to use the http://www.thepollyproject.org\n// and the https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry libraries\n// to implement the exponential back-off\n// to install them using the .Net cli:\n// dotnet add package Polly\n// dotnet add package Polly.Contrib.WaitAndRetry\n\nusing System;\nusing Polly;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Polly.Contrib.WaitAndRetry;\n\nnamespace Backoff\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ProductsApi(config);\n            var companyId = 11;\n\n            var maxRetryAttempts = 5;\n            var pauseBetweenFailures = Backoff.ExponentialBackoff(TimeSpan.FromSeconds(2), retryCount: maxRetryAttempts);\n\n            var retryPolicy = Policy\n                .WaitAndRetry(pauseBetweenFailures);\n\n            retryPolicy.Execute(() =&gt;\n            {\n                ListProductsResponse result = apiInstance.ListProducts(companyId);\n                Console.Write(\"\\n successful\");\n                Console.Write(result);\n            });\n        }\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk/\n\n// We suppose to use the https://pkg.go.dev/github.com/cenkalti/backoff/v4 library\n// to implement the exponential back-off\n// to install it:\n// go get github.com/cenkalti/backoff/v4\n\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    backoff \"github.com/cenkalti/backoff/v4\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nvar (\n    companyId     = int32(2)\n    auth          = context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration = fattureincloudapi.NewConfiguration()\n    apiClient     = fattureincloudapi.NewAPIClient(configuration)\n)\n\nfunc main() {\n    operation := func() error {\n        resp, _, err := apiClient.ProductsAPI.ListProducts(auth, companyId).Execute()\n        if resp != nil {\n            json.NewEncoder(os.Stdout).Encode(resp)\n        } else {\n            fmt.Println(err)\n        }\n        return err\n    }\n    err := backoff.Retry(operation, backoff.NewExponentialBackOff())\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error %v\\n\", err)\n        return\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our Java SDK\n// https://github.com/fattureincloud/fattureincloud-java-sdk/\n\n// We suppose to use the https://resilience4j.readme.io library to implement the exponential back-off\n// to install it see: https://search.maven.org/artifact/io.github.resilience4j/resilience4j-retry/1.7.1/jar\n\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.github.resilience4j.retry.Retry;\nimport io.github.resilience4j.retry.RetryConfig;\nimport io.github.resilience4j.retry.RetryRegistry;\nimport io.vavr.CheckedFunction0;\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.ProductsApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListProductsResponse;\n\npublic class Application {\n\n    public static void main(String[] args) throws Throwable {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n        defaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJoMWJVQWJiVmpDT3ZqWmliYXlhOGMzcEQ2aEVEeENPcSIsImV4cCI6MTY0MjA4NDgzNH0.mBOAhimqtRV6WurlfVWNj9Sq7zOBZvGqSzV1swG0AN4\");\n\n        RetryConfig config = RetryConfig.custom()\n                .maxAttempts(10)\n                .retryExceptions(ApiException.class)\n                .intervalFunction(IntervalFunction.ofExponentialBackoff(1000, 2))\n                .build();\n\n        RetryRegistry registry = RetryRegistry.of(config);\n        Retry retry = registry.retry(\"listProducts\", config);\n\n        Retry.EventPublisher publisher = retry.getEventPublisher();\n        publisher.onRetry(event -&gt; System.out.println(event.toString()));\n\n        ProductsApi apiInstance = new ProductsApi(defaultClient);\n\n           Retry.decorateCheckedSupplier(retry,\n               () -&gt; apiInstance.listProducts(2, null, null, null, null, null));\n\n        System.out.println(retryingListSuppliers.apply().getData());\n    }\n}\n</code></pre> <pre><code>// We apply exponential backoff to our JavaScript SDK\n// https://github.com/fattureincloud/fattureincloud-js-sdk/\n\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet productsApiInstance = new fattureInCloudSdk.ProductsApi();\n\nvar companyId = 16;\nvar opts = {};\n\nconst delay = (retryCount) =&gt;\n  new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\nconst getProd = async (retryCount = 0, lastError = null) =&gt; {\n  if (retryCount &gt; 20) throw new Error(lastError);\n  try {\n    return await productsApiInstance.listProducts(companyId, opts);\n  } catch (e) {\n    await delay(retryCount);\n    return getProd(retryCount + 1, e);\n  }\n};\n\nconsole.log(await getProd());\n</code></pre> <pre><code>// We apply exponential backoff to our PHP SDK\n// https://github.com/fattureincloud/fattureincloud-php-sdk/\n\n// We suppose to use the https://github.com/stechstudio/backoff library\n// to implement the exponential back-off\n// to install: composer require stechstudio/backoff\n\n$backoff = new Backoff(10, 'exponential', 10000, true);\n\n$accessToken = \"YOUR_ACCESS_TOKEN\";\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken($accessToken);\n$service = new UserApi(new Client(), $config);\n\n$result = $backoff-&gt;run(function() {\n  return $this-&gt;service-&gt;listUserCompanies();\n});\nreturn $result; // it contains the result of the closure\n</code></pre> <pre><code># We apply exponential backoff to our Python SDK\n# https://github.com/fattureincloud/fattureincloud-python-sdk/\n\n# We suppose to use the https://github.com/litl/backoff library to implement the exponential back-off\n# to install: pip install backoff\n\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import products_api\nfrom fattureincloud_python_sdk.exceptions import ApiException\nimport backoff\nimport collections\ncollections.Callable = collections.abc.Callable # needed if you are using python &gt; 3.10\n\n@backoff.on_exception(backoff.expo, ApiException, max_tries=10)\ndef get_products(configuration, company_id):\n        with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n            products_api_instance = products_api.ProductsApi(api_client)\n            products_api_instance.list_products(company_id)\n        return\n\n\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\nconfiguration.retries = 0 # needed to implement custom backoff\n\ncompany_id = 11\nget_products(configuration, company_id)\n</code></pre> <pre><code># We apply exponential backoff to our Ruby SDK\n# https://github.com/fattureincloud/fattureincloud-ruby-sdk/\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n# Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.access_token = \"YOUR_TOKEN\"\nend\nsuppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\n\nretries = 0\nmax_retries = 20\ncompany_id = 2\n\nbegin\n    company_suppliers = suppliers_api_instance.list_suppliers(company_id)\n    puts company_suppliers\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  if retries &lt;= max_retries\n    retries += 1\n    sleep 2 ** retries\n    retry\n  else\n    raise \"Giving up on the server after #{retries} retries. Got error: #{e.message}\"\n  end\nend\n</code></pre> <pre><code>// We apply exponential backoff to our TypeScript SDK\n// https://github.com/fattureincloud/fattureincloud-ts-sdk/\n\nimport {\n  Configuration,\n  ProductsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet productsApiInstance = new ProductsApi(apiConfig);\n\nvar companyId = 2;\nvar opts = {};\n\nconst delay = (retryCount: number) =&gt;\n  new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\nconst getProd: any = async (retryCount = 0, lastError?: string) =&gt; {\n  if (retryCount &gt; 20) throw new Error(lastError);\n  try {\n    return await productsApiInstance.listProducts(companyId);\n  } catch (e: any) {\n    await delay(retryCount);\n    return getProd(++retryCount, e.message);\n  }\n};\n\nconsole.log(await getProd());\n</code></pre> <p>Alternatively, you can use the Retry-After header to wait the right amount of time before sending your request again.</p>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/limits-and-quotas/#additional-resources","title":"Additional Resources","text":"<ul> <li>Rate limiting using the Fixed Window algorithm</li> <li>Rate limiting using the Sliding Window algorithm</li> <li>Exponential Backoff</li> <li>Exponential Backoff And Jitter</li> <li>Better Retries with Exponential Backoff and Jitter for Java</li> <li>Retry-After Header</li> <li>403 Forbidden</li> <li>429 Too Many Requests</li> <li>Windowing examples in the Apache Beam documentation</li> <li>Retry with resilience4j</li> </ul>","tags":["basics","limits","quotas","rate","retry","exponential backoff","delay","code example","c#","java","javascript","php","python","ruby","typescript","forbidden","too many requests",403,429]},{"location":"basics/scopes/","title":"Scopes","text":"<p>Scope  Le applicazioni devono richiedere i permessi esclusivamente per le risorse a cui intendono accedere. I sistemi di autorizzazione supportati, riferiscono a tali permessi come scopes. Tutti gli endpoints di Enterprise WebAPI richiedono uno scope, al fine di riferire correttamente ad uno specifico ambiente di lavoro definito per il gestionale.</p> <p>Le applicazioni devono specificare lo scope nella richiesta di autenticazione. I\u2019access token rilasciato conterr\u00e0 solo gli scopes (al momento solo uno) che l\u2019applicativo ha richiesto.</p> Scope Description Webapi_admin Questo scope permette di accedere alle api di richiesta su ambienti disponibili. Permette di avere un token anche non conoscendo l'ambiente di riferimento a priori, perch\u00e9 magari non ancora richiesto all'utente. Tipicamente con questo tipo di token si eseguono interrogazioni di tipo amministrativo, come la GetAmbienti [ambiente] Rappresenta l\u2019ambiente di lavoro Enterprise a cui le API devono accedere","tags":["basics","authorization","oauth","scopes","permissions","forbidden","no_permission",403]},{"location":"basics/scopes/#additional-resources","title":"Additional resources","text":"<ul> <li>JWT Token</li> <li>Query String</li> <li>URL Encoding</li> <li>Whitelist</li> </ul>","tags":["basics","authorization","oauth","scopes","permissions","forbidden","no_permission",403]},{"location":"basics/additional-capabilities/","title":"Additional Capabilities","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Some of our GET and LIST methods offer a set of additional capabilities.</p> <p>These functionalities are mostly optional, but they can be really helpful to adapt the result of a GET method to your needs.</p> <p>The additional capabilities are:</p>","tags":["basics","additional capabilities","customize","optional"]},{"location":"basics/additional-capabilities/customize-response/","title":"Customize response","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of the TSE in Cloud resources are huge, including a wide range of fields; in most cases, you won't be interested in the whole representation of a particular resource, but you would prefer to extract only a certain subset of the fields because other ones could be unuseful for the specific operation that you are trying to implement.</p> <p>Response Customization lets you define the set of fields that you desire to retrieve, making the responses much lighter and manageable. This can be done in two ways, using two different parameters to be set in query string:</p> Parameter Description fields This is the more granular way to customize the response. You can define the exact set of fields that must be retrieved, by providing the fields that you want to retrieve as a comma-separated list. fieldset TSE in Cloud provides some pre-defined sets of fields that can be used to customize the response without having to define every single field. In the next section, you can check the list of fieldsets and the list of fields that they include for each resource. <p>If these two fields are not specified, we use default fieldsets for the methods that provide response customization. See below for further info.</p> <p>:::warning This is not for everyone...</p> <p>Please, notice that not all the requests support response customization. Usually, all the List and Get methods that return resources representations provide this functionality, while some other methods don't. You can check the API Reference section to find out if a method supports response customization: for example, List Suppliers supports it, while Get User Info doesn't.</p> <p>:::</p> <p>This is a response customization example:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?fields=type,description&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/received_documents?type=expense&amp;fields=type,description\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"fields\", \"type,description\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"fields\", \"type,description\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"fields\", \"type,description\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  fields: \"type,description\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'fields' =&gt; 'type,description',\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'fields': 'type,description',\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'fields': 'type,description',\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  fields: \"type,description\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>This request will list all the expenses, showing only the type and description fields as in the following example:</p> <pre><code>{\n  \"current_page\": 1,\n  \"data\": [\n    {\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Maracaibo\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Acquisto smartphone\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Assicurazione RCA\"\n    },\n    {\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\"\n    }\n  ],\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=1\",\n  \"from\": 1,\n  \"last_page\": 8,\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=8\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/c/2/received_documents?fields=type%2Cdescription&amp;type=expense&amp;page=2\",\n  \"path\": \"https://api-v2.fattureincloud.it/c/2/received_documents\",\n  \"per_page\": 4,\n  \"prev_page_url\": null,\n  \"to\": 4,\n  \"total\": 31\n}\n</code></pre> <p>:::info Lower the pages number!</p> <p>Using the response customization you can lower the size of each item of the list, making it easier to manage pages with a wider page size. Feel free to increment the number of items per page!</p> <p>:::</p>","tags":["basics","additional capabilities","customize","optional","list","get","filter","fieldset","fields","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/customize-response/#available-fieldsets","title":"Available fieldsets","text":"<p>Here you can find a list of the fieldsets:</p> <p>:::tip Check the default!</p> <p>For the methods where the response customization is available, the basic is the default field set for the LIST methods, while the GET methods use the detailed fieldset as default. :::</p> Resource Type Fieldset Fields ArchiveDocument basic id, date, category, description ArchiveDocument detailed id, date, category, description, attachment_url CashbookEntry basic id, date, amount_in, payment_accounts_in, amount_out, payment_account_out, description, kind, document CashbookEntry detailed id, date, amount_in, payment_accounts_in, amount_out, payment_account_out, description, kind, document Currency basic id, symbol, html_symbol, exchange_rate Client basic id, name, code, vat_number, tax_code, address_city, address_province, country Client detailed id, name, code, type, first_name, last_name, contact_person, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, address_extra, country, email, certified_email, phone, fax, notes, default_vat, default_payment_terms, default_payment_terms_type, default_payment_method, bank_name, bank_iban, bank_swift_code, shipping_address, e_invoice, ei_code, default_discount, discount_highlight, created_at, updated_at Supplier basic id, name, code, vat_number, tax_code, address_city, address_province, country Supplier detailed id, code, name, type, first_name, last_name, contact_person, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, address_extra, country, email, certified_email, phone, fax, notes, created_at, updated_at F24 basic id, due_date, status, amount, description, attachment_url F24 detailed id, due_date, status, payment_account, amount, description, attachment_url IssuedDocument basic id, type, entity, date, number, numeration, amount_net, amount_vat, amount_gross, amount_due_discount, subject, visible_subject, next_due_date, url IssuedDocument detailed id, type, entity, date, number, numeration, currency, language, subject, visible_subject, rc_center, notes, year, stamp_duty, payment_method, use_split_payment, use_gross_prices, merged_in, original_document, e_invoice, items_list, payments_list, extra_data, amount_net, amount_vat, amount_gross, amount_due_discount, rivalsa, amount_rivalsa, amount_rivalsa_taxable, rivalsa_taxable, cassa, cassa2, amount_global_cassa_taxable, global_cassa_taxable, amount_cassa, amount_cassa_taxable, cassa_taxable, amount_cassa2, amount_cassa2_taxable, cassa2_taxable, withholding_tax, amount_withholding_tax, withholding_tax_taxable, amount_withholding_tax_taxable, other_withholding_tax, amount_other_withholding_tax, other_withholding_tax_taxable, amount_other_withholding_tax_taxable, amount_enasarco_taxable, seen_date, next_due_date, template, h_margins, v_margins, show_payment_method, show_payments, show_totals, show_notification_button, show_tspay_button, url, dn_url, ai_url, is_marked, attachment_url, delivery_note, accompanying_invoice, dn_template, dn_date, dn_number, ai_template, dn_ai_packages_number, dn_ai_weight, dn_ai_causal, dn_ai_destination, dn_ai_transporter, dn_ai_notes, ei_data, ei_raw, ei_ts_data, ei_status, locked, has_ts_pay_pending_payment, ei_cassa_type, ei_cassa2_type, ei_withholding_tax_causal, ei_other_withholding_tax_causal, ei_other_withholding_tax_type, created_at, updated_at PaymentAccount basic id, name PaymentAccount detailed id, name, type, sia, iban, cuc, virtual PaymentMethod basic id, name, is_default, default_payment_account PaymentMethod detailed id, name, is_default, details, default_payment_account, type Product basic id, name, code, use_gross_price, net_price, gross_price, default_vat, net_cost, measure, description, category, in_stock Product detailed id, name, code, use_gross_price, net_price, gross_price, default_vat, net_cost, measure, description, category, notes, in_stock, stock_initial, stock_current, average_cost, average_price, extra_document, created_at, updated_at Receipt basic id, date, type, number, numeration, amount_net, amount_vat, amount_gross, description, payment_account, rc_center Receipt detailed id, date, type, number, numeration, amount_net, amount_vat, amount_gross, use_gross_prices, description, payment_account, rc_center, items_list, created_at, updated_at ReceivedDocument basic id, type, description, entity, date, next_due_date, amount_net, amount_vat, amount_gross, url, is_marked ReceivedDocument detailed id, type, description, entity, date, next_due_date, currency, amount_net, amount_vat, amount_gross, amount_withholding_tax, amount_other_withholding_tax, category, is_marked, is_detailed, tax_deductibility, vat_deductibility, amortization, rc_center, invoice_number, items_list, payments_list, attachment_url, attachment_preview_url, e_invoice, extra_data, created_at, updated_at Solicit basic id, amount_greater_than, expire_delta_days, doc_types, created_at Solicit detailed id, amount_greater_than, expire_delta_days, doc_types, localizations Template basic id, name, support_custom_taxable Template detailed id, name, support_custom_taxable VatType basic id, value, description, is_disabled VatType detailed id, value, description, notes, e_invoice, ei_type, ei_description, editable, is_disabled","tags":["basics","additional capabilities","customize","optional","list","get","filter","fieldset","fields","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/","title":"Filter Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that the returned response could be potentially huge, involving a high number of complex resources, making the response difficult to manage and send to your application. For this reason, you should filter the results to get only the data you need.</p> <p>:::info Check the fields</p> <p>Our APIs let you apply a filter only on a certain set of fields. Please check the table below for the available fields for each method.</p> <p>:::</p> <p>To filter the returned resources, all you have to do is to add the \"q\" parameter to the query string, containing the desired query filter. This parameter must be provided as an URL-encoded string to avoid issues related to special characters in the string.</p> <p>For example, this request will filter all the clients, returning only the client with the specified vat_number. The query parameter value is the following:</p> Original value URL-encoded value vat_number = '11553420156' vat_number%20%3D%20%2711553420156%27 <p>This translates to the following code:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/entities/clients?q=vat_number%20%3D%20%2711553420156%27' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/entities/clients?q=vat_number%20%3D%20%2711553420156%27\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"q\", \"vat_number = '11553420156'\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/entities/clients\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"q\", \"vat_number = '11553420156'\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/entities/clients\")\n                .addQueryParameter(\"q\", \"vat_number='11553420156\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  q: \"vat_number = '11553420156'\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/entities/clients\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'q' =&gt; \"vat_number = '11553420156'\"\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/entities/clients\". '?' . $query;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    \"q\": \"vat_number = '11553420156'\"\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/entities/clients\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    \"q\": \"vat_number = '11553420156'\"\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/entities/clients\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  q: \"vat_number = '11553420156'\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/entities/clients?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>Here you can find an example response:</p> <pre><code>{\n  \"current_page\": 1,\n  \"data\": [\n    {\n      \"id\": 25330671,\n      \"code\": \"\",\n      \"name\": \"ACEA S.P.A.\",\n      \"vat_number\": \"2711553420156\",\n      \"tax_code\": \"\",\n      \"address_city\": \"Marioloso\",\n      \"address_province\": \"RM\",\n      \"country\": \"Italia\"\n    }\n  ],\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/c/2/entities/clients?q=vat_number+%3D+%2707305361003%27&amp;page=1\",\n  \"from\": 1,\n  \"last_page\": 1,\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/c/2/entities/clients?q=vat_number+%3D+%2707305361003%27&amp;page=1\",\n  \"next_page_url\": null,\n  \"path\": \"https://api-v2.fattureincloud.it/c/2/entities/clients\",\n  \"per_page\": 50,\n  \"prev_page_url\": null,\n  \"to\": 1,\n  \"total\": 1\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#building-a-query","title":"Building a query","text":"<p>Our API uses a SQL-like query language, which means that it is a subset of the where clause of the SQL language and can be used in a similar way to build the filter string.</p> <p>The string is based on triplets: field op value</p> <p>The field is a lowercase string, with dots and underscores, containing the name of the field the filter applies to; all the fields used in a single query must be included in the list of the authorized fields for the specific request type that is going to be performed, otherwise, an error will be returned. Check below for the list of authorized fields.</p> <p>The op is one of the following (unquoted):</p> Operator Symbol Equal '=' Greater than '&gt;' Greater than or equal to '&gt;=' Less than '&lt;' Less than or equal to '&lt;=' Not equal '&lt;&gt;', '!=' <p>Some additional operators are available to match a string against a Pattern (unquoted), they can't be used on another kind of parameters:</p> Operator Symbol Like 'like', 'LIKE' Not like 'not like', 'NOT LIKE' Contains 'contains', 'CONTAINS' Not contains 'not contains', 'NOT CONTAINS' Starts with 'starts with', 'STARTS WITH' Ends with 'ends with', 'ENDS WITH' <p>The value can be one of the following types:</p> Type Example String 'value' Boolean true, false Int 46 Double 12.34 <p>Additionally, it is possible to check if a field has a value or not, using NULL:</p> Type Value <p>You can combine multiple triplets to compose a more complex filter, using the following boolean operators and using parenthesis to define the order of the composition.</p> Operator Symbol Conjunction 'and', 'AND' Disjunction 'or', 'OR' <p>Here you can find some syntactically-valid queries (the field names used in the examples could not exist in our API):</p> <pre><code>vat_number = '11553420156'\n\nage &lt; 30\n\ncredit &gt;= 123.45\n\ndev = true\n\nsurname is not null\n\nemployer starts with 'Fatture'\n\nname like '%Pier%'\n\nsurname = 'Rossi' and name contains 'Luca'\n\ncity = 'Bergamo' and (age &lt; 30 or (dev = true and (name = 'Giorgio' and surname is not null) or employer starts with 'Fatture'))\n</code></pre> <p>Once the query is composed, it must be URL-encoded before using it in a query; most HTTP frameworks perform this step automatically while composing the request, otherwise, you can use dedicated libraries to apply the encoding explicitly.</p>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#filterable-fields","title":"Filterable fields","text":"<p>Here you can find the list of fields that can be used to filter the result for each List method:</p> Method Fields listClients id, code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, imported, atoka_show, e_invoice, ei_code, created_at, updated_at listSuppliers id, code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, imported, atoka_show, e_invoice, ei_code, created_at, updated_at listProducts id, name, code, net_price, gross_price, net_cost, description, category, notes, in_stock, created_at, updated_at listIssuedDocuments type, entity.id, entity.name, entity.vat_number, entity.tax_code, entity.city, entity.province, entity.country, date, number, numeration, any_subject, amount_net, amount_vat, amount_gross, next_due_date, created_at, updated_at listReceivedDocuments id, type, category, description, entity.id, entity.name, date, next_due_date, amount_gross, amount_net, amount_vat, invoice_number, created_at, updated_at listReceipts date, type, description, rc_center, created_at, updated_at listF24 due_date, status, amount, description listArchiveDocuments date, category, description","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/filter-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>Percent Encoding (also known as URL-encoding)</li> <li>HTTP Request</li> <li>Query string</li> <li>HTML Url Encoding Reference</li> <li>SQL (Structured Query Language)</li> <li>SQL Tutorial</li> <li>Online URL Decoder/Encoder (for testing purposes)</li> </ul>","tags":["basics","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/paginate-results/","title":"Paginate results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that the returned response could be potentially huge, involving a high number of complex resources, making the response difficult to manage and send to your application. For this reason, we paginate the results to make sure responses are easier to handle.</p> <p>In general, asking for a list of resources will result in a paginated response; this means that the resources will be divided into multiple pages, each of those containing a subset of the entire result.</p> <p>Please note that Pagination is strictly related to the Sorting functionality: contiguous pages will always contain contiguous elements with respect to the ordering rules defined through the sort parameter.</p> <p>The pagination parameters are the following, and must be passed in query string:</p> Request parameters Description Info page The page number you want to retrieve. Default: 1 per_page The number of items per page. Default: 50 Max: 100 <p>The response to a paginated request will contain additional information to help you navigate through the list:</p> Response parmeter Description current_page Current page number. last_page Last page number of the list. per_page Number of items per page. from Number of the first item of the current page. to Number of the last item of the current page. total Total number of items. path Current endpoint. first_page_url Link to get the first page of the list. last_page_url Link to get the last page of the list. prev_page_url Link to get the previous page of the list. next_page_url Link to get the next page of the list. <p>Here you can find an example of a request:</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?page=2&amp;per_page=5&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET  https://api-v2.fattureincloud.it/c/{companyId}/received_documents?page=2&amp;per_page=5&amp;type=expense\n</code></pre> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"page\", \"2\");\n            query.Add(\"per_page\", \"5\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"page\", \"2\")\n    values.Add(\"per_page\", \"5\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"page\", \"2\")\n                .addQueryParameter(\"per_page\", \"5\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  page: 2,\n  per_page: 5,\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'page' =&gt; 2,\n  'per_page' =&gt; 5,\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'page': 2,\n    'per_page': 5,\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'page': 2,\n    'per_page': 5,\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  page: \"2\",\n  per_page: \"5\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>:::info It's easier with our SDKs!</p> <p>The SDK methods include the pagination parameters as function arguments, taking care of building the query string for you!</p> <p>:::</p> <p>The example request will retrieve the second page of the expenses list, with a page size of 5 items. An example result could be the following:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": 251,\n      \"type\": \"expense\",\n      \"description\": \"Catene auto\",\n      \"amount_net\": 68.03,\n      \"amount_vat\": 14.97,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 109,\n        \"name\": \"Catene e catenacci S.r.l.\"\n      },\n      \"date\": \"2013-12-23\",\n      \"next_due_date\": \"2013-12-23\",\n      \"amount_gross\": 83\n    },\n    {\n      \"id\": 104328,\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Telefonica\",\n      \"amount_net\": 20,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 35,\n        \"name\": \"Maracaibo Mobile S.p.a.\"\n      },\n      \"date\": \"2014-08-01\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 20\n    },\n    {\n      \"id\": 134828,\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\",\n      \"amount_net\": 592,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": -1,\n        \"name\": \"Hotel Paradiso\"\n      },\n      \"date\": \"2014-10-29\",\n      \"next_due_date\": \"2014-10-29\",\n      \"amount_gross\": 592\n    },\n    {\n      \"id\": 134830,\n      \"type\": \"expense\",\n      \"description\": \"SmartPhone Y\",\n      \"amount_net\": 130,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 130\n    },\n    {\n      \"id\": 134832,\n      \"type\": \"expense\",\n      \"description\": \"BestBook Pro 2020\",\n      \"amount_net\": 430,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-05-29\",\n      \"next_due_date\": \"2014-05-29\",\n      \"amount_gross\": 430\n    }\n  ],\n  \"current_page\": 2,\n  \"last_page\": 67,\n  \"per_page\": \"5\",\n  \"from\": 6,\n  \"to\": 10,\n  \"total\": 335,\n  \"path\": \"https://api-v2.fattureincloud.it/received_documents\",\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\",\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=67\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=3\",\n  \"prev_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\"\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","pagination","chunks","page","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/paginate-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>REST API Design: Filtering, Sorting, and Pagination</li> </ul>","tags":["basics","additional capabilities","customize","optional","pagination","chunks","page","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/","title":"Sort Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Some of our APIs (e.g. the LIST methods) return a set of resources instead of a single one. This means that a certain order is established between them and that your application could take advantage of a certain order.</p> <p>Sorting lets you choose the rule that must be used to order the returned resources, delegating this task to our APIs.</p> <p>:::warning Check the fields!</p> <p>Our APIs let you apply an ordering rule only on a certain set of fields. Please check the table below for the available fields for each method.</p> <p>:::</p> <p>To order the returned resources, all you have to do is to add the sort parameter to the query string, containing a comma-separated set of the fields that define the sorting rule. The default order for each field is the ascending order, which doesn't require any prefix, while the descending order can be selected by adding the prefix \"-\" to the field name.</p> <p>For example, this request will sort all the expenses first by the \"date\" field in descending order and then by the \"amount_net\" field in ascending order.</p> <pre><code>curl --request GET \\\n     --url 'https://api-v2.fattureincloud.it/c/company_id/received_documents?sort=-date,amount_net&amp;type=expense' \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n</code></pre> <pre><code>GET https://api-v2.fattureincloud.it/c/{companyId}/received_documents?sort=-date,amount_net&amp;type=expense\n</code></pre> <p>The corresponding code examples:</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as a string, but you should have obtained it in the previous steps\n            // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n            var token = \"YOUR_ACCESS_TOKEN\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 17;\n\n            var query = System.Web.HttpUtility.ParseQueryString(string.Empty);\n            query.Add(\"sort\", \"-date,amount_net\");\n            query.Add(\"type\", \"expense\");\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/received_documents\" + \"?\" + query;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    var bearer = \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJtUm80MXlpSVFTbHN0bXRadG5jNEZhYk5QaW41ejJmdiIsImV4cCI6MTY2MjU1NDg5NX0.bvYHc9et0p9lsaTIWGX8vGqE6uHKiwBPyQlXwZqIH3o\"\n\n    values := url.Values{}\n    values.Add(\"sort\", \"-date,amount_net\")\n    values.Add(\"type\", \"expense\")\n    query := values.Encode()\n\n    companyId := \"2\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/received_documents?\" + query\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", bearer)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as a string, but you should have obtained it in the previous steps\n        // the token is valid for the \"received_documents:r\" scope needed to perform this operation\n        String token = \"YOUR_ACCESS_TOKEN\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/received_documents\")\n                .addQueryParameter(\"sort\", \"-date,net_amount\")\n                .addQueryParameter(\"type\", \"expense\")\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  sort: \"-date,net_amount\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/received_documents\" + query,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nrequire 'vendor/autoload.php';\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\n$token = 'YOUR_ACCESS_TOKEN';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n\n$client = new Client();\n\n$params = array(\n  'sort' =&gt; '-date,amount_net',\n  'type' =&gt; 'expense'\n);\n\n$query = http_build_query($params); // url-encoded query string\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/received_documents\". '?' . $query;\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    echo $response-&gt;getBody();\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code># pip install requests\nimport requests\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 2\n\nparams = {\n    'sort': '-date,net_amount',\n    'type': 'expense'\n}\nheaders = { 'authorization': \"Bearer \" + token }\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/received_documents\", params=params, headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as a string, but you should have obtained it in the previous steps\n# the token is valid for the \"received_documents:r\" scope needed to perform this operation\ntoken = \"YOUR_ACCESS_TOKEN\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\n\nparams = {\n    'sort': '-date,net_amount',\n    'type': 'expense'\n}\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/received_documents\")\nuri.query = URI.encode_www_form(params)\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\n// the token is valid for the \"received_documents:r\" scope needed to perform this operation\nvar token = \"YOUR_ACCESS_TOKEN\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\n\nvar params = {\n  sort: \"-date,net_amount\",\n  type: \"expense\",\n};\n\nvar query = new URLSearchParams(params).toString(); // url-encoded query string\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/received_documents?\" +\n      query,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>Here you can find an example response, please note that sorting is strictly related to the Pagination functionality:</p> <pre><code>{\n  \"data\": [\n    {\n      \"id\": 251,\n      \"type\": \"expense\",\n      \"description\": \"Catene auto\",\n      \"amount_net\": 68.03,\n      \"amount_vat\": 14.97,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 109,\n        \"name\": \"Catene e catenacci S.r.l.\"\n      },\n      \"date\": \"2021-12-23\",\n      \"next_due_date\": \"2013-12-23\",\n      \"amount_gross\": 83\n    },\n    {\n      \"id\": 104328,\n      \"type\": \"expense\",\n      \"description\": \"Ricarica Telefonica\",\n      \"amount_net\": 20,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 35,\n        \"name\": \"Maracaibo Mobile S.p.a.\"\n      },\n      \"date\": \"2021-08-01\",\n      \"next_due_date\": \"1970-01-01\",\n      \"amount_gross\": 20\n    },\n    {\n      \"id\": 134828,\n      \"type\": \"expense\",\n      \"description\": \"Soggiorno di lavoro\",\n      \"amount_net\": 592,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": -1,\n        \"name\": \"Hotel Paradiso\"\n      },\n      \"date\": \"2014-10-29\",\n      \"next_due_date\": \"2020-10-29\",\n      \"amount_gross\": 592\n    },\n    {\n      \"id\": 134830,\n      \"type\": \"expense\",\n      \"description\": \"SmartPhone Y\",\n      \"amount_net\": 130,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"2020-09-01\",\n      \"amount_gross\": 130\n    },\n    {\n      \"id\": 134832,\n      \"type\": \"expense\",\n      \"description\": \"BestBook Pro 2020\",\n      \"amount_net\": 430,\n      \"amount_vat\": 0,\n      \"is_marked\": false,\n      \"entity\": {\n        \"id\": 14542,\n        \"name\": \"Pear Inc.\"\n      },\n      \"date\": \"2014-04-16\",\n      \"next_due_date\": \"2020-05-29\",\n      \"amount_gross\": 430\n    }\n  ],\n  \"current_page\": 2,\n  \"last_page\": 67,\n  \"per_page\": \"5\",\n  \"from\": 6,\n  \"to\": 10,\n  \"total\": 335,\n  \"path\": \"https://api-v2.fattureincloud.it/received_documents\",\n  \"first_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\",\n  \"last_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=67\",\n  \"next_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=3\",\n  \"prev_page_url\": \"https://api-v2.fattureincloud.it/received_documents?per_page=5&amp;type=expense&amp;fieldset=basic&amp;page=1\"\n}\n</code></pre>","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/#sortable-fields","title":"Sortable fields","text":"<p>Here you can find the list of fields that can be used to order the result for each List method; for every field, it is possible to use the ascending or descending order.</p> Method Fields listClients code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, e_invoice, ei_code, created_at, updated_at listSuppliers code, name, type, vat_number, tax_code, address_street, address_postal_code, address_city, address_province, country, email, certified_email, phone, fax, notes, e_invoice, ei_code, created_at, updated_at listProducts name, code, net_price, gross_price, net_cost, description, category, notes, in_stock, created_at, updated_at listIssuedDocuments entity.id, entity.name, entity.vat_number, entity.tax_code, entity.city, entity.province, entity.country, date, number, numeration, amount_net, amount_vat, amount_gross, next_due_date, created_at, updated_at listReceivedDocuments id, category, entity.id, entity.name, date, next_due_date, amount_gross, amount_net, amount_vat, created_at, updated_at listReceipts date, rc_center, created_at, updated_at listF24 due_date, status, amount, description listArchiveDocuments date, category, description","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"basics/additional-capabilities/sort-results/#additional-resources","title":"Additional Resources","text":"<ul> <li>Descending Order VS Ascending Order \u2013 What Does it Mean?</li> <li>REST API Design: Filtering, Sorting, and Pagination</li> </ul>","tags":["basics","additional capabilities","customize","optional","sort","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"legal/","title":"Legal","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Here you can find all the legal resources needed to integrate your app with TSE in Cloud.</p>","tags":["legal"]},{"location":"legal/marketing-resources-and-identity-guidelines/","title":"Marketing Resources and Identity Guidelines","text":"<p>In this page you will find useful resources for marketing and promoting your apps that work with TSE in Cloud.</p> <p>Before you proceed reading this guide download our TSE in Cloud Brand Kit, it contains all the resources we will talk about in the next sections.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#tse-in-cloud-badge","title":"TSE in Cloud Badge","text":"<p>Include TSE in Cloud badge in all digital and printed marketing materials as a clear call to action to get your app on the TSE in Cloud App Store.</p> <p>Remember:</p> <ul> <li>Use the badges as provided. The badge artwork should not be modified.</li> <li>Use the preferred blue badge in all marketing communications promoting your app.</li> <li>The alternative light badge is designed to give you greater versatility and can be used when the preferred blue badge appears visually heavy in the layout or difficult to insert. The alternative badge is suitable when it complements the colors used in the layout.</li> <li>There must be clear space surrounding the badge equal to one-quarter the height of the badge.</li> <li>The badge must be large enough that all of the text is legible.</li> <li>The TSE in Cloud badge should be the same size or larger than other application store badges.</li> <li>Badges must be shown on a solid colored background or a simple background image that does not obscure the badge.</li> <li>Any online use of the badge must link to the public page of the app on TSE in Cloud App Store.</li> <li>The badge can only be used to promote content available on TSE in Cloud App Store.</li> <li>Use of the TSE in Cloud badge must be reviewed and approved by the TSE in Cloud Marketing team if the badge will be in:</li> <li>a national or international TV commercial;</li> <li>an out-of-home marketing campaign;</li> <li>a marketing campaign that will count over 1 million impressions.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#preferred-badge","title":"Preferred badge","text":"<p>We provide two formats of the preferred badge, PNG and SVG, you can find them in the Badge/Preferred badge folder in the TSE in Cloud Brand Kit, for each format we also provide two different sizes.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#alternative-badge","title":"Alternative badge","text":"<p>We provide two formats of the alternative badge, PNG and SVG, you can find them in the Badge/Alternative badge folder in the TSE in Cloud Brand Kit, for each format we also provide two different sizes.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#tse-in-cloud-login-and-connect-buttons","title":"TSE in Cloud Login and Connect Buttons","text":"<p>You can use TSE in Cloud API to:</p> <ul> <li>connect your app to a customer's account</li> <li>login on your app with TSE in Cloud credentials</li> </ul> <p>We provide you with two specific buttons in two different styles.</p> <p>Remember:</p> <ul> <li>Use the buttons as provided. Never alter the buttons.</li> <li>Use the preferred blue buttons on your site.</li> <li>The alternative light buttons are designed to give you greater versatility and can be used when the preferred blue buttons appear visually heavy in the layout or difficult to insert. The alternative buttons are suitable when it complements the colors used in the layout.</li> <li>There must be clear space surrounding the buttons equal to the height of the buttons.</li> <li>Never use the buttons on ads or to promote your app. Buttons are meant to be function-only content. Use the badge instead.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#login-button","title":"Login Button","text":"<p>The login button shows the text Accedi con TSE in Cloud and you can find it in two versions, Preferred and Alternative, each version comes in two formats, PNG and SVG, and two different sizes, you can find them under the Button/Login folder in the TSE in Cloud Brand Kit.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#connect-button","title":"Connect Button","text":"<p>The connect button shows the text Connetti con TSE in Cloud and you can find it in two versions, Preferred and Alternative, each version comes in two formats, PNG and SVG, and two different sizes, you can find them under the Button/Connect folder in the TSE in Cloud Brand Kit.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#communication-ads-style","title":"Communication, Ads &amp; Style","text":"<p>When promoting your app, your headline and copy should focus on your app, not on TSE in Cloud features and plus. Use clear, simple messaging. Always include a call to action to find your app on TSE in Cloud App Store.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#referring-to-tse-in-cloud","title":"Referring to TSE in Cloud","text":"<p>Use TSE in Cloud in a referential phrase to indicate that your app is compatible with the software.</p> <p>Example:</p> <ul> <li>\u00a0 \u201capp name\u201d for TSE in Cloud or \u201capp name\u201d integrated with TSE in Cloud;</li> <li>\u00a0 TSE in Cloud \u201capp name\u201d.</li> </ul>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/marketing-resources-and-identity-guidelines/#spelling-and-language","title":"Spelling and Language","text":"<p>Always use the correct names with the correct capitalization:</p> <ul> <li>TSE in Cloud</li> <li>TSE in Cloud App Store</li> </ul> <p>Never typeset names using all uppercase letters.</p>","tags":["legal","marketing","logo","badge","button","login","connect","resources","identity","guidelines","brand"]},{"location":"legal/policy-acceptable-use/","title":"Policy di Acceptable Use","text":"<p>Le seguenti norme, cos\u00ec come le condizioni generali di utilizzo API MadBit, regolano l'utilizzo delle API dei software di titolarit\u00e0 di MadBit Entertainment S.r.l. a socio unico.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#1-identificazione","title":"1. Identificazione","text":"<p>Per accedere ai dati degli utenti di MadBit \u00e8 necessario fornire agli stessi ed a MadBit informazioni chiare e accurate sull'utilizzo che si far\u00e0 degli stessi e delle API; ci\u00f2 include, a titolo esemplificativo:</p> <ul> <li>Chi richiede i dati?\u00a0Tutte le richieste di autorizzazione devono rappresentare accuratamente l'identit\u00e0 dell'applicativo integrato che cerca di accedere ai dati dell'utente.\u00a0Se hai ottenuto le chiavi dell\u2019utente per accedere ai servizi API di MadBit, mantieni queste chiavi riservate.</li> <li>Quali dati vengono richiesti?\u00a0\u00c8 necessario fornire informazioni chiare e accurate che spieghino i tipi di dati richiesti.\u00a0\u00c8 necessario mantenere costantemente aggiornata la privacy policy e chiedere all'utente di acconsentire a qualsiasi modifica si voglia apportare alla tipologia di dati trattati o al trattamento stesso prima di porlo in essere.</li> <li>Perch\u00e9 vengono richiesti i dati utente?\u00a0\u00c8 richiesta trasparenza con gli utenti quando viene spiegato lo scopo per cui l\u2019applicativo integrato richiede i dati utente ed \u00e8 vietato l\u2019utilizzo degli stessi per scopi ulteriori. In generale, gli utenti dovrebbero essere in grado di comprendere prontamente il valore di fornire i dati richiesti dall'applicativo integrato nonch\u00e9 le conseguenze della condivisione di tali dati con l'applicativo integrato.</li> </ul>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#2-trasparenza-e-privacy-policy","title":"2. Trasparenza e Privacy Policy","text":"<p>\u00c8 necessario pubblicare un'informativa sulla privacy che documenti completamente il modo in cui l\u2019applicativo integrato interagisce con i dati dell'utente. \u00c8 necessario rendere disponibile tale informativa quando l'applicazione viene resa disponibile al pubblico.</p> <p>L\u2019informativa deve essere accurata, completa e facilmente accessibile.; descrivendo in modo preciso il modo in cui l\u2019applicativo integrato accede, utilizza, archivia o condivide i dati utente. </p> <p>Prima di modificare il modo in cui l\u2019applicativo integrato utilizza i dati utente \u00e8 obbligatorio chiedere sempre l\u2019assenso dell\u2019utente.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#3-minimizzazione-e-adeguatezza","title":"3. Minimizzazione e adeguatezza","text":"<p>Le richieste di autorizzazione devono essere limitate alle sole informazioni necessarie per implementare l'applicativo integrato.</p> <p>Non va richiesto l'accesso a informazioni superflue e/o che non servono; l'accesso deve essere circoscritto all'ambito di accesso minimo e tecnicamente necessario per implementare funzionalit\u00e0 o servizi esistenti nell'applicativo integrato e l'accesso limitato alla quantit\u00e0 minima di dati necessari. </p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#4-uso-ingannevole","title":"4. Uso ingannevole","text":"<p>\u00c8 severamente vietato intraprendere qualsiasi attivit\u00e0 che possa ingannare gli utenti o MadBit in merito all'utilizzo delle API di MadBit.\u00a0Ci\u00f2 include, a titolo esemplificativo, i seguenti requisiti:</p> <ul> <li>Chiarezza su quali dati vengono raccolti e cosa viene fatto con essi. \u00c8 necessario rendere noti tutti i dati utente ai quali si accede, che si utilizza, memorizza, elimina o che vengono condivisi, nonch\u00e9 qualsiasi azione intrapresa per conto di un utente. Non \u00e8 consentito accedere, aggregare o analizzare i dati degli utenti di MadBit con il fine di visualizzarli, venderli o distribuirli in altro modo a terze parti. Nel complesso, non dovrebbero esserci sorprese per gli utenti di MadBit: funzionalit\u00e0 nascoste, servizi o azioni non coerenti con lo scopo commercializzato dell\u2019applicativo integrato potrebbero indurre MadBit ad interdire l\u2019accesso e l\u2019utilizzo delle API</li> <li>Divieto di utilizzo di API non documentate senza espressa autorizzazione. \u00c8 vietato il reverse engineering delle API di MadBit non documentate o tentare in altro modo di derivare o utilizzare il codice sorgente sottostante alle API di MadBit non documentate.\u00a0</li> <li>\u00c8 vietato rilasciare dichiarazioni false o fuorvianti sull\u2019identit\u00e0 di chi gestisce l\u2019applicativo integrato. \u00c8 necessario rappresentare accuratamente l'azienda, l'organizzazione o la persona che gestisce l'applicazione.\u00a0Fornire false dichiarazioni sulla propria identit\u00e0 a MadBit o agli utenti di MadBit \u00e8 motivo di interdizione all\u2019accesso e utilizzo delle API.</li> </ul>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#5-sicurezza","title":"5. Sicurezza","text":"<p>\u00c8 necessario adottare misure ragionevoli e appropriate per proteggere tutte le applicazioni o i sistemi che utilizzano le API di MadBit contro l'accesso, l'uso, la distruzione, la perdita, l'alterazione o la divulgazione non autorizzati o illegali.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#6-divieti-di-utilizzo","title":"6. Divieti di utilizzo","text":"<p>\u00c8 vietato utilizzare i dati delle API di MadBit per scopi pubblicitari, inclusa la pubblicit\u00e0 personalizzata, re-targeting e basata sugli interessi e la misurazione della pubblicit\u00e0.</p> <p>\u00c8 vietato utilizzare le API di MadBit per creare, addestrare o migliorare (direttamente o indirettamente) un prodotto o servizio simile o concorrente ad un software di titolarit\u00e0 di MadBit.</p> <p>\u00c8 vietato accedere, memorizzare nella cache, copiare, analizzare o eseguire qualsiasi azione che coinvolga i dati dell'utente a meno che non sia espressamente consentito dall\u2019utente stesso.</p> <p>\u00c8 vietato effettuare attacchi informatici di ogni tipo verso le API di MadBit.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#7-limiti-di-utilizzo","title":"7. Limiti di utilizzo","text":"<p>\u00c8 necessario sviluppare l\u2019applicativo tenendo conto dei limiti di utilizzo specificati nella documentazione API. MadBit si riserva la possibilit\u00e0 di modificare questi limiti a propria discrezione.</p> <p>Il reiterato superamento di questi limiti \u00e8 motivo di interdizione all\u2019accesso e utilizzo delle API.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/policy-acceptable-use/#8-marchi-e-segni-distintivi","title":"8. Marchi e segni distintivi","text":"<p>\u00c8 possibile utilizzare il logo o i segni distintivi di MadBit e dei software di sua titolarit\u00e0 solo come prescritto nelle\u00a0Brand Guidelines for FICdevs disponibili all\u2019interno dell\u2019area riservata allo Sviluppatore.</p>","tags":["legal","policy","acceptable use"]},{"location":"legal/terms/","title":"Condizioni generali di utilizzo delle API MadBit","text":"","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#definizioni","title":"Definizioni","text":"<p>Nelle presenti CONDIZIONI GENERALI DI CONTRATTO (il \u201cContratto\u201d) i termini e le espressioni di seguito elencati, quando riportati con iniziale maiuscola, devono intendersi con il significato ad essi attribuito nel presente paragrafo. I termini indicati al singolare si intendono anche al plurale e viceversa.</p> <p>API: indica le application programming interface pubblicamente disponibili relative a uno o pi\u00f9 Software e che espongono determinate funzionalit\u00e0 di questi ultimi, allo scopo di consentire a soggetti terzi di sviluppare soluzioni applicative interoperabili con i Software cui le API si riferiscono.</p> <p>Applicativo Integrato: indica il software applicativo realizzato dallo Sviluppatore e integrato con il Software attraverso le API.</p> <p>Codice di Condotta Anti-Corruzione: significa il codice di condotta anti-corruzione adottato dal Gruppo TeamSystem e consultabile al sito teamsystem.com.</p> <p>Codice Etico: significa il codice etico adottato dal Gruppo TeamSystem e consultabile al sito teamsystem.com.</p> <p>Comunicazione di Ritiro: ha il significato di cui al paragrafo 10.2.</p> <p>Dati Personali: ha il significato di cui all\u2019art. 4, n. 1 del Regolamento (UE) 2016/679 (\u201cGDPR\u201d).</p> <p>Documentazione: indica la documentazione tecnica e le istruzioni relative all\u2019utilizzo delle API.</p> <p>Gruppo TeamSystem: indica la societ\u00e0 TeamSystem S.p.A. (con C.F. e P. IVA n. 01035310414) e tutte le societ\u00e0 direttamente o indirettamente controllate da, o collegate a, TeamSystem S.p.A. ai sensi dell\u2019art. 2359 c.c.</p> <p>Licenza: ha il significato di cui al paragrafo 2.1. </p> <p>Madbit: significa la societ\u00e0 TeamSystem S.p.A. societ\u00e0 con socio unico soggetta all\u2019attivit\u00e0 di direzione e coordinamento di TeamSystem Holdco S.p.A.(C.F. e P. IVA n. 03881520161), con sede in Sede Legale e Amministrativa: Via Sandro Pertini, 88 - 61122 Pesaro (PU) , titolare del Software cui le API si riferiscono.</p> <p>Normativa sulla Protezione dei Dati Personali: indica, congiuntamente, il GDPR, il d.lgs. 196/2003 e successive modifiche e i provvedimenti delle autorit\u00e0 competenti in materia.</p> <p>Nuovo Prodotto: ha il significato di cui al paragrafo 10.2.</p> <p>Parti: indica, congiuntamente, Madbit e lo Sviluppatore.</p> <p>Policy di Acceptable Use: indica la policy di acceptable use delle API contenente le specifiche normative tecniche di utilizzo delle API, allegata al presente Contratto e sempre consultabile all\u2019interno dell\u2019area riservata allo Sviluppatore, che lo Sviluppatore dichiara espressamente di aver visionato e di accettare e che costituisce parte integrante del Contratto. Madbit si riserva il diritto di modificare in qualsiasi momento e senza alcun preavviso la Policy di Acceptable use a cui lo Sviluppatore dovr\u00e0 tempo per tempo attenersi. </p> <p>Prodotto Obsoleto: ha il significato di cui al paragrafo 10.2.</p> <p>Propriet\u00e0 Intellettuale: indica ogni diritto di propriet\u00e0 intellettuale e/o industriale, registrato o non registrato, in tutto o in parte, ovunque nel mondo, quali - a titolo esemplificativo e non esaustivo - marchi, brevetti, modelli di utilit\u00e0, disegni e modelli, nomi a dominio, know-how, opere coperte dal diritto d\u2019autore, database e software (ivi inclusi, ma non limitatamente a, le sue derivazioni, il codice sorgente, il codice oggetto e le interfacce).</p> <p>Software: indica il software applicativo di titolarit\u00e0 di Madbit cui le API si riferiscono.</p> <p>Sviluppatore: indica il soggetto che sottoscrive il presente Contratto.</p> <p>Utenti Finali: indica i clienti finali dello Sviluppatore e licenziatari degli Applicativi Integrati. </p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#1-ambito-di-applicazione","title":"1. Ambito di applicazione","text":"<p>1.1. Oggetto del Contratto. Il presente Contratto disciplina i termini e le condizioni applicabili al rapporto tra Madbit e lo Sviluppatore avente ad oggetto l\u2019utilizzo delle API da parte dello Sviluppatore, per finalit\u00e0 di sviluppo di Applicativi Integrati.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#2-licenza-duso-delle-api-e-obblighi-dello-sviluppatore","title":"2. Licenza d\u2019uso delle API e obblighi dello Sviluppatore","text":"<p>2.1. Licenza d\u2019uso delle API. Con il presente Contratto Madbit concede allo Sviluppatore una licenza d\u2019uso non esclusiva, non cedibile, non sub-licenziabile, temporanea e revocabile delle API e della relativa Documentazione, al solo e limitato scopo di consentire allo Sviluppatore di utilizzare le API e la Documentazione per realizzare Applicativi Integrati (\u201cLicenza\u201d). Lo Sviluppatore \u00e8 inoltre consapevole che la Licenza d\u2019uso delle API concessa con il Contratto non si estende anche al Software cui l\u2019API si riferisce.</p> <p>2.2. Limitazioni d\u2019uso. Lo Sviluppatore si impegna a utilizzare le API nei limiti della Licenza, in conformit\u00e0 alle normative tempo per tempo applicabili e nei limiti della Policy di Acceptable Use. Lo Sviluppatore \u00e8 consapevole che ogni utilizzo delle API per finalit\u00e0 diverse da quelle contemplate al paragrafo 2.1 \u00e8 severamente vietato e legittimer\u00e0 Madbit alla risoluzione del Contratto in conformit\u00e0 al successivo paragrafo 8.1, fermo restando il risarcimento del danno.</p> <p>2.3. Requisiti tecnici e di sicurezza. Lo Sviluppatore si impegna a utilizzare le API nel rispetto dei requisiti tecnici e di sicurezza di cui alla Policy di Acceptable Use nonch\u00e9 quelli presenti nella documentazione o che saranno indicati tempo per tempo da Madbit. Su richiesta di Madbit, lo Sviluppatore fornir\u00e0 a Madbit tutte le informazioni, i dati e le prove relative al rispetto dei predetti requisiti tecnici e di sicurezza. In generale, le attivit\u00e0 di sviluppo ed erogazione agli Utenti Finali degli Applicativi Integrati da parte dello Sviluppatore dovranno essere svolte in modo da evitare qualunque azione, o da prevenire qualunque omissione, che possa danneggiare o alterare il funzionamento dei Software e/o dell\u2019infrastruttura informatica su cui questi risiedono, o che possa comportare la perdita o il danneggiamento di dati e/o di informazioni del Gruppo TeamSystem o di terzi, ivi inclusi senza limitazione gli Utenti Finali.</p> <p>2.4. Aggiornamenti. Madbit si riserva il diritto di apportare aggiornamenti e modifiche alle API e/o ai Software in qualsiasi momento e a propria esclusiva discrezione. Fermo restando quanto precede, qualora le modifiche siano suscettibili di impattare sul corretto funzionamento degli Applicativi Integrati, Madbit comunicher\u00e0 allo Sviluppatore il rilascio previsto di aggiornamenti e modifiche alle API e/o ai Software con anticipo adeguato rispetto alla modifica da apportare allo scopo di consentire allo Sviluppatore di adeguare tempestivamente gli Applicativi Integrati. Resta inteso che ogni tempestiva modifica e aggiornamento degli Applicativi Integrati, anche eventualmente in conseguenza di quanto previsto al paragrafo 10.2, spetter\u00e0 esclusivamente allo Sviluppatore, restando espressamente esclusa qualsiasi responsabilit\u00e0 di Madbit in tal senso.</p> <p>2.5. Assistenza. Madbit si impegna a mettere a disposizione dello Sviluppatore un servizio di Assistenza esclusivamente relativo alle API, in conformit\u00e0 alle tempistiche e alle modalit\u00e0 pubblicate sul sito internet di Madbit. Lo Sviluppatore prende atto ed accetta che il servizio di assistenza verr\u00e0 erogato esclusivamente da remoto.</p> <p>2.6. Accordi con gli Utenti Finali. Lo Sviluppatore sar\u00e0 esclusivo responsabile del rapporto con gli Utenti Finali con riferimento agli Applicativi Integrati, ivi inclusa senza limitazioni la relativa contrattualizzazione. Lo Sviluppatore assume pertanto direttamente ogni responsabilit\u00e0 per condotte da parte degli Utenti Finali che possano comportare la violazione di quanto previsto nel presente Contratto o, comunque, arrecare danno a Madbit e/o a qualsiasi altra societ\u00e0 appartenente al Gruppo TeamSystem. Lo Sviluppatore accetta inoltre che gli Applicativi Integrati potranno essere distribuiti, concessi in licenza e/o comunque messi a disposizione esclusivamente a favore di Utenti Finali che utilizzeranno l\u2019Applicativo Integrato esclusivamente nell\u2019ambito della propria attivit\u00e0 imprenditoriale, artigianale, commerciale o professionale, con espressa esclusione dei soggetti qualificabili come consumatori in conformit\u00e0 alla normativa tempo per tempo applicabile.</p> <p>2.7. Poteri e destinazione d\u2019uso. Lo Sviluppatore dichiara di (a) avere tutti i diritti e poteri necessari per concludere e dare esecuzione piena ed efficace al Contratto, e di (b) voler utilizzare le API e la relativa Documentazione nell\u2019ambito della propria attivit\u00e0 imprenditoriale, artigianale, commerciale o professionale e che, pertanto, non si applicano nei suoi confronti le disposizioni della normativa tempo per tempo applicabile a tutela dei consumatori.</p> <p>2.8. Dipendenti e collaboratori. Lo Sviluppatore si impegna a far s\u00ec che le disposizioni del Contratto siano rispettate anche dai propri dipendenti e/o collaboratori. Anche ai sensi dell\u2019art. 1381 c.c., lo Sviluppatore \u00e8 considerato esclusivo responsabile dell\u2019operato di tali soggetti e garantisce altres\u00ec il rispetto di tutte le normative applicabili, ivi incluse quelle in materia fiscale e civile.</p> <p>2.9. Utilizzi vietati. \u00c8 fatto espresso divieto allo Sviluppatore di utilizzare le API al fine di depositare, conservare, inviare, pubblicare, trasmettere e/o condividere dati, applicazioni o documenti informatici (o di consentire a terzi, ivi inclusi gli Utenti Finali, di depositare, conservare, inviare, pubblicare, trasmettere e/o condividere) che: (a) siano in contrasto o violino i diritti di Propriet\u00e0 Intellettuale di titolarit\u00e0 di Madbit e/o di terzi; (b) abbiano contenuti discriminatori, diffamatori, calunniosi o minacciosi; (c) contengano materiali pornografico, pedopornografico, osceno o comunque contrario alla pubblica morale; (d) contengano virus, malware, worm, trojan horse o, comunque, altri elementi informatici di contaminazione o distruzione; (e)    costituiscano attivit\u00e0 di spamming, phishing e/o simili; (f)    siano in ogni caso in contrasto con le disposizioni normative e/o regolamentari applicabili.</p> <p>2.10. Partner. Madbit, nell\u2019adempiere alle proprie obbligazioni di cui al Contratto, potr\u00e0 avvalersi, a propria insindacabile discrezione, della cooperazione tecnica, organizzativa e commerciale di propri partner, ai quali potr\u00e0 affidare la prestazione di alcune o tutte le attivit\u00e0 elencate nel presente Contratto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#3-proprieta-intellettuale","title":"3. Propriet\u00e0 Intellettuale","text":"<p>3.1. Propriet\u00e0 Intellettuale sulle API e sui Software. Tutti i diritti di Propriet\u00e0 Intellettuale sulle API, sui relativi Software e sulla Documentazione sono e rimangono di esclusiva titolarit\u00e0 di Madbit e/o di altra societ\u00e0 appartenente al Gruppo TeamSystem. Fatti salvi i limitati diritti concessi allo Sviluppatore a titolo di Licenza, nulla nel presente Contratto pu\u00f2 essere inteso o interpretato quale cessione, totale o parziale, di alcun diritto sulle API e sui relativi Software.</p> <p>3.2. Utilizzo delle API e diritti di terzi. Lo Sviluppatore si impegna ad utilizzare le API e la Documentazione esclusivamente per le finalit\u00e0 di cui al presente Contratto e nel pieno rispetto dei diritti di Propriet\u00e0 Intellettuale del Gruppo TeamSystem e/o di terzi. In particolare, lo Sviluppatore garantisce di essere in possesso di tutti i diritti e le autorizzazioni per il lecito sviluppo degli Applicativi Integrati e che questi ultimi (ivi incluso il relativo utilizzo da parte degli Utenti Finali) non violeranno, nemmeno in parte, diritti di Propriet\u00e0 Intellettuale del Gruppo TeamSystem e/o di terzi.</p> <p>3.3. Rinuncia alla contestazione. Lo Sviluppatore rinuncia irrevocabilmente e definitivamente a contestare, in qualunque sede, la validit\u00e0 e la titolarit\u00e0 dei diritti di Propriet\u00e0 Intellettuale di Madbit e/o di altra societ\u00e0 appartenente al Gruppo TeamSystem sulle API, sui relativi Software e sulla Documentazione.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#4-manleva","title":"4. Manleva","text":"<p>4.1. Obbligo di manleva. Lo Sviluppatore si impegna a manlevare e tenere indenne Madbit e/o ciascuna societ\u00e0 appartenente al Gruppo TeamSystem in relazione a qualsiasi danno (diretto o indiretto), spesa, costo e/o onere che Madbit e/o ciascuna societ\u00e0 appartenente al Gruppo TeamSystem dovessero subire o sopportare in conseguenza dell\u2019inadempimento o del non corretto adempimento, da parte dello Sviluppatore, anche a solo una delle seguenti previsioni di cui al Contratto: 2.2, 2.3, 2.6, 2.9 (Obblighi dello Sviluppatore), 3 (Propriet\u00e0 Intellettuale), 5 (Responsabilit\u00e0), 12 (Riservatezza) .</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#5responsabilita","title":"5.Responsabilit\u00e0","text":"<p>5.1. Limitazione generale di responsabilit\u00e0. Madbit, salvo il caso di dolo o colpa grave, non potr\u00e0 essere ritenuta responsabile per danni diretti o indiretti, di qualsiasi natura ed entit\u00e0, che dovessero derivare allo Sviluppatore e/o agli Utenti Finali e/o a terzi in conseguenza dell\u2019uso (o del mancato uso) delle API e della Documentazione, ovvero per il relativo uso non conforme a quanto previsto dal Contratto e/o dalle leggi vigenti.</p> <p>5.2. Adeguatezza allo scopo. Madbit non rilascia dichiarazioni e garanzie espresse o implicite sul fatto che le API, la Documentazione e i Software siano adatti a soddisfare le esigenze dello Sviluppatore e/o degli Utenti Finali, che siano esenti da errori o che abbiano funzionalit\u00e0 non previste nelle specifiche tecniche e nella Documentazione.</p> <p>5.3. Responsabilit\u00e0 in relazione agli Applicativi Integrati. Fermo restando quanto previsto al paragrafo 6, Madbit \u00e8 del tutto estranea al rapporto tra lo Sviluppatore e l\u2019Utente Finale con riferimento all\u2019utilizzo degli Applicativi Integrati. Madbit, pertanto, non potr\u00e0 in alcun modo essere ritenuta responsabile in conseguenza dell\u2019uso o del mancato uso degli Applicativi Integrati da parte dell\u2019Utente Finale e/o, in generale, di qualsiasi danno, diretto o indiretto, spesa, costo e/o onere subito o sopportato da ciascun Utente Finale in conseguenza di eventuali malfunzionamenti degli Applicativi Integrati. </p> <p>5.4. Software e funzionamento degli Applicativi Integrati. Lo Sviluppatore \u00e8 consapevole che l\u2019esistenza di un valido diritto dell\u2019Utente Finale a utilizzare i Software, cui le API che consentono l\u2019interoperabilit\u00e0 con gli Applicativi Integrati si riferiscono, costituisce presupposto inderogabile per il corretto funzionamento degli Applicativi Integrati medesimi. Madbit non assume pertanto alcuna responsabilit\u00e0 in relazione all\u2019impossibilit\u00e0 di fruizione degli Applicativi Integrati da parte degli Utenti Finali derivanti dall\u2019assenza di un valido diritto di questi ultimi a utilizzare i relativi Software.</p> <p>5.5. Incidenti di sicurezza. Madbit, fatti salvi gli inderogabili limiti di legge, non potr\u00e0 in nessun caso essere ritenuta responsabile per qualsiasi danno (diretto o indiretto), costo, perdita e/o spesa che lo Sviluppatore e/o gli Utenti Finali e/o terzi dovessero subire in conseguenza di attacchi informatici, attivit\u00e0 di\u00a0hacking\u00a0e, in generale, accessi abusivi e non autorizzati da parte di terzi agli Applicativi Integrati, alle API, ai Software e all\u2019infrastruttura informatica su cui questi risiedono, dai quali possano derivare, senza pretesa di esaustivit\u00e0, le seguenti conseguenze: (i) mancata fruizione degli Applicativi Integrati; (ii) perdite di dati di titolarit\u00e0 o comunque nella disponibilit\u00e0 dello Sviluppatore e/o degli Utenti Finali e/o di terzi; e (iii) danneggiamento dei sistemi dello Sviluppatore e/o degli Utenti Finali e/o di terzi.</p> <p>5.6. Danni indiretti. Madbit non potr\u00e0 essere ritenuta responsabile per eventuali danni da lucro cessante, mancato guadagno o danni indiretti, perdita o danneggiamento di dati, fermo fabbrica, perdita di opportunit\u00e0 commerciali o di benefici di altro genere, pagamento di penali, ritardi o altre responsabilit\u00e0 dello Sviluppatore e/o degli Utenti Finali che dovessero derivare, in tutto o in parte dall\u2019uso o dal mancato uso delle API, della Documentazione e/o dei Software.</p> <p>5.7. Cap. Salvo il caso di dolo o colpa grave, la responsabilit\u00e0 di Madbit non potr\u00e0 mai eccedere Euro 300,00.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#6-sospensione-e-interruzione","title":"6. Sospensione e interruzione","text":"<p>6.1. Sospensione temporanea per motivi tecnici. Madbit compir\u00e0 ogni ragionevole sforzo per garantire la massima disponibilit\u00e0 delle API. Lo Sviluppatore, tuttavia, prende atto ed accetta che Madbit potr\u00e0 sospendere e/o interrompere la disponibilit\u00e0 alle API, previa comunicazione scritta allo Sviluppatore ove possibile, qualora si dovessero rendere necessari interventi di manutenzione ordinaria o straordinaria all\u2019infrastruttura informatica sulla quale le API e i Software risiedono. In tali casi, Madbit si impegna a ripristinare la disponibilit\u00e0 delle API nel minor tempo possibile.</p> <p>6.2. Sospensione per ordine dell\u2019autorit\u00e0. Madbit si riserva il diritto di sospendere o interrompere l\u2019accesso alle API qualora venga avanzata espressa richiesta in tal senso da un organo giurisdizionale o amministrativo in base alle norme vigenti o qualora la sospensione o interruzione siano richieste dalla normativa applicabile. In tal caso, Madbit provveder\u00e0 a comunicare allo Sviluppatore le motivazioni dell\u2019adozione della sospensione o interruzione, fatta salva in ogni caso la facolt\u00e0 di risolvere il Contratto nelle modalit\u00e0 di legge.</p> <p>6.3. Sospensione per motivi diversi. Madbit si riserva altres\u00ec la facolt\u00e0 di sospendere o interrompere l\u2019accesso alle API: (a) in caso di mancato adempimento da parte dello Sviluppatore a una qualsiasi delle previsioni che legittimerebbero Madbit a risolvere il Contratto ai sensi del paragrafo 8.1; (b) qualora ricorrano ragioni di sicurezza e/o riservatezza; (c) in caso di violazione, da parte dello Sviluppatore e/o dell\u2019Utente Finale, agli obblighi di legge in materia di utilizzo dei servizi informatici e della rete internet; (d) nel caso in cui si verifichino problematiche all\u2019infrastruttura informatica ove risiedono i Software e le API che non siano rimediabili senza sospendere il relativo accesso, ivi inclusa l\u2019ipotesi di relativa sostituzione e/o migrazione anche parziale, in ogni caso previo avviso scritto allo Sviluppatore circa le ragioni della sospensione e le tempistiche di intervento previste; (e) in caso di violazione, da parte dello Sviluppatore, della Policy di Acceptable Use delle API, (f) nel caso in cui l\u2019efficacia dell\u2019eventuale contratto concluso fra lo Sviluppatore e Madbit avente ad oggetto la pubblicazione degli Applicativi Integrati sullo store di Madbit sia sospesa o cessi a causa dell\u2019inadempimento da parte dello Sviluppatore degli impegni ivi assunti.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#7-durata-recesso-e-cessazione","title":"7. Durata, recesso e cessazione","text":"<p>7.1. Durata. Fatto salvo quanto eventualmente e diversamente pattuito per iscritto tra le Parti, il Contratto ha durata indeterminata a decorrere dalla sua conclusione. Ciascuna Parte avr\u00e0 diritto di recedere dal presente Contratto in ogni momento, con comunicazione da inviarsi all\u2019altra Parte con almeno 60 giorni di preavviso.</p> <p>7.2. Recesso in conseguenza di inadempimento ad altri contratti con Madbit. Madbit si riserva altres\u00ec il diritto di recedere dal Contratto anche nell\u2019ipotesi in cui lo Sviluppatore sia gravemente inadempiente con riferimento ad uno qualsiasi degli eventuali ulteriori contratti conclusi tra il medesimo Sviluppatore e Madbit, ovvero tra lo Sviluppatore e una qualsiasi delle societ\u00e0 appartenenti al Gruppo TeamSystem</p> <p>7.3. Effetti della cessazione. In caso di cessazione dell\u2019efficacia del Contratto, per qualsiasi ragione intervenuta, Madbit interdir\u00e0 immediatamente allo Sviluppatore e a ciascun Utente Finale di quest\u2019ultimo l\u2019accesso e l\u2019utilizzo delle API e interromper\u00e0 la prestazione di qualsiasi attivit\u00e0 ai sensi del Contratto. </p> <p>7.4. Sopravvivenza. Le seguenti previsioni sopravvivranno alla cessazione dell\u2019efficacia del presente Contratto, per qualsiasi ragione intervenuta: 2.6 (Accordi con gli Utenti Finali), 3 (Propriet\u00e0 Intellettuale), 4 (Manleva), 5 (Responsabilit\u00e0), 12 (Riservatezza), 13 (Legge applicabile e foro esclusivo), 14.3, 14.4, 14.5 (Tolleranza e invalidit\u00e0 e inefficacia parziale e comunicazioni) .</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#8-risoluzione","title":"8. Risoluzione","text":"<p>8.1. Clausola risolutiva espressa. Fatto salvo il risarcimento del danno, Madbit si riserva il diritto di risolvere il Contratto ai sensi dell\u2019art. 1456 c.c. a seguito di invio di semplice comunicazione scritta in caso di mancato adempimento da parte dello Sviluppatore anche a una sola delle seguenti previsioni: 2.3, 2.6, 2.7, 2.9 (Obblighi dello Sviluppatore), 3 (Propriet\u00e0 Intellettuale).</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#9-modifiche-unilaterali","title":"9. Modifiche unilaterali","text":"<p>9.1. Diritto di modifica unilaterale del Contratto. Considerata l\u2019elevata complessit\u00e0 tecnica e normativa del settore in cui Madbit opera e dei prodotti e servizi offerti da quest\u2019ultima, considerato altres\u00ec che tale settore \u00e8 caratterizzato da continue evoluzioni tecnologiche, normative e delle esigenze di mercato, e considerato infine che, in conseguenza di quanto sopra, sorge periodicamente la necessit\u00e0 che Madbit adegui la propria organizzazione e/o la struttura tecnica e funzionale dei prodotti e servizi offerti alla propria clientela (anche nell\u2019interesse di quest\u2019ultima), lo Sviluppatore accetta che il Contratto potr\u00e0 essere modificato da Madbit in qualsiasi momento, dandone semplice comunicazione scritta allo Sviluppatore (anche via e-mail o con l\u2019ausilio di programmi informatici). Le modifiche potranno consistere in: (i) modifiche connesse agli adeguamenti apportati alla struttura tecnica e/o funzionale dei prodotti e servizi offerti; (ii) modifiche connesse agli adeguamenti apportati alla struttura organizzativa di Madbit.</p> <p>9.2. Effetti. In caso di esercizio del diritto di modifica unilaterale del Contratto di cui al precedente paragrafo, lo Sviluppatore avr\u00e0 la facolt\u00e0 di recedere dal Contratto con comunicazione scritta da inviarsi a Madbit nel termine perentorio di 15 (quindici) giorni dal ricevimento della comunicazione scritta da parte di Madbit riguardante la variazione contrattuale. In difetto, le modifiche al Contratto si intenderanno definitivamente conosciute e accettate e diverranno definitivamente efficaci e vincolanti.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#10-ritiro-e-sostituzione","title":"10. Ritiro e sostituzione","text":"<p>10.1. Prodotti Obsoleti e ritiro. Lo Sviluppatore prende atto che i Software, le relative API e gli ambienti nei quali essi operano sono soggetti, per loro natura, ad una costante evoluzione tecnologica che pu\u00f2 determinare la loro obsolescenza e, in alcuni casi, l\u2019opportunit\u00e0 di un ritiro dal mercato e, eventualmente, di una sostituzione con nuove soluzioni tecnologiche. </p> <p>10.2. Procedura di ritiro o sostituzione. Madbit potrebbe decidere, a suo insindacabile giudizio, nel corso della durata del presente Contratto, di ritirare dal mercato i Software e/o le relative API (eventualmente sostituendoli con nuove soluzioni). In tal caso: (a) Madbit comunicher\u00e0 per iscritto (anche a mezzo email) allo Sviluppatore, con idoneo preavviso, l\u2019intenzione di ritirare dal mercato uno o pi\u00f9 Software e/o le relative API (ciascuno di essi il \u201cProdotto Obsoleto\u201d); (b) la comunicazione che precede (\u201cComunicazione di Ritiro\u201d) conterr\u00e0 una descrizione dell\u2019eventuale nuovo Software e/o API (il \u201cNuovo Prodotto\u201d) che sostituir\u00e0 ciascun Prodotto Obsoleto, restando inteso che il Nuovo Prodotto potr\u00e0 basarsi su tecnologie diverse rispetto a quelle del Prodotto Obsoleto; (c) laddove il Prodotto Obsoleto non fosse sostituito da alcun Nuovo Prodotto, il Contratto cesser\u00e0 di produrre effetti con riferimento al Prodotto Obsoleto nella data che sar\u00e0 indicata da Madbit nella Comunicazione di Ritiro; a partire da tale data, il Prodotto Obsoleto cesser\u00e0 di essere fornito; (d) laddove il Prodotto Obsoleto fosse sostituito con un Nuovo Prodotto, lo Sviluppatore avr\u00e0 il diritto, esercitabile entro 15 (quindici) giorni dalla data della Comunicazione di Ritiro, di recedere dal Contratto con riferimento al solo Prodotto Obsoleto, restando inteso che, in caso contrario, il Contratto continuer\u00e0 ad esplicare i propri effetti (fatta espressa eccezione per quanto specificatamente indicato nella Comunicazione di Ritiro) con riferimento al Nuovo Prodotto e ogni riferimento al Prodotto Obsoleto dovr\u00e0 intendersi riferito al Nuovo Prodotto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#11-trattamento-dei-dati-personali","title":"11. Trattamento dei Dati Personali","text":"<p>11.1. Ferme restando le previsioni di cui ai successivi paragrafi, per l\u2019esecuzione delle attivit\u00e0 inerenti al presente Contratto, le Parti si impegnano al rispetto della Normativa sulla Protezione dei Dati Personali, come di volta in volta aggiornata.  </p> <p>11.2. Le Parti si danno reciprocamente atto che le attivit\u00e0 connesse all\u2019utilizzo delle API da parte dello Sviluppatore finalizzate allo sviluppo di Applicativi Integrati, oggetto del presente Contratto, non comportano alcun trattamento di dati personali dell\u2019Utente Finale n\u00e9 da parte di Madbit, n\u00e9 da parte dello Sviluppatore. </p> <p>11.3. Madibit non \u00e8 coinvolta, n\u00e9 si assume alcuna responsabilit\u00e0 con riferimento all\u2019eventuale trattamento di dati personali dell\u2019Utente Finale effettuato dallo Sviluppatore nell\u2019ambito delle attivit\u00e0 di sviluppo e/o erogazione degli Applicativi Integrati, che lo Sviluppatore effettua in qualit\u00e0 di titolare autonomo del trattamento.  </p> <p>11.4. Lo Sviluppatore si obbliga a tenere Madbit e il Gruppo Teamsystem manlevato da qualunque danno, comprese eventuali sanzioni delle autorit\u00e0 competenti, che possano derivare dal trattamento dei dati effettuato dallo Sviluppatore e/o dai soggetti che trattano i dati per conto dello Sviluppatore.</p> <p>Ciascuna Parte prende atto che i dati personali relativi all'altra Parte, nonch\u00e9 i dati personali (es. nominativi, indirizzo email aziendale, ecc.) di propri dipendenti/collaboratori, coinvolti nelle attivit\u00e0 di cui al presente Contratto, saranno trattati dall'altra Parte in qualit\u00e0 di titolare per finalit\u00e0 funzionali alla instaurazione e all'esecuzione del Contratto stesso, e in ogni caso in conformit\u00e0 con l'informativa resa da ciascuna di esse ai sensi e per gli effetti di cui all'articolo 13 del GDPR.  L\u2019informativa fornita da Madbit \u00e8 allegata al presente Contratto e sar\u00e0 sempre disponibile all\u2019interno dell\u2019area riservata allo Sviluppatore</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#12-riservatezza","title":"12. Riservatezza","text":"<p>12.1. Obbligo di riservatezza. \u00c8 tassativamente vietata allo Sviluppatore ogni forma di comunicazione e/o divulgazione o comunque di utilizzazione, anche per interposta persona e/o ente, di qualsiasi notizia, informazione e documentazione comunque appresa e ottenuta in occasione dell\u2019esecuzione del Contratto e che Madbit abbia classificato come \u201criservata\u201d o \u201cconfidenziale\u201d, anche ove non si tratti di veri e propri segreti commerciali, e fermo restando che tutte le informazioni relative alle API sono da considerarsi sin d\u2019ora come espressamente qualificate come riservate e confidenziali. Quanto precede non trova applicazione qualora la comunicazione e/o divulgazione di informazioni riservate sia espressamente richiesto e necessario per la corretta esecuzione del Contratto, ovvero dietro espressa autorizzazione scritta di Madbit in tal senso, ovvero qualora lo Sviluppatore sia a ci\u00f2 obbligato per legge o per ordine dell\u2019autorit\u00e0,  a condizione che la richiesta da parte di tale organismo statale o autorit\u00e0 o tribunale sia notificata senza indugio per iscritto a Madbit, ove possibile, prima di dare esecuzione all\u2019ordine ricevuto, ovvero tempestivamente successivamente all\u2019esecuzione dell\u2019ordine ricevuto, affinch\u00e9 Madbit possa individuare e attuare le misure che riterr\u00e0 pi\u00f9 opportune per mantenere la riservatezza delle informazioni confidenziali, chiedendone eventualmente la segretazione. Tale notifica deve includere, senza limitazione, l\u2019identificazione delle informazioni da divulgare ed una copia dell\u2019ordine. In ogni caso, lo Sviluppatore dovr\u00e0 divulgare solo le informazioni strettamente necessarie ad adempiere agli obblighi ad essa imposta e prender\u00e0 tutti i provvedimenti che si renderanno opportuni per limitare l\u2019ulteriore divulgazione delle informazioni in questione da parte del suddetto organismo statale o Autorit\u00e0 o Tribunale, fermo restando che gli obblighi di segretezza in virt\u00f9 del presente Contratto per tali informazioni non verranno meno.</p> <p>12.2. Durata dell\u2019obbligo di riservatezza. L\u2019obbligo di riservatezza previsto al presente articolo rimarr\u00e0 valido ed efficace anche successivamente alla cessazione del Contratto, fino a che le informazioni confidenziali non siano divenute di pubblico dominio per motivo diverso dall\u2019inadempimento di quanto qui previsto.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#13-legge-applicabile-e-foro-esclusivo","title":"13. Legge applicabile e foro esclusivo","text":"<p>13.1. Legge applicabile. Il presente Contratto \u00e8 regolato e deve essere interpretato in conformit\u00e0 alla legge italiana.</p> <p>13.2. Foro esclusivo. Qualsiasi controversia tra le Parti in relazione al presente Contratto, ivi incluse, senza limitazione, le controversie relative alla sua interpretazione, validit\u00e0, efficacia, risoluzione, esecuzione e/o scioglimento, sar\u00e0 devoluta alla competenza esclusiva del Foro di Milano.</p>","tags":["legal","terms and conditions","contract"]},{"location":"legal/terms/#14-clausole-finali","title":"14. Clausole finali","text":"<p>14.1. Codice Etico e Codice di Condotta Anti-corruzione. Lo Sviluppatore dichiara di essere a conoscenza delle disposizioni di cui al Decreto Legislativo 8 giugno 2001 n. 231, e successive integrazioni in materia di responsabilit\u00e0 amministrativa degli enti, nonch\u00e9 delle norme del Codice Etico e del Codice di Condotta Anti-corruzione adottati dal Gruppo TeamSystem e si impegna a rispettarne i contenuti, per quanto applicabili alla propria attivit\u00e0, e ad astenersi da comportamenti ad essi contrari. L\u2019inosservanza da parte dello Sviluppatore dell\u2019obbligo assunto ai sensi del presente paragrafo, ovvero la non correttezza o veridicit\u00e0 delle dichiarazioni ivi contenute, determinano un inadempimento grave, in presenza del quale TeamSystem avr\u00e0 il diritto di risolvere il presente Contratto ai sensi dell\u2019art. 1456 c.c.</p> <p>14.2. Cessione del Contratto. Salvo preventiva e specifica autorizzazione scritta di Madbit, \u00e8 fatto divieto allo Sviluppatore di cedere, in tutto o in parte, il Contratto.</p> <p>14.3. Effetto novativo. \u00c8 escluso qualsiasi rilievo di eventuali precedenti accordi individuali tra le Parti relativamente a quanto forma oggetto del Contratto, che si intendono assorbiti ed esaustivamente superati dalla disciplina del Contratto. Lo Sviluppatore acconsente sin da ora, anche ai sensi e per gli effetti dell\u2019art. 1407 c.c., che MadBit ceda il presente Contratto a terzi selezionati a esclusiva discrezione di Madbit stessa.</p> <p>14.4. Tolleranza. L\u2019eventuale omissione di far valere uno o pi\u00f9 dei diritti previsti dal Contratto non potr\u00e0 comunque essere intesa come definitiva rinuncia a tali diritti e non impedir\u00e0, quindi, di esigerne in qualsiasi altro momento il puntuale e rigoroso adempimento.</p> <p>14.5. Invalidit\u00e0 e inefficacia parziale. L\u2019eventuale invalidit\u00e0 o inefficacia di una qualsiasi delle pattuizioni del Contratto lascer\u00e0 intatte le altre pattuizioni giuridicamente e funzionalmente indipendenti, salvo quanto previsto dall\u2019art. 1419, primo comma, c.c.</p> <p>14.6. Comunicazioni. Tutte le comunicazioni allo Sviluppatore inerenti al Contratto potranno essere effettuate all\u2019indirizzo email utilizzato dallo Sviluppatore in sede di creazione dell\u2019account relativo al Software. Resta inteso che sar\u00e0 cura e responsabilit\u00e0 dello Sviluppatore comunicare ogni variazione in relazione al predetto indirizzo email.</p> <p>* * * * *</p> <p>[Ai sensi e per gli effetti degli articoli 1341 e 1342 c.c., lo Sviluppatore dichiara di aver letto, esaminato e di approvare specificamente le seguenti clausole del presente Contratto:</p> <p>2.2, 2.3, 2.4 (Limitazioni d\u2019uso della Licenza, obblighi dello Sviluppatore in merito ai requisiti tecnici e di sicurezza, aggiornamenti apportati unilateralmente da Madbit)</p> <p>2.6 (Limitazione di responsabilit\u00e0 di Madbit rispetto ai rapporti con gli Utenti Finali)</p> <p>2.8 (Responsabilit\u00e0 dello Sviluppatore per l\u2019operato dei propri dipendenti e collaboratori)</p> <p>2.10 (Diritto di Madbit di avvalersi di Partner)</p> <p>3 (Limitazioni dello Sviluppatore relative alla Propriet\u00e0 Intellettuale)</p> <p>5 (Limitazioni di responsabilit\u00e0 di Madbit)</p> <p>6 (Diritto di sospensione e interruzione dell\u2019accesso alle API)</p> <p>7.1, 7.2 (Recesso di Madbit)</p> <p>8 (Clausola risolutiva espressa)</p> <p>9 (Modifiche unilaterali)</p> <p>10 (Ritiro e sostituzione)</p> <p>13.2 (Foro esclusivo)</p> <p>14.1 (Codice Etico e Codice di Condotta Anti-corruzione)</p> <p>14.2 (Divieto di cessione del contratto)]</p>","tags":["legal","terms and conditions","contract"]},{"location":"reference/","title":"Api Reference","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>In this section we collected a set of useful guides meant to explain you how to implement the most common use cases using our APIs.</p> <p>Below you can find the list of the available guides:</p>","tags":["api","use cases"]},{"location":"reference/api-reference-co/","title":"Common api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-co/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the CO dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory. </p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-fi/","title":"Finance api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-fi/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the FI dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory.</p> <p></p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-mg/","title":"Warehouse api","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference-mg/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the MG dedicated section, to do so you have two options:</p> <p>The fields marked with * are mandatory. </p>","tags":["api reference","test calls","Common"]},{"location":"reference/api-reference/","title":"Use the API Reference","text":"<p>This is a general explanation of how to use our API Reference and make your first steps with our APIs. We strongly suggest using the API Reference before trying to implement it in your code. In this way, you'll learn how a valid request must be built, making it easier to write correct code with our SDKs or an HTTP client.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#lets-do-our-housework-first","title":"Let's do our housework first","text":"<p>The API Reference's main objective is to show you how the different parts of the API requests must be defined to obtain a proper response. Since our API respects the REST Architectural Style, we suggest you check the dedicated page first if you don't know what we're talking about, and maybe also check out the Additional Resources on that page, to discover more about the HTTP protocol.</p> <p>Additionally, we suggest you check our pages dedicated to OAuth 2.0 and the authentication methods supported by the TSE in Cloud APIs.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#set-the-token","title":"Set the token","text":"<p>To make test calls using the API Reference you must set an Access Token in the dedicated section, to do so you have two options:</p> <ul> <li> <p>OAuth (OAuth2AuthenticationCodeFlow): In this case, you'll perform the OAuth2.0 Authorization Code Flow directly inside our API reference, without having to write a single line of code beforehand. To use the OAuth2 option, you just have to select the required scopes and insert your app credentials (Client ID and Client Secret); the tool will then redirect you to the TSE in Cloud page and fetch the token for you.</p> </li> <li> <p>HTTP Bearer: You can use this option to test a token you retrieved in other ways. For example, you could insert the Manual Token you obtained from the TSE in Cloud page, or you could try to implement an OAuth2 flow and then test the retrieved token. In this case, you must insert the Access Token directly in the text box. Please, note that the tool will add the \"Bearer\" prefix for you, so you must not add it.</p> </li> </ul> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#call-the-method","title":"Call the method","text":"<p>Once the access token has been set you can make all the calls you want according to the scopes you specified when creating the access token.</p> <p>When you have identified the method you need to accomplish the wanted action, you can just scroll down to the method section and then fill the request as explained in the next paragraphs.</p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#path-parameters","title":"Path Parameters","text":"<p>Most of our methods require some Path Parameters, e.g. the parameters that must be inserted as part of the URL that must be contacted by the REST call. The parameters marked with * are mandatory but sometimes you can also find optional ones, in most cases the only one required is the company_id, if you don't know your company's identifier you can just retrieve it using the List User Companies method.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#query-string-parameters","title":"Query String Parameters","text":"<p>When you are making a GET call you will also have the possibility to set some Query String Parameters. These parameters must be defined at the end of the URL and make it possible to define some additional parameters to the request. Most of these kind of parameters are explained here.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"reference/api-reference/#request-response-body","title":"Request &amp; Response Body","text":"<p>For all our POST or PUT methods, you will always need to set a JSON Request Body, that will contain the core of the request. In every section, you will find a prefilled body example that you must modify to make the request work, plus the schema that the request body must respect. Please, keep in mind that in the majority of the cases the examples will not work as-they-are, because they contain some invalid example data that were inserted just to show you the format of the request. The most common examples are the identifiers of the resources related to your account. To obtain a successful response, you must modify these parameters accordingly to what are the resources you own. Every method includes also a Response section, where you'll find an example response in JSON format and the related schema.</p> <p>When you'll perform the request, the actual response obtained from the server will be shown on the page, so you'll be able to write the proper code to manage the results of your API calls.</p> <p>Sometimes you will need to expand the field description to get all the information like allowed values in enums, to do it you will only need to click the Multi-line description placed at the top of the section. The fields marked with * are mandatory.</p> <p>The fields marked with * are mandatory.</p> <p> </p>","tags":["api reference","test calls"]},{"location":"scenario/","title":"Scenario","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Elenco scenari di utilizzo supportati.:</p>","tags":["guides","use cases"]},{"location":"scenario/anagrafiche/","title":"Anagrafiche","text":"<p>Elenco casi d'uso disponibili:</p> <p>Clienti/Fornitori:</p> <ul> <li> <p>Ricerca di un cliente/fornitore per codice fiscale e/o partita iva (dato presenti in anagrafica generale) con un'unica interrogazione;  </p> </li> <li> <p>Inserimento/Modifica/Cancellazione di una anagrafica generale;  </p> </li> <li> <p>Inserimento di un cliente/fornitore in riferimento ad una anagrafica generale con le seguenti entit\u00e0 collegate disponibili:</p> <ul> <li>Condizioni di pagamento;</li> <li>Destinatari;</li> <li>Spese;</li> <li>Valute;</li> <li>Banche Clienti;</li> <li>Banche Aziendali;</li> <li>Agenti;</li> </ul> </li> </ul> <p>Articoli:</p> <ul> <li>Inserimento/Modifica/Cancellazione di una anagrafica articolo e delle seguenti entit\u00e0 collegate disponibili:<ul> <li>Agenti</li> <li>Magazzini  </li> </ul> </li> </ul> <p>Qui trovi i riferimenti alla versione rilascio;</p> <p>Anagrafiche Comuni:</p> <ul> <li>Inserimento/Modifica delle seguenti anagrafiche comuni: \u00a0<ul> <li>Codici IVA: versione rilascio</li> <li>Nazioni;</li> <li>Lingue;</li> <li>Banche e Agenzie (ABI/CAB);  </li> </ul> </li> </ul> <p>Qui trovi i riferimenti alla\u00a0versione rilascio;</p> <p>Anagrafica Azienda:</p> <ul> <li>Inserimento/Modifica delle seguenti anagrafiche comuni: \u00a0\u00a0<ul> <li>Sezionali: versione rilascio;</li> <li>Sedi aziendali: versione rilascio;</li> </ul> </li> </ul> <p>Qui trovi i riferimenti delle\u00a0api reference e gli esempi di utilizzo.</p> <p></p> <p>Accedi alla modalit\u00e0 di selezione della sezione</p>","tags":["guides"]},{"location":"scenario/client-creation/","title":"Client creation","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>In this guide, you will learn how to successfully create Clients and Suppliers from scratch. We'll build the request step by step, so wait until the end of the guide to send your first request!</p> <p>You can find the technical documentation of this API method in the Create Client section of the API Reference.</p> <p>:::note Client and Supplier The models for Clients and Suppliers differ only for a small subset of parameters; this guide will show in detail how to create a new Client, but it can be used in both cases. In the Suppliers case, you will need to use the Create Supplier method. :::</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>:::warning Are you using Zapier?</p> <p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them! For example, while creating a new Client the Document ID must be left blank!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p> <p>:::</p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-zero-the-client-type","title":"Step Zero: The Client Type","text":"<p>TSE in Cloud lets you to define four different types of clients.</p> <p>The available types are:</p> <ul> <li>company: in an electronic document Denominazione will be automatically set</li> <li>person: in an electronic document Nome and Cognome will be automatically set</li> <li>pa: in an electronic document the flag Pubblica Amministrazione and Split payment will be automatically set</li> <li>condo</li> </ul> <p>In the next step we'll suppose to create a company, but the procedure is the same for the other clients types too.</p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-one-the-client-data","title":"Step One: The Client Data","text":"<p>Every Client can be defined by a set of basic values, here you can find a list of the main ones:</p> <ul> <li> <p>name: [required] the client denomination.</p> </li> <li> <p>vat_number: the client P.IVA.</p> </li> <li> <p>tax_code: the client codice fiscale.</p> </li> <li> <p>code: your internal client code.</p> </li> <li> <p>ei_code: client SDI code.</p> </li> <li> <p>email: the client email.</p> </li> <li> <p>certified_email: the client PEC.</p> </li> <li> <p>phone: the client's phone number.</p> </li> <li> <p>address_*: the client address fields.</p> </li> <li> <p>notes: the client extra notes.</p> </li> <li> <p>country: optional client country (eg. Repubblica Ceca).</p> </li> <li> <p>country_iso: optional client country ISO-3166 (eg. CZ).</p> </li> </ul> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"company\",\n    \"name\": \"Mario Rossi\",\n    \"vat_number\": \"47803200154\",\n    \"tax_code\": \"RSSMRA91M20B967Q\",\n    \"address_street\": \"Via Italia, 66\",\n    \"address_postal_code\": \"20900\",\n    \"address_city\": \"Milano\",\n    \"address_province\": \"MI\"\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nModelClient entity = new ModelClient(\n    type: ClientType.Company,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\"\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\n\nentity := *fattureincloud.NewClient().\n    SetType(fattureincloud.ClientTypes.COMPANY).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"47803200154\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\")\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nClient entity = new Client()\n        .type(ClientType.COMPANY)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\");\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Client;\n$entity\n    -&gt;setType(ClientType::COMPANY)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\");\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Client();\nentity.type = new fattureInCloudSdk.ClientType().company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Client(\n    type = ClientType(\"company\"),\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\"\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Client.new(\n  type: FattureInCloud_Ruby_Sdk::ClientType::COMPANY,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\"\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nlet entity: Client = {};\nentity.type = ClientType.Company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n</code></pre> <p>In Zapier, first, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu. </p> <p>Next, you must set the Client Type we described in the previous step, you just need to select the correct value in the available list.</p> <p></p> <p>Then you must set up the request as explained above. The fields' codes start with the \"data\" prefix.</p> <p>Remember: in this example, you must insert values only in the fields we are suggesting to you! In the image below we can't show all the fields you must fill, so you must search them all as shown before.  Here you can find the list of all the fields and values you must fill for this example:</p> Field Name Field Code Value Notes The ID of the company - 12345 Select it from the dropdown menu Client type data.type company Client Name data.name Mario Rossi Client vat number data.vat_number 47803200154 Client tax code data.tax_code RSSMRA91M20B967Q Client address street data.address_street Via Italia, 66 Client address postal code data.address_postal_code 20900 Client address city data.address_city Milano Client address province data.address_province MI","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#step-two-advanced-options","title":"Step Two: Advanced Options","text":"<p>In addition to the basic data explained in the previous step, some advanced fields can be used:</p> <ul> <li> <p>default_*: all the default fields will not be set automatically when creating a document, however, you can save the defaults, retrieve them before creating the document and insert them with the other fields when creating a document.</p> </li> <li> <p>bank_*: client bank details.</p> </li> <li> <p>has_intent_declaration: flag that adds Lettera d'intento fields to the electronic document, intent_declaration_protocol_number and intent_declaration_protocol_date also need to be set.</p> </li> </ul>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#client-uniqueness","title":"Client uniqueness","text":"<p>We have strong checks to ensure clients' uniqueness. The applied rule differs based on the defined fields:</p> <ul> <li>if you are only setting the client's name, then you will receive an error if a client with the same name already exists.</li> <li>if you are setting code, vat_number, and tax_code, these values must be unique for all your clients.</li> </ul>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/client-creation/#create-the-client","title":"Create the client!","text":"<p>Now we are ready to create a client, so let's create a client using the request we just built:</p> <pre><code>POST /c/1235/entities/clients HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 200\n\n{\"data\":{\"name\":\"Mario Rossi\",\"vat_number\":\"47803200154\",\"tax_code\":\"RSSMRA91M20B967Q\",\"address_street\":\"Via Italia, 66\",\"address_postal_code\":\"20900\",\"address_city\":\"Milano\",\"address_province\":\"MI\"}}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ClientsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is a complete request, but please customize it!!!\n            // In the next step we'll explain how to perform the request to the API.\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            ModelClient entity = new ModelClient(\n                type: ClientType.Company,\n                name: \"Mario Rossi\",\n                vatNumber: \"47803200154\",\n                taxCode: \"RSSMRA91M20B967Q\",\n                addressStreet: \"Via Italia, 66\",\n                addressPostalCode: \"20900\",\n                addressCity: \"Milano\",\n                addressProvince: \"MI\"\n            );\n\n            // Here we put our entity in the request object\n            CreateClientRequest createClientRequest = new CreateClientRequest(\n                data: entity\n            );\n\n            // Now we are all set for the final call\n            // Create the client: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ClientsApi.md#createclient\n            try {\n                CreateClientResponse result = apiInstance.CreateClient(companyId, createClientRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling ClientsApi.CreateClient: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    entity := *fattureincloud.NewClient().\n        SetType(fattureincloud.ClientTypes.COMPANY).\n        SetName(\"Mario Rossi\").\n        SetVatNumber(\"47803200154\").\n        SetTaxCode(\"RSSMRA91M20B967Q\").\n        SetAddressStreet(\"Via Italia, 66\").\n        SetAddressPostalCode(\"20900\").\n        SetAddressCity(\"Milano\").\n        SetAddressProvince(\"MI\")\n\n    // Here we put our entity in the request object\n    createClientRequest := *fattureincloud.NewCreateClientRequest().SetData(entity)\n\n    // Now we are all set for the final call\n    // Create the client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsAPI.md#createclient\n    resp, r, err := apiClient.ClientsAPI.CreateClient(auth, companyId).CreateClientRequest(createClientRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `ClientsAPI.CreateClient``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.ClientsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        ClientsApi apiInstance = new ClientsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is a complete request, but please customize it!!!\n        // In the next step we'll explain how to perform the request to the API.\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        Client entity = new Client()\n                .type(ClientType.COMPANY)\n                .name(\"Mario Rossi\")\n                .vatNumber(\"47803200154\")\n                .taxCode(\"RSSMRA91M20B967Q\")\n                .addressStreet(\"Via Italia, 66\")\n                .addressPostalCode(\"20900\")\n                .addressCity(\"Milano\")\n                .addressProvince(\"MI\");\n\n        // Here we put our entity in the request object\n        CreateClientRequest createClientRequest = new CreateClientRequest()\n                .data(entity);\n\n        // Now we are all set for the final call\n        // Create the client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#createclient\n        try {\n            CreateClientResponse result = apiInstance.createClient(companyId, createClientRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling ClientsApi#createClient\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n&lt;?php\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\ClientsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n$entity = new FattureInCloud\\Model\\Client;\n$entity\n    -&gt;setType(FattureInCloud\\Model\\Client::COMPANY)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\");\n\n// Here we put our entity in the request object\n$create_client_request = new FattureInCloud\\Model\\CreateClientRequest;\n$create_client_request-&gt;setData($entity);\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#createclient\ntry {\n    $result = $apiInstance-&gt;createClient($company_id, $create_client_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ClientsApi-&gt;createClient: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.ClientsApi();\n//set your company id\nlet companyId = 12345;\n\nlet entity = new fattureInCloudSdk.Client();\nentity.type = new fattureInCloudSdk.ClientType().company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n\n// Here we put our entity in the request object\nlet createClientRequest = new fattureInCloudSdk.CreateClientRequest();\ncreateClientRequest.data = entity;\n\nlet opts = {\n  createClientRequest: createClientRequest,\n};\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#createClient\napiInstance.createClient(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import clients_api\nfrom fattureincloud_python_sdk.models.client import Client\nfrom fattureincloud_python_sdk.models.client_type import ClientType\nfrom fattureincloud_python_sdk.models.create_client_request import CreateClientRequest\nfrom fattureincloud_python_sdk.models.create_client_response import CreateClientResponse\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Client(\n    type = ClientType(\"company\"),\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\"\n)\n\n# Here we put our entity in the request object\ncreate_client_request = CreateClientRequest(\n    data = entity\n)\n\n# Now we are all set for the final call\n# Create the client: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#create_client\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = clients_api.ClientsApi(api_client)\n    try:\n        api_response = api_instance.create_client(company_id, create_client_request=create_client_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling ClientsApi-&gt;create_client: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::ClientsApi.new\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Client.new(\n  type: FattureInCloud_Ruby_Sdk::ClientType::COMPANY,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\"\n)\n\n# Here we put our entity in the request object\nopts = {\n  create_client_request: FattureInCloud_Ruby_Sdk::CreateClientRequest.new(data: entity)\n}\n# Now we are all set for the final call\n# Create the client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#create_client\nbegin\n  result = api_instance.create_client(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling ClientsApi-&gt;create_client: #{e}\"\nend\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  ClientsApi,\n  Client,\n  ClientType,\n  CreateClientRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new ClientsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet entity: Client = {};\nentity.type = ClientType.Company;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\n\n// Here we put our entity in the request object\nlet createClientRequest: CreateClientRequest = {\n  data: entity,\n};\n\n// Now we are all set for the final call\n// Create the client: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#createClient\napiInstance.apiInstance.createClient(companyId, createClientRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>Once you filled all the fields you need, you can click the \"Continue\" button and follow the wizard to create your Zap!</p> <p>You just created your first client. Congratulations!</p>","tags":["guides","client creation","entity","client","supplier","customer","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/e-invoice-management/","title":"E-Invoice management","text":"<p>When you need to deal with an e-invoice, we provide a handful of methods that you can use to fulfill your needs: you can verify the XML of your e-invoice, download it, send it to the SDI and eventually obtain the rejection reason.</p> <p>:::info Create your e-invoice first!</p> <p>In this guide, we suppose you already created your e-invoice in TSE in Cloud, and you just need to send it to the SDI. If this is not the case, please check this guide to create your first invoice.</p> <p>:::</p> <p>:::danger I already have an e-invoice XML, can't I just send it to the SDI?</p> <p>Unfortunately, no. TSE in Cloud lets you send documents to the SDI only if they were created through the TSE in Cloud functionalities, so if you have an XML you can't just send it to the SDI using our APIs. Please, check this guide for a more detailed explanation.</p> <p>:::</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#verify-the-e-invoice-xml","title":"Verify the E-Invoice XML","text":"<p>With the Verify e-invoice XML method, you can verify your e-invoice XML before sending it to the SDI. If your XML contains an error or it is missing some fields, you can patch it by editing the invoice. A list of the most common validation errors can be found here.</p> <p>Below you can find an example of a failed XML verification:</p> <pre><code>{\n  \"error\": {\n    \"message\": \"Validation XML\",\n    \"validation_result\": [\n      \"Nei dati generali del documento, il contenuto \\\"0000-00-00\\\" del campo Data non \u00e8 nel formato valido\"\n    ]\n  }\n}\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#download-the-e-invoice-xml","title":"Download the E-Invoice XML","text":"<p>With the Get e-invoice XML method you can download your e-invoice XML if you need to.</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/xml;charset=UTF-8\n\n\n&lt;p:FatturaElettronica xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:p=\"http://ivaservizi.agenziaentrate.gov.it/docs/xsd/fatture/v1.2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" versione=\"FPR12\"&gt;\n  &lt;FatturaElettronicaHeader&gt;\n        ...\n  &lt;/FatturaElettronicaHeader&gt;\n  &lt;FatturaElettronicaBody&gt;\n        ...\n  &lt;/FatturaElettronicaBody&gt;\n&lt;/p:FatturaElettronica&gt;\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#send-the-e-invoice","title":"Send the E-Invoice","text":"<p>If your e-invoice XML is valid you can now send it to the SDI using the Send e-invoice method.</p> <p>After the invoice has been sent, you can check its status by making a Get Issued Document request: the ei_status field will contain the status of your e-invoice.</p> <p>:::info Check your fieldset!</p> <p>To show the ei_status field, you need to customize the response, selecting the detailed fieldset or including it in the fields list.</p> <p>:::</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#pirate_flag-the-dry-run-flag","title":":pirate_flag:\u00a0 The Dry-Run Flag","text":"<p>If you are developing an integration and you want to test the Send e-invoice method without actually sending the invoice to the SDI we offer a proper field for this purpose, the options.dry_run flag.</p> <pre><code>{\n    \"data\": {\n        ...\n    },\n    \"options\": {\n        \"dry_run\": true\n    }\n}\n</code></pre> <p>The flag is optional, and the default is false; if you use it and you set it as true, all the e-invoice checks will be run but the actual dispatch.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-management/#get-the-e-invoice-rejection-reason","title":"Get the E-Invoice rejection reason","text":"<p>If your e-invoice gets rejected by the SDI, you can check the rejection reason with the Get rejection reason method. The list of the most common rejection reasons can be found here.</p> <p>For example, you could get an error like the following one:</p> <pre><code>{\n  \"data\": {\n    \"reason\": \"Il Codice Fiscale del cliente risulta sbagliato.\",\n    \"code\": \"0036\",\n    \"date\": \"2022-02-22\"\n  }\n}\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","code example"]},{"location":"scenario/e-invoice-xml-customisation/","title":"E-Invoice XML customization","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>While creating an e-invoice you could need to have more control over the XML that is generated through our APIs. On this page, we'll explain how to set up the e-invoice advanced attributes.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#the-official-xml-structure","title":"The Official XML Structure","text":"<p>The Official e-invoice XML structure is directly defined by the Italian Public Administration, and can be found here. This structure is subject to changes over time, and that's why we decided to manage some of these fields in a different way.</p> <p>If you want to know which additional attributes we support you can also read this page. The TSE in Cloud Web App lets you define these fields through dedicated components, so you can also check it to discover which attributes we support; we'll show you how to do it in the following sections.</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#the-ei_raw-flavours","title":"The ei_raw flavours","text":"<p>If you already are familiar with creating e-invoices from our Web App, you already know that you can set advanced attributes in three different entities:</p> <ul> <li>E-invoice body</li> <li>Items list</li> <li>Payments list</li> </ul> <p>While using our Create Issued Document and Modify Issued Document API methods, the fields provided by our model don't let you define all the fields available through our Web App: these advanced fields can instead be managed using the ei_raw params.</p> <p>:::warning Strings everywhere!</p> <p>Keep in mind that every field in ei_raw is always managed as a String! This means, for example, that even numbers must be inserted in String format (eg. \"NumItem\": \"5\")</p> <p>:::</p>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#e-invoice-body","title":"E-invoice body","text":"<p>In our Web Interface, you can add your custom XML fields here:</p> <p></p> <p>In our API, that section corresponds to the data.ei_raw field. Let's try to set up one of these attributes.</p> <p>For this example, we'll suppose to need to manage the NumItem field (2.1.5.4).</p> <p>This is the structure declared by the Official Structure:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 root DatiGenerali 2.1 &lt;1,1&gt; DatiRicezione 2.1.5 &lt;0,N&gt; NumItem 2.1.5.4 &lt;0,1&gt; <p>This is the final XML that we want to obtain:</p> <p>The ei_raw field uses JSON instead of XML but uses a similar structure.</p> <p>While mapping the XML structure to our JSON, you have to keep in mind a few things:</p> <ul> <li>The FatturaElettronicaBody tag is the root of our ei_raw field, and we accept only one instance of that in our e-invoices</li> <li>For the root subfields, you need to check if the field is mandatory and its occurrences (check the Obbligatoriet\u00e0 e occorrenze field in the official structure); if the field can have more than one occurrence then it must be represented as a JSON list. For example, DatiRicezione is &lt;0, N&gt;: it means that it isn't mandatory and that it must be represented as a JSON list.</li> </ul> <p>Mapping the XML shown above to our ei_raw JSON format we will obtain the following result:</p> <pre><code>\"ei_raw\": {\n  \"FatturaElettronicaBody\": {\n    \"DatiGenerali\": {\n      \"DatiRicezione\": [\n        {\n          \"NumItem\": \"5\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    eiRaw: new {\n        FatturaElettronicaBody = new {\n            DatiGenerali = new {\n                DatiRicezione = new [] {\n                    new {\n                        NumItem = \"5\"\n                    }\n                }\n            }\n        }\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"FatturaElettronicaBody\": map[string]interface{}{\n            \"DatiGenerali\": map[string]interface{}{\n                \"DatiRicezione\": []interface{}{\n                    map[string]interface{}{\n                        \"NumItem\": \"5\",\n                    },\n                },\n            },\n        },\n    },\n)\n</code></pre> <pre><code>    \"FatturaElettronicaBody\", Map.of(\n        \"DatiGenerali\", Map.of(\n            \"DatiRicezione\",\n            Arrays.asList(\n                Map.of(\n                    \"NumItem\", \"5\"\n                )\n            )\n        )\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .eiRaw(eiRaw);\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.ei_raw = {\n  FatturaElettronicaBody: {\n    DatiGenerali: {\n      DatiRicezione: [\n        {\n          NumItem: \"5\",\n        },\n      ],\n    },\n  },\n};\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice\n  -&gt;setType(IssuedDocumentType::INVOICE);\n  -&gt;setEiRaw(\n    [\n        \"FatturaElettronicaBody\" =&gt; [\n            \"DatiGenerali\" =&gt; [\n                \"DatiRicezione\" =&gt; [\n                    [\"NumItem\" =&gt; \"5\"]\n                ]\n            ]\n        ]\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    ei_raw ={\n        \"FatturaElettronicaBody\": {\n            \"DatiGenerali\": {\n                \"DatiRicezione\": [\n                    {\n                        \"NumItem\": \"5\"\n                    }\n                ]\n            }\n        }\n    }\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n    ei_raw: {\n        FatturaElettronicaBody: {\n            DatiGenerali: {\n                DatiRicezione: [\n                    {\n                        NumItem: \"5\"\n                    }\n                ]\n            }\n        }\n    }\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  ei_raw: {\n    FatturaElettronicaBody: {\n      DatiGenerali: {\n        DatiRicezione: [\n          {\n            NumItem: \"5\",\n          },\n        ],\n      },\n    },\n  },\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#items-list","title":"Items list","text":"<p>In our web interface, you can define advanced attributes for each of the inserted items:</p> <p></p> <p>This section is mapped in our API methods in the data.items_list.ei_raw field. This field's behavior is similar to what was explained in the previous section, but in this case, the root tag is DettaglioLinee (2.2.1); this means that this is the first tag that we must represent in the item (you must ignore the parent nodes) and that there can be only one root tag per item.</p> <p>In the following example, we suppose that we need to set the TipoDato field (2.2.1.16.2); the following table contains the Official XML Structure for the field:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 DatiBeniServizi 2.2 DettaglioLinee 2.2.1 root AltriDatiGestionali 2.2.1.16 &lt;0,N&gt; TipoDato 2.2.1.16.2 &lt;1,1&gt; <p>This is the final XML that we want to obtain:</p> <p>While mapping this XML to our JSON, we have to keep in mind two things:</p> <ul> <li>The root is the DettaglioLinee tag, so its parents must be omitted;</li> <li>As explained before, AltriDatiGestionali can appear more than once, so it must be represented as a JSON list.</li> </ul> <p>The resulting JSON will be the following one:</p> <pre><code>\"ei_raw\": {\n  \"DettaglioLinee\": {\n    \"AltriDatiGestionali\": [\n      {\n        \"TipoDato\": \"TIPO_DATO\"\n      }\n    ]\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        },\n        \"ei_raw\": {\n          \"DettaglioLinee\": {\n            \"AltriDatiGestionali\": [\n              {\n                \"TipoDato\": \"TIPO_DATO\"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            eiRaw: new {\n                DettaglioLinee = new {\n                    AltriDatiGestionali = new [] {\n                        new {\n                            TipoDato = \"TIPO DATO\"\n                        }\n                    }\n                }\n            }\n        )\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"ei_raw\": map[string]interface{}{\n            \"DettaglioLinee\": map[string]interface{}{\n                \"AltriDatiGestionali\": []interface{}{\n                    map[string]interface{}{\n                        \"TipoDato\": \"TIPO_DATO\",\n                    },\n                },\n            },\n        },\n    },\n)\n</code></pre> <pre><code>    \"DettaglioLinee\", Map.of(\n        \"AltriDatiGestionali\",\n        Arrays.asList(\n            Map.of(\n                \"TipoDato\", \"TIPO DATO\"\n            )\n        )\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n    .addItemsListItem(\n        new IssuedDocumentItemsListItem()\n            .productId(4)\n            .eiRaw(eiRaw)\n    );\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.items_list = [\n  {\n    product_id: 4,\n    ei_raw: {\n      DettaglioLinee: {\n        AltriDatiGestionali: [\n          {\n            TipoDato: \"TIPO_DATO\",\n          },\n        ],\n      },\n    },\n  },\n];\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice-&gt;setItemsList(\n    [\n        new IssuedDocumentItemsListItem(\n            [\n                \"product_id\" =&gt; 4,\n                \"ei_raw\" =&gt; [\n                    \"DettaglioLinee\" =&gt; [\n                        \"AltriDatiGestionali\" =&gt; [\n                          [\n                            \"TipoDato\" =&gt; \"TIPO_DATO\"\n                          ]\n                        ]\n                    ]\n                ]\n            ]\n        )\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            ei_raw={\n                \"DettaglioLinee\": {\n                    \"AltriDatiGestionali\": [\n                        {\n                            \"TipoDato\": \"TIPO_DATO\"\n                        }\n                    ]\n                }\n            }\n        )\n    ]\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    items_list: Array(\n      FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            product_id: 4,\n            ei_raw: {\n                DettaglioLinee: {\n                    AltriDatiGestionali: [\n                        {\n                            NumItem: \"5\"\n                        }\n                    ]\n                }\n            }\n        )\n    )\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  items_list: [\n    {\n      product_id: 4,\n      ei_raw: {\n        DettaglioLinee: {\n          AltriDatiGestionali: [\n            {\n              TipoDato: \"TIPO_DATO\",\n            },\n          ],\n        },\n      },\n    },\n  ],\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/e-invoice-xml-customisation/#payments-list","title":"Payments list","text":"<p>In our web interface, you can define advanced attributes for each of the inserted payments:</p> <p></p> <p>This section is mapped in our API methods in the data.payments_list.ei_raw field. This field's behavior is similar to what was explained in the previous section, but in this case, the root tag is DettaglioPagamento (2.4.2); this means that this is the first tag that we must represent in the item (you must ignore the parent nodes) and that there can be only one root tag per item.</p> <p>In the following example, we suppose that we need to set the CAB field (2.4.2.15); the following table contains the Official XML Structure for the field:</p> XML Tag Name XML Tag ID Occurrences FatturaElettronicaBody 2 DatiPagamento 2.4 DettaglioPagamento 2.4.2 root CAB 2.4.2.15 &lt;0,1&gt; <p>This is the final XML that we want to obtain:</p> <p>While mapping this XML to our JSON, we have to omit the root's parent tags, as already explained above.</p> <p>The resulting JSON will be the following one:</p> <pre><code>\"ei_raw\": {\n  \"DettaglioPagamento\": {\n    \"CAB\": \"CAB\"\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"name\": \"Mario Rossi\"\n    },\n    \"date\": \"2022-01-20\",\n    \"e_invoice\": true,\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        },\n        \"ei_raw\": {\n          \"DettaglioLinee\": {\n            \"AltriDatiGestionali\": [\n              {\n                \"TipoDato\": \"TIPO_DATO\"\n              }\n            ]\n          }\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        },\n        \"ei_raw\": {\n          \"DettaglioPagamento\": {\n            \"CAB\": \"CAB\"\n          }\n        }\n      }\n    ],\n    \"ei_raw\": {\n      \"FatturaElettronicaBody\": {\n        \"DatiGenerali\": {\n          \"DatiRicezione\": [\n            {\n              \"NumItem\": \"5\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>And here you can see how to set the ei_raw field with our SDKs:</p> <pre><code>IssuedDocument invoice = new IssuedDocument(\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            eiRaw: new {\n                DettaglioPagamento = new {\n                    CAB = \"CAB\"\n                }\n            }\n        )\n    }\n);\n</code></pre> <pre><code>invoice := *fattureincloud.NewIssuedDocument().\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetEiRaw(map[string]interface{}{\n        \"DettaglioPagamento\": map[string]interface{}{\n            \"CAB\": \"CAB\",\n        },\n    },\n)\n</code></pre> <pre><code>    \"DettaglioPagamento\", Map.of(\n        \"CAB\", \"CAB\"\n    )\n);\n\nIssuedDocument invoice = new IssuedDocument()\n    .addPaymentsListItem(\n        new IssuedDocumentPaymentsListItem()\n            .amount(BigDecimal.valueOf(122))\n            .eiRaw(eiRaw)\n    );\n</code></pre> <pre><code>let invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.payments_list = [\n  {\n    amount: 122,\n    ei_raw: {\n      DettaglioPagamento: {\n        CAB: \"CAB\",\n      },\n    },\n  },\n];\n</code></pre> <pre><code>$invoice = new IssuedDocument();\n$invoice-&gt;setPaymentsList(\n    [\n        new IssuedDocumentPaymentsListItem(\n            [\n                \"amount\" =&gt; 122,\n                \"ei_raw\" =&gt; [\n                    \"DettaglioPagamento\" =&gt; [\n                        \"CAB\" =&gt; \"CAB\"\n                    ]\n                ]\n            ]\n        )\n    ]\n);\n</code></pre> <pre><code>invoice = IssuedDocument(\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122,\n            ei_raw={\n                \"DettaglioPagamento\": {\n                    \"CAB\": \"CAB\"\n                }\n            }\n        )\n    ]\n)\n</code></pre> <pre><code>invoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    payments_list: Array(\n      FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n            amount: 122,\n            ei_raw: {\n                DettaglioPagamento: {\n                    CAB: \"CAB\"\n                }\n            }\n        )\n    )\n)\n</code></pre> <pre><code>let invoice: IssuedDocument = {\n  payments_list: [\n    {\n      amount: 122,\n      ei_raw: {\n        DettaglioPagamento: {\n          CAB: \"CAB\",\n        },\n      },\n    },\n  ],\n};\n</code></pre>","tags":["guides","issued document","invoice","e-invoice","sdi","xml","document type","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/externally-generated-xml/","title":"Externally generated XML","text":"<p>On this page, we suppose you already have an e-invoice XML, for example, because your management tool generates one for you automatically.</p> <p>Unfortunately, TSE in Cloud doesn't let you send your XML as-is to the SDI, but there still are some options that you could follow to import your documents into our systems.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/externally-generated-xml/#import-as-zip-file","title":"Import as ZIP file","text":"<p>If you want, it is possible to import your XMLs using a ZIP file. Please, note that this functionality is designed to let you import the history of your documents (for example if you decided to migrate to TSE in Cloud) to keep track of the documents created with your all tools in a single place. Still, it will not be possible to send the documents to the SDI.  Here you can find a detailed description of the procedure you can follow to import your documents in this way.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/externally-generated-xml/#use-our-apis","title":"Use our APIs","text":"<p>This point surely requires more effort than the previous one, but the documents generated in this way will be exportable to the SDI. In this case, you'll need to use our APIs to generate a new document by using the data extracted from your management tool.</p> <p> You have two ways to achieve it:</p> <ul> <li>Create a tool that receives the resulting XML as input and maps every field of the document to the ones used by our JSON API</li> <li>Create a plugin for your management tool that uses our APIs directly, without generating a XML</li> </ul> <p>Of course, our AppStore might already contain a tool that's perfect for your needs, so check it out!</p> <p>Here you can find a guide to help you understand the basic steps needed to create a document using our APIs.</p>","tags":["guides","xml","api","e-invoice"]},{"location":"scenario/invoice-creation/","title":"Invoice creation","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>If you are struggling to create a new invoice with our API this is the place where you want to be, you will learn every step to successfully create your invoice from scratch.</p> <p>We'll build the request step by step, so wait until the end of the guide to send your first request!</p> <p>You can find the technical documentation of this API method here.</p> <p>Some of the steps will use other API methods to create or retrieve the needed resources. You can find the required models on our API Reference section or on the documentation of the SDK you're using (check the GitHub repo or the Package Manager page).</p> <p>If you want to download the complete SDKs examples you can find them here.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>:::warning Are you using Zapier?</p> <p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them! For example, while creating a new Issued Document the Document ID must be left blank!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p> <p>:::</p> <p>:::danger I already have an e-invoice XML, can't I just send it to the SDI?</p> <p>Unfortunately, no. TSE in Cloud lets you send documents to the SDI only if they were created through the TSE in Cloud functionalities, so if you have an XML you can't just send it to the SDI using our APIs. Please, check this guide for a more detailed explanation.</p> <p>:::</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#pre-create-info","title":"Pre-Create Info","text":"<p>First of all, check out our Get Issued Document Pre-Create Info page, it contains most of the information you will need to create a new invoice.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-zero-the-document-type","title":"Step Zero: The Document Type","text":"<p>In this guide, we will explain how to create an invoice. We choose this type of document because it is the most common, but keep in mind that the process is almost the same for every issued document.</p> <p>The available types are:</p> <ul> <li>invoice: an invoice (we will use this type in this guide)</li> <li>quote: a quote</li> <li>proforma: a pro forma invoice</li> <li>receipt: a tax receipt</li> <li>delivery_note: a delivery note</li> <li>credit_note: a credit note</li> <li>order: an order</li> <li>work_report: a work report</li> <li>supplier_order: an order by the supplier</li> <li>self_own_invoice: a self-invoice in which the issuer of the document appears both as the customer and as the supplier</li> <li>self_supplier_invoice: a self-invoice in which the issuer of the document appears as the customer, while the other company acts as the supplier</li> </ul>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-one-the-customer","title":"Step One: The Customer","text":"<p>To create an invoice, we need the customer's details. You have three options:</p> <ul> <li> <p>If the customer's details were already inserted in TSE in Cloud, you can retrieve it using our API and add it to the request. See also: Get the list of existing clients</p> </li> <li> <p>If the client wasn't inserted in TSE in Cloud, but it will likely be a recurring customer (so you would like to store his details), you can insert it now, and use the returned details to populate the request. See also: Create a new client</p> </li> <li> <p>If the customer is most likely a one-time customer, you can just insert his details directly in the invoice.</p> </li> </ul> <p>The Client's data must be inserted in the entity field, as shown below. If you used the Clients API to store/retrieve the details, please remember to insert the entity.id field to link the invoice accordingly.</p> <p>:::warning We don't autocomplete!</p> <p>If you choose to link an existing customer (or to create a new one) make sure you set all the fields you want to be shown in your invoice: at this moment we don't autocomplete your invoice with the customer details, even if he's already stored in TSE in Cloud. You can get the info about your client performing a Get Client request.</p> <p>:::</p> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1, // only if the client already exists\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ClientsApi.md#listclients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ClientsApi.md#createclient\n// Insertion on-the-fly:\nEntity entity = new Entity(\n    id: 1, // Only if the client already exists\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsApi.md#listclients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ClientsApi.md#CreateClient\n// Insertion on-the-fly:\nentity := *fattureincloud.NewEntity().\n    SetId(1). // Only if the client already exists\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\n// Now we create the invoice and link the entity\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#listlients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ClientsApi.md#createclient\n// Insertion on-the-fly:\nEntity entity = new Entity()\n        .id(1) // Only if the client already exists\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#listclients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ClientsApi.md#createclient\n// Insertion on-the-fly:\n$entity = new Entity;\n$entity\n    -&gt;setId(1) // Only if the client already exists\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n//now we instanciate the invoice and link the entity\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#listClients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ClientsApi.md#createClient\n// Insertion on-the-fly:\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1; // Only if the client already exists\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\n//now we instanciate the invoice and link the entity\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\n# If you want to use our Client API:\n# Retrieve a client: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#list_clients\n# Create a new client: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ClientsApi.md#create_client\n# Insertion on-the-fly:\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\n# If you want to use our Client API:\n# Retrieve a client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#list_clients\n# Create a new client: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ClientsApi.md#create_client\n# Insertion on-the-fly:\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\"\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\n// If you want to use our Client API:\n// Retrieve a client: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#listClients\n// Create a new client: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ClientsApi.md#createClient\n// Insertion on-the-fly:\nlet entity: Entity = {};\nentity.id = 1; // Only if the client already exists\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\n//now we create the invoice and link the entity\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n};\n</code></pre> <p>In Zapier, first, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu. </p> <p>Next, you must set the Document Type we described in the previous step, you just need to select the correct value in the available list.</p> <p></p> <p>Then you must set up the entity as explained above. The entity fields' codes start with the \"data.entity\" prefix.</p> <p>Remember: in this example, you must insert values only in the fields we are suggesting to you! In the image below we can't show all the fields you must fill, so you must search them all as shown before.  Here you can find the list of all the fields and values you must fill for this example:</p> Field Name Field Code Value Notes Entity id data.entity.id 1 It must be the ID of an existing Client, or blank. Entity name data.entity.name Mario Rossi Entity vat number data.entity.vat_number 47803200154 Entity tax code data.entity.tax_code RSSMRA91M20B967Q Entity address street data.entity.address_street Via Italia, 66 Entity address postal code data.entity.address_postal_code 20900 Entity address city data.entity.address_city Milano Entity address province data.entity.address_province MI Entity country data.entity.country Italia","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-two-the-invoice-data","title":"Step Two: The Invoice Data","text":"<p>This section allows the insertion of your invoice's basic data, below you can find the main fields:</p> <ul> <li> <p>date: the date of issue.</p> </li> <li> <p>number: the progressive invoice number, if omitted it gets automatically set ('numero documento', eg. 107).</p> </li> <li> <p>numeration: optional invoice numeration ('sezionale documento', eg. \"/FPA\").</p> </li> <li> <p>visible_subject: short optional invoice description (visible in the invoice PDF).</p> </li> <li> <p>subject: short optional invoice description (not visible in the invoice PDF).</p> </li> <li> <p>language: the document language, see: List Languages</p> </li> <li> <p>currency: the currency used for the invoice payment, see: List Currencies</p> </li> <li> <p>rc_center: optional field that represents the category of the generated revenue (centro di ricavo).</p> </li> </ul> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n\n    // Below you can find this section fields:\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listCurrencies\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listLanguages\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listcurrencies\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#ListLanguages\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\"))\n\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        // Below you can find this section fields:\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listCurrencies\n        .currency(new Currency().id(\"EUR\"))\n        // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listLanguages\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n\n// Below you can find this section fields:\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n// Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listcurrencies\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n// Retrieve the languages: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listLanguages\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\n// Below you can find this section fields:\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\n// Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listcurrencies\ninvoice.currency = {\n  id: \"EUR\",\n};\n// Retrieve the languages: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listLanguages\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    # Below you can find this section fields:\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    # Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_currencies\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    # Retrieve the languages: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_languages\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  # Below you can find this section fields:\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  # Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_currencies\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  # Retrieve the languages: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_languages\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  // Retrieve the currencies: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listCurrencies\n  currency: {\n    id: \"EUR\",\n  },\n  // Retrieve the languages: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listLanguages\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued document date data.date 2022-01-20 Entity name data.number 1 Entity vat number data.numeration /fatt Entity tax code data.subject internal subject Entity address street data.visible_subject visible subject Currency code data.currency.id EUR Check List Currencies Currency exchange rate data.currency.exchange_rate 1.00000 Check List Currencies Currency symbol data.currency.symbol \u20ac Check List Currencies Language code data.language.code it Check List Languages Language extended name data.language.name Italiano Check List Languages","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-three-e-invoice","title":"Step Three: E-Invoice","text":"<p>If you want to issue an electronic invoice the first thing to do is to set the e_invoice field to true, then the ei_data field needs to be set accordingly to your needs:</p> <ul> <li> <p>vat_kind: (esigibilit\u00e0 iva) can be one of the following:</p> </li> <li> <p>I =&gt; immediata</p> </li> <li>D =&gt; differita</li> <li> <p>S =&gt; spit payment</p> </li> <li> <p>payment_method: one of the accepted payment methods</p> </li> <li> <p>bank_iban: automatically to your settings default payment method if it is set   bank_name: optional bank name   bank</p> </li> <li> <p>bank_beneficiary: set your name if different from your business name</p> </li> <li> <p>original_document_type: optional field for invoice issue reason, can be ordine, contratto, convenzione</p> </li> <li> <p>od_number: reference to the original document</p> </li> <li> <p>od_date: original document issue date</p> </li> <li> <p>cig: codice identificativo della gara</p> </li> <li> <p>cup: codice unico di progetto</p> </li> <li> <p>invoice_number: if document type is credit note this field is the reference to the invoice to be reversed</p> </li> <li> <p>invoice_date: if document type is credit note this field is the date of the invoice to be reversed</p> </li> </ul> <p>There are also some fields to be set in the entity field:</p> <ul> <li> <p>e_invoice: must be set to true</p> </li> <li> <p>ei_code: customer einvoice code</p> </li> <li> <p>certified_email: optional customer pec</p> </li> </ul> <p>If you have to set advanced parameters you have to use the ei_raw fields.</p> <p>The partial request looks like this:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    // Here we set e_invoice and ei_data\n    \"e_invoice\": true,\n    \"ei_data\": {\n      \"payment_method\": \"MP05\"\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n    // Here we set e_invoice and ei_data\n    eInvoice: true,\n    eiData: new IssuedDocumentEiData(\n        paymentMethod:\"MP05\"\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    // Here we set e_invoice and ei_data\n    SetEInvoice(true).\n    SetEiData(*fattureincloud.NewIssuedDocumentEiData().SetPaymentMethod(\"MP05\"))\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\"))\n        // Here we set e_invoice and ei_data\n        .eInvoice(true)\n        .eiData(\n            new IssuedDocumentEiData()\n                .paymentMethod(\"MP05\")\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n// Here we set e_invoice and ei_data\n$invoice-&gt;setEInvoice(true);\n$invoice-&gt;setEiData(\n    new IssuedDocumentEiData(\n        array(\n            \"payment_method\" =&gt; \"MP05\"\n        )\n    )\n);\n\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity()\nentity.id = 1\nentity.name = \"Mario Rossi\"\nentity.vat_number = \"47803200154\"\nentity.tax_code = \"RSSMRA91M20B967Q\"\nentity.address_street = \"Via Italia, 66\"\nentity.address_postal_code = \"20900\"\nentity.address_city = \"Milano\"\nentity.address_province = \"MI\"\nentity.country = \"Italia\"\n\nlet invoice = new fattureInCloudSdk.IssuedDocument()\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice\ninvoice.entity = entity\ninvoice.date = \"2022-01-20\"\ninvoice.number = 1\ninvoice.numeration = \"/fatt\"\ninvoice.subject = \"internal subject\"\ninvoice.visible_subject = \"visible subject\"\ninvoice.currency = {\n    id: \"EUR\"\n}\ninvoice.language = {\n    code: \"it\",\n    name: \"Italiano\"\n}\n// Here we set e_invoice and ei_data\ninvoice.e_invoice = true\ninvoice.ei_data = {\n    payment_method = \"MP05\"\n}\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    # Here we set e_invoice and ei_data\n    e_invoice = True,\n    ei_data = IssuedDocumentEiData(\n        payment_method=\"MP05\"\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\"\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  # Here we set e_invoice and ei_data\n  e_invoice: true,\n  ei_data: FattureInCloud_Ruby_Sdk::IssuedDocumentEiData.new(\n    payment_method: \"MP05\"\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  // Here we set e_invoice and ei_data\n  e_invoice: true,\n  ei_data: {\n    payment_method: \"MP05\",\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued document is an e-invoice data.e_invoice true E-invoice payment methid data.ei_data.payment_method MP05 see here for the accepted values of ModalitaPagamento","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-four-contributions-and-withholdings","title":"Step Four: Contributions and Withholdings","text":"<p>The Contributions and withholdings section allows the insertion of Casse Professionali, Rivalsa, Withholding tax, and other Withholdings / Enasarco.</p> <ul> <li> <p>cassa professionisti: you can set up two Casse professionisti and set the fields according to your needs.</p> </li> <li> <p>rivalsa (INPS): you can set up the Rivalsa and charge it to your clients setting the appropriate fields.</p> </li> <li> <p>withholding tax: you can set up the Irpef withholding tax setting the appropriate fields.</p> </li> <li> <p>enasarco and other withholdings: you will find also the fields to set up Enasarco and other Withholdings.</p> </li> </ul>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-five-items-list","title":"Step Five: Items list","text":"<p>The items composing the invoice are included in the Items List section.</p> <p>As already seen in step one, you have three possibilities to add items:</p> <ul> <li> <p>If you already inserted the Product in the TSE in Cloud API, you can retrieve it using the Products API. See also: Get a list of the products</p> </li> <li> <p>If this is a new product, and you want to add it to TSE in Cloud, you can do it now. See also: Create a new product</p> </li> <li> <p>If you don't want to save this product for future use, just insert it in the request.</p> </li> </ul> <p>The items_list is an array of items: Just remember to specify the id if you inserted a product using the Product API and want to link it to the invoice.</p> <p>If you are not familiar with the invoice item, you can find below the description of the fields:</p> <ul> <li> <p>code: optional, a custom code</p> </li> <li> <p>name: product name</p> </li> <li> <p>net_price/gross_price: price per single item, if you set the flag use_gross_prices to true you have to specify the gross_price</p> </li> <li> <p>vat: the only field you have to set is the id, you can get the id of the vat you need by performing a list vat type call or create a vat type if the one you want does not exist yet.</p> </li> <li> <p>discount: optional, discount percentage, automatically set if you specified the default discount in the relative client registry</p> </li> <li> <p>category: useful to categorize your products</p> </li> <li> <p>description: additional details</p> </li> <li> <p>qty: number of products sold</p> </li> <li> <p>measure: optional, unit of measure of the product (eg: kilograms, liters, days, etc...)</p> </li> <li> <p>not_taxable: if this flag is set to true the amount will not be counted as revenue.</p> </li> <li> <p>apply_withholding_tax: if you don't want withholding taxes, rivalsa, and cassa to be applied set this flag to false.</p> </li> </ul> <p>If you want to add a 'bollo a carico del cliente' in a einvoice, you have to add a new item, set the name to 'Bollo in fattura', net_price to 2\u20ac, not_taxable to true and the vat.id field to 21 (0% Escluso Art.15), if the invoice is not electronic it's enough to set the field stamp_duty to the amount you want to charge, keep in mind that using the stamp_duty in a einvoice the 'bollo' will be charged to you, not to the customer.</p> <p>:::warning We don't autocomplete!</p> <p>If you choose to link an existing product (or to create a new one) make sure you set all the fields you want to be shown in your invoice: at this moment we don't autocomplete your invoice with the product details, even if it is already stored in TSE in Cloud. You can get the info about your product performing a Get Product request.</p> <p>:::</p> <p>Now we add the items_list to our request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n    \"data\": {\n        \"type\": \"invoice\",\n        \"entity\": {\n            \"id\": 1,\n            \"name\": \"Mario Rossi\",\n            \"vat_number\": \"47803200154\",\n            \"tax_code\": \"RSSMRA91M20B967Q\",\n            \"address_street\": \"Via Italia, 66\",\n            \"address_postal_code\": \"20900\",\n            \"address_city\": \"Milano\",\n            \"address_province\": \"MI\",\n            \"address_extra\": \"\",\n            \"country\": \"Italia\"\n        },\n        \"date\": \"2022-01-20\",\n        \"number\": 1,\n        \"numeration\": \"/fatt\",\n        \"subject\": \"internal subject\",\n        \"visible_subject\": \"visible subject\",\n        \"currency\": {\n            \"id\": \"EUR\",\n            \"exchange_rate\": \"1.00000\",\n            \"symbol\": \"\u20ac\"\n        },\n        \"language\": {\n            \"code\": \"it\",\n            \"name\": \"Italiano\"\n        },\n        \"items_list\": [\n            {\n                \"product_id\": 4,\n                \"code\": \"TV3\",\n                \"name\": \"Tavolo in legno\",\n                \"net_price\": 100,\n                \"category\": \"cucina\",\n                \"discount\": 0,\n                \"qty\": 1,\n                \"vat\": {\n                    \"id\": 0 #22%\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n    // Here we set the Items List\n    // List your products: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/ProductsApi.md#listProducts\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    }\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    // Here we set the Items List\n    // List your products: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/ProductsApi.md#listProducts\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    })\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        // Here we set the Items List\n        // List your products: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/ProductsApi.md#listProducts\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n// Here we set the Items List\n// List your products: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/ProductsApi.md#listproducts\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\n// Here we set the Items List\n// List your products: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/ProductsApi.md#listProducts\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    # Here we set the Items List\n    # List your products: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/ProductsApi.md#list_products\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  # Here we set the Items List\n  # List your products: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/ProductsApi.md#list_products\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  // Here we set the Items List\n  // List your products: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/ProductsApi.md#listProducts\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n</code></pre> <p>The Items List in fact accepts an array of items.</p> <p>In this example, we'll insert only a single item, but you can check how to insert multiple items in the Zapier Documentation.</p> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Data.items list - Issued document item product id data.items_list.product_id 4 Check List Products Data.items list - Issued document item product code data.items_list.code TV3 Data.items list - Issued document item product name data.items_list.name Tavolo in legno Data.items list - Issued document item product net price data.items_list.net_price 100 Data.items list - Issued document item product category data.items_list.category cucina Data.items list - Issued document item product description data.items_list.discount 0 Data.items list - Issued document item product qty data.items_list.qty 1 Data.items list - Vat type id data.items_list.vat.id 0 Check List VAT Type","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-six-payments-list","title":"Step Six: Payments List","text":"<p>The Payment List section allows the insertion of all the info about your invoice payments.</p> <ul> <li> <p>amount: the amount of the payment.</p> </li> <li> <p>payment_terms: the number of days by which the payment must be made can be set.</p> </li> <li> <p>due_date: the date by which the payment must be made.</p> </li> <li> <p>status: the payment status, can be not_paid, paid, and reversed.</p> </li> <li> <p>payment_account: if the status of the invoice is paid, the payment account id needs to be set, make sure it exists or you will get an error. You can get a list of your payment accounts or create a new one as you need.</p> </li> </ul> <p>Here we suppose that the status is \"paid\", and we add the new parameters to the request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n    // Here we set the payments list assuming our invoice has already been paid\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            // List your payment accounts: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    }\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    // Here we set the Payments List\n    // List your payment accounts: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    })\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        // Here we set the payments list assuming our invoice has already been paid\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        // List your payment accounts: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n                        .paymentAccount(new PaymentAccount().id(110))\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n// Here we set the payments list assuming our invoice has already been paid\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                // List your payment accounts: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listpaymentaccounts\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n// Here we set the payments list assuming our invoice has already been paid\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    // List your payment accounts: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n    payment_account: {\n      id: 10,\n    },\n  },\n];\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    # Here we set the payments list assuming our invoice has already been paid\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            # List your payment accounts: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_payment_accounts\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ]\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  # Here we set the payments list assuming our invoice has already been paid\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          # List your payment accounts: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_payment_accounts\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  // Here we set the payments list assuming our invoice has already been paid\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      // List your payment accounts: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listPaymentAccounts\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n};\n</code></pre> <p>The Payments List in fact accepts an array of items.</p> <p>In this example, we'll insert only a single item, but you can check how to insert multiple items in the Zapier Documentation.</p> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Data.payments list - Issued document payment amount data.payments_list.amount 122 Data.payments list - Issued document payment due date data.payments_list.due_date 2022-01-23 Data.payments list - Issued document payment date data.payments_list.paid_date 2022-01-22 Data.payments list - Issued document status data.payments_list.status paid Data.payments list - Payment account id data.payments_list.payment_account.id 110 Check List Payment Accounts <p>If you want to know more about the calculation of the amounts you can visit the calculating totals page.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-seven-advanced-options","title":"Step Seven: Advanced Options","text":"<p>The Advanced Options section allows the management of the payment methods and the direct generation of DDT and accompanying invoices.</p> <ul> <li> <p>payment_method: you can use this field to communicate to the customer how to pay the invoice;   the only required parameter is the payment method id, make sure it exists or you will get an error. You can get a list of your payment methods or create a new one according to your needs.</p> </li> <li> <p>show_payment_method: if this flag is set to true, it shows the payment method details in the invoice.</p> </li> <li> <p>delivery_note: if this flag is set to true, you can set all the delivery note-related parameters and a DDT will be automatically created.</p> </li> <li> <p>accompanying_invoice: if this flag is set to true, you can set all the accompanying invoice-related parameters and it will be automatically created.</p> </li> <li> <p>amount_due_discount: with this parameter you can set a discount or surcharge on the total of the invoice.</p> </li> <li> <p>use_split_payment: this flag can be set to true if the split payment is needed.</p> </li> </ul> <p>Below we add the Payment Method to the request:</p> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>Entity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    },\n    // Here we add the payment method\n    // List your payment methods: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n    paymentMethod: new PaymentMethod(\n        id: 386683\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    }).\n    // Here we add the payment method\n    // List your payment methods: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n    SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683))\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        .paymentAccount(new PaymentAccount().id(110))\n        )\n        // Here we add the payment method\n        // List your payment methods: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n        .paymentMethod(\n                new PaymentMethod().id(386683)\n        );\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n// Here we add the payment method\n// List your payment methods: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listpaymentmethods\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\n// Here we add the payment method\n// List your payment methods: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\ninvoice.payment_method = {\n  id: 386683,\n};\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    # Here we add the payment method\n    # List your payment methods: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_payment_methods\n    payment_method = PaymentMethod(\n        id=386683\n    )\n)\n</code></pre> <pre><code># NOTE: this is a partial request, please wait before sending it\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  # Here we add the payment method\n  # List your payment methods: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_payment_methods\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  )\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  // Here we add the payment method\n  // List your payment methods: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listpaymentmethods\n  payment_method: {\n    id: 386683,\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Payment method id data.payment_method.id 386683 Check List Payment Method","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-eight-attachment","title":"Step Eight: Attachment","text":"<p>If you want to attach a file to your invoice you can do it by using Upload Attachment method; the response will include an attachment_token, that you can pass to the Invoice Creation request that we're building to effectively attach the file. The token must be assigned to the attachment_token parameter in the request.</p> <p>The code to upload an attachment with our SDKs:</p> <pre><code>Configuration config = new Configuration();\nconfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar apiInstance = new IssuedDocumentsApi(config);\n\nvar filename = \"fattura_XX_XXXX\";\nvar attachment = File.Open(\"/path/to/file.pdf\", FileMode.Open);\nvar companyId = 12345;\n\nUploadIssuedDocumentAttachmentResponse result = apiInstance.UploadIssuedDocumentAttachment(companyId, filename, attachment);\nvar attachmentToken = result.Data.AttachmentToken;\n</code></pre> <pre><code>companyId := int32(12345)\nfilename := \"fattura_XX_XXXX\"\nattachment, _ := os.Open(\"/path/to/file.pdf\")\n\nauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\nconfiguration := fattureincloudapi.NewConfiguration()\napiClient := fattureincloudapi.NewAPIClient(configuration)\nresp, r, err := apiClient.IssuedDocumentsAPI.UploadIssuedDocumentAttachment(auth, companyId).Filename(filename).Attachment(attachment).Execute()\nif err != nil {\n    fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.UploadIssuedDocumentAttachment``: %v\\n\", err)\n    fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n}\nattachmentToken := resp.Data.AttachmentToken\n</code></pre> <pre><code>ApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\nIssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\nInteger companyId = 12345;\nString filename = \"fattura_XX_XXXX\";\nFile attachment = new File(\"/path/to/file.pdf\");\n\nUploadIssuedDocumentAttachmentResponse result = apiInstance.uploadIssuedDocumentAttachment(companyId, filename, attachment);\nString attachmentToken = result.getData().getAttachmentToken();\n</code></pre> <pre><code>let defaultClient = fattureInCloudSdk.ApiClient.instance;\n\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ATTACHMENT_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\nlet companyId = 12345;\nlet opts = {\n  filename: \"fattura_XX_XXXX\",\n  attachment: fs.createReadStream(\"/path/to/file.pdf\"),\n};\n\nlet res = await apiInstance.uploadIssuedDocumentAttachment(companyId, opts);\nlet attachmentTokent = res.data.attachment_token;\n</code></pre> <pre><code>configuration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    company_id = 12345\n    filename = \"fattura_XX_XXXX\"\n    attachment = open('/path/to/file.pdf', 'rb')\n\n    api_response = api_instance.upload_issued_document_attachment(company_id, filename=filename, attachment=attachment)\n    attachmen_token = api_response.data.attachment_token\n</code></pre> <pre><code>FattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ATTACHMENT_TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\ncompany_id = 12345\nopts = {\n  filename: 'fattura_XX_XXXX',\n  attachment: File.open('/path/to/file.pdf')\n}\nres = api_instance.upload_issued_document_attachment(company_id, opts)\n\nattachment_token =  res.data.attachment_token\n</code></pre> <pre><code>const apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\nlet companyId = 12345;\nlet filename = \"fattura_XX_XXXX\";\nlet attachment = fs.createReadStream(\"path/to/file.pdf\");\n\nlet res = await apiInstance.uploadIssuedDocumentAttachment(\n  companyId,\n  filename,\n  attachment\n);\nlet attachemntToken = res.data.data?.attachment_token;\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Issued Document attachment token data.attachment_token FAKE_TOKEN Check Upload Attachment Method","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#step-nine-customisation","title":"Step Nine: Customisation","text":"<p>The customization section allows the choice of the invoice template and is useful to add some details.</p> <ul> <li> <p>template/delivery_note_template/acc_inv_template: invoice/delivery note/accompanying invoice template, only the id of the template has to be specified, you can retrieve it using the list templates method.</p> </li> <li> <p>h_margins/v_margins: horizontal/vertical margins.</p> </li> <li> <p>show_payments: if this flag is set to false, the expiration dates of the payments will not be shown on the document.</p> </li> <li> <p>show_tspay_button: if this flag is set to true, when the invoice is received by the client it can be paid directly via TS Pay and, without further operations, the invoice will result as paid.</p> </li> <li> <p>show_notification_button: if this flag is set to true when the client pays the invoice he can notify the payment by clicking the button.</p> </li> </ul> <p>Here there is our final JSON, complete with the attachment and our favorite invoice template:</p> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n{\n  \"data\": {\n    \"type\": \"invoice\",\n    \"entity\": {\n      \"id\": 1,\n      \"name\": \"Mario Rossi\",\n      \"vat_number\": \"47803200154\",\n      \"tax_code\": \"RSSMRA91M20B967Q\",\n      \"address_street\": \"Via Italia, 66\",\n      \"address_postal_code\": \"20900\",\n      \"address_city\": \"Milano\",\n      \"address_province\": \"MI\",\n      \"address_extra\": \"\",\n      \"country\": \"Italia\"\n    },\n    \"date\": \"2022-01-20\",\n    \"number\": 1,\n    \"numeration\": \"/fatt\",\n    \"subject\": \"internal subject\",\n    \"visible_subject\": \"visible subject\",\n    \"currency\": {\n      \"id\": \"EUR\",\n      \"exchange_rate\": \"1.00000\",\n      \"symbol\": \"\u20ac\"\n    },\n    \"language\": {\n      \"code\": \"it\",\n      \"name\": \"Italiano\"\n    },\n    \"items_list\": [\n      {\n        \"product_id\": 4,\n        \"code\": \"TV3\",\n        \"name\": \"Tavolo in legno\",\n        \"net_price\": 100,\n        \"category\": \"cucina\",\n        \"discount\": 0,\n        \"qty\": 1,\n        \"vat\": {\n          \"id\": 0\n        }\n      }\n    ],\n    \"payment_method\": {\n      \"id\": 386683\n    },\n    \"payments_list\": [\n      {\n        \"amount\": 122,\n        \"due_date\": \"2022-01-23\",\n        \"paid_date\": \"2022-01-22\",\n        \"status\": \"paid\",\n        \"payment_account\": {\n          \"id\": 110\n        }\n      }\n    ],\n    \"attachment_token\": \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    \"template\": {\n      \"id\": 150\n    }\n  }\n}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our C# SDK\n// https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\nEntity entity = new Entity(\n    id: 1,\n    name: \"Mario Rossi\",\n    vatNumber: \"47803200154\",\n    taxCode: \"RSSMRA91M20B967Q\",\n    addressStreet: \"Via Italia, 66\",\n    addressPostalCode: \"20900\",\n    addressCity: \"Milano\",\n    addressProvince: \"MI\",\n    country: \"Italia\"\n);\n\nIssuedDocument invoice = new IssuedDocument(\n    type: IssuedDocumentType.Invoice,\n    entity: entity,\n    date: new DateTime(2022, 01, 20),\n    number: 1,\n    numeration: \"/fatt\",\n    subject: \"internal subject\",\n    visibleSubject: \"visible subject\",\n    currency: new Currency(\n        id: \"EUR\"\n    ),\n    language: new Language(\n        code: \"it\",\n        name: \"italiano\"\n    ),\n        new IssuedDocumentItemsListItem(\n            productId: 4,\n            code: \"TV3\",\n            name: \"Tavolo in legno\",\n            netPrice: 100,\n            category: \"cucina\",\n            discount: 0,\n            qty: 1,\n            vat: new VatType(\n                id: 0\n            )\n        )\n    },\n        new IssuedDocumentPaymentsListItem(\n            amount: 122,\n            dueDate: new DateTime(2022, 01, 23),\n            paidDate: new DateTime(2022, 01, 22),\n            status: IssuedDocumentStatus.Paid,\n            paymentAccount: new PaymentAccount(\n                id: 110\n            )\n        )\n    },\n    paymentMethod: new PaymentMethod(\n        id: 386683\n    ),\n    // Finally we can add the attachment token of our uploaded file and a template\n    // Upload your attachment: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n    attachmentToken: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    // List your templates: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/InfoApi.md#listTemplates\n    template: new DocumentTemplate(\n        id: 150\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\nentity := *fattureincloud.NewEntity().\n    SetId(1).\n    SetName(\"Mario Rossi\").\n    SetVatNumber(\"RSSMRA91M20B967Q\").\n    SetTaxCode(\"RSSMRA91M20B967Q\").\n    SetAddressStreet(\"Via Italia, 66\").\n    SetAddressPostalCode(\"20900\").\n    SetAddressCity(\"Milano\").\n    SetAddressProvince(\"MI\").\n    SetCountry(\"Italia\")\n\ninvoice := *fattureincloud.NewIssuedDocument().\n    SetEntity(entity).\n    SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n    SetDate(\"2022-01-20\").\n    SetNumber(1).\n    SetNumeration(\"/fatt\").\n    SetSubject(\"internal subject\").\n    SetVisibleSubject(\"visible subject\").\n    SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n    SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n    SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n        *fattureincloud.NewIssuedDocumentItemsListItem().\n            SetProductId(4).\n            SetCode(\"TV3\").\n            SetName(\"Tavolo in legno\").\n            SetNetPrice(100).\n            SetCategory(\"cucina\").\n            SetDiscount(0).\n            SetQty(1).\n            SetVat(*fattureincloud.NewVatType().SetId(0)),\n    }).\n    SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n        *fattureincloud.NewIssuedDocumentPaymentsListItem().\n            SetAmount(122).\n            SetDueDate(\"2022-01-23\").\n            SetPaidDate(\"2022-01-22\").\n            SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n            SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n    }).\n    SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683)).\n    // Finally we can add the attachment token of our uploaded file and a template\n    // Upload your attachment: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n    SetAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\").\n    // List your templates: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/InfoApi.md#listTemplates\n    SetTemplate(*fattureincloud.NewDocumentTemplate().SetId(150))\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Java SDK\n// https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\nEntity entity = new Entity()\n        .id(1)\n        .name(\"Mario Rossi\")\n        .vatNumber(\"47803200154\")\n        .taxCode(\"RSSMRA91M20B967Q\")\n        .addressStreet(\"Via Italia, 66\")\n        .addressPostalCode(\"20900\")\n        .addressCity(\"Milano\")\n        .addressProvince(\"MI\")\n        .country(\"Italy\");\n\nIssuedDocument invoice = new IssuedDocument()\n        .type(IssuedDocumentType.INVOICE)\n        .entity(entity)\n        .date(LocalDate.of(2022, 1, 20))\n        .number(1)\n        .numeration(\"/fatt\")\n        .subject(\"internal subject\")\n        .visibleSubject(\"visible subject\")\n        .currency(new Currency().id(\"EUR\"))\n        .language(new Language()\n                        .code(\"it\")\n                        .name(\"italiano\")\n        )\n        .addItemsListItem(\n                new IssuedDocumentItemsListItem()\n                        .productId(4)\n                        .code(\"TV3\")\n                        .name(\"Tavolo in legno\")\n                        .netPrice(BigDecimal.valueOf(100))\n                        .category(\"cucina\")\n                        .discount(BigDecimal.valueOf(0))\n                        .qty(BigDecimal.valueOf(1))\n                        .vat(new VatType().id(0))\n        )\n        .addPaymentsListItem(\n                new IssuedDocumentPaymentsListItem()\n                        .amount(BigDecimal.valueOf(122))\n                        .dueDate(LocalDate.of(2022, 01, 23))\n                        .paidDate(LocalDate.of(2022, 01, 22))\n                        .status(IssuedDocumentStatus.PAID)\n                        .paymentAccount(new PaymentAccount().id(110))\n        )\n        .paymentMethod(\n                new PaymentMethod().id(386683)\n        )\n        // Finally we can add the attachment token of our uploaded file and a template\n        // Upload your attachment: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n        .attachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\")\n        // List your templates: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/InfoApi.md#listTemplates\n        .template(new DocumentTemplate().id(150));\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n// Finally we can add the attachment token of our uploaded file and a template\n// Upload your attachment: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#uploadissueddocumentattachment\n$invoice-&gt;setAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\");\n// List your templates: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/InfoApi.md#listtemplates\n$invoice-&gt;setTemplate(\n    new DocumentTemplate(\n        array(\n            \"id\" =&gt; 150\n        )\n    )\n);\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\ninvoice.payment_method = {\n  id: 386683,\n};\n// Finally we can add the attachment token of our uploaded file and a template\n// Upload your attachment: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\ninvoice.attachment_token =\n  \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\";\n// List your templates: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/InfoApi.md#listTemplates\ninvoice.template = {\n  id: 150,\n};\n</code></pre> <pre><code># NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    payment_method = PaymentMethod(\n        id=386683\n    ),\n    # Finally we can add the attachment token of our uploaded file and a template\n    # Upload your attachment: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#upload_issued_document_attachment\n    attachment_token = \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    # List your templates: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/InfoApi.md#list_templates\n    template = DocumentTemplate(\n        id=150\n    )\n)\n</code></pre> <pre><code># NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  ),\n  # Finally we can add the attachment token of our uploaded file and a template\n  # Upload your attachment: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#upload_issued_document_attachment\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  # List your templates: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/InfoApi.md#list_templates\n  template: FattureInCloud_Ruby_Sdk::DocumentTemplate.new(\n      id: 150\n  )\n)\n</code></pre> <pre><code>// NOTE: this is a partial request, please wait before sending it\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  payment_method: {\n    id: 386683,\n  },\n  // Finally we can add the attachment token of our uploaded file and a template\n  // Upload your attachment: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#uploadIssuedDocumentAttachment\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  // List your templates: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/InfoApi.md#listTemplates\n  template: {\n    id: 150,\n  },\n};\n</code></pre> <p>As done in the previous step, we'll show you the list of the fields to be populated for this step:</p> Field Name Field Code Value Notes Template id data.template.id 10 Check List Templates Method <p>Please, remember that this request will most probably fail if executed as-is! For example, the IDs specified in the request must exist in order to avoid getting an error response! Remember to check the various methods explained in this guide to fill the request fields correctly!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#create-the-document","title":"Create the document!","text":"<p>Now we are ready to create an invoice, so let's create an invoice using the request we just built:</p> <pre><code>POST /c/1235/issued_documents HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 900\n\n{\"data\":{\"type\":\"invoice\",\"entity\":{\"id\":1,\"name\":\"Mario Rossi\",\"vat_number\":\"47803200154\",\"tax_code\":\"RSSMRA91M20B967Q\",\"address_street\":\"Via Italia, 66\",\"address_postal_code\":\"20900\",\"address_city\":\"Milano\",\"address_province\":\"MI\",\"address_extra\":\"\",\"country\":\"Italia\"},\"date\":\"2022-01-20\",\"number\":1,\"numeration\":\"\\/fatt\",\"subject\":\"internal subject\",\"visible_subject\":\"visible subject\",\"currency\":{\"id\":\"EUR\",\"exchange_rate\":\"1.00000\",\"symbol\":\"\\u20ac\"},\"language\":{\"code\":\"it\",\"name\":\"Italiano\"},\"items_list\":[{\"product_id\":4,\"code\":\"TV3\",\"name\":\"Tavolo in legno\",\"net_price\":100,\"category\":\"cucina\",\"discount\":0,\"qty\":1,\"vat\":{\"id\":0}}],\"payment_method\":{\"id\":386683},\"payments_list\":[{\"amount\":122,\"due_date\":\"2022-01-23\",\"paid_date\":\"2022-01-22\",\"status\":\"paid\",\"payment_account\":{\"id\":110}}],\"attachment_token\":\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\"template\":{\"id\":150}}}\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is a complete request, but please customize it!!!\n            // In the next step we'll explain how to perform the request to the API.\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            Entity entity = new Entity(\n                id: 1,\n                name: \"Mario Rossi\",\n                vatNumber: \"47803200154\",\n                taxCode: \"RSSMRA91M20B967Q\",\n                addressStreet: \"Via Italia, 66\",\n                addressPostalCode: \"20900\",\n                addressCity: \"Milano\",\n                addressProvince: \"MI\",\n                country: \"Italia\"\n            );\n\n            IssuedDocument invoice = new IssuedDocument(\n                type: IssuedDocumentType.Invoice,\n                entity: entity,\n                date: new DateTime(2022, 01, 20),\n                number: 1,\n                numeration: \"/fatt\",\n                subject: \"internal subject\",\n                visibleSubject: \"visible subject\",\n                currency: new Currency(\n                    id: \"EUR\"\n                ),\n                language: new Language(\n                    code: \"it\",\n                    name: \"italiano\"\n                ),\n                    new IssuedDocumentItemsListItem(\n                        productId: 4,\n                        code: \"TV3\",\n                        name: \"Tavolo in legno\",\n                        netPrice: 100,\n                        category: \"cucina\",\n                        discount: 0,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                },\n                    new IssuedDocumentPaymentsListItem(\n                        amount: 122,\n                        dueDate: new DateTime(2022, 01, 23),\n                        paidDate: new DateTime(2022, 01, 22),\n                        status: IssuedDocumentStatus.Paid,\n                        paymentAccount: new PaymentAccount(\n                            id: 110\n                        )\n                    )\n                },\n                paymentMethod: new PaymentMethod(\n                    id: 386683\n                ),\n                attachmentToken: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n                template: new DocumentTemplate(\n                    id: 150\n                )\n            );\n\n            // Here we put our invoice in the request object\n            CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Create the invoice: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n            try {\n                CreateIssuedDocumentResponse result = apiInstance.CreateIssuedDocument(companyId, createIssuedDocumentRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.CreateIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    entity := *fattureincloud.NewEntity().\n        SetId(1).\n        SetName(\"Mario Rossi\").\n        SetVatNumber(\"RSSMRA91M20B967Q\").\n        SetTaxCode(\"RSSMRA91M20B967Q\").\n        SetAddressStreet(\"Via Italia, 66\").\n        SetAddressPostalCode(\"20900\").\n        SetAddressCity(\"Milano\").\n        SetAddressProvince(\"MI\").\n        SetCountry(\"Italia\")\n\n    invoice := *fattureincloud.NewIssuedDocument().\n        SetEntity(entity).\n        SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n        SetDate(\"2022-01-20\").\n        SetNumber(1).\n        SetNumeration(\"/fatt\").\n        SetSubject(\"internal subject\").\n        SetVisibleSubject(\"visible subject\").\n        SetCurrency(*fattureincloud.NewCurrency().SetId(\"EUR\")).\n        SetLanguage(*fattureincloud.NewLanguage().SetCode(\"it\").SetName(\"italiano\")).\n        SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetProductId(4).\n                SetCode(\"TV3\").\n                SetName(\"Tavolo in legno\").\n                SetNetPrice(100).\n                SetCategory(\"cucina\").\n                SetDiscount(0).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n        }).\n        SetPaymentsList([]fattureincloud.IssuedDocumentPaymentsListItem{\n            *fattureincloud.NewIssuedDocumentPaymentsListItem().\n                SetAmount(122).\n                SetDueDate(\"2022-01-23\").\n                SetPaidDate(\"2022-01-22\").\n                SetStatus(fattureincloud.IssuedDocumentStatuses.NOT_PAID).\n                SetPaymentAccount(*fattureincloud.NewPaymentAccount().SetId(110)),\n        }).\n        SetPaymentMethod(*fattureincloud.NewPaymentMethod().SetId(386683)).\n        SetAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\").\n        SetTemplate(*fattureincloud.NewDocumentTemplate().SetId(150))\n\n    // Here we put our invoice in the request object\n    createIssuedDocumentRequest := *fattureincloud.NewCreateIssuedDocumentRequest().SetData(invoice)\n\n    // Now we are all set for the final call\n    // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\n    resp, r, err := apiClient.IssuedDocumentsAPI.CreateIssuedDocument(auth, companyId).CreateIssuedDocumentRequest(createIssuedDocumentRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.CreateIssuedDocument``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is a complete request, but please customize it!!!\n        // In the next step we'll explain how to perform the request to the API.\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        Entity entity = new Entity()\n                .id(1)\n                .name(\"Mario Rossi\")\n                .vatNumber(\"47803200154\")\n                .taxCode(\"RSSMRA91M20B967Q\")\n                .addressStreet(\"Via Italia, 66\")\n                .addressPostalCode(\"20900\")\n                .addressCity(\"Milano\")\n                .addressProvince(\"MI\")\n                .country(\"Italy\");\n\n        IssuedDocument invoice = new IssuedDocument()\n                .type(IssuedDocumentType.INVOICE)\n                .entity(entity)\n                .date(LocalDate.of(2022, 1, 20))\n                .number(1)\n                .numeration(\"/fatt\")\n                .subject(\"internal subject\")\n                .visibleSubject(\"visible subject\")\n                .currency(new Currency().id(\"EUR\"))\n                .language(new Language()\n                                .code(\"it\")\n                                .name(\"italiano\")\n                )\n                .addItemsListItem(\n                        new IssuedDocumentItemsListItem()\n                                .productId(4)\n                                .code(\"TV3\")\n                                .name(\"Tavolo in legno\")\n                                .netPrice(BigDecimal.valueOf(100))\n                                .category(\"cucina\")\n                                .discount(BigDecimal.valueOf(0))\n                                .qty(BigDecimal.valueOf(1))\n                                .vat(new VatType().id(0))\n                )\n                .addPaymentsListItem(\n                        new IssuedDocumentPaymentsListItem()\n                                .amount(BigDecimal.valueOf(122))\n                                .dueDate(LocalDate.of(2022, 01, 23))\n                                .paidDate(LocalDate.of(2022, 01, 22))\n                                .status(IssuedDocumentStatus.PAID)\n                                .paymentAccount(new PaymentAccount().id(110))\n                )\n                .paymentMethod(\n                        new PaymentMethod().id(386683)\n                )\n                .attachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\")\n                .template(new DocumentTemplate().id(150));\n\n        // Here we put our invoice in the request object\n        CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Create the invoice: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n        try {\n            CreateIssuedDocumentResponse result = apiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#createIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n&lt;?php\n\nuse FattureInCloud\\Model\\Currency;\nuse FattureInCloud\\Model\\DocumentTemplate;\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsListItem;\nuse FattureInCloud\\Model\\IssuedDocumentPaymentsListItem;\nuse FattureInCloud\\Model\\IssuedDocumentStatus;\nuse FattureInCloud\\Model\\IssuedDocumentType;\nuse FattureInCloud\\Model\\CreateIssuedDocumentRequest;\nuse FattureInCloud\\Model\\Language;\nuse FattureInCloud\\Model\\PaymentAccount;\nuse FattureInCloud\\Model\\PaymentMethod;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n$entity = new Entity;\n$entity\n    -&gt;setId(1)\n    -&gt;setName(\"Mario Rossi\")\n    -&gt;setVatNumber(\"47803200154\")\n    -&gt;setTaxCode(\"RSSMRA91M20B967Q\")\n    -&gt;setAddressStreet(\"Via Italia, 66\")\n    -&gt;setAddressPostalCode(\"20900\")\n    -&gt;setAddressCity(\"Milano\")\n    -&gt;setAddressProvince(\"MI\")\n    -&gt;setCountry(\"Italia\");\n\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setDate(new DateTime(\"2022-01-20\"));\n$invoice-&gt;setNumber(1);\n$invoice-&gt;setNumeration(\"/fatt\");\n$invoice-&gt;setSubject(\"internal subject\");\n$invoice-&gt;setVisibleSubject(\"visible subject\");\n$invoice-&gt;setCurrency(\n    new Currency(\n        array(\n           \"id\" =&gt; \"EUR\"\n        )\n    )\n);\n$invoice-&gt;setLanguage(\n    new Language(\n        array(\n            \"code\" =&gt; \"it\",\n            \"name\" =&gt; \"italiano\"\n        )\n    )\n);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"product_id\" =&gt; 4,\n                \"code\" =&gt; \"TV3\",\n                \"name\" =&gt; \"Tavolo in legno\",\n                \"net_price\" =&gt; 100,\n                \"category\" =&gt; \"cucina\",\n                \"discount\" =&gt; 0,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setPaymentMethod(\n    new PaymentMethod(\n        array(\n            \"id\" =&gt; 386683\n        )\n    )\n);\n$invoice-&gt;setPaymentsList(\n    array(\n        new IssuedDocumentPaymentsListItem(\n            array(\n                \"amount\" =&gt; 122,\n                \"due_date\" =&gt; new DateTime(\"2022-01-23\"),\n                \"paid_date\" =&gt; new DateTime(\"2022-01-22\"),\n                \"status\" =&gt; IssuedDocumentStatus::PAID,\n                \"payment_account\" =&gt; new PaymentAccount(\n                    array(\n                        \"id\" =&gt; 110\n                    )\n                )\n            )\n        )\n    )\n);\n$invoice-&gt;setAttachmentToken(\"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\");\n$invoice-&gt;setTemplate(\n    new DocumentTemplate(\n        array(\n            \"id\" =&gt; 150\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$create_issued_document_request = new CreateIssuedDocumentRequest;\n$create_issued_document_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#createissueddocument\ntry {\n    $result = $apiInstance-&gt;createIssuedDocument($company_id, $create_issued_document_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;createIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet entity = new fattureInCloudSdk.Entity();\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = entity;\ninvoice.date = \"2022-01-20\";\ninvoice.number = 1;\ninvoice.numeration = \"/fatt\";\ninvoice.subject = \"internal subject\";\ninvoice.visible_subject = \"visible subject\";\ninvoice.currency = {\n  id: \"EUR\",\n};\ninvoice.language = {\n  code: \"it\",\n  name: \"Italiano\",\n};\ninvoice.items_list = [\n  {\n    product_id: 4,\n    code: \"tv3\",\n    name: \"tavolo in legno\",\n    net_price: 100,\n    category: \"cucina\",\n    discount: 0,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\ninvoice.payments_list = [\n  {\n    amount: 122,\n    due_date: \"2022-01-23\",\n    paid_date: \"2022-01-22\",\n    status: \"paid\",\n    payment_account: {\n      id: 10,\n    },\n  },\n];\ninvoice.payment_method = {\n  id: 386683,\n};\ninvoice.attachment_token =\n  \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\";\ninvoice.template = {\n  id: 150,\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest =\n  new fattureInCloudSdk.CreateIssuedDocumentRequest();\ncreateIssuedDocumentRequest.data = invoice;\n\nlet opts = {\n  createIssuedDocumentRequest: createIssuedDocumentRequest,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.currency import Currency\nfrom fattureincloud_python_sdk.models.language import Language\nfrom fattureincloud_python_sdk.models.entity import Entity\nfrom fattureincloud_python_sdk.models.payment_method import PaymentMethod\nfrom fattureincloud_python_sdk.models.payment_account import PaymentAccount\nfrom fattureincloud_python_sdk.models.document_template import DocumentTemplate\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document_type import IssuedDocumentType\nfrom fattureincloud_python_sdk.models.issued_document_status import IssuedDocumentStatus\nfrom fattureincloud_python_sdk.models.create_issued_document_request import CreateIssuedDocumentRequest\nfrom fattureincloud_python_sdk.models.create_issued_document_response import CreateIssuedDocumentResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\nfrom fattureincloud_python_sdk.models.issued_document_payments_list_item import IssuedDocumentPaymentsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nentity = Entity(\n    id=1,\n    name=\"Mario Rossi\",\n    vat_number=\"47803200154\",\n    tax_code=\"RSSMRA91M20B967Q\",\n    address_street=\"Via Italia, 66\",\n    address_postal_code=\"20900\",\n    address_city=\"Milano\",\n    address_province=\"MI\",\n    country=\"Italia\"\n)\n\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = entity,\n    date = datetime.date(2021, 1, 20),\n    number = 1,\n    numeration = \"/fatt\",\n    subject = \"internal subject\",\n    visible_subject = \"visible subject\",\n    currency = Currency(\n        id=\"EUR\"\n    ),\n    language = Language(\n        code=\"it\",\n        name=\"italiano\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            product_id=4,\n            code=\"TV3\",\n            name=\"Tavolo in legno\",\n            net_price=100.0,\n            category=\"cucina\",\n            discount=0.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ],\n    payments_list = [\n        IssuedDocumentPaymentsListItem(\n            amount=122.0,\n            due_date=datetime.date(2022, 1, 23),\n            paid_date=datetime.date(2022, 1, 22),\n            status=IssuedDocumentStatus(\"paid\"),\n            payment_account=PaymentAccount(\n                id=110\n            )\n        )\n    ],\n    payment_method = PaymentMethod(\n        id=386683\n    ),\n    attachment_token = \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n    template = DocumentTemplate(\n        id=150\n    )\n)\n\n# Here we put our invoice in the request object\ncreate_issued_document_request = CreateIssuedDocumentRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.create_issued_document(company_id, create_issued_document_request=create_issued_document_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;create_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is a complete request, but please customize it!!!\n# In the next step we'll explain how to perform the request to the API.\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nentity = FattureInCloud_Ruby_Sdk::Entity.new(\n  id: 1,\n  name: \"Mario Rossi\",\n  vat_number: \"47803200154\",\n  tax_code: \"RSSMRA91M20B967Q\",\n  address_street: \"Via Italia, 66\",\n  address_postal_code: \"20900\",\n  address_city: \"Milano\",\n  address_province: \"MI\",\n  country: \"Italia\",\n)\n\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n  type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n  entity: entity,\n  date: Date.new(2022, 01, 20),\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: FattureInCloud_Ruby_Sdk::Currency.new(\n      id: \"EUR\"\n  ),\n  language: FattureInCloud_Ruby_Sdk::Language.new(\n      code: \"it\",\n      name: \"italiano\"\n  ),\n  items_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n          product_id: 4,\n          code: \"TV3\",\n          name: \"Tavolo in legno\",\n          net_price: 100,\n          category: \"cucina\",\n          discount: 0,\n          qty: 1,\n          vat: FattureInCloud_Ruby_Sdk::VatType.new(\n              id: 0\n          )\n      )\n  ),\n  payments_list: Array(\n    FattureInCloud_Ruby_Sdk::IssuedDocumentPaymentsListItem.new(\n          amount: 122,\n          due_date: Date.new(2022, 01, 23),\n          paid_date: Date.new(2022, 01, 22),\n          status: FattureInCloud_Ruby_Sdk::IssuedDocumentStatus::PAID,\n          payment_account: FattureInCloud_Ruby_Sdk::PaymentAccount.new(\n              id: 110\n          )\n      )\n  ),\n  payment_method: FattureInCloud_Ruby_Sdk::PaymentMethod.new(\n      id: 386683\n  ),\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  template: FattureInCloud_Ruby_Sdk::DocumentTemplate.new(\n      id: 150\n  )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  create_issued_document_request: FattureInCloud_Ruby_Sdk::CreateIssuedDocumentRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\nbegin\n  result = api_instance.create_issued_document(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;create_issued_document: #{e}\"\nend\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it before trying to send it!\n\n// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  IssuedDocumentsApi,\n  Entity,\n  IssuedDocument,\n  IssuedDocumentType,\n  CreateIssuedDocumentRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet entity: Entity = {};\nentity.id = 1;\nentity.name = \"Mario Rossi\";\nentity.vat_number = \"47803200154\";\nentity.tax_code = \"RSSMRA91M20B967Q\";\nentity.address_street = \"Via Italia, 66\";\nentity.address_postal_code = \"20900\";\nentity.address_city = \"Milano\";\nentity.address_province = \"MI\";\nentity.country = \"Italia\";\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: entity,\n  date: \"2022-01-20\",\n  number: 1,\n  numeration: \"/fatt\",\n  subject: \"internal subject\",\n  visible_subject: \"visible subject\",\n  currency: {\n    id: \"EUR\",\n  },\n  language: {\n    code: \"it\",\n    name: \"italiano\",\n  },\n  items_list: [\n    {\n      product_id: 4,\n      code: \"TV3\",\n      name: \"Tavolo in legno\",\n      net_price: 100,\n      category: \"cucina\",\n      discount: 0,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n  payments_list: [\n    {\n      amount: 122,\n      due_date: \"2022-01-23\",\n      paid_date: \"2022-01-22\",\n      status: \"paid\",\n      payment_account: {\n        id: 10,\n      },\n    },\n  ],\n  payment_method: {\n    id: 386683,\n  },\n  attachment_token: \"YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw\",\n  template: {\n    id: 150,\n  },\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest: CreateIssuedDocumentRequest = {\n  data: invoice,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>Once you filled all the fields you need, you can click the \"Continue\" button and follow the wizard to create your Zap!</p> <p>You just created your first invoice. Congratulations!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#send-the-document","title":"Send the document","text":"<p>After you created your invoice it's time to send it to your customer, with the Schedule Email method. To do that you have 2 options:</p> <ul> <li>use your SMTP server configured in Settings -&gt; SMTP configuration</li> <li>use our mail service setting the sender_id to 0 as shown in the examples below (the mail will result to be sent by no-reply@fattureincloud.it)</li> </ul> <p>In the email body you can use 3 variables:</p> <ul> <li>{{allegati}}: adds button to download attachments</li> <li>{{logo-1}}: adds the Logo 1 image</li> <li>{{logo-2}}: adds the Logo 2 image</li> </ul> <p>keep in mind that the max size of the body is 50KiB and must be HTML escaped.</p> <pre><code>POST /c/12345/issued_documents/54321/email HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: api-v2.fattureincloud.it\nContent-Length: 900\n\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            //set your company id\n            var companyId = 12345;\n\n            //set your previously created document id\n            var documentId = 54321;\n\n            // in this example we are using our C# SDK\n            // https://www.nuget.org/packages/It.FattureInCloud.Sdk/\n\n            EmailSchedule email = new EmailSchedule(\n                senderId: 0,\n                recipientEmail: \"mariorossi@mail.com\",\n                subject: \"Nostra fattura nr. 54321\",\n                include: new EmailScheduleInclude(\n                    document: true,\n                    deliveryNote: false,\n                    attachment: false,\n                    accompanyingInvoice: false\n                    ),\n                attachPdf: false,\n                sendCopy: false\n             );\n\n\n            ScheduleEmailRequest scheduleEmailRequest = new ScheduleEmailRequest(\n                data: email\n            );\n\n            // Now we are all set for the final call\n            // Schedule the email: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\n            try\n            {\n                apiInstance.ScheduleEmail(companyId, documentId, scheduleEmailRequest);\n            }\n            catch (ApiException e)\n            {\n                Debug.Print(\"Exception when calling IssuedDocumentsApi.ScheduleEmail: \" + e.Message);\n                Debug.Print(\"Status Code: \" + e.ErrorCode);\n                Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    //set your company id\n    documentId := int32(54321)\n\n    email := *fattureincloud.NewEmailSchedule().\n        SetSenderId(0).\n        SetRecipientEmail(\"mariorossi@mail.com\").\n        SetSubject(\"Nostra fattura nr. 54321\").\n        SetInclude(*fattureincloud.NewEmailScheduleInclude().\n            SetDocument(true).\n            SetDeliveryNote(false).\n            SetAttachment(false).\n            SetAccompanyingInvoice(false),\n        ).\n        SetAttachPdf(false).\n        SetSendCopy(false)\n\n    scheduleEmailRequest := *fattureincloud.NewScheduleEmailRequest().SetData(email)\n\n    // Now we are all set for the final call\n    // Schedule the email: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\n    resp, err := apiClient.IssuedDocumentsAPI.ScheduleEmail(auth, companyId, documentId).ScheduleEmailRequest(scheduleEmailRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.ScheduleEmail``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", resp)\n    }\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        // set your access token\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        // set your company id\n        Integer companyId = 12345;\n\n        // set your previously created document id\n        Integer documentId = 54321;\n\n        // in this example we are using our Java SDK\n        // https://search.maven.org/artifact/it.fattureincloud/fattureincloud-java-sdk\n\n        EmailSchedule email = new EmailSchedule()\n            .senderId(0)\n            .recipientEmail(\"mariorossi@mail.com\")\n            .subject(\"Nostra fattura nr. 54321\")\n            .include(\n                new EmailScheduleInclude()\n                    .document(true)\n                    .deliveryNote(false)\n                    .attachment(false)\n                    .accompanyingInvoice(false))\n            .attachPdf(false)\n            .sendCopy(false);\n\n        ScheduleEmailRequest scheduleEmailRequest = new ScheduleEmailRequest().data(email);\n\n        // Now we are all set for the final call\n        // Schedule the email: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\n        try {\n            apiInstance.scheduleEmail(companyId, documentId, scheduleEmailRequest);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#scheduleEmail\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\EmailSchedule;\nuse FattureInCloud\\Model\\ScheduleEmailRequest;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// set your company id\n$company_id = 12345;\n\n// set your previously retrieved document id\n$document_id = 54321;\n\n// In this example we are using our PHP SDK\n// https://packagist.org/packages/fattureincloud/fattureincloud-php-sdk\n\n$email = new EmailSchedule(\n    [\n        \"sender_id\" =&gt; 0,\n        \"recipient_email\" =&gt; \"mariorossi@mail.com\",\n        \"subject\" =&gt; \"Nostra fattura nr. 54321\",\n        \"include\" =&gt;\n            [\n                \"document\" =&gt; true,\n                \"delivery_note\" =&gt; false,\n                \"attachment\" =&gt; false,\n                \"accompanying_invoice\" =&gt; false\n            ],\n        \"attach_pdf\" =&gt; false,\n        \"send_copy\" =&gt; false\n    ]\n);\n\n$schedule_email_request = new ScheduleEmailRequest([\"data\" =&gt; $email]);\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#scheduleemail\ntry {\n    $apiInstance-&gt;scheduleEmail($company_id, $document_id, $schedule_email_request);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;scheduleEmail: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>// in this example we are using our JS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-js-sdk\n\nvar fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n//set your company id\nlet companyId = 12345;\n\n//set your previously created document id\nlet documentId = 54321;\n\nlet email = new fattureInCloudSdk.EmailSchedule();\nemail.sender_id = 0;\nemail.recipient_email = \"mariorossi@mail.com\";\nemail.subject = \"Nostra fattura nr. 54321\";\nemail.body =\nemail.include = {\n  document: true,\n  delivery_note: false,\n  attachment: false,\n  accompanying_invoice: false,\n};\nemail.attach_pdf = false;\nemail.send_copy = false;\n\nlet scheduleEmailRequest = new fattureInCloudSdk.ScheduleEmailRequest();\nscheduleEmailRequest.data = email;\n\nlet opts = {\n  scheduleEmailRequest: scheduleEmailRequest,\n};\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\napiInstance.scheduleEmail(companyId, documentId, opts).then(\n  () =&gt; {\n    console.log(\"API called successfully\");\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.email_schedule import EmailSchedule\nfrom fattureincloud_python_sdk.models.schedule_email_request import ScheduleEmailRequest\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your previously create document id\ndocument_id = 54321\n\n# in this example we are using our Python SDK\n# https://pypi.org/project/fattureincloud-python-sdk/\n\nemail = EmailSchedule(\n    sender_id=0,\n    recipient_email=\"mariorossi@mail.com\",\n    subject=\"Nostra fattura nr. 54321\",\n    include=EmailScheduleInclude(\n        document=True,\n        delivery_note=False,\n        attachment=False,\n        accompanying_invoice=False\n    ),\n    attach_pdf=False,\n    send_copy=False\n)\n\nschedule_email_request = ScheduleEmailRequest(\n    data = email\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#schedule_email\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_instance.schedule_email(company_id, document_id, schedule_email_request=schedule_email_request)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;schedule_email: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# set your previously retrieved document id\ndocument_id = 54321\n\n# in this example we are using our Ruby SDK\n# https://rubygems.org/gems/fattureincloud_ruby_sdk\n\nemail = FattureInCloud_Ruby_Sdk::EmailSchedule.new(\n  sender_id: 0,\n  recipient_email: \"mariorossi@mail.com\",\n  subject: \"Nostra fattura nr. 54321\",\n  include: FattureInCloud_Ruby_Sdk::EmailScheduleInclude.new(\n      document: true,\n      delivery_note: false,\n      attachment: false,\n      accompanying_invoice: false\n  ),\n  attach_pdf: false,\n  send_copy: false\n)\n\nopts = {\n  schedule_email_request: FattureInCloud_Ruby_Sdk::ScheduleEmailRequest.new(data: email)\n}\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleemail\nbegin\n  api_instance.schedule_email(company_id, document_id, opts)\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;schedule_email: #{e}\"\nend\n</code></pre> <pre><code>// in this example we are using our TS SDK\n// https://www.npmjs.com/package/@fattureincloud/fattureincloud-ts-sdk\n\nimport {\n  Configuration,\n  IssuedDocumentsApi,\n  EmailSchedule,\n  ScheduleEmailRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n// set your company id\nlet companyId = 12345;\n\n// set your previously created document id\nlet documentId = 54321;\n\nlet email: EmailSchedule = {};\nemail.sender_id = 0;\nemail.recipient_email = \"mariorossi@mail.com\";\nemail.subject = \"Nostra fattura nr. 54321\";\nemail.body =\nemail.include = {\n  document: true,\n  delivery_note: false,\n  attachment: false,\n  accompanying_invoice: false,\n};\nemail.attach_pdf = false;\nemail.send_copy = false;\n\nlet scheduleEmailRequest: ScheduleEmailRequest = {\n  data: email,\n};\n\n// Now we are all set for the final call\n// Schedule the email: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#scheduleEmail\napiInstance.schedule(companyId, documentId, createIssuedDocumentRequest).then(\n  () =&gt; {\n    console.log(\"API called successfully\");\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>In this case, you'll need to use the Schedule Email Action, so it is a different action than the one used before. You can decide to add another step to your Zap or to create a new Zap with a trigger on the Invoice Creation event.</p> <p>These are the fields required for this step:</p> Field Name Field Code Value Notes The ID of the company - 12345 Select it from the dropdown menu The ID of the document - 54321 The ID returned from the previous step (Trigger or Action) Email sender id data.sender_id 0 The ID 0 indicates our mail service Email recipient emails data.recipient_email mariorossi@mail.com Email subject data.subject Nostra fattura nr. 54321 Email body data.body XXX HTML escaped email body, check the request above to copy the content Include a button to view the document data.include.document true Include a button to view the delivery note data.include.delivery_note false Include a button to view the attachment data.include.attachment false Include a button to view the accompanying invoice data.include.accompanying_invoice false Attach the PDF of the document data.attach_pdf false Send a copy of the email... data.send_copy false <p>Please, remember that this request will most probably fail if executed as-is! For example, the IDs specified in the request must exist in order to avoid getting an error response! Remember to check the various methods explained in this guide to fill the request fields correctly!</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-creation/#send-the-e-invoice-to-the-sdi","title":"Send the E-Invoice to the SDI","text":"<p>If the document you created is an e-invoice, you can also send it to the SDI. We created a dedicated guide to describe this operation in detail.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","attachment","client","customer","e-invoice","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-join-transform/","title":"Join & Transform issued documents","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>TSE in Cloud makes it possible to transform a document into another type, for example, a proforma into an invoice, or to join two documents together. Of course, our APIs provide the same functionality, here we explain how to do it.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#join-or-transform","title":"Join or Transform","text":"<p>Although the transform and join use cases may seem very different, our APIs similarly treat them.</p> <p>:::danger These calls will NOT create the document Executing a join or transform call will NOT create the new document but, instead, it will return a body that you will need to pass to the create document method. :::</p> <p>Before diving into the functionality details it's better to define the two methods:</p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#family_man_woman_girl_boy-join","title":":family_man_woman_girl_boy:\u00a0 Join","text":"<p>You can use the Join Issued Document method to merge two documents into an invoice. The type of documents that can be joined are delivery_notes, orders, quotes, and work_reports.</p> <p>The required query parameters for the request are:</p> <ul> <li>ids: List of the document ids you want to join (eg. \"876991,876993,876997\").</li> <li>group: If this flag is set to 1, the request will group the items (e.g. if you have the same products in two different documents, they will be grouped); otherwise the items will be kept separate.</li> <li>e_invoice: If this flag is set to 1, your new document will be electronic.</li> </ul> <pre><code>GET /c/1235/issued_documents/join?ids=876991,876993,876997&amp;group=1&amp;e_invoice=1 HTTP/1.1\nAccept: application/json\nHost: api-v2.fattureincloud.it\n</code></pre> <p>The corresponding code with our SDKs:</p> <pre><code>using System;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            //set your company id\n            var companyId = 12345;\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            // Join documents: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#joinissueddocuments\n            try\n            {\n                JoinIssuedDocumentsResponse result = apiInstance.JoinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.JoinIssuedDocuments: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // Transform the document: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsAPI.md#joinissueddocuments\n    resp, r, err := apiClient.IssuedDocumentsAPI.JoinIssuedDocuments(auth, companyId).Ids(\"876991,876993,876997\").Group(1).EInvoice(1).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.JoinIssuedDocuments``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\n\npublic class Application {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // Join documents: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#joinissueddocuments\n        try {\n            JoinIssuedDocumentsResponse result = apiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#joinIssuedDocuments\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse FattureInCloud\\Configuration;\nuse FattureInCloud\\Api\\IssuedDocumentsApi;\n\n//set your access token\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#joinissueddocuments\ntry {\n    $result = $apiInstance-&gt;joinIssuedDocuments($company_id, \"876991,876993,876997\", 1, 1);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;joinIssuedDocuments: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet opts = {\n  group: 1,\n  eInvoice: 1,\n};\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#joinIssuedDocuments\napiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# Join documents: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#join_issued_documents\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.join_issued_documents(company_id, \"876991,876993,876997\", group=1, e_invoice=1)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;join_issued_documents: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\nopts = {\n  group: 1,\n  e_invoice: 1\n}\n\n# Join documents: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#join_issued_documents\nbegin\n  result = api_instance.join_issued_documents(company_id, \"876991,876993,876997\", opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;join_issued_documents: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// Join documents: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#joinIssuedDocuments\napiInstance.joinIssuedDocuments(companyId, \"876991,876993,876997\", 1, 1).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#transform","title":"Transform","text":"<p>The Transform Issued Document method makes it possible to transform a document into another type of document. Here you can find which types can be transformed and what they can become.</p> Actual Type New Type Quote Order, Proforma, Receipt, Invoice Work Report Order, Proforma, Receipt, Invoice Order Proforma, Receipt, Invoice Proforma Receipt, Invoice <p>The required query parameters for the request are:</p> <ul> <li>original_document_id: The id of the document you want to transform (eg. 876993).</li> <li>new_type: The type of document you want to obtain (eg. \"invoice\").</li> <li>e_invoice: If this flag is set to 1, your new document will be electronic.</li> <li>transform_keep_copy: If this flag is set to 1, your old document will be preserved.</li> </ul> <pre><code>GET /c/1235/issued_documents/transform?original_document_id=876993&amp;new_type=invoice&amp;e_invoice=1&amp;transform_keep_copy=1 HTTP/1.1\nAccept: application/json\nHost: api-v2.fattureincloud.it\n</code></pre> <p>The correspondig code with our SDKs:</p> <pre><code>using System;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            //set your company id\n            var companyId = 12345;\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            // Transform the document: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#transformissueddocument\n            try\n            {\n                TransformIssuedDocumentResponse result = apiInstance.TransformIssuedDocument(companyId, 876993, \"invoice\", 1, 1);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.TransformIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // Transform the document: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsAPI.md#transformIssuedDocument\n    resp, r, err := apiClient.IssuedDocumentsAPI.TransformIssuedDocument(auth, companyId).OriginalDocumentId(876993).NewType(\"invoice\").EInvoice(1).TransformKeepCopy(1).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsAPI.TransformIssuedDocument``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\n\npublic class Application {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        // Transform the document: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#transformissueddocument\n        try {\n            TransformIssuedDocumentResponse result = apiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", 1, 1);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#transformIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse FattureInCloud\\Configuration;\nuse FattureInCloud\\Api\\IssuedDocumentsApi;\n\n//set your access token\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// Transform the document: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#transformissueddocument\ntry {\n    $result = $apiInstance-&gt;transformIssuedDocument($company_id, 876993, \"invoice\", 1, 1);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;transformIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\nlet opts = {\n  eInvoice: 1,\n  transformKeepCopy: 1,\n};\n\n// Transform issued document: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#transformIssuedDocument\napiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# Transform the document: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#transform_issued_document\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.transform_issued_document(company_id, 876993, \"invoice\", e_invoice=1, transform_keep_copy=1)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;transform_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\nopts = {\n  e_invoice: 1,\n  transform_keep_copy: 1\n}\n\n# Transform the document: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#transform_issued_document\nbegin\n  result = api_instance.transform_issued_document(company_id, 876993, \"invoice\", opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;transform_issued_document: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// Transform the document: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#transformIssuedDocument\napiInstance.transformIssuedDocument(companyId, 876993, \"invoice\", 1, 1).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-join-transform/#send-it","title":"Send It!","text":"<p>The two methods above won't perform any modification, but they will just return the body that you'll need to use to perform the desired action. This lets you eventually review the final result and modify it if needed.</p> <p>The request also includes an options section, that makes it possible for our APIs to distinguish a normal document creation from a join or transform request; it is critical that you don't modify this section, but you must send it exactly as it is returned by the API.</p> <p>:::warning THE OPTIONS Make sure to pass also the options field to the creation call, it's the most important part of the process. :::</p> <p>The response will look like this:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"data\": {\n        \"type\": \"invoice\",\n        \"e_invoice\": true,\n        ...,\n    },\n    \"options\": {\n        \"create_from\": [\n            \"89144071\"\n        ],\n        \"transform\": true,\n        \"keep_copy\": true\n    }\n}\n</code></pre> <p>To persist the operation you must use the Create Issued Document method, using the previously returned body as input of the request; of course, you can modify it if needed, but please remember to leave the options section as it is. You can also check the Issued Document Creation Guide for more details.</p>","tags":["guides","invoice","transform","join"]},{"location":"scenario/invoice-totals/","title":"Invoice totals calculation","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>If you are setting the payments list of your invoice you must know the total amount of your items list. Luckily for you, you don't have to take the calculator out of your drawer, we got you covered with a specific set of methods to suit your needs, so you won't be seeing the Il totale dei pagamenti non corrisponde al totale da pagare error anymore.</p> <p>:::warning Beware of roundings! If you use numbers with more than 2 decimal digits when specifying the amounts in the items list and payments list they will automatically be rounded to 2 digits before doing any calculation, so if you do not take this into consideration you probably will get the 'Il totale dei pagamenti non corrisponde al totale da pagare' error. :::</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>:::info Are you using Zapier?</p> <p>Zapier Actions provide all the fields offered by the APIs, but it does not mean you need to compile all of them!</p> <p>To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values.</p> <p>The code of the fields will follow the JSON structure: for example, the \"type\" field is included in the \"data\" object, so the Zapier code will be \"data.type\". You can use the CRTL + F command to search the field's code faster </p> <p>In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!</p> <p>:::</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#old-or-new","title":"Old or new?","text":"<p>We got methods for all the cases you would possibly think of, either you are creating a new invoice or editing an old one we have a specific call.</p> <p>The two methods are:</p> <ul> <li>Get New Issued Document Totals</li> <li>Get Existing Issued Document Totals</li> </ul> <p>:::info Look out!</p> <p>Invoking these methods will not create or edit your invoice, it will only show you a preview of the totals. You still need to use the appropriate methods to apply the modifications.</p> <p>:::</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#new-invoice-totals","title":"New invoice totals","text":"<p>You can invoke the Get New Issued Document Totals method if you are creating a new invoice and want to know the totals after you added the items list to your invoice body: the response will contain all the info you need to finalize your invoice creation.</p> <p>Here you can find an example request and response.</p> <pre><code>POST /c/2/issued_document/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    \"data\": {\n        \"entity\": {\n            \"name\": \"test\"\n        },\n        \"type\": \"invoice\",\n        \"items_list\": [\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod1\",\n                \"net_price\": 35,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod2\",\n                \"net_price\": 39,\n                \"qty\": 1\n            }\n        ]\n    }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"amount_net\": 74,\n    \"amount_global_cassa_taxable\": 74,\n    \"taxable_amount\": 74,\n    \"vat_list\": {\n      \"21\": {\n        \"amount_net\": 74,\n        \"amount_vat\": 15.54\n      }\n    },\n    \"amount_vat\": 15.54,\n    \"amount_gross\": 89.54,\n    \"amount_enasarco_taxable\": 0,\n    \"amount_due\": 89.54,\n    \"amount_due_discount\": null,\n    \"payments_sum\": 0\n  }\n}\n</code></pre> <p>And here there are the examples to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                type: IssuedDocumentType.Invoice,\n                entity: new Entity(\n                    name: \"test\"\n                ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod1\",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod2\",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get new issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n            try {\n                GetNewIssuedDocumentTotalsResponse result = apiInstance.GetNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.GetNewIssuedDocumentTotals: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    //set your invoice info\n    invoice := *fattureincloud.NewIssuedDocument().\n        SetEntity(*fattureincloud.NewEntity().\n            SetId(1)).\n        SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n        SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod1\").\n                SetNetPrice(35).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod2\").\n                SetNetPrice(39).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n        })\n\n    // Here we put our invoice in the request object\n    getNewIssuedDocumentTotalsRequest := *fattureincloud.NewGetNewIssuedDocumentTotalsRequest().SetData(invoice)\n\n    // Now we are all set for the final call\n    // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n    resp, r, err := apiClient.IssuedDocumentsAPI.GetNewIssuedDocumentTotals(auth, companyId).GetNewIssuedDocumentTotalsRequest(getNewIssuedDocumentTotalsRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .type(IssuedDocumentType.INVOICE)\n                .entity(\n                    new Entity()\n                        .name(\"test\")\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod1\")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod2\")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get new issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\n        try {\n            GetNewIssuedDocumentTotalsResponse result = apiInstance.getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#getNewIssuedDocumentTotals\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = {\n  name: \"test\",\n};\ninvoice.items_list = [\n  {\n    name: \"prod1\",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod2\",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetNewIssuedDocumentTotalsRequest();\ngetNewIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getNewIssuedDocumentTotalsRequest: getNewIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.getNewIssuedDocumentTotals(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsList;\nuse FattureInCloud\\Model\\IssuedDocumentType;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice-&gt;setType(IssuedDocumentType::INVOICE);\n\n$entity = new Entity;\n$entity-&gt;setName(\"test\");\n\n$invoice-&gt;setEntity($entity);\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod1\",\n                \"net_price\" =&gt; 35,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod2\",\n                \"net_price\" =&gt; 39,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_new_issued_document_totals_request = new GetNewIssuedDocumentTotalsRequest;\n$get_new_issued_document_totals_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\ntry {\n    $result = $apiInstance-&gt;getNewIssuedDocumentTotals($company_id, $get_new_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;getNewIssuedDocumentTotals: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.entity import Entity\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document_type import IssuedDocumentType\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_request import GetNewIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_response import GetNewIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = IssuedDocument(\n    type = IssuedDocumentType(\"invoice\"),\n    entity = Entity(\n        name=\"test\"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name=\"prod1\",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod2\",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_new_issued_document_totals_request = GetNewIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_new_issued_document_totals(company_id, get_new_issued_document_totals_request=get_new_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;get_new_issued_document_totals: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n    entity: FattureInCloud_Ruby_Sdk::Entity.new(\n        name: \"test\",\n    ),\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod1\",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod2\",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_new_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetNewIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nbegin\n  result = api_instance.get_new_issued_document_totals(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;get_new_issued_document_totals: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetNewIssuedDocumentTotalsRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: \"test\",\n  },\n  items_list: [\n    {\n      name: \"prod1\",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod2\",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest: GetNewIssuedDocumentTotalsRequest = {\n  data: invoice,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest)\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre> <p>The Zapier Action you need is called Get New Issued Document Totals. After you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu.</p> <p></p> <p>Next, you must insert a request similar to the one we need for the Create Issued Document request. We suggest you check the Invoice Creation Guide for more info.</p> <p>You can then use the resulting totals of this request in the creation request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#existing-invoice-totals","title":"Existing invoice totals","text":"<p>If you want to edit an existing invoice instead, for example, to add a new item, you can get the updated totals invoking the Get Existing Issued Document Totals method and passing the updated fields in the request body.</p> <p>In the following example, we want to a third item to an existing invoice and we want to know what will be the resulting updated totals before making the modify issued document call, using the previously described method:</p> <pre><code>POST /c/2/issued_document/12345/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    \"data\": {\n        \"items_list\": [\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod1\",\n                \"net_price\": 35,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod2\",\n                \"net_price\": 39,\n                \"qty\": 1\n            },\n            {\n                \"vat\": {\n                    \"id\": 1\n                },\n                \"name\": \"prod3\",\n                \"net_price\": 48,\n                \"qty\": 1\n            }\n        ]\n    }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"amount_net\": 122,\n    \"amount_global_cassa_taxable\": 122,\n    \"taxable_amount\": 122,\n    \"vat_list\": {\n      \"21\": {\n        \"amount_net\": 122,\n        \"amount_vat\": 25.62\n      }\n    },\n    \"amount_vat\": 25.62,\n    \"amount_gross\": 147.62,\n    \"amount_enasarco_taxable\": 0,\n    \"amount_due\": 147.62,\n    \"amount_due_discount\": 0,\n    \"payments_sum\": 0\n  }\n}\n</code></pre> <p>And here there are the examples to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            //set your company id\n            var companyId = 12345;\n\n            //set your existing invoice id\n            var invoiceId = 54321;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod1\",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod2\",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: \"prod3\",\n                        netPrice: 48,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get existing issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n            try {\n                GetExistingIssuedDocumentTotalsResponse result = apiInstance.GetExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.GetExistingIssuedDocumentTotals: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    //set your access token\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    //set your document id\n    documentId := int32(54321)\n\n    //set your invoice info\n    invoice := *fattureincloud.NewIssuedDocument().\n        SetEntity(*fattureincloud.NewEntity().\n            SetId(1)).\n        SetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n        SetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod1\").\n                SetNetPrice(35).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod2\").\n                SetNetPrice(39).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n            *fattureincloud.NewIssuedDocumentItemsListItem().\n                SetName(\"prod3\").\n                SetNetPrice(48).\n                SetQty(1).\n                SetVat(*fattureincloud.NewVatType().SetId(0)),\n        })\n\n    // Here we put our invoice in the request object\n    getExistingIssuedDocumentTotalsRequest := *fattureincloud.NewGetExistingIssuedDocumentTotalsRequest().SetData(invoice)\n\n    // Now we are all set for the final call\n    // Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n    resp, r, err := apiClient.IssuedDocumentsAPI.GetExistingIssuedDocumentTotals(auth, companyId, documentId).GetExistingIssuedDocumentTotalsRequest(getExistingIssuedDocumentTotalsRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your existing invoice id\n        Integer invoiceId = 54321;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod1\")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod2\")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name(\"prod3\")\n                            .netPrice(BigDecimal.valueOf(48))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\n        try {\n            GetExistingIssuedDocumentTotalsResponse result = apiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#getExistingIssuedDocumentTotals\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.items_list = [\n  {\n    name: \"prod1\",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod2\",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: \"prod3\",\n    net_price: 48,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetExistingIssuedDocumentTotalsRequest();\ngetExistingIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getExistingIssuedDocumentTotalsRequest:\n    getExistingIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\napiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsListItem;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your existing invoice id\n$invoice_id = 54321;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice-&gt;setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod1\",\n                \"net_price\" =&gt; 35,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod2\",\n                \"net_price\" =&gt; 39,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                \"name\" =&gt; \"prod3\",\n                \"net_price\" =&gt; 48,\n                \"qty\" =&gt; 1,\n                \"vat\" =&gt; new VatType(\n                    array(\n                        \"id\" =&gt; 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_existing_issued_document_totals_request = new GetExistingIssuedDocumentTotalsRequest;\n$get_existing_issued_document_totals_request-&gt;setData($invoice);\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\ntry {\n    $result = $apiInstance-&gt;getExistingIssuedDocumentTotals($company_id, $invoice_id, $get_existing_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;getExistingIssuedDocumentTotals: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_request import GetExistingIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_response import GetExistingIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# set your existing invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = IssuedDocument(\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name=\"prod1\",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod2\",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name=\"prod3\",\n            net_price=48.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_existing_issued_document_totals_request = GetExistingIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_existing_issued_document_totals(company_id, invoice_id get_existing_issued_document_totals_request=get_existing_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;get_existing_issued_document_totals: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod1\",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod2\",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: \"prod3\",\n            net_price: 48,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_existing_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetExistingIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nbegin\n  result = api_instance.get_existing_issued_document_totals(company_id, invoice_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;get_existing_issued_document_totals: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetExistingIssuedDocumentTotalsRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: \"test\",\n  },\n  items_list: [\n    {\n      name: \"prod1\",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod2\",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: \"prod3\",\n      net_price: 48,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest: GetExistingIssuedDocumentTotalsRequest =\n  {\n    data: invoice,\n  };\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getExistingIssuedDocumentTotals(\n    companyId,\n    invoiceId,\n    getExistingIssuedDocumentTotalsRequest\n  )\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre> <p>The Zapier Action you need is called Get Existing Issued Document Totals. After you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu.</p> <p></p> <p>Additionally, you need to select the ID of the existing document, that can be provided by a previous step.</p> <p>Next, you must insert a request similar to the one we need for the Modify Issued Document request. We suggest you check the Invoice Creation Guide for more info.</p> <p>You can then use the resulting totals of this request in the modification request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/invoice-totals/#the-magic-field","title":"The magic field","text":"<p>If you don't mind about the amounts of each payment, but you just want them to match the expected totals, we provide a magic field that could be perfect for you.</p> <p>The options.fix_payments field, when set to true, adjusts your last payment amount of the payments list to match your document total, incrementing or reducing the amount accordingly. Of course, if you have only one payment it will be modified to match the document total.</p> <p>The options.fix_payment field must be used in the invoice creation request. Please, notice that this field is not included in the data field that contains the main section of the request, as you can see in the following example.</p> <pre><code>{\n    \"data\": {\n            ...\n    },\n    \"options\": {\n        \"fix_payments\": true\n    }\n}\n</code></pre> <p>And here there is the example to make this request with our SDKs:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n            IssuedDocument invoice = new IssuedDocument(\n                // ...\n            );\n\n            // Here we put our invoice in the request object\n            CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest(\n                data: invoice,\n                // And here we set the magic field\n                options: new IssuedDocumentOptions(\n                    fixPayments: true\n                )\n            );\n\n            // Now we are all set for the final call\n            // Create the invoice: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n            try {\n                CreateIssuedDocumentResponse result = apiInstance.CreateIssuedDocument(companyId, createIssuedDocumentRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine(\"Exception when calling IssuedDocumentsApi.CreateIssuedDocument: \" + e.Message);\n                Console.WriteLine(\"Status Code: \" + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n\n    //set your company id\n    companyId := int32(12345)\n\n    // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n    invoice := *fattureincloud.NewIssuedDocument(\n    // ...\n    )\n\n    // Here we put our invoice in the request object\n    createIssuedDocumentRequest := *fattureincloud.NewCreateIssuedDocumentRequest().\n        SetData(invoice).\n        // And here we set the magic field\n        SetOptions(*fattureincloud.NewIssuedDocumentOptions().\n            SetFixPayments(true),\n        )\n\n    resp, r, err := apiClient.IssuedDocumentsAPI.CreateIssuedDocument(auth, companyId).CreateIssuedDocumentRequest(createIssuedDocumentRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `IssuedDocumentsApi.CreateIssuedDocument``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n        IssuedDocument invoice = new IssuedDocument()\n        // ...\n\n        // Here we put our invoice in the request object\n        CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest()\n            .data(invoice)\n            // And here we set the magic field\n            .options(\n                new IssuedDocumentOptions()\n                    .fixPayments(true)\n            );\n\n        // Now we are all set for the final call\n        // Create the invoice: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n        try {\n            CreateIssuedDocumentResponse result = apiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling IssuedDocumentsApi#createIssuedDocument\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n// set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n// set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\n// ...\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest =\n  new fattureInCloudSdk.CreateIssuedDocumentRequest();\ncreateIssuedDocumentRequest.data = invoice;\n// And here we set the magic field\ncreateIssuedDocumentRequest.options = {\n  fix_payments: true,\n};\n\nlet opts = {\n  createIssuedDocumentRequest: createIssuedDocumentRequest,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\n\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentOptions;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n$invoice = new IssuedDocument;\n\n// Here we put our invoice in the request object\n$create_issued_document_request = new CreateIssuedDocumentRequest;\n$create_issued_document_request-&gt;setData($invoice);\n// And here we set the magic field\n$create_issued_document_request-&gt;setOptions(\n    new IssuedDocumentOptions(\n        [\n            \"fix_payments\" =&gt; true\n        ]\n    )\n);\n\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#createissueddocument\ntry {\n    $result = $apiInstance-&gt;createIssuedDocument($company_id, $create_issued_document_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi-&gt;createIssuedDocument: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocumentOptions\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = IssuedDocument(\n   # ...\n)\n\n# Here we put our invoice in the request object\ncreate_issued_document_request = CreateIssuedDocumentRequest(\n    data = invoice,\n    # And here we set the magic field\n    options = IssuedDocumentOptions(\n        fix_payments=true\n    )\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.create_issued_document(company_id, create_issued_document_request=create_issued_document_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling IssuedDocumentsApi-&gt;create_issued_document: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    # ...\n)\n\n# Here we put our invoice in the request object\nopts = {\n  create_issued_document_request: FattureInCloud_Ruby_Sdk::CreateIssuedDocumentRequest.new(\n        data: invoice,\n        # And here we set the magic field\n        options: FattureInCloud_Ruby_Sdk::IssuedDocumentOptions.new(\n            fix_payments: true\n      )\n    )\n}\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\nbegin\n  result = api_instance.create_issued_document(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling IssuedDocumentsApi-&gt;create_issued_document: #{e}\"\nend\n</code></pre> <pre><code>import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  CreateIssuedDocumentRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\nlet invoice: IssuedDocument = {\n  // ...\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest: CreateIssuedDocumentRequest = {\n  data: invoice,\n  options: {\n    fix_payments: true,\n  },\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest).then(\n  (data) =&gt; {\n    console.log(data);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>In Zapier, the magic field is called Fixes your last payment amount to match your document total, and its code is options.fix_payments; it must be set in the Create Issued Document request, check the Invoice Creation Guide for more details about this request.</p>","tags":["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},{"location":"scenario/syncronization-using-polling/","title":"Syncronization using Polling","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>In this use case, we suppose that you have a system that you want to keep in sync with the TSE in Cloud API, in particular retrieving the list of the products from our API and storing them in some way. In this example, we'll adopt a polling approach to retrieve the current state of the data stored in TSE in Cloud.</p> <p>If you want to download the complete SDKs examples you can find them here.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>:::danger Are you sure?</p> <p>A better approach is to use our Webhooks to keep your system updated. Check them out!</p> <p>:::</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#lets-start","title":"Let's start!","text":"<p>To keep the code as simple as possible, we decided to write the data to a JSON lines file, that could be then sent as input for an external system; of course, it is possible to use the retrieved elements as needed: for example, to update a Database status or to perform API calls towards a third-party system.</p> <p>:::warning Schedule the execution!</p> <p>To keep two systems in sync using polling, it is necessary to reiterate the extraction of the data from our APIs, scheduling the code execution.</p> <p>In this example, we deliberately omitted to add the code to repeat the execution of our code. For example, you could decide to add a Cron Library to your application or to execute the script using a Job Scheduler on your operating system. This is up to you.</p> <p>:::</p> <p>:::info Or execute it once...</p> <p>Even if we created this code to keep two systems synchronized periodically, it can also be used for a one-off extraction of the data from the TSE in Cloud API. Just execute it as it is...</p> <p>:::</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#libraries","title":"Libraries","text":"<p>In our examples, we'll use the TSE in Cloud SDKs; of course, you can just replace our SDKs with a simple HTTP Client if you prefer: check the dedicated page for further info. Additionally, for some languages, we added some other libraries to perform common tasks such as writing to the file system or performing the exponential backoff.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#initialize-our-sdk","title":"Initialize our SDK","text":"<p>In the first part of this example, we import our SDK and initialize it, using the Access Token requested to perform the API call. For simplicity, we didn't implement the code to retrieve the access token in these examples, but you can find more information in the Quickstarts or in the Authentication Implementation pages.</p> <p>Since we're trying to collect the list of products for a certain company, the products:r scope will be required; if you need to use another API method please select the appropriate scopes.</p> <p>Once the token is provided to our SDK, it is possible to start using it to interrogate our APIs.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#implement-the-exponential-backoff","title":"Implement the Exponential Backoff","text":"<p>The polling strategy implies the exigency to perform a potentially huge amount of requests in a really short period. As explained here, our APIs are protected by a set of limits that could result in an error if too many requests are performed in a certain interval.</p> <p>This is why in our examples we wrapped the API call with an Exponential Backoff method: it manages retries and time distance between two consecutive attempts, to avoid your script failing for a temporary quota-related issue.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#the-api-method","title":"The API Method","text":"<p>The API method that we're using is the List Products method, which returns the list of all the possible products for a certain company. The List methods provide Sorting and Customizing functionalities, but in this example we'll not use them.</p> <p>Each response of the List methods will be Paginated: to avoid returning enormous amounts of data with a single call, the list of products will be split into different pages, that can be retrieved consecutively. Each response contains a set of dedicated pagination parameters, that are meant to make the pages navigation task easier for you.</p> <p>In our code, we'll perform the first List request on the first page provided by our API, with a page size of five elements. Then we'll use the pagination parameter last_page to retrieve the subsequent pages, performing the needed number of API calls to export all the needed elements from the APIs.</p> <p>:::danger Be aware of the index!</p> <p>Please, notice that the pages on our APIs use one-based numbering: the first page has index 1.</p> <p>:::</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#manage-the-response","title":"Manage the response","text":"<p>Each response contains a data parameter, that is a JSON array representing one page (e.g. one subset of the list of products). Our SDKs parse the JSON array, so you can just use the elements contained in the array to perform the requested operations.</p> <p>In this example, we're just trying to populate a JSON Lines file, so for each product retrieved we obtain the related JSON representation and append it to the text file.</p>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#code-examples","title":"Code Examples","text":"<p>Here you can find the code described above.</p> <pre><code>// The following dependencies are required\n// dotnet add package It.FattureInCloud.Sdk\n// dotnet add package Polly\n// dotnet add package Polly.Contrib.WaitAndRetry\n\nusing System;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing Polly;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Polly.Contrib.WaitAndRetry;\n\nnamespace poll\n{\n    class Program\n    {\n        public static ProductsApi apiInstance;\n\n        static void Main(string[] args)\n        {\n            // This code should be executed periodically using a cron library or job scheduler.\n            // For example: https://www.quartz-scheduler.net/\n            SyncProducts();\n        }\n\n        private static void SyncProducts()\n        {\n            // Here we init the TSE in Cloud SDK\n            // The Access Token is retrieved using the \"GetToken\" method\n            Configuration config = new Configuration();\n            config.AccessToken = GetToken();\n\n            // In this example we're using the Products API\n            apiInstance = new ProductsApi(config);\n\n            // The ID of the controlled company.\n            var companyId = 2;\n\n            // Here we setup the exponential backoff config\n            var maxRetryAttempts = 5;\n            var pauseBetweenFailures =\n                Backoff.ExponentialBackoff(TimeSpan.FromSeconds(2), retryCount: maxRetryAttempts);\n\n            var retryPolicy = Policy\n                .WaitAndRetry(pauseBetweenFailures);\n\n            try\n            {\n                // In this example we suppose to export the data to a JSON Lines file.\n                // First, we cancel the content of the destination file\n                File.WriteAllText(\"products.jsonl\", String.Empty);\n\n                // List Products\n                var perPage = 5;\n\n                // We perform the first request\n                ListProductsResponse result =\n                    ListProductsWithBackoff(companyId, 1, perPage, retryPolicy, apiInstance);\n                // We use the first response to extract the last page index\n                var lastPage = result.LastPage;\n                // We append the products obtained with the first request top the output file\n                // Data contains an array of products\n                AppendProductsToFile(result.Data);\n\n                // For the missing pages (we already requested the first one)\n                for (var i = 2; i &lt;= lastPage; i++)\n                {\n                    // We require the page to the API\n                    result = ListProductsWithBackoff(companyId, i, perPage, retryPolicy, apiInstance);\n                    // And append all the retrieved products\n                    AppendProductsToFile(result.Data);\n                }\n            }\n            catch (ApiException ex)\n            {\n                Console.WriteLine(\"Exception when calling ProductsAPI.ListProducts: \" + ex.Message);\n                Console.WriteLine(\"Status Code: \" + ex.ErrorCode);\n                Console.WriteLine(ex.StackTrace);\n            }\n        }\n\n        // In this function we append the products in the JSON Lines file.\n        // You can replace this function to perform the operations you need.\n        // For example, you can build SQL queries or call a third-party API using the retrieved products.\n        {\n            StreamWriter sw = File.AppendText(\"products.jsonl\");\n            // For each product in the list\n            foreach (Product p in products)\n            {\n                // We write the product to the file\n                sw.WriteLine(JsonConvert.SerializeObject(p, Formatting.None) + \"\\n\");\n            }\n            sw.Close();\n        }\n\n        // Here we wrap the SDK method with an exponential backoff\n        // This is to manage the quota exceeded issue\n        private static ListProductsResponse ListProductsWithBackoff(int companyId, int currentPage, int perPage, Policy retryPolicy, ProductsApi apiInstance)\n        {\n            return retryPolicy.Execute(() =&gt;\n            {\n                // The actual SDK method is executed here\n                return apiInstance.ListProducts(companyId, null, \"detailed\", null, currentPage, 5);\n            });\n        }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n        private static string GetToken() {\n            return \"YOUR_TOKEN\";\n        }\n    }\n}\n</code></pre> <pre><code>// The following dependencies is required\n// go get github.com/fattureincloud/fattureincloud-go-sdk/\n// go get github.com/cenkalti/backoff/v4\n\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    backoff \"github.com/cenkalti/backoff/v4\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nvar (\n    f, _ = os.OpenFile(\"products.jsonl\", os.O_APPEND|os.O_WRONLY, 0644)\n    // The Access Token is retrieved using the \"getToken\" method\n    auth          = context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, getToken())\n    configuration = fattureincloudapi.NewConfiguration()\n    apiClient     = fattureincloudapi.NewAPIClient(configuration)\n    companyId     = int32(16) // This is the ID of the company we're working on\n    // Here we define the parameters for the first request.\n    nextPage = 1\n    attempts = 0\n)\n\nfunc main() {\n    // This code should be executed periodically using a cron library or job scheduler.\n    syncProducts()\n}\n\nfunc syncProducts() {\n    // In this example we suppose to export the data to a JSON Lines file.\n    // First, we cancel the content of the destination file\n    f.Truncate(0)\n    // Here we define the operation that retrieves the products\n    operation := func() error {\n        attempts++\n        fmt.Printf(\"Attempt: %d\\n\", attempts)\n        // In this example we're using the Products API\n        // Here we execute the actual SDK method\n        resp, _, err := apiClient.ProductsAPI.ListProducts(auth, companyId).Page(int32(nextPage)).PerPage(5).Execute()\n        if resp != nil {\n            // We check if there are other pages to retrieve\n            if resp.NextPageUrl.Get() == nil {\n                nextPage = 0\n            } else {\n                nextPage++\n            }\n            // We write the products of this page to the file\n            // \"data\" contains an array of products\n            appendProductsToFile(resp.Data)\n        }\n        return err\n    }\n    // For all the pages\n    for nextPage != 0 {\n        attempts = 0\n        // We call the operation function using Exponential Backoff\n        err := backoff.Retry(operation, backoff.NewExponentialBackOff())\n        if err != nil {\n            fmt.Fprintf(os.Stderr, \"Error %v\\n\", err)\n            return\n        }\n    }\n    f.Close()\n    fmt.Println(\"products succesfully retrieved and saved in ./products.jsonl\")\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunc appendProductsToFile(products []fattureincloud.Product) {\n    // For each product in the array\n    for _, element := range products {\n        // We obtain the related JSON and append it to the file as single line\n        jsonStr, _ := json.Marshal(element)\n        f.WriteString(string(jsonStr) + \"\\n\")\n    }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunc getToken() string {\n    return \"YOUR_TOKEN\"\n}\n</code></pre> <pre><code>import com.google.gson.Gson;\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.github.resilience4j.retry.Retry;\nimport io.github.resilience4j.retry.RetryConfig;\nimport io.github.resilience4j.retry.RetryRegistry;\nimport io.vavr.CheckedFunction0;\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.ProductsApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListProductsResponse;\nimport it.fattureincloud.sdk.model.Product;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\n\npublic class Application {\n    public static void main(String[] args) throws Throwable {\n        // This code should be executed periodically using a cron library or job scheduler.\n        // For example: http://www.quartz-scheduler.org/\n        syncProducts();\n    }\n\n    static void syncProducts() throws Throwable {\n\n        // Here we init the TSE in Cloud SDK\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        // The Access Token is retrieved using the \"getToken\" method\n        OAuth OAuth2AuthenticationCodeFlow =\n            (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(getToken());\n\n        // In this example we're using the Products API\n        ProductsApi apiInstance = new ProductsApi(defaultClient);\n\n        // The ID of the controlled company.\n        int companyId = 2;\n\n        // Here we setup the exponential backoff config\n        RetryConfig config = RetryConfig.custom()\n                .maxAttempts(10)\n                .retryExceptions(ApiException.class)\n                .intervalFunction(IntervalFunction.ofExponentialBackoff(1000, 2))\n                .build();\n\n        RetryRegistry registry = RetryRegistry.of(config);\n        Retry retry = registry.retry(\"listProducts\", config);\n\n        Retry.EventPublisher publisher = retry.getEventPublisher();\n        publisher.onRetry(event -&gt; System.out.println(event.toString()));\n\n        // In this example we suppose to export the data to a JSON Lines file.\n        // First, we cancel the content of the destination file\n        Files.write(Paths.get(\"products.jsonl\"), (\"\").getBytes(),\n            StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n\n        // List Products\n        int perPage = 5;\n\n        // We perform the first request\n        ListProductsResponse result = listProductsWithBackoff(companyId, 1, perPage, retry, apiInstance);\n\n        // We use the first response to extract the last page index\n        int lastPage = result.getLastPage();\n\n        // We append the products obtained with the first request top the output file\n        // Data contains an array of products\n        appendProductsToFile(result.getData());\n\n        // For the missing pages (we already requested the first one)\n        for (int i = 2; i &lt;= lastPage; i++)\n        {\n            // We require the page to the API\n            result = listProductsWithBackoff(companyId, i, perPage, retry, apiInstance);\n            // And append all the retrieved products\n            appendProductsToFile(result.getData());\n\n        }\n    }\n\n    // Here we wrap the SDK method with an exponential backoff\n    // This is to manage the quota exceeded issue\n    static ListProductsResponse listProductsWithBackoff(int companyId, int currentPage, int perPage,\n            Retry retry, ProductsApi apiInstance) throws Throwable {\n                Retry.decorateCheckedSupplier(retry,\n                        () -&gt; apiInstance.listProducts(companyId, null, \"detailed\", null, currentPage, 5));\n        return retryingListSuppliers.apply();\n    }\n\n        for (Product product : products) {\n            String p = new Gson().toJson(product);\n            Files.write(Paths.get(\"products.jsonl\"), (p + System.lineSeparator()).getBytes(),\n                StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n        }\n    }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n    static String getToken() {\n        return \"YOUR_TOKEN\";\n    }\n}\n</code></pre> <pre><code>// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-js-sdk\n\nconst fs = require(\"fs\");\nconst fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\nvar defaultClient = fattureInCloudSdk.ApiClient.instance;\nvar OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = getToken();\n\n// In this example we're using the Products API\nvar productsApiInstance = new fattureInCloudSdk.ProductsApi();\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) =&gt; console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate(\"./products.jsonl\", (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let opts = {\n    fields: null,\n    fieldset: \"detailed\",\n    sort: null,\n    page: 1, // We're trying to obtain the first page\n    perPage: 5, // Every page will contain at most 5 products\n  };\n  let companyId = 2; // This is the ID of the company we're working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, opts);\n    // We recover the last page index\n    let lastPage = result[\"last_page\"];\n    // We write the products of this page to the file\n    // \"data\" contains an array of products\n    await appendProductsToFile(result[\"data\"]);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i &lt;= lastPage; i++) {\n      // We update the page index\n      opts[\"page\"] = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, opts);\n      // And we write the products to the file\n      await appendProductsToFile(result[\"data\"]);\n    }\n    console.log(\"products succesfully retrieved and saved in ./products.jsonl\");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nasync function appendProductsToFile(products) {\n  // For each product in the array\n  for (i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync(\n      \"./products.jsonl\",\n      JSON.stringify(product) + \"\\n\",\n      (err) =&gt; {\n        if (err) {\n          console.error(err);\n          return;\n        }\n      }\n    );\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId, opts) {\n  var count = 0;\n  const delay = (retryCount) =&gt;\n    new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd = async (retryCount = 0, lastError = null) =&gt; {\n    if (retryCount &gt; 20) throw new Error(lastError);\n    try {\n      console.log(\"attempt:\", count++, \"wait:\", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await productsApiInstance.listProducts(companyId, opts);\n    } catch (e) {\n      await delay(retryCount);\n      return getProd(retryCount + 1, e);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return \"YOUR_TOKEN\";\n}\n</code></pre> <pre><code>&lt;?php\nrequire(\"vendor/autoload.php\");\n// The following dependencies are required\n// composer require stechstudio/backoff\n// composer require fattureincloud/fattureincloud-php-sdk\n\nuse FattureInCloud\\Api\\ProductsApi;\nuse FattureInCloud\\Configuration;\nuse GuzzleHttp\\Client;\nuse STS\\Backoff\\Backoff;\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://github.com/Cron/Cron\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\n$config = Configuration::getDefaultConfiguration()-&gt;setAccessToken(getToken());\n// In this example we're using the Products API\n$productsApiInstance = new ProductsApi(\n    new Client(),\n    $config\n);\n\n// In this example we suppose to export the data to a JSON Lines file.\n// First, we cancel the content of the destination file\nfile_put_contents(\"./products.jsonl\", \"\");\n\n// This is the ID of the company we're currently managing\n$companyId = 2;\n// We require the first page using the ListProducts method\n$result = listProductsWithBackoff($productsApiInstance, $companyId, 1);\n// We extract the index of the last page from the first response\n$lastPage = $result[\"last_page\"];\n// We append all the products to the destination file\n// \"data\" contains an array of products\nappendProductsToFile($result[\"data\"]);\n\n// For all the missing pages (we already have the first one)\nfor ($i = 2; $i &lt;= $lastPage; $i++) {\n    // We require the page at the selected index to the API\n    $result = listProductsWithBackoff($productsApiInstance, $companyId, $i);\n    // We append this page products to the file\n    appendProductsToFile($result[\"data\"]);\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunction appendProductsToFile($products)\n{\n    // For each product in the array\n    foreach ($products as $product) {\n        // We encode it to a JSON string and append it to the file as a single line\n        file_put_contents(\"products.jsonl\", json_encode($product) . \"\\n\", FILE_APPEND);\n    }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nfunction listProductsWithBackoff($productsApiInstance, $companyId, $currentPage): Object\n{\n    $backoff = new Backoff(100, 'exponential', 300000, true);\n    return $backoff-&gt;run(function () use ($productsApiInstance, $companyId, $currentPage) {\n        try {\n            // The actual SDK method is executed here\n            $result = $productsApiInstance-&gt;listProducts($companyId, null, \"detailed\", null, $currentPage, 5);\n        } catch (Exception $e) {\n            var_dump($e);\n        }\n        return $result;\n    });\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken(): String {\n  return \"YOUR_TOKEN\"\n}\n</code></pre> <pre><code># The following dependencies are required\n# pip install backoff\n# pip install fattureincloud-python-sdk\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import products_api\nfrom fattureincloud_python_sdk.exceptions import ApiException\nimport backoff\n# import collections #needed if you are using python &gt; 3.10\n# collections.Callable = collections.abc.Callable #needed if you are using python &gt; 3.10\n\n# Here we setup the exponential backoff config\n@backoff.on_exception(backoff.expo, ApiException, max_tries=10)\ndef list_products_with_backoff(products_api_instance, company_id, current_page, per_page):\n    return products_api_instance.list_products(company_id, page=current_page, per_page=per_page)\n\n# In this function we append the products in the JSON Lines file.\n# You can replace this function to perform the operations you need.\n# For example, you can build SQL queries or call a third-party API using the retrieved products.\ndef append_products_to_page(products):\n    # For each product in the list\n    for p in products:\n        f = open(\"products.jsonl\", \"a\")\n        # We write the product to the file\n        f.write(str(p).replace(\"\\n\", \"\"))\n        f.write(\"\\n\")\n        f.close()\n\ndef get_token():\n    return \"YOUR_TOKEN\"\n\ndef sync_products():\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the \"GetToken\" method\n    configuration = fattureincloud_python_sdk.Configuration()\n    configuration.access_token = get_token()\n    configuration.retries = 0 # Needed to implement custom backoff\n    # The ID of the controlled company.\n    company_id = 2\n    current_page = 1\n    per_page = 5\n\n    with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n        # In this example we're using the Products API\n        products_api_instance = products_api.ProductsApi(api_client)\n\n        # We perform the first request\n        result = list_products_with_backoff(products_api_instance, company_id, current_page, per_page)\n        last_page = result.last_page\n\n        # We append the products obtained with the first request to the output file\n        # Data contains an array of products\n        append_products_to_page(result.data)\n\n        # In this example we suppose to export the data to a JSON Lines file.\n        # First, we cancel the content of the destination file\n        file = open(\"products.jsonl\",\"r+\")\n        file.truncate(0)\n        file.close()\n\n        # For the missing pages (we already requested the first one)\n        for x in range(2, last_page):\n            # We require the page to the API\n            result = list_products_with_backoff(products_api_instance, company_id, x, per_page)\n            # And append all the retrieved products\n            append_products_to_page(result.data)\n\n# This code should be executed periodically using a cron library or job scheduler.\nsync_products()\n</code></pre> <pre><code># The following dependency is required\n# gem install fattureincloud_ruby_sdk\n\nrequire 'fattureincloud_ruby_sdk'\nrequire 'json'\n\ndef main()\n    FattureInCloud_Ruby_Sdk.configure do |config|\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the \"get_token\" method\n    config.access_token = get_token()\n    end\n\n    # In this example we're using the Products API\n    products_api_instance = FattureInCloud_Ruby_Sdk::ProductsAPI.new\n    retries = 0\n    max_retries = 20\n\n    # This is the ID of the company we're working on\n    company_id = 2\n    # Here we define the parameters for the first request.\n    opts = {\n        fields: nil,\n        fieldset: \"detailed\",\n        sort: nil,\n        page: 1, # We're trying to obtain the first page\n        per_page: 5 # Every page will contain at most 5 products\n    }\n    actual_page = 2\n\n    result = list_products_with_backoff(company_id, opts, products_api_instance)\n    last_page = result.last_page\n\n    # In this example we suppose to export the data to a JSON Lines file.\n    # First, we cancel the content of the destination file\n    File.delete('./products.jsonl') if File.exist?('./products.jsonl')\n    append_products_to_file(result.data)\n\n    while actual_page &lt;= last_page do\n        opts[:page] = actual_page\n        res = list_products_with_backoff(company_id, opts, products_api_instance)\n        append_products_to_file(res.data)\n        actual_page += 1\n    end\nend\n\ndef list_products_with_backoff(company_id, opts, products_api_instance)\n    retries = 0\n    begin\n        puts \"attempt: #{retries}\\n\"\n        products = products_api_instance.list_products(company_id, opts)\n        return products\n    rescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n        if retries &lt;= max_retries\n            retries += 1\n            sleep 2 ** retries\n            retry\n        else\n            raise \"Giving up on the server after #{retries} retries. Got error: #{e.message}\"\n        end\n    end\nend\n\n\ndef append_products_to_file(products)\n    for product in products\n        File.write('./products.jsonl', product.to_hash.to_json + \"\\n\", mode: 'a')\n    end\nend\n\ndef get_token()\n  return \"YOUR_TOKEN\"\nend\n\n# This code should be executed periodically using a cron library or job scheduler.\nmain()\n</code></pre> <pre><code>// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-ts-sdk\n\nimport fs from \"fs\";\nimport { Product } from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the \"getToken\" method\nimport {\n  Configuration,\n  ProductsApi,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\nconst apiConfig = new Configuration({\n  accessToken: getToken(),\n});\n\n// In this example we're using the Products API\nvar productsApiInstance = new ProductsApi(apiConfig);\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) =&gt; console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate(\"./products.jsonl\", (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let page = 1;\n\n  let companyId = 16; // This is the ID of the company we're working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, page);\n    // We recover the last page index\n    let lastPage = result[\"last_page\"];\n    // We write the products of this page to the file\n    // \"data\" contains an array of products\n    await appendProductsToFile(result.data);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i &lt;= lastPage; i++) {\n      // We update the page index\n      page = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, page);\n      // And we write the products to the file\n      await appendProductsToFile(result.data);\n    }\n    console.log(\"products succesfully retrieved and saved in ./products.jsonl\");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\n  // For each product in the array\n  for (var i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync(\"./products.jsonl\", JSON.stringify(product) + \"\\n\");\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId: number, page: number) {\n  var count = 0;\n  const delay = (retryCount: number) =&gt;\n    new Promise((resolve) =&gt; setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd: any = async (retryCount = 0, lastError?: string) =&gt; {\n    if (retryCount &gt; 20) throw new Error(lastError);\n    try {\n      console.log(\"attempt:\", count++, \"wait:\", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await (\n        await productsApiInstance.listProducts(\n          companyId,\n          undefined,\n          \"detailed\",\n          undefined,\n          page\n        )\n      ).data;\n    } catch (e: any) {\n      await delay(retryCount);\n      return getProd(++retryCount, e.message);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return \"YOUR_TOKEN\";\n}\n</code></pre>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"scenario/syncronization-using-polling/#additional-resources","title":"Additional resources","text":"<ul> <li>Exponential Backoff</li> <li>Zero-based numbering</li> </ul>","tags":["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/","title":"SDKs Overview","text":"<p>import DocCardList from \"@theme/DocCardList\"; import { useCurrentSidebarCategory } from \"@docusaurus/theme-common\";</p> <p>To help you interact with our APIs we decided to create a set of dedicated SDKs (Software Developer Kits) in a certain number of programming languages, that can be useful to speed up the integration process. These SDKs provide updated models and methods to contact our APIs with minimal configuration, making it possible to start interacting with TSE in Cloud within minutes: in most cases, you just need to retrieve the Access Token and you're ready to go!</p> <p>:::note Confused?</p> <p>Here you can find a really interesting video that explains the relationship between APIs and SDKs, and we suggest watching it if you still have some doubts.</p> <p>:::</p>","tags":["sdk","code example"]},{"location":"sdks/#im-ready-to-dance-what-is-on-the-sdk-playlist","title":"I'm ready to dance! What is on the SDK playlist?","text":"<p>Here you can find the list of the currently supported SDKs:</p> <p>Our SDKs are released with MIT license.</p>","tags":["sdk","code example"]},{"location":"sdks/#raising_hand_man-do-i-really-need-to-use-an-sdk","title":":raising_hand_man:\u00a0 Do I really need to use an SDK?","text":"<p>Actually, no. TSE in Cloud provides simple REST APIs, and if you want you are free to write your own code to contact them; you'll find useful info in the API reference section of this documentation.</p> <p>We strongly suggest using our SDKs, here you can find some good reasons to decide to use them:</p> <ul> <li>It simplifies the integration task, providing useful models and methods out-of-the-box;</li> <li>We'll take care of it for you, updating the models and the dependencies when needed;</li> <li>We'll test and fix bugs that will eventually arise on our APIs.</li> </ul> <p>There are some possible reasons why you could prefer to write custom code instead:</p> <ul> <li>Your programming language is not yet supported;</li> <li>You're using an unsupported version of a supported programming language (for example PHP 5);</li> <li>You have some dependency conflict;</li> <li>You are using a small subset of our APIs and don't want to install the whole SDK;</li> <li>You are already using a different set of libraries (for example, a different HTTP client) and don't want to introduce another dependency;</li> <li>You just want to stay as vanilla as possible.</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/#my-favorite-language-is-not-supported-what-can-i-do","title":"My favorite language is not supported! What can I do?","text":"<p>Don't worry. We're planning to provide SDKs for the most popular programming languages, so your favorite one could be the next!</p> <p>In the meanwhile, you can:</p> <ul> <li>Send suggestions: If we receive a lot of requests for a particular language, it will be more likely to be the next in line!</li> <li>Go Vanilla: If you check the Vanilla code section of our documentation you can find all the information required to write vanilla code.</li> <li>Generate your own SDK: We provide an OpenAPI Specification for the TSE in Cloud API, so you can use it to generate your home-made SDK! :cook:</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/#i-found-a-bug-on-your-sdks-what-can-i-do","title":"I found a bug on your SDKs, what can I do?","text":"<p>Any help is always welcome!</p> <p>Feel free to open an issue on the repository of the specific SDK (check the dedicated pages), describing the issue, sharing example code to replicate the error, and eventually proposing a possible solution.</p>","tags":["sdk","code example"]},{"location":"sdks/#additional-resources","title":"Additional Resources","text":"<ul> <li>SDK on Wikipedia</li> </ul>","tags":["sdk","code example"]},{"location":"sdks/go-sdk/","title":"Go SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Go applications.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on GitHub</p> <p>:::</p> <p>The SDK can be installed running the following command:</p> <pre><code>go get github.com/fattureincloud/fattureincloud-go-sdk\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Go Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n}\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>suppliersApi := fattureincloudapi.NewAPIClient(configuration).SuppliersApi\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the ListSuppliers and ModifySupplier methods explained above:</p> <pre><code>// NOTE: this is a complete request, but please customize it!!!\n// In the next step we'll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n    companyId := int32(12345) // int32 | The ID of the company.\n    fields := \"\" // string | List of comma-separated fields. (optional)\n    fieldset := \"detailed\" // string | Name of the fieldset. (optional)\n    sort := \"-id\" // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\n    page := int32(2) // int32 | The page to retrieve. (optional) (default to 1)\n    perPage := int32(8) // int32 | The size of the page. (optional) (default to 5)\n\n    // Configure OAuth2 access token for authorization:\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    suppliersApi := fattureincloudapi.NewAPIClient(configuration).SuppliersApi\n    companySuppliers, r, err := suppliersAPI.ListSuppliers(auth, companyId).Fields(fields).Fieldset(fieldset).Sort(sort).Page(page).PerPage(perPage).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `SuppliersAPI.ListSuppliers``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n\n    firstSupplier := companySuppliers.GetData()[0]\n\n    modifySupplierRequest := *firstSupplier.SetName(\"nuovo nome\").SetPhone(\"03561234312\")\n\n    resp, r, err := suppliersAPI.ModifySupplier(auth, companyId, firstSupplier.GetId()).ModifySupplierRequest(modifySupplierRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `SuppliersAPI.ModifySupplier``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n\n    // response from `ModifySupplier`: ModifySupplierResponse\n    json.NewEncoder(os.Stdout).Encode(resp)\n\n}\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>json.NewEncoder(os.Stdout).Encode(modifySupplierRequest)\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest := *fattureincloud.NewModifySupplierRequest()\nerr := json.Unmarshal([]byte(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\"), &amp;modifySupplierRequest)\n</code></pre>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Go SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Go SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> </ul>","tags":["sdk","code example","go"]},{"location":"sdks/go-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>[Go](https://en.wikipedia.org/wiki/Go_(programming_language)</li> </ul>","tags":["sdk","code example","go"]},{"location":"sdks/java-sdk/","title":"Java SDK","text":"<p>The TSE in Cloud Java SDK is a Java library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Java applications. It is mainly based on the OkHttp client.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on the Maven Central Repository</p> <p>:::</p> <p>The SDK can be installed by adding the dependency in your project pom.xml</p> <p>```xml title=\"pom.xml\"  it.fattureincloud fattureincloud-java-sdk VERSION </p> <pre><code>\nor in your **build.gradle** file\n\n```groovy title=\"build.gradle\"\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n    implementation \"it.fattureincloud:fattureincloud-java-sdk:VERSION\"\n}\n</code></pre> <p>:::info Another tool?</p> <p>If you want to use another build tool (for example SBT) you can check on the Maven Central Repository or MvnRepository.</p> <p>:::</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Java Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First you need to add the using directives for the imported library at the start of your .java file:</p> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.SuppliersApi;\n</code></pre> <p>Now you need to initialize the authentication using the token:</p> <pre><code>// Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>ApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\nSuppliersApi suppliersApiInstance = new SuppliersApi(defaultClient);\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>Integer companyId = 12345; // Integer | The ID of the company.\n\n// Retrieve the list of the Suppliers for the selected company\nString fields = \"\"; // String | List of comma-separated fields.\nString fieldset = \"detailed\"; // String | Name of the fieldset.\nString sort = \"-id\"; // String | List of comma-separated fields for result sorting (minus for desc sorting).\nInteger page = 2; // Integer | The page to retrieve.\nInteger perPage = 8; // Integer | The size of the page.\nListSuppliersResponse companySuppliers = apiInstance.listSuppliers(companyId, fields, fieldset, sort, page, perPage);\n\nInteger supplierId = 56; // Integer | The ID of the supplier.\n\n// Modify the selected supplier\nModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest()\n  .data(\n        new Supplier()\n        .name(\"nuovo nome\")\n        .phone(\"03561234312\")\n    ); // ModifySupplierRequest | The modified Supplier. First level parameters are managed in delta mode.\n\nModifySupplierResponse modifySupplierResponse = apiInstance.modifySupplier(companyId, supplierId, modifySupplierRequest);\nSystem.out.println(\"Supplier modificato correttamente\");\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>System.out.println(modifySupplierRequest.toJson());\n</code></pre>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>// import com.google.gson.Gson;\nGson gson = jsonManager.getGson();\nModifySupplierRequest generated = gson.fromJson(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\", ModifySupplierRequest.class);\n</code></pre>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Java SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Java SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>SDK Javadoc: The standard Java documentation</li> <li>Maven Central: The main package page</li> </ul>","tags":["sdk","code example","java"]},{"location":"sdks/java-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Java</li> <li>Java on Wikipedia</li> <li>JDK Matrix</li> <li>Apache Maven</li> <li>Gradle Build Tool</li> <li>Scala SBT</li> <li>Maven Central</li> <li>Maven Repository</li> <li>OkHttpClient</li> </ul>","tags":["sdk","code example","java"]},{"location":"sdks/javascript-sdk/","title":"JavaScript SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud JavaScript SDK is a JavaScript library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Node.js applications and in-browser (using Browserify). It is mainly based on the Superagent HTTP Client.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NPM or Yarn</p> <p>:::</p> <p>The SDK can be installed using NPM and Yarn:</p> <pre><code>npm install @fattureincloud/fattureincloud-js-sdk\n</code></pre> <pre><code>yarn add @fattureincloud/fattureincloud-js-sdk\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the JavaScript Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>var fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\n\nvar defaultClient = fattureInCloudSdk.ApiClient.instance;\n\nvar auth = defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nauth.accessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>let suppliersApi = new fattureInCloudSdk.SuppliersApi();\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>let companyId = 12345; // Number | The ID of the company.\nlet opts = {\n  fields: \"fields_example\", // String | List of comma-separated fields.\n  fieldset: \"fieldset_example\", // String | Name of the fieldset.\n  sort: \"sort_example\", // String | List of comma-separated fields for result sorting (minus for desc sorting).\n  page: 1, // Number | The page to retrieve.\n  perPage: 5, // Number | The size of the page.\n};\nsuppliersApi.listSuppliers(companyId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n\nlet supplierId = 56; // Number | The ID of the supplier.\nlet opts = new fattureInCloudSdk.ModifySupplierRequest();\nmodifySupplierRequest.data.name = \"nuovo nome\"; // ModifySupplierRequest | The modified Supplier.\nmodifySupplierRequest.data.phone = \"03561234312\";\n\nsuppliersApi.modifySupplier(companyId, supplierId, opts).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>console.log(JSON.stringify(modifySupplierRequest));\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest = JSON.parse(\n  '{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}'\n);\n</code></pre>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our JavaScript SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>JavaScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["sdk","code example","javascript"]},{"location":"sdks/javascript-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>JavaScript</li> <li>Node.js</li> <li>Node.js on Wikipedia</li> <li>Node.js releases</li> <li>Browserify</li> <li>NPM</li> <li>Yarn</li> <li>Superagent HTTP Client</li> </ul>","tags":["sdk","code example","javascript"]},{"location":"sdks/net-sdk/","title":".NET SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud C# SDK is a C# library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in C#, F# and Visual Basic projects. It is mainly based on the RestSharp HTTP Client.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NuGet</p> <p>:::</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>The SDK can be installed using Nuget directly from the Visual Studio nuget package manager or with the following command:</p> <pre><code>dotnet add package It.FattureInCloud.Sdk\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the C# Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to add the using directives for the imported library at the start of your .cs file:</p> <pre><code>using It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n</code></pre> <pre><code>Imports It.FattureInCloud.Sdk.Api\nImports It.FattureInCloud.Sdk.Client\nImports It.FattureInCloud.Sdk.Model\n</code></pre> <p>Now you need to initialize the authentication using the token:</p> <pre><code>Configuration config = new Configuration();\nconfig.BasePath = \"https://api-v2.fattureincloud.it\";\n// Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.AccessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <pre><code>Dim config As New Configuration()\nconfig.BasePath = \"https://api-v2.fattureincloud.it\"\n' Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.AccessToken = \"YOUR ACCESS TOKEN\";\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>var suppliersApiInstance = new SuppliersApi(config);\n</code></pre> <pre><code>Dim suppliersApiInstance As New SuppliersApi(config)\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>var companyId = 12345;\n\n// Retrieve the list of the Suppliers for the selected company\nvar fields = \"\";  // string | List of comma-separated fields. (optional)\nvar fieldset = \"detailed\";  // string | Name of the fieldset. (optional)\nvar sort = \"-id\";  // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\nvar page = 2;  // int? | The page to retrieve. (optional)  (default to 1)\nvar perPage = 8;  // int? | The size of the page. (optional)  (default to 5)\nvar companySuppliers = suppliersApiInstance.ListSuppliers(companyId, null, fieldset, sort, page, perPage);\n\nvar supplierId = companySuppliers.Data[0].Id\n\n// Modify the first supplier\nModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest();\nmodifySupplierRequest.Data = new Supplier();\nmodifySupplierRequest.Data.Name = \"nuovo nome\";\nmodifySupplierRequest.Data.Phone = \"03561234312\";\nvar modifySupplierResponse = suppliersApiInstance.ModifySupplier(companyId, supplierId, modifySupplierRequest);\nConsole.Write(\"Supplier modificato correttamente\");\n</code></pre> <pre><code>Dim companyId = 12345\n\n' Retrieve the list of the Suppliers for the selected company\nDim fields = \"\"  ' String | List Of comma-separated fields. (Optional)\nDim fieldset = \"detailed\"  ' String | Name Of the fieldset. (Optional)\nDim sort = \"-id\"  ' String | List Of comma-separated fields For result sorting (minus For desc sorting). (Optional)\nDim page = 2  ' int? | The page To retrieve. (Optional)  (Default To 1)\nDim perPage = 8  ' int? | The size Of the page. (Optional)  (Default To 5)\nDim companySuppliers = suppliersApiInstance.ListSuppliers(companyId, Nothing, fieldset, sort, page, perPage)\n\nDim supplierId = companySuppliers.Data(0).Id\n\n' Modify the first supplier\nDim modifySupplierRequest As New ModifySupplierRequest()\nmodifySupplierRequest.Data = New Supplier()\nmodifySupplierRequest.Data.Name = \"nuovo nome\"\nmodifySupplierRequest.Data.Phone = \"03561234312\"\nDim modifySupplierResponse = suppliersApiInstance.ModifySupplier(companyId, supplierId, modifySupplierRequest)\nConsole.Write(\"Supplier modificato correttamente\")\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>Console.WriteLine(modifySupplierRequest.ToJson());\n</code></pre> <pre><code>Console.WriteLine(modifySupplierRequest.ToJson())\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>// using Newtonsoft.Json;\n</code></pre> <pre><code>' Imports Newtonsoft.Json\nDim modifySupplierRequest = JsonConvert.DeserializeObject(Of ModifySupplierRequest)(\"{\"\"data\"\":{\"\"name\"\":\"\"nuovo nome\"\", \"\"phone\"\":\"\"03561234312\"\"}}\")\n</code></pre>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our C# SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>C# SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NuGet page: The main package page</li> </ul>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/net-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>.NET libraries compatibility</li> <li>C#</li> <li>C# Version History</li> <li>Asp.Net</li> <li>Nuget</li> <li>Rest Sharp HTTP Client</li> </ul>","tags":["sdk","code example","c#","vb"]},{"location":"sdks/php-sdk/","title":"PHP SDK","text":"<p>The TSE in Cloud PHP SDK is a PHP library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports PHP 7.1 and later. It is mainly based on the Guzzle HTTP Client.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#installation-with-composer","title":"Installation with Composer","text":"<p>The SDK is published into Packagist and it can be installed using Composer:</p> <pre><code>composer require fattureincloud/fattureincloud-php-sdk\n</code></pre> <p>:::danger Important! Make sure you always import the newest version of our SDK, you can check which version is the latest on Packagist :::</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#installation-without-composer","title":"Installation without Composer","text":"<p>If you can't install our library using composer there are three routes you can take:</p> <ul> <li>the first and recommended one is to download the latest release of the sdk Phar Archive, then you can simply include it in your project.</li> </ul> <pre><code>require_once('./fattureincloud-php-sdk.phar');\n</code></pre> <ul> <li>the second route is to download our sdk using php-download and include it in your project</li> <li>the third route is to create your own custom autoloader and download all the dependencies (transitive included) as explained here.</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>Api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to actually call our APIs.</li> <li>Model: This package contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them are dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the PHP Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by passing the scope parameter.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the Api classes, for example:</p> <pre><code>$supplierApi = new FattureInCloud\\Api\\SuppliersApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n</code></pre> <p>Once you obtained the needed Api instance, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>$company_id = 12345; // int | The ID of the company.\n$fields = 'fields_example'; // string | List of comma-separated fields.\n$fieldset = 'fieldset_example'; // string | Name of the fieldset.\n$sort = 'sort_example'; // string | List of comma-separated fields for result sorting (minus for desc sorting).\n$page = 1; // int | The page to retrieve.\n$per_page = 5; // int | The size of the page.\n\ntry {\n    $result = $suppliersApi-&gt;listSuppliers($company_id, $fields, $fieldset, $sort, $page, $per_page);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SuppliersApi-&gt;listSuppliers: ', $e-&gt;getMessage(), PHP_EOL;\n}\n\n$supplier_id = 56; // int | The ID of the supplier.\n\n$supplier = new FattureInCloud\\Model\\Supplier;\n$supplier-&gt;setName(\"nuovo nome\");\n$supplier-&gt;setPhone(\"03561234312\");\n\n$modify_supplier_request = new FattureInCloud\\Model\\ModifySupplierRequest;\n$modify_supplier_request-&gt;setData($supplier);\n\ntry {\n    $result = $suppliersApi-&gt;modifySupplier($company_id, $supplier_id, $modify_supplier_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling SuppliersApi-&gt;modifySupplier: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>echo(json_encode($modify_supplier_request));\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>$modify_supplier_request = json_decode(\"{\\\"data\\\":{\\\"name\\\":\\\"nuovo nome\\\", \\\"phone\\\":\\\"03561234312\\\"}}\");\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#improve-error-handling","title":"Improve error handling","text":"<p>If you have ever run into a Guzzle exception, you probably know that the error message gets truncated like this one:</p> <pre><code>Exception when calling IssuedDocumentsApi - &gt; createIssuedDocument: [422]\nClient error: `POST http://api-v2.local.fattureincloud.it//c/2/issued_documents`\nresulted in a `422 Unprocessable Entity`\nresponse: {\n        \"error\": {\n            \"message\": \"Invalid request.\",\n            \"validation_result\": {\n                \"data\": [\"The data field is required.\"],\n                \"data.entity\": [\"The d (truncated...)\n</code></pre> <p>With an incomplete error like this most of the times it's difficult to understand where the actual problem is to proceed to fix it, luckily our SDK error handling can be improved like this:</p> <pre><code>// set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YUOR_ACCESS_TOKEN');\n\n$stack = new HandlerStack(Utils::chooseHandler());\n// define a custom error size\n$stack-&gt;push(Middleware::httpErrors(new BodySummarizer(2048)), 'http_errors');\n$stack-&gt;push(Middleware::redirect(), 'allow_redirects');\n$stack-&gt;push(Middleware::cookies(), 'cookies');\n$stack-&gt;push(Middleware::prepareBody(), 'prepare_body');\n\n// create a custom client\n$client = new Client(['handler' =&gt; $stack /* other options here */ ]);\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new Client(),\n    $config\n);\n</code></pre>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our PHP SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>PHP SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Packagist page: The main package page on Packagist</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/php-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>PHP</li> <li>PHP on WIkipedia</li> <li>PHP Versions</li> <li>Packagist</li> <li>Composer</li> <li>Guzzle HTTP Client</li> </ul>","tags":["sdk","code example","php"]},{"location":"sdks/python-sdk/","title":"Python SDK","text":"<p>The TSE in Cloud Python SDK is a Python library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports Python 3.6 and later. It is mainly based on urllib3.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on PyPI</p> <p>:::</p> <p>The SDK can be installed using PIP and PyPI:</p> <pre><code>pip install fattureincloud-python-sdk\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Here you can find our documentation.</p> <p>Our SDK is mainly split into two different folders:</p> <ul> <li>api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to actually call our APIs.</li> <li>model: This folder contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them are dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and of the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Python Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by passing the scope parameter.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>configuration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = 'YOUR_ACCESS_TOKEN'\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the API classes, for example:</p> <pre><code>with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    suppliers_api_instance = suppliers_api.SuppliersApi(api_client)\n</code></pre> <p>Once you obtained the needed API instance, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the list_suppliers and modify_supplier methods explained above:</p> <pre><code>company_id = 12345\ntry:\n    # List Suppliers\n    api_response = api_instance.list_suppliers(company_id)\n    pprint(api_response)\nexcept fattureincloud_python_sdk.ApiException as e:\n    print(\"Exception when calling SuppliersApi-&gt;list_suppliers: %s\\n\" % e)\n\n\nsupplier_id = 1\nmodify_supplier_request = ModifySupplierRequest(\n    data=Supplier(\n        name=\"Rossi S.r.l.\",\n        type=SupplierType(\"company\")\n    )\n)\ntry:\n    # Modify Supplier\n    api_response = api_instance.modify_supplier(company_id, supplier_id, modify_supplier_request=modify_supplier_request)\n    pprint(api_response)\nexcept fattureincloud_python_sdk.ApiException as e:\n    print(\"Exception when calling SuppliersApi-&gt;modify_supplier: %s\\n\" % e)\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>print(json_serial(modify_supplier_request))\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code># from functions import create_from_jsons\nmodifySupplierRequest = create_from_json('{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}', 'ModifySupplierRequest')\n</code></pre>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Python SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Python SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>PyPI page: The main package page on PyPI</li> </ul>","tags":["sdk","code example","python"]},{"location":"sdks/python-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Python</li> <li>Python on Wikipedia</li> <li>PIP</li> <li>PyPI</li> <li>Urllib3</li> </ul>","tags":["sdk","code example","python"]},{"location":"sdks/ruby-sdk/","title":"Ruby SDK","text":"<p>The TSE in Cloud Ruby SDK is a Ruby library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK supports Ruby 2.4 and later. It is mainly based on typhoeus.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on RubyGems</p> <p>:::</p> <p>The SDK can be installed using RubyGems:</p> <pre><code>gem install fattureincloud_ruby_sdk\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Here you can find our RubyDoc documentation.</p> <p>Our SDK is mainly split into two different folders:</p> <ul> <li>api: Here you can find the classes that implement our API methods, you will need an instance of one of those classes to call our APIs.</li> <li>model: This folder contains all the classes that represent our API requests and responses; when using one of the methods above, you'll have to manage some of those classes.</li> </ul> <p>There are some special classes in the Model package:</p> <ul> <li>The classes with a name ending for Request can be used as a request body for one of our methods.</li> <li>The classes with a name ending for Response will be returned after the execution of one of the methods.   Instances of all the other classes will be used to compose the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response classes as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other classes. Each method will accept at most one instance of the Request classes and will return at most one instance of the Response classes.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi class, it accepts one instance of the ModifySupplierRequest class and it returns an instance of the ModifySupplierResponse class. In both cases, the data parameter will contain an instance of the Supplier class, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi class, but it doesn't need any request body and returns a single instance of the ListSuppliersResponse class, where the data parameter will contain an array of instances of the Supplier class.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the Ruby Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule passing the scope parameter.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieved a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to create a new instance of the Configuration class:</p> <pre><code>FattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ACCESS_TOKEN'\nend\n</code></pre> <p>The configuration, along with the HTTP client instance, can be used to instantiate one or more of the Api classes, for example:</p> <pre><code>suppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\n</code></pre> <p>Once you obtained the needed Api instance, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different API classes, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the list_suppliers and modify_supplier methods explained above:</p> <pre><code>company_id = 12345 # Integer | The ID of the company.\nopts = {\n  fields: 'fields_example', # String | List of comma-separated fields.\n  fieldset: 'basic', # String | Name of the fieldset.\n  sort: 'sort_example', # String | List of comma-separated fields for result sorting (minus for desc sorting).\n  page: 56, # Integer | The page to retrieve.\n  per_page: 56 # Integer | The size of the page.\n}\n\nbegin\n  # List Suppliers\n  result = suppliers_api_instance.list_suppliers(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling SuppliersApi-&gt;list_suppliers: #{e}\"\nend\n\n\nsupplier_id = 56 # Integer | The ID of the supplier.\nopts = {\n  modify_supplier_request: {\"data\":{\"id\":56,\"code\":\"AE86\",\"name\":\"Mario Rossi S.R.L.\",\"type\":\"company\",\"first_name\":\"Mario\",\"last_name\":\"Rossi\",\"contact_person\":\"\",\"vat_number\":\"111222333\",\"tax_code\":\"111122233\",\"address_street\":\"Corso Magellano, 46\",\"address_postal_code\":\"20146\",\"address_city\":\"Milano\",\"address_province\":\"MI\",\"address_extra\":\"\",\"country\":\"Italia\",\"email\":\"mario.rossi@example.com\",\"certified_email\":\"mario.rossi@pec.example.com\",\"phone\":\"1234567890\",\"fax\":\"123456789\",\"notes\":\"\"}}\n}\n\nbegin\n  # Modify Supplier\n  result = api_instance.modify_supplier(company_id, supplier_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling SuppliersApi-&gt;modify_supplier: #{e}\"\nend\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>puts opts.to_json\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>modifySupplierRequest = JSON.parse('{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}')\n</code></pre>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our Ruby SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>Ruby SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>RubyDoc page: The package documentation</li> <li>RubyGems page: The main package page on RubyGems</li> </ul>","tags":["sdk","code example","ruby"]},{"location":"sdks/ruby-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>Ruby</li> <li>Ruby on Wikipedia</li> <li>Ruby maintenance branches</li> <li>RubyGems</li> <li>Typhoeus</li> </ul>","tags":["sdk","code example","ruby"]},{"location":"sdks/typescript-sdk/","title":"TypeScript SDK","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>The TSE in Cloud TypeScript SDK is a TypeScript library that offers models and methods to interact with the TSE in Cloud v2 REST API.</p> <p>:::info Do you need a generic intro?</p> <p>If you want to know more generic information about our SDKs, please check the SDK Overview page.</p> <p>:::</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#requirements-and-dependencies","title":"Requirements and Dependencies","text":"<p>This SDK can be used in Node.js applications. It is mainly based on the Axios HTTP Client.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#download-and-installation","title":"Download and Installation","text":"<p>The SDK code and detailed documentation can be found in the GitHub repository.</p> <p>:::danger Important!</p> <p>Make sure you always import the newest version of our SDK, you can check which version is the latest on NPM or Yarn</p> <p>:::</p> <p>The SDK can be installed using NPM and Yarn:</p> <pre><code>npm install @fattureincloud/fattureincloud-ts-sdk\n</code></pre> <pre><code>yarn add @fattureincloud/fattureincloud-ts-sdk\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#construction_worker_man-sdk-structure","title":":construction_worker_man:\u00a0 SDK Structure","text":"<p>Our SDK is mainly split into two different packages:</p> <ul> <li>api: Here you can find the implementation of our API methods, you will need to initialize one of those APIs to start.</li> <li>model: This package contains all the representations of our API requests and responses; when using one of the methods above, you'll have to manage some of those models.</li> </ul> <p>There are some models with a special role:</p> <ul> <li>The models with a name ending for Request can be used as request body for one of our methods.</li> <li>The models with a name ending for Response will be returned after the execution of one of the methods.   The other models will be used to compose the content of the requests or responses for our methods.</li> </ul> <p>You can think about Request and Response as wrappers: each one of them is dedicated to a single method of the API, and they will most of the time contain a single attribute called data, that contains the real body of the request or the response represented through a composition of the other models. Each method will accept at most one Request model and will return at most one Response model.</p> <p>Let's take for example the Modify Supplier method.</p> <p>It is included in the SuppliersApi, it accepts one ModifySupplierRequest and it returns a ModifySupplierResponse. In both cases, the data parameter will contain a Supplier, that represents the modifies to apply to the supplier (for the request) and the final status of the supplier (for the response).</p> <p>In contrast, the List Suppliers method is still contained in the SuppliersApi, but it doesn't need any request body and returns a single ListSuppliersResponse, where the data parameter will contain an array of Suppliers.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#api-calls","title":"API calls","text":"<p>The API methods can be categorized as follows:</p> Category (prefix) Request Body Response Body Notes List (list) \u00a0 + \u00a0 +  +  Create (create) Get (get) Modify (modify) Delete (delete) <p>In addition to the Request, every method could require some additional parameters like the IDs of the company and the resource.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info. Additionally, the TypeScript Quickstart contains an example of Company ID retrieval using the SDK.</p> <p>:::</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#response-customization","title":"Response customization","text":"<p>The List and Post methods include some parameters dedicated to the response customization. These parameters are passed as method arguments.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#sorting","title":"Sorting","text":"<p>The List methods are a particular case because they are related to a set of resources instead of a single one; this means that the API will need to assign an order to the resources that will be returned. If needed, you can explicitly define a sorting rule by adding the scope parameter.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#pagination","title":"Pagination","text":"<p>Strictly related to the Sorting functionality is the Pagination. The List methods return a potentially huge set of resources, making it necessary to paginate the results to make the responses manageable; each method will then accept an additional set of pagination parameters, and the Response classes will contain some pagination details along with the data parameter.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#filtering","title":"Filtering","text":"<p>By default, the List methods will return the whole set of available resources for a certain method. If you instead want to focus on a particular subset of resources, you can apply specific filters to reduce the size of the result and retrieve only what you need.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>This SDK allows you to retrieve and refresh the access token with the integrated OAuth Helper, you can find a complete guide about it here, in case you are using the manual auth you can always set the token manually.</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#getting-started","title":"Getting started","text":"<p>After you followed the installation procedure and retrieve a valid Access Token (see above), you can start using our APIs.</p> <p>First, you need to import the SDK and initialize the authentication using the token:</p> <pre><code>import {\n  Configuration,\n  SuppliersApi,\n  ModifySupplierRequest,\n} from \"@fattureincloud/fattureincloud-ts-sdk\";\n\n// Configure OAuth2 access token for authorization:\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n</code></pre> <p>You can then retrieve one or more of the APIs, for example:</p> <pre><code>let suppliersApi = new SuppliersApi(apiConfig);\n</code></pre> <p>Once you obtained the needed API, you can start using the methods it provides.</p> <p>:::warning Select the correct APIs!</p> <p>If you want to use a method declared in two different APIs, you'll not be able to use the same instance. Instead, you'll need two different instances, one for each of the needed APIs.</p> <p>:::</p> <p>Let's implement the listSuppliers and modifySupplier methods explained above:</p> <pre><code>let companyId = 12345; // Number | The ID of the company.\nsuppliersApi.listSuppliers(companyId).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n\nlet supplierId = 56; // Number | The ID of the supplier.\nlet modifySupplierRequest: ModifySupplierRequest = {\n  // ModifySupplierRequest | The modified Supplier.\n  data: {\n    name: \"nuovo nome\",\n    phone: \"03561234312\",\n  },\n};\n\nsuppliersApi.modifySupplier(companyId, supplierId, modifySupplierRequest).then(\n  (result) =&gt; {\n    console.log(\n      \"API called successfully. Returned result: \" + JSON.stringify(result)\n    );\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>:::tip We're done!</p> <p>You can finally start interacting with the TSE in Cloud API!</p> <p>:::</p>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#spiral_notepad-retrieve-the-json-request-body","title":":spiral_notepad:\u00a0 Retrieve the JSON request body","text":"<p>If you are experiencing some kind of issue and you want to check the raw JSON sent as the body for your request (and maybe send it to our customer support) you can do it as follows:</p> <pre><code>console.log(JSON.stringify(modifySupplierRequest));\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#coconut-use-raw-json-as-request-body","title":":coconut:\u00a0 Use raw JSON as request body","text":"<p>If you already have a complete json that you want to use to call our APIs with the SDK without having to build the request object you can do it as follows:</p> <pre><code>let modifySupplierRequest: ModifySupplierRequest = JSON.parse(\n  '{\"data\":{\"name\":\"nuovo nome\", \"phone\":\"03561234312\"}}'\n);\n</code></pre>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#what-now","title":"What now?","text":"<p>If you need a more detailed example, you can check our TypeScript SDK Quickstart.</p> <p>Here you can find the full documentation of the available methods and models:</p> <ul> <li>TypeScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["sdk","code example","typescript"]},{"location":"sdks/typescript-sdk/#additional-resources","title":"Additional resources","text":"<ul> <li>REST APIs</li> <li>TypeScript</li> <li>Node.js</li> <li>Node.js on Wikipedia</li> <li>Node.js releases</li> <li>NPM</li> <li>Yarn</li> <li>Axios HTTP Client</li> </ul>","tags":["sdk","code example","typescript"]},{"location":"sdks/additional-capabilities/","title":"SDKs: Additional capabilities","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Our SDKs are designed to help you using our Additional Capabilities.</p>","tags":["sdk","additional capabilities","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/","title":"Filter Results","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>If you are using one of our SDKs to develop your integration you have multiple choices when you want to filter the responses of our Api, you can write your query manually or you can use our Filter Helper to build the filter.</p> <p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#building-the-filter-manually","title":"Building the filter manually","text":"<p>If you have to filter an Api response and your query is not very complicated, the most straightforward approach you can use is the manual one, you simply have to set the request's q parameter to the desired filter query and you are ready to go.</p> <pre><code>using System;\nusing System.Diagnostics;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace Example\n{\n    public class ListClientsExample\n    {\n        public static void Main()\n        {\n            Configuration config = new Configuration();\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\n            var apiInstance = new ClientsApi(config);\n            var companyId = 12345;\n            var fieldset = \"detailed\";\n            var q = \"vat_number = '03812340161'\";\n\n            try\n            {\n                ListClientsResponse result = apiInstance.ListClients(companyId, null, fieldset, null, null, null, q);\n                Console.Write(result);\n            }\n            catch (ApiException e)\n            {\n                Debug.Print(\"Exception when calling ClientsApi.ListClients: \" + e.Message);\n                Debug.Print(\"Status Code: \" + e.ErrorCode);\n                Debug.Print(e.StackTrace);\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    \"github.com/fattureincloud/fattureincloud-go-sdk/v2/filter\"\n)\n\nfunc main() {\n    companyId := int32(2)\n    q := \"vat_number = '03812340161'\"\n\n    auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"YOUR_ACCESS_TOKEN\")\n    configuration := fattureincloudapi.NewConfiguration()\n    apiClient := fattureincloudapi.NewAPIClient(configuration)\n    resp, r, err := apiClient.ClientsAPI.ListClients(auth, companyId).Q(q).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Error when calling `ClientsAPI.ListClients``: %v\\n\", err)\n        fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    }\n    // response from `ListClients`: ListClientsResponse\n    json.NewEncoder(os.Stdout).Encode(resp)\n\ncondition := filter.NewCondition\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.ClientsApi;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR_ACCESS_TOKEN\");\n\n        ClientsApi apiInstance = new ClientsApi(defaultClient);\n        Integer companyId = 2;\n        String fieldset = \"detailed\";\n        String q = \"vat_number = '03812340161'\";\n        try {\n            ListClientsResponse result = apiInstance.listClients(companyId, null, fieldset, null, null, null, q);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println(\"Exception when calling ClientsApi#listClients\");\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <pre><code>const fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR_ACCESS_TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.ClientsApi();\nlet companyId = 12345;\nlet opts = {\n  fieldset: \"detailed\",\n  q: \"vat_number = '03812340161'\",\n};\napiInstance.listClients(companyId, opts).then(\n  (result) =&gt; {\n    console.log(result);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\ClientsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$company_id = 12345;\n$fieldset = 'detailed';\n$q = \"vat_number = '03812340161'\";\n\ntry {\n    $result = $apiInstance-&gt;listClients($company_id, null, $fieldset, null, null, null, $q);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling ClientsApi-&gt;listClients: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>import fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import clients_api\nfrom pprint import pprint\n\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = \"YOUR_ACCESS_TOKEN\"\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    api_instance = clients_api.ClientsApi(api_client)\n    company_id = 12345\n    fieldset = \"detailed\"\n    q = \"vat_number = '03812340161'\"\n\n    try:\n        api_response = api_instance.list_clients(company_id, fieldset=fieldset, q=q)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print(\"Exception when calling ClientsApi-&gt;list_clients: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\nFattureInCloud_Ruby_Sdk.configure do |config|\n  config.access_token = 'YOUR_ACCESS_TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::ClientsApi.new\ncompany_id = 12345\nopts = {\n  fieldset: 'detailed',\n  q: \"vat_number = '03812340161'\"\n}\n\nbegin\n  result = api_instance.list_clients(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling ClientsApi-&gt;list_clients: #{e}\"\nend\n</code></pre> <pre><code>const apiConfig = new Configuration({\n  accessToken: \"YOUR_ACCESS_TOKEN\",\n});\n\nlet apiInstance = new ClientsApi(apiConfig);\nlet companyId = 2;\n\nlet q = \"vat_number = '03812340161'\";\n\napiInstance\n  .listClients(\n    companyId,\n    undefined,\n    \"detailed\",\n    undefined,\n    undefined,\n    undefined,\n    q\n  )\n  .then(\n    (data) =&gt; {\n      console.log(data);\n    },\n    (error) =&gt; {\n      console.error(error);\n    }\n  );\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#using-the-filter-helper","title":"Using the Filter Helper","text":"<p>If you have a long and articulated query or you are building your filter programmatically then your best option is to use our Filter Helper that you can find in each one of our official SDKs.</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#condition","title":"Condition","text":"<p>The Condition class is the underlying principle of our Helper, it's made up of 3 properties, the Field, the Operator and the Value</p> <pre><code>var query = condition.BuildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nquery := condition.BuildQuery() // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>String query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>var condition = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>$condition = new Condition('vat_number', Operator::EQ, '03812340161');\n$query = $condition-&gt;buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nquery = condition.build_query() # \"vat_number = '03812340161'\"\n</code></pre> <pre><code>condition = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nquery = condition.build_query # \"vat_number = '03812340161'\"\n</code></pre> <pre><code>var condition = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar query = condition.buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#operator","title":"Operator","text":"<p>There are many operators you can utilize in a Condition:</p> Operator Name Symbol EQ '=' GT '&gt;' GTE '&gt;=' LT '&lt;' LTE '&lt;=' NEQ '&lt;&gt;', '!=' IS '=' IS_NOT '!=' LIKE 'like' NOT LIKE 'not like' CONTAINS 'contains' NOT CONTAINS 'not contains' STARTS_WITH 'starts with' ENDS_WITH 'ends with'","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#conjunction-disjunction","title":"Conjunction &amp; Disjunction","text":"<p>The Conjunction and Disjunction classes work like logical operators between two Conditions, the Conjunction works like the AND operator while the Disjunction works like the OR operator.</p> <pre><code>var disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.BuildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\ndisjunction := filter.NewDisjunction(condition1, condition2)\nquery := disjunction.BuildQuery() // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Disjunction disjunction = new Disjunction(condition1, condition2);\nString query = condition.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$condition1 = new Condition('vat_number', Operator::EQ, '03812340161');\n$condition2 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$disjunction = new Disjunction($condition1, $condition2);\n$query = $disjunction-&gt;buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\ncondition2 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ndisjunction = Disjunction(left=condition1, right=condition2)\nquery = disjunction.build_query() # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ndisjunction = FattureInCloud_Ruby_Sdk::Disjunction.new(condition1, condition2)\nquery = disjunction.build_query # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\nvar query = disjunction.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#dsl","title":"DSL","text":"<p>There is another way to use our Filter Helper, you can indeed use out Domain-Specific language as shown in the next steps.</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#where","title":"Where","text":"<p>To initialize a Filter you must set a Where condition, you have 2 options:</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#wherefield-operator-value","title":"Where(field, operator, value)","text":"<p>In this method you have to pass the field, operator and value as shown in the following examples:</p> <pre><code>var filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.BuildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\n\nquery := filterObj.BuildQuery() // vat_number = '03812340161'\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nString query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n\n$query = $filter-&gt;buildQuery(); // \"vat_number = '03812340161'\"\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\n\nquery = filter.build_query() # vat_number = '03812340161'\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\n\nquery = filter.build_query # vat_number = '03812340161'\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar query = filter.buildQuery(); // vat_number = '03812340161'\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#whereexpressionconditionconjunctiondisjunction","title":"WhereExpression(condition|conjunction|disjunction)","text":"<p>In this method you can either pass a simple condition or a more complex conjunction or disjunction as shown below:</p> <pre><code>var disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.WhereExpression(disjunction);\n\nvar query = filter.BuildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\ndisjunction := filter.NewDisjunction(condition1, condition2)\n\nfilterObj := filter.NewEmptyFilter()\nfilterObj.WhereExpression(disjunction)\n\nquery := disjunction.BuildQuery() // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Disjunction disjunction = new Disjunction(condition1, condition2);\n\nFilter filter = new Filter();\nfilter.whereExpression(disjunction);\n\nString query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.whereExpression(disjunction);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$condition1 = new Condition('vat_number', Operator::EQ, '03812340161');\n$condition2 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$disjunction = new Disjunction($condition1, $condition2);\n\n$filter = new Filter();\n$filter-&gt;whereExpression($disjunction);\n\n$query = $filter-&gt;buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = Condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\ncondition2 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ndisjunction = Disjunction(left=condition1, right=condition2)\n\nfilter = Filter()\nfilter.where_expression(disjunction)\n\nquery = filter.build_query() # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ndisjunction = FattureInCloud_Ruby_Sdk::Disjunction.new(condition1, condition2)\n\nfilter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where_expression(disjunction)\n\nquery = filter.build_query # (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var condition1 = new Condition(\"vat_number\", Operator.EQ, \"03812340161\");\nvar condition2 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar disjunction = new Disjunction(condition1, condition2);\n\nvar filter = new Filter();\nfilter.whereExpression(disjunction);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#and-or","title":"And &amp; Or","text":"<p>If you need a more complex filter you can add an and or or condition to your Filter you have 3 options:</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andfield-operator-value-orfield-operator-value","title":"And(field, operator, value) &amp; Or(field, operator, value)","text":"<p>In this method you have to pass the field, operator and value as shown in the following examples:</p> <pre><code>var filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.Or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.Or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.BuildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nfilterObj.Or(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\nfilterObj.Or(\"code\", filter.Operators.CONTAINS, \"2022/\")\n\nquery := filterObj.BuildQuery() // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nString query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n$filter-&gt;or('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$filter-&gt;or('code', Operator::CONTAINS, '2022/');\n\n$query = $filter-&gt;buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nfilter.or_condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\nfilter.or_condition(field=\"code\", op=Operator.CONTAINS, value=\"2022/\")\n\nquery = filter.build_query() # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nfilter.or('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\nfilter.or('code', FattureInCloud_Ruby_Sdk::Operator::CONTAINS, '2022/')\n\nquery = filter.build_query # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.or(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nfilter.or(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andexpressionconditionconjunctiondisjunction-orexpressionconditionconjunctiondisjunction","title":"AndExpression(condition|conjunction|disjunction) &amp; OrExpression(condition|conjunction|disjunction)","text":"<p>In this method you can either pass a simple condition or a more complex conjunction or disjunction as shown below:</p> <pre><code>\nvar filter = new Filter();\nfilter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.OrExpression(condition1);\nfilter.OrExpressiom(condition2);\n\nvar query = filter.BuildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains '2022/')\n</code></pre> <pre><code>condition1 := filter.NewCondition(\"vat_number\", filter.Operators.EQ, \"03812340161\")\ncondition2 := filter.NewCondition(\"code\", filter.Operators.CONTAINS, \"2022/\")\n\nfilterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\nfilterObj.AndExpression(condition1)\nfilterObj.AndExpression(condition2)\n\nquery := filterObj.BuildQuery() // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>\nFilter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nString query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var condition1 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar condition2 = new Condition(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>$condition1 = new Condition('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n$condition2 = new Condition('code', Operator::CONTAINS, '2022/');\n\n$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n$filter-&gt;orExpression($condition1);\n$filter-&gt;orExpression($condition2);\n\n$query = $filter-&gt;buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>condition1 = Condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\ncondition2 = Condition(field=\"code\", op=Operator.CONTAINS, value=\"2022/\")\n\nfilter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\nfilter.or_expression(condition1)\nfilter.or_expression(condition2)\n\nquery = filter.build_query() # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>condition1 = FattureInCloud_Ruby_Sdk::Condition.new('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\ncondition2 = FattureInCloud_Ruby_Sdk::Condition.new('code', FattureInCloud_Ruby_Sdk::Operator::CONTAINS, '2022/')\n\nfilter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\nfilter.or_expression(condition1)\nfilter.or_expression(condition2)\n\nquery = filter.build_query # ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre> <pre><code>var condition1 = new Condition(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\nvar condition2 = new Condition(\"code\", Operator.CONTAINS, \"2022/\");\n\nvar filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\nfilter.orExpression(condition1);\nfilter.orExpression(condition2);\n\nvar query = filter.buildQuery(); // ((vat_number = '03812340161' or tax_code = 'RSSMRG99A23206D') or code contains'2022/')\n</code></pre>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"sdks/additional-capabilities/filter-results/#andfilterfilter-orfilterfilter","title":"AndFilter(filter) &amp; OrFilter(filter)","text":"<p>In this method you have to pass a Filter object as shown here:</p> <pre><code>  var filter = new Filter();\n  filter.Where(\"vat_number\", Operator.EQ, \"03812340161\");\n\n  var filter1 = new Filter();\n  filter1.Where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\n  filter.AndFilter(filter1);\n\n  var query = filter.BuildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filterObj := filter.NewEmptyFilter()\nfilterObj.Where(\"vat_number\", filter.Operators.EQ, \"03812340161\")\n\nfilterObj1 := filter.NewEmptyFilter()\nfilterObj1.Where(\"tax_code\", filter.Operators.EQ, \"RSSMRG99A23206D\")\n\nfilterObj.AndFilter(*filterObj1)\n\nquery := filterObj.BuildQuery() // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>Filter filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nFilter filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nString query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>$filter = new Filter();\n$filter-&gt;where('vat_number', Operator::EQ, '03812340161');\n\n$filter1 = new Filter();\n$filter1-&gt;where('tax_code', Operator::EQ, 'RSSMRG99A23206D');\n\n$filter-&gt;andFilter($filter1);\n\n$query = $filter-&gt;buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filter = Filter()\nfilter.where_condition(field=\"vat_number\", op=Operator.EQ, value=\"03812340161\")\n\nfilter1 = Filter()\nfilter1.where_condition(field=\"tax_code\", op=Operator.EQ, value=\"RSSMRG99A23206D\")\n\nfilter.and_filter(filter1)\n\nquery = filter.build_query() # (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>filter = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter.where('vat_number', FattureInCloud_Ruby_Sdk::Operator::EQ, '03812340161')\n\nfilter1 = FattureInCloud_Ruby_Sdk::Filter.new()\nfilter1.where('tax_code', FattureInCloud_Ruby_Sdk::Operator::EQ, 'RSSMRG99A23206D')\n\nfilter.and_filter(filter1)\n\nquery = filter.build_query # (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <pre><code>var filter = new Filter();\nfilter.where(\"vat_number\", Operator.EQ, \"03812340161\");\n\nvar filter1 = new Filter();\nfilter1.where(\"tax_code\", Operator.EQ, \"RSSMRG99A23206D\");\n\nfilter.andFilter(filter1);\n\nvar query = filter.buildQuery(); // (vat_number = '03812340161' and tax_code = 'RSSMRG99A23206D')\n</code></pre> <p>Now that your query is ready the last thing to do is to set the q parameter equal to the just obtained query and you are ready to make your request!</p>","tags":["sdk","additional capabilities","customize","optional","filter","query","list","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"started/authentication/","title":"Authentication","text":"<p>To make requests towards the TSE in Cloud API it is necessary to use one of the supported authentication methods.  In the next paragraph, you'll find a flowchart that will guide you in your choice.</p> <p>The currently supported methods are with access token</p> <p>This section documents the supported authentication models. M2M Scenario Many times a secure and authorized communication channel is needed between different parts of a system such as two back-end services of different applications. The key aspect of these communications lies in the fact that the element for establishing trust in the system is the client. In TSE a client is assigned a technical API Key which is used during the login phase to recognize it and enable it to use the services.</p> <p></p> <p>La figura illustra il flusso di autenticazione (Login) e di consumo dei servizi (GET/POST).</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#jwt-token","title":"JWT Token","text":"<p>Durante questa fase il client utilizza l'API Key per ottenere un token JWT che verr\u00e0 utilizzato nelle successive chiamate per accedere le risorse applicative.</p> <p>L\u2019applicativo deve eseguire la richiesta del token, in POST con i parametri in x-www-form-urlencoded, ad uno specifico path</p> <ul> <li>webapi_base_url/auth/token</li> </ul> <p>Specificando nel body</p> <p>In risposta alla chiamata si ottiene un authorization code costituito da un token jwt della durata di un giorno.</p> <p>E' importante che nella sezione token l'API Key sia preceduta dalla parola Bearer ad esempio</p> <pre><code>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3ZWJhcGlhZG1pbiIsIndlYmFwaTphdXRoZW50aWNhdGlvbjpzY29wZSI6Imh1Yl9hZG1pbix0c2UxMHdlYmFwaXRlc3QyX2FseXRzZTEwd2ViYXBpdGVzdDIiLCJqdGkiOiIwMjdkYmRlMC03OTg5LTQ0MTItODliOC0yM2FkYTVjNTdjZTIiLCJpYXQiOjE2NTg3NDA4NzcsImlzcyI6IkFseUNFU3J2MlNydklzc3VlciIsImF1ZCI6IkFseUNFU3J2MlNydkF1ZGllbmNlIn0.p1oEy4LJyFuTKIjJynYw4zQQQXIYPO3WfLe8VTNh7XA\n</code></pre> <p>:::</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#getpost","title":"GET/POST","text":"<p>Le chiamate ai servizi applicativi saranno autenticate con un Bearer token costituito da token jwt ottenuto con la chiamata di Login.</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#scenario-utente","title":"Scenario Utente","text":"<p>Nel caso in cui il client sia integrato con il Teamsystem ID sar\u00e0 possibile utilizzare l'access_token assegnato all'utente per innescare il flusso di login.</p> <p></p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#scope","title":"Scope","text":"<p>Le applicazioni devono richiedere i permessi esclusivamente per le risorse a cui intendono accedere. I sistemi di autorizzazione supportati, riferiscono a tali permessi come scopes. Tutti gli endpoints di Enterprise WebAPI richiedono uno scope, al fine di riferire correttamente ad uno specifico ambiente di lavoro definito per il gestionale.</p> <p>Le applicazioni devono specificare lo scope nella richiesta di autenticazione. I\u2019access token rilasciato conterr\u00e0 solo gli scopes (al momento solo uno) che l\u2019applicativo ha richiesto.</p> Scope Description Webapi_admin Questo scope permette di accedere alle api di richiesta su ambienti disponibili. Permette di avere un token anche non conoscendo l'ambiente di riferimento a priori, perch\u00e9 magari non ancora richiesto all'utente. Tipicamente con questo tipo di token si eseguono interrogazioni di tipo amministrativo, come la GetAmbienti [ambiente] Rappresenta l\u2019ambiente di lavoro Enterprise a cui le API devono accedere","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#additional-resources","title":"\ud83d\udcda\u00a0 Additional resources","text":"<ul> <li>JWT Token</li> <li>Query String</li> <li>URL Encoding</li> <li>Whitelist</li> </ul>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/authentication/#company","title":"Company","text":"<p>How use Company</p>","tags":["basics","authentication","oauth","unauthorized",401]},{"location":"started/getting-started/","title":"Introduction","text":"<p>The TSE in Cloud API is a RESTful API Client Libraries. The API exposes most of the features available in the TSE in Cloud Web interface.</p> <p> API vs SDK</p> <p>If you need more information about what APIs and SDKs are, you can watch this video.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#how-can-i-start","title":"How can I start?","text":"<p>In this documentation, you will find three modalities you can use to start developing your TSE in Cloud integration.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#step-by-step-guide","title":"Step-by-step Guide","text":"<p>The Step-by-step page is a guide that will tell you exactly what to do to be ready to develop in no time, including some tricky procedures such as the app configuration and the permission request. You can find most of the steps under the Basics category. If you don't know a lot about TSE in Cloud, or you are uncertain about which option to select, then we strongly suggest you start from here!</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#quickstarts","title":"Quickstarts","text":"<p>If you prefer actions over words, and you feel pretty confident about your knowledge of Token authentication then probably you would prefer to start developing immediately, following one of our Quickstarts. Even so, we don't assure you that you will never have to explore the Basics category! </p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#guides","title":"\ud83d\udee0\ufe0f Guides","text":"<p>If you want to focus on your specific use case from the first moment, you can check our Guides. Here we explained how to implement our customer's most common use cases, and yours could be already included there too! Please, notice that you will most probably need to start with one of the previous options to be ready to follow our guides because they are more focused on the final result rather than on helping you get started.</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#faqs","title":"FAQs","text":"<p>In the FAQs section we collected the most common questions we received from the other developers. In most of the cases, this will be enough to help you overcome your issues!</p>","tags":["getting started","introduction"]},{"location":"started/getting-started/#can-you-help-me","title":"Can you help me?","text":"<p>Sure! Please, check the Support page to discover the available options!</p>","tags":["getting started","introduction"]},{"location":"started/howto/","title":"How to","text":"","tags":["howto","introduction"]},{"location":"started/howto/#obtain-personal-token","title":"Obtain personal token","text":"<p>Come abilitare il proprio impianto all'utilizzo delle API</p> <p>Prerequisito per il processo \u00e8 che la P.IVA collegata all'impianto abbia la licenza che abilita l'utilizzo delle API</p> <p>Occorre aprire un ticket su MySupport su coda dedicata:</p> <ul> <li>Linea Prodotto: TS Enterprise Cloud</li> <li>Procedura: TSEnterprise Cloud</li> <li>Area: WebAPI e Personalizzazioni</li> <li>Modulo: Supporto sviluppo WebAPI</li> </ul> <p>specificando:</p> <ul> <li>l'url dell'installazione di Teamsystem Enterprise Cloud che si vuole abilitare</li> <li>un indirizzo mail con cui collegarsi al sito di documentazione</li> </ul> <p>A conclusione del processo di abilitazione verr\u00e0 distribuita una chiave tecnica che consentir\u00e0 di accedere ai servizi e specificato il nome dell'ambiente da utilizzare nello scope.</p> <p>Il codice licenza che abilita l'utilizzo delle API \u00e8 il 4520.</p> MODULO SIGLA LICENZA DESCR. 4520 TE-4520 4520 Web API 55166 S-TE-55166 4520 Web API 84006 SAAS-TE-84006 4520 Web API 80057 SAAS-TE-80057 4520 Web API <p>N.B.: la differenza tra le varie sigle \u00e8 legata alla presenza di diversi listini per le singole procedure e/o diverse installazioni.</p>","tags":["howto","introduction"]},{"location":"started/howto/#use-token","title":"use token","text":"","tags":["howto","introduction"]},{"location":"stepbystep/","title":"Step by step overview","text":"<p>On this page, you can find a quick summary of the steps that you are required to perform to interact with our APIs.</p> <p>Some steps must be performed only one time (for example creating an application), while others will be required every time you must contact our APIs (for example the authentication and authorization tasks).</p> <p>To get started, follow these steps: 1. Learn the common terms to start understanding the TSE in Cloud world. 2. Create an app on our Web application. 3. Select an Authentication and retrieve the related credentials. 4. Collect the Scopes that your application requires to work properly. 5. If you want, install one of our SDKs. Otherwise, develop your own code from scratch. 6. Implement the selected Authentication method. 7. You're now ready to integrate TSE in Cloud within your application!  8. If you need to use a Company scoped method, please retrieve your company_id param. 9. Improve your code managing Quotas and Errors properly. 10. Are you still unsure? We prepared a set of Guides to help you with the most common use cases!</p>","tags":["quickstarts","code example"]},{"location":"stepbystep/common-terms/","title":"Common Terms","text":"<p>If you are a newbie in the TSE in Cloud world, you will most probably feel overwhelmed by the amount of information that you can find in this documentation.</p> <p>This is why we suggest you get started by learning what we're talking about: we think that you need to get accustomed to the terms used by the TSE in Cloud API as a very first step.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#common-terms-list","title":"Common Terms List","text":"<p>Below you can find a list of the main concepts that you need to know:</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#url","title":"URL","text":"<p>It is the URL that you connect to to access the application; it has a structure like </p> <pre><code>[protocol]://[cid].domain\n</code></pre> <p>For example https://apicsdemo.teamsystem.io</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#cid","title":"CID","text":"<p>Customer identification is assigned uniquely to a customer</p> <p>For example csdemo</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#apigateway","title":"APIGateway","text":"<p>An API gateway is the gatekeeper for access to APIs, which protects and manages traffic between API consumers and applications that expose those APIs. Adopting an API gateway provides several benefits by ensuring:</p> <p>authentication and authorization, routing to backends, rate limiting to avoid overloading systems and protecting against DDoS attacks, offloading SSL / TLS traffic to improve performance and handling errors or exceptions, tracking and monitoring access to resources. TSE APIs intended for integration are exposed downstream of the Teamsystem PaaS API Gateway.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#apigwt_base_url","title":"apigwt_base_url","text":"<p>It is the base url for calling services; it has the form </p> <pre><code>[protocol]://[cid].APIGatewayDomain\n</code></pre> <p>For example: https://csdemo.ts-paas.com</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#webapi_base_url","title":"webapi_base_url","text":"<p>webapi_base_url: https://[apigwt_base_url]/api</p> <p>it is the rootpath that will be referred to below with webapi_base_url, unless otherwise indicated, it is usually composed of api+CID.domain, for example: https://apicsdemo.teamsystem.io</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#scope","title":"Scope","text":"<p>Also referred to as [environment] or [environment] represents the set of data to which you have access; although other configurations are possible in Teamsystem Enterprise Cloud, each installation has access to only one environment.</p>","tags":["basics","terms","concepts"]},{"location":"stepbystep/common-terms/#resourcename","title":"ResourceName","text":"<p>It is the REST resource name assigned to the application entity; it is used in the rest call.</p> <p>For example: </p> <pre><code>{{webapi_base_url}}/api/v1/{{scope}}/CO/CustomerSupplierCo/search?company=2\n</code></pre>","tags":["basics","terms","concepts"]},{"location":"stepbystep/company-scoped-methods/","title":"Company methods","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Most of our API resources are not owned by the user, but by a company. This makes it possible for all the users who have access to a single company to interact with all the resources it owns (if the user has the related permissions, of course). This is why most of our methods are Company-scoped: it means that you need to provide an additional company_id parameter to use the method correctly.</p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#where-can-i-find-my-company_id","title":"Where can I find my company_id?","text":"<p>One of the questions that we receive more often is: \"How can I find my company_id?\"</p> <p>Don't worry, it is really easy. You can list all the companies accessible by the user using the List User Companies method, which will return you an array of companies. Of course, this method is not company-scoped! \u00a0 You just need to select the right company from the returned list and extract its ID, and you're done!</p> <p>If you're implementing a simple application for a single company, then you can use our API Reference or our Postman Collection to retrieve the Company ID, and then insert it as a constant in your code; this way, you'll avoid writing code to retrieve a value that will never change. Otherwise, if you need to manage multiple company IDs that are unknown at developing time, then you can check the SDK examples below to retrieve the Company ID from your code.</p> <p>Here you can find the steps to use the API Reference to retrieve the Company ID:</p> <ul> <li>Obtain a valid Access Token using one of the available methods;</li> <li>Open the Auth Section in the API Reference, and insert the copied access token in the \"HTTP BEARER\" Section (please, don't add \"Bearer\" to the token, the tool will take care of it!);</li> <li>Search the List User Companies method and click the \"Try\" button, the Company ID will be included in the obtained response.</li> </ul> <p>Here you can find a few examples using our SDKs:</p> <pre><code>using System.Collections.Generic;\nusing System.Diagnostics;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nConfiguration config = new Configuration();\nconfig.BasePath = \"https://api-v2.fattureincloud.it\";\n// Check out the Authentication section to retrieve the Access Token\nconfig.AccessToken = \"YOUR_ACCESS_TOKEN\";\n\nvar apiInstance = new UserApi(config);\n\ntry\n{\n    // List User Companies\n    ListUserCompaniesResponse result = apiInstance.ListUserCompanies();\n    // In the result you'll find a list of companies, you must use the \"Id\" field of one of those\n    Console.Write(result.Data.Companies[0].Id);\n}\ncatch (ApiException  e)\n{\n    Console.Write(\"Exception when calling UserApi.ListUserCompanies: \" + e.Message);\n    Console.Write(\"Status Code: \" + e.ErrorCode);\n    Console.Write(e.StackTrace);\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\n    fattureincloud \"github.com/fattureincloud/fattureincloud-go-sdk/v2/model\"\n)\n\nfunc main() {\n  // Check out the Authentication section to retrieve the Access Token\n  auth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, \"ACCESS_TOKEN\")\n  configuration := fattureincloudapi.NewConfiguration()\n  apiClient := fattureincloudapi.NewAPIClient(configuration)\n  resp, r, err := apiClient.UserAPI.ListUserCompanies(auth).Execute()\n  if err != nil {\n      fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListUserCompanies``: %v\\n\", err)\n      fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n  }\n  // response from `ListUserCompanies`: ListUserCompaniesResponse\n  // In the result you'll find a list of companies, you must use the \"Id\" field of one of those\n  fmt.Printf(\"%d\", resp.GetData().GetCompanies()[0].GetId())\n}\n</code></pre> <pre><code>import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.models.*;\nimport it.fattureincloud.sdk.api.UserApi;\n\nApiClient defaultClient = Configuration.getDefaultApiClient();\ndefaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n// Check out the Authentication section to retrieve the Access Token\nOAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\nOAuth2AuthenticationCodeFlow.setAccessToken(\"YOUR ACCESS TOKEN\");\n\nUserApi apiInstance = new UserApi(defaultClient);\ntry {\n  ListUserCompaniesResponse result = apiInstance.listUserCompanies();\n  // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n  System.out.println(result.getData().getCompanies().get(0).getId());\n} catch (ApiException e) {\n  System.err.println(\"Exception when calling UserApi#listUserCompanies\");\n  System.err.println(\"Status code: \" + e.getCode());\n  System.err.println(\"Reason: \" + e.getResponseBody());\n  System.err.println(\"Response headers: \" + e.getResponseHeaders());\n  e.printStackTrace();\n}\n</code></pre> <pre><code>import fattureInCloudSdk from \"@fattureincloud/fattureincloud-js-sdk\";\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n// Check out the Authentication section to retrieve the Access Token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = \"YOUR ACCESS TOKEN\";\n\nlet apiInstance = new fattureInCloudSdk.UserApi();\napiInstance.listUserCompanies().then(\n  (result) =&gt; {\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    console.log(result.data.companies[0].id);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <pre><code>&lt;?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// Check out the Authentication section to retrieve the Access Token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken('YOUR_ACCESS_TOKEN');\n\n\n$apiInstance = new FattureInCloud\\Api\\UserApi(\n    // If you want use custom http client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n    // This is optional, `GuzzleHttp\\Client` will be used as default.\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    $result = $apiInstance-&gt;listUserCompanies();\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    print_r($result-&gt;getData()-&gt;getCompanies()[0]-&gt;getId());\n} catch (Exception $e) {\n    echo 'Exception when calling UserApi-&gt;listUserCompanies: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre> <pre><code>from __future__ import print_function\nimport time\nimport os\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to https://api-v2.fattureincloud.it\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = fattureincloud_python_sdk.Configuration(\n    host = \"https://api-v2.fattureincloud.it\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Check out the Authentication section to retrieve the Access Token\nconfiguration.access_token = os.environ[\"ACCESS_TOKEN\"]\n\n# Enter a context with an instance of the API client\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = fattureincloud_python_sdk.UserApi(api_client)\n\n    try:\n        # List User Companies\n        api_response = api_instance.list_user_companies()\n        # In the result you'll find a list of companies, you must use the \"id\" field of one of those\n        print(api_response.data.companies[0].id)\n    except Exception as e:\n        print(\"Exception when calling UserApi-&gt;list_user_companies: %s\\n\" % e)\n</code></pre> <pre><code>require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\n# setup authorization\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # Check out the Authentication section to retrieve the Access Token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::UserApi.new\n\nbegin\n  # List User Companies\n  result = api_instance.list_user_companies\n  # In the result you'll find a list of companies, you must use the \"id\" field of one of those\n  p result.data.companies[0].id\nrescue FattureInCloud_Ruby_Sdk::ApiError =&gt; e\n  puts \"Error when calling UserApi-&gt;list_user_companies: #{e}\"\nend\n</code></pre> <pre><code>import { Configuration, UserApi } from \"@fattureincloud/fattureincloud-ts-sdk\";\n// Check out the Authentication section to retrieve the Access Token\nconst apiConfig = new Configuration({\n  accessToken: \"YOUR ACCESS TOKEN\",\n});\n\nlet apiInstance = new UserApi(apiConfig);\napiInstance.listUserCompanies().then(\n  (result) =&gt; {\n    // In the result you'll find a list of companies, you must use the \"id\" field of one of those\n    console.log(result.data.companies[0].id);\n  },\n  (error) =&gt; {\n    console.error(error);\n  }\n);\n</code></pre> <p>If you want more examples, you can find them in the Readme file of each SDK or in the Quickstart section.</p> <p>If you want to retrieve the details of a specific company, you can always use the Get Company Info method, but in this case, this method is company-scoped, so you need an ID!  </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#raising_hand_man-how-can-i-know-if-a-method-is-company-scoped","title":":raising_hand_man:\u00a0 How can I know if a method is company-scoped?","text":"<p>The majority of our methods are company-scoped, so there's a high probability that the method you need to use is included in this group. If you want to be sure if your API method is actually company-scoped, you just need to check if it requires a company_id parameter.</p> <p>In order to do it, you have a few possibilities:</p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-on-the-api-reference","title":"Check on the API Reference","text":"<p>This is the easier option, that only requires you to search the method on our API Reference section. For example, let's check the List Issued Documents method. Checking the URL on top of the page, you can notice that it contains the /c/{company_id} portion, indicating that it is a company-scoped URL that requires to substitute the placeholder to be executed correctly.</p> <p> </p> <p>On the same page, you can also check if you have a company_id box in the Path Params section: here you must insert your companyid while trying to use the API method using the _Try button.</p> <p> </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-on-your-sdk-documentation","title":"Check on your SDK documentation","text":"<p>If you're using a specific SDK, probably it will be easier for you to take advantage of it to check if a method is company-scoped: all the methods that are in this category require an integer company_id to be executed correctly. You can check if the company_id parameter is required by checking the signature of your method (for example using your IDE's functionalities) or accessing your SDK's documentation. Read your SDK's page for further info.</p> <p>For example, using our PHP SDK you have two alternatives:</p> <ul> <li>Accessing the GitHub page of the List Issued Documents method and check if it requires the company_id parameter</li> <li>Use your favorite IDE to check if the method requires it, without having to access our documentation online</li> <li>Some of the SDKs provide standard documentation for the language they're based on; for example, Java's JavaDoc or Ruby's RubyDoc.</li> </ul>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#check-our-postman-collection","title":"Check our Postman Collection","text":"<p>If you're testing our API using our Postman Collection, you can check if the method needs the companyid parameter. You can check if the method's URL includes the /c/:company_id portion, where :companyid is the placeholder that must be replaced with the actual numeric ID:</p> <p> </p> <p>Otherwise, similarly to what you can do in our API Reference section, you can just search for a companyid param in the _Path Variables section.</p> <p> </p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/company-scoped-methods/#memo-check-our-openapi-file","title":":memo:\u00a0 Check our OpenAPI file","text":"<p>This is probably the most complicated method because it requires you to know how to read an OpenAPI file (or at least a YAML file) or to use an OpenAPI editor; at the same time, this is our source of truth: all the previous method derive from our OpenAPI specification, so this is where the companyid param is defined. Checking our OpenAPI Specification, you can find out if our method requires a company_id parameter by checking the _openapi.yaml file: below you can notice that the URL contains the {company_id} placeholder and that the company_id param is listed in the parameters section.</p> <p><code>yaml title=\"openapi.yaml\" /c/\\{company_id\\}/issued_documents:   parameters:     - $ref: \"#/components/parameters/company_id\"   get:     summary: List Issued Documents     tags:       - Issued Documents     responses:       \"200\":         $ref: \"#/components/responses/ListIssuedDocumentsResponse\"</code></p>","tags":["basics","terms","concepts","company","company id","scopes","unauthorized",401]},{"location":"stepbystep/manual-authentication/","title":"Authentication Mode","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>:::note Is this the right authentication method for you?</p> <p>Before starting to read this page, we invite you to check if this is the best authentication method for you. Please check the flowchart you can find on the Authentication page before proceeding.</p> <p>:::</p> <p>Manual Authentication is an authentication method that lets the user retrieve the token \"manually\", e.g. using the TSE in Cloud WebApp. It requires active user collaboration to be applied: specifically, the user needs to generate correctly the Access Token selecting the correct scopes, and then insert it into the application.</p> <p>:::danger Are you sure?</p> <p>This authentication method is suggested only for very specific use cases. Please think carefully if you want to use it.</p> <p>:::</p> <p>This implies some drawbacks:</p> <ul> <li>The User Experience is worse than the other authorization methods.</li> <li>The Error Ratio is higher because the user needs to select the scopes needed by the application; in contrast, in the other flows is the application that's indicating the scopes required to work properly.</li> <li>The generated token will never expire (but it can be manually revoked by the user).</li> </ul> <p>The use cases suggested for this method are the following:</p> <ul> <li>Temporary authentication to start testing our APIs fast without implementing more complex flows. For example, manual authentication can be useful while testing with Postman.</li> <li>Simple scripts that will be used by a single TSE in Cloud User (usually the programmer himself) to manage his account (for example for one-time exports or imports of resources).</li> <li>When the other flows are not applicable.</li> </ul>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#token-generation","title":"Token generation","text":"<p>Technically speaking, to implement this method you need to do nothing to create a new Access Token: this responsibility lies entirely on the User's shoulders . Even so, if your app needs to manage different users you will need to:</p> <ul> <li>Provide your Client ID to the User (you can find it on your Application page, in the Sviluppatore section).   </li> <li>Explain how to generate the Access Token correctly, also indicating the scopes set needed by your app.</li> <li>Explain how to insert the Access Token in your app (so you'll need to implement some mechanism to collect and eventually store a string).</li> </ul> <p>The steps that the user must perform are the following:</p> <ol> <li>Access the TSE in Cloud web app.</li> <li>Access the Settings -&gt; Connected Applications (Impostazioni -&gt; Applicazioni collegate) page.</li> <li>Click the Connect a new application (Collega una nuova applicazione) button.    </li> <li>Insert the Client ID of your application.</li> <li>Select the companies that the application will be able to access from the list.    </li> <li>Select the permissions (e.g. the scope) that will be granted to the application from the list.    </li> <li>Copy the Access Token and insert it into the application.</li> </ol> <p>:::warning Forbidden!</p> <p>Since the User will have the possibility to select the permissions he wants to grant to the application, it is likely that some \"Forbidden\" error will happen. Also, if a new version of your app needs additional scopes, all your users will need to update the permissions on the Connected Applications page. You should be aware of that and your code should be able to manage this situation correctly.</p> <p>:::</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#find-your-company-id","title":"Find your Company ID","text":"<p>Even if this step is not strictly part of the Authentication process, it is required to be able to use the Company-scoped Methods. Once you obtain the Access Token, you can use the List User Companies method to retrieve the ID of the related Company; please check the Company-scoped Methods page for further info.</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#perform-an-api-request","title":"Perform an API request","text":"<p>A valid Access Token can be used to authorize requests included in the scopes authorized by the user; to obtain a valid response it is necessary to include the Access Token in your request as an HTTP header.</p> <p>In the following example, we'll simulate a Get Supplier call. We choose this method because it is relatively easy to understand and it requires the entity.suppliers:r scope to be authorized correctly.</p> <p>Please, notice that for the purposes of this example we will assume that we already know the parameters required by the request and that we have previously collected a valid Access Token.</p> <pre><code>curl --request GET \\\n     --url https://api-v2.fattureincloud.it/c/17/entities/suppliers/16 \\\n     --header 'Accept: application/json'\n     --header 'Authorization: Bearer a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4'\n</code></pre> <pre><code>GET /c/17/entities/suppliers/16 HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nAuthorization: Bearer a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\n</code></pre> <p>Below you can find some vanilla code examples implementing the same command.</p> <pre><code>// this code uses RestSharp Client: https://restsharp.dev\n// you can install it with the following command:\n// dotnet add package RestSharp\n\nusing System;\nusing RestSharp;\n\nnamespace restclient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // for this example we define the token as string, but you should have obtained it in the previous steps\n            var token = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n            // these parameters are usually retrieved through our APIs or stored in a DB\n            var companyId = 16;\n            var supplierId = 17;\n\n            var url = \"https://api-v2.fattureincloud.it/c/\" + companyId  + \"/entities/suppliers/\" + supplierId,;\n\n            var client = new RestClient(url);\n            var request = new RestRequest(Method.GET);\n\n            request.AddHeader(\"authorization\", \"Bearer \" + token);\n            IRestResponse response = client.Execute(request);\n            Console.Write(response.Content.ToString());\n        }\n    }\n}\n</code></pre> <pre><code>package main\n\nimport (\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\n    // for this example we define the token as string, but you should have obtained it in the previous steps\n    token := \"Bearer \" + \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\"\n\n    // these parameters are usually retrieved through our APIs or stored in a DB\n    companyId := \"16\"\n    supplierId := \"17\"\n    uri := \"http://api-v2.local.fattureincloud.it/c/\" + companyId + \"/entities/suppliers/\" + supplierId\n\n    req, _ := http.NewRequest(\"GET\", uri, nil)\n    req.Header.Add(\"Authorization\", token)\n\n    client := &amp;http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n    }\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Println(\"Error while reading the response bytes:\", err)\n    }\n    log.Println(string([]byte(body)))\n\n}\n</code></pre> <pre><code>import okhttp3.HttpUrl;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n\n        // for this example we define the token as string, but you should have obtained it in the previous steps\n        String token = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n        // these parameters are usually retrieved through our APIs or stored in a DB\n        Integer companyId = 16;\n        Integer supplierId = 17;\n\n        URL url = new HttpUrl.Builder()\n                .scheme(\"https\")\n                .host(\"api-v2.fattureincloud.it\")\n                .addPathSegments(\"c/\" + companyId  + \"/entities/suppliers/\" + supplierId)\n                .build().url();\n\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .header(\"Authorization\", \"Bearer \" + token)\n                .url(url)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n    }\n}\n</code></pre> <pre><code>var http = require(\"https\");\n\n// for this example we define the token as string, but you should have obtained it in the previous steps\nvar token =\n  \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\nvar supplierId = 17;\n\nvar options = {\n  method: \"GET\",\n  hostname: \"api-v2.fattureincloud.it\",\n  port: null,\n  path: \"/c/\" + companyId + \"/entities/suppliers/\" + supplierId,\n  headers: {\n    authorization: \"Bearer \" + token,\n  },\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n</code></pre> <pre><code>// this code uses Guzzle HTTP Client: https://docs.guzzlephp.org/en/stable/\n// and also ext-json\n// you can install them with the following command:\n// composer require guzzlehttp/guzzle ext-json\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Psr7;\n\n\n// for this example we define the token as string, but you should have obtained it in the previous steps\n$token = 'a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJZMElqc1pVWEpUZkxCSkZ3aG5iZmpSYTRJRktYTDk3ayIsImV4cCI6MTU4OTY0MjAzMX0.qn869ICUSS3_hx84ZTToMsB5slWQZjGZXGklSIiBkB4';\n\n// these parameters are usually retrieved through our APIs or stored in a DB\n$companyId = 17;\n$supplierId = 16;\n\n$client = new Client();\n\n$url = \"https://api-v2.fattureincloud.it/c/$companyId/entities/suppliers/$supplierId\";\n\ntry {\n  $response = $client-&gt;request('GET', $url, [\n    'headers' =&gt; [\n      'Accept' =&gt; 'application/json',\n      'Authorization' =&gt; 'Bearer ' . $token,\n    ],\n  ]);\n\n    return json_decode((string) $response-&gt;getBody());\n} catch (ClientException $e) {\n    echo Psr7\\Message::toString($e-&gt;getRequest());\n    echo Psr7\\Message::toString($e-&gt;getResponse());\n}\n</code></pre> <pre><code>import requests\n\n# for this example we define the token as string, but you should have obtained it in the previous steps\ntoken = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\nsupplier_id = 17\n\nheaders = { 'authorization': \"Bearer \" + token}\nresponse = requests.get(f\"https://api-v2.fattureincloud.it/c/\\{company_id\\}/entities/suppliers/{supplier_id}\", headers=headers)\n\nprint(response.json())\n</code></pre> <pre><code>require 'uri'\nrequire 'net/http'\n\n# for this example we define the token as string, but you should have obtained it in the previous steps\ntoken = \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\"\n\n# these parameters are usually retrieved through our APIs or stored in a DB\ncompany_id = 16\nsupplier_id = 17\n\nuri = URI(\"https://api-v2.fattureincloud.it/c/#\\{company_id\\}/entities/suppliers/#{supplier_id}\")\nheaders = { authorization: \"Bearer \" + token}\nres = Net::HTTP.get_response(uri, headers)\n\nputs res.body\n</code></pre> <pre><code>// in this example we are using the node-fetch library to make the request\nimport fetch, { Headers } from \"node-fetch\";\n\n// for this example we define the token as a string, but you should have obtained it in the previous steps\nvar token =\n  \"a/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyZWYiOiJYOGxDaFR4dHVsQkx0cXVVSjNCQlZEME1KOVY0NTl3QiIsImV4cCI6MTYzOTcyODAzM30.A-uMzLDpaEzGRqzUodJfdJPKo8SWMCytWUElQdOEP0c\";\n\n// these parameters are usually retrieved through our APIs or stored in a DB\nvar companyId = 16;\nvar supplierId = 17;\n\nvar headers = new Headers({\n  \"Content-Type\": \"application/json\",\n  Authorization: \"Bearer \" + token,\n});\n\nvar options = {\n  method: \"GET\",\n  headers: headers,\n};\n\ntry {\n  var res = await fetch(\n    \"https://api-v2.fattureincloud.it/c/\" +\n      companyId +\n      \"/entities/suppliers\" +\n      supplierId,\n    options\n  );\n  var json = await res.json();\n  console.log(json);\n} catch (err) {\n  console.log(err);\n}\n</code></pre> <p>If the Access Token is valid and provided correctly in the header, the response will be a 200 OK. To check the possible error responses, please check the dedicated page.</p> <p>:::info Easy switch!</p> <p>Please, note that this is exactly the same step applied for the OAuth 2.0 flows. If you want to switch from this method to another, you can reuse this code without having to modify it. You \"just\" need to add the code to retrieve the access token.</p> <p>:::</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/manual-authentication/#memo-change-token-permissions","title":":memo:\u00a0 Change token permissions","text":"<p>If you need to change the set of scopes currently associated with your token, you must ask your app users to perform the following simple steps:</p> <ol> <li>Access the TSE in Cloud web app.</li> <li>Access the Settings -&gt; Connected Applications (Impostazioni -&gt; Applicazioni collegate) page.</li> <li>Click the Manage (Gestisci) button next to your App.</li> <li>Click the Edit (Modifica) button next to the scopes section.</li> <li>Select the new permissions (e.g. the scopes) that must be granted to the application from the list.</li> </ol> <p>At this point, in a short time, the list of scopes associated with your token will be updated; the token itself isn't regenerated, so it isn't necessary to require the user to reload the token to the application.</p> <p>Please, note that this isn't a step that you can perform automatically. Your user must perform it manually, selecting the required scopes, so the operation is prone to errors in the scopes selection: the user could select the wrong scopes and also remove some previously assigned ones. This means that you must be ready to manage permissions errors, not only related to the new scopes but also the old ones.</p>","tags":["authentication","authorization","app","manual authentication","scopes","code example","c#","java","javascript","php","python","ruby","typescript"]},{"location":"stepbystep/quickstarts/","title":"Quickstarts Overview","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>Quickstarts are documents that explain how to configure and run a simple app that calls a TSE in Cloud v2 API. Following the quickstart, you'll be able to build minimal applications that you can use as a starting point to integrate your code with TSE in Cloud.</p> <p>We also have a repo with all the working examples here.</p> <p>The following quickstarts are currently available:</p>","tags":["quickstarts","code example"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/","title":"C# SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page you'll create a simple Asp.Net project</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>.NET SDK installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-one-create-an-aspnet-web-app","title":"Step One: Create an Asp.Net web app","text":"<p>The first step is to create an Asp.Net web application:</p> <pre><code>dotnet new webapp -o Quickstart --no-https\n</code></pre> <p>Now open the directory created by the above command, in this case, **Quickstart/ ** and proceed to install the TSE in Cloud SDK, published to Nuget.</p> <p>To install it using the .NET CLI:</p> <pre><code>dotnet add package It.FattureInCloud.Sdk\n</code></pre>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Edit the files Pages/Index.cshtml.cs and Pages/Index.cs.cshtml, delete the existing content and paste into them the following snippets:</p> <p>```cs title=\"Index.cshtml.cs\" using System; using System.IO; using Microsoft.AspNetCore.Mvc.RazorPages; using Microsoft.Extensions.Logging; using It.FattureInCloud.Sdk.OauthHelper; using System.Collections.Generic; using Newtonsoft.Json;</p> <p>namespace Quickstart.Pages {     public class IndexModel : PageModel     {</p> <pre><code>    {\n        _logger = logger;\n    }\n\n    public void OnGet()\n    {\n        string code = HttpContext.Request.Query[\"code\"];\n        var oauth = new OAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:5000/oauth\");\n\n        if (code is null)\n        {\n            var url = oauth.GetAuthorizationUrl(scopes, \"EXAMPLE_STATE\");\n            Response.Redirect(url);\n        }\n        else\n        {\n            var token = oauth.FetchToken(code);\n            using StreamWriter file = new(\"token.json\");\n\n            file.Write(JsonConvert.SerializeObject(token)); //saving the oAuth access token in the file token.json in the bin folder\n            file.Close();\n\n            ViewData[\"Content\"] = \"Token saved succesfully in token.json in your bin folder\";\n        }\n    }\n}\n</code></pre> <p>}</p> <pre><code>\n\n```aspnet title=\"Index.cshtml\"\n@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"OAuth QuickStart\";\n}\n\n    @ViewData[\"Content\"]\n</code></pre> <p>To make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri in the Index.cshtml.cs file at line 23.</p> <p>:::warning Check the Redirect URL</p> <p>Make sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:5000/Index).</p> <p>:::</p> <p>:::danger Store your Tokens safely!</p> <p>In this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database. Also, never share your Client Secret with third-party actors, or publish it to your frontend!</p> <p>:::</p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#step-four-setup-the-sample","title":"Step Four: Setup the sample","text":"<p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll show how to retrieve your Company ID using the C# SDK. If you plan to manage only one company, you can insert it directly into your code as a variable. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>Create the files Pages/Quickstart.cs.cshtml and Pages/Quickstart.cshtml and copy the following code:</p> <p>```cs title=\"Quickstart.cshtml.cs\" using System; using System.IO;</p> <p>using Microsoft.AspNetCore.Mvc.RazorPages; using Microsoft.Extensions.Logging; using It.FattureInCloud.Sdk.Api; using It.FattureInCloud.Sdk.Model; using It.FattureInCloud.Sdk.Client; using Newtonsoft.Json;</p> <p>namespace OauthQuickstart.Pages {     public class QuickstartModel : PageModel     {</p> <pre><code>    {\n        _logger = logger;\n    }\n\n    public void OnGet()\n    {\n        using StreamReader file = new(\"token.json\");\n\n        //retrieve the oAuth access token in the file token.json in the bin folder\n        var line = file.ReadLine();\n        file.Close();\n        string accessToken = json.access_token;\n\n        Configuration config = new Configuration();\n        config.AccessToken = accessToken.Replace(@\"\\\", \"\" );\n\n        // Modify the selected supplier\n        ModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest();\n        modifySupplierRequest.Data = new Supplier();\n        modifySupplierRequest.Data.Name = \"nuovo nome\";\n        modifySupplierRequest.Data.Phone = \"03561234312\";\n\n        var result = modifyFirstSupplier(config, modifySupplierRequest);\n\n        ViewData[\"Content\"] = result;\n    }\n\n    public static string modifyFirstSupplier(Configuration config, ModifySupplierRequest modifySupplierRequest)\n    {\n        try\n        {\n            var userApiInstance = new UserApi(config);\n            var suppliersApiInstance = new SuppliersApi(config);\n\n            // Retrieve User Companies\n            var userCompaniesResponse = userApiInstance.ListUserCompanies();\n            var firstCompanyId = userCompaniesResponse.Data.Companies[0].Id;\n\n            // Retrieve the list of the Suppliers for the selected company\n            var fields = \"\";  // string | List of comma-separated fields. (optional)\n            var fieldset = \"detailed\";  // string | Name of the fieldset. (optional)\n            var sort = \"-id\";  // string | List of comma-separated fields for result sorting (minus for desc sorting). (optional)\n            var page = 2;  // int? | The page to retrieve. (optional)  (default to 1)\n            var perPage = 8;  // int? | The size of the page. (optional)  (default to 5)\n            var companySuppliers = suppliersApiInstance.ListSuppliers(firstCompanyId, null, fieldset, sort, page, perPage);\n            var firstSupplierId = companySuppliers.Data[0].Id;\n\n            ModifySupplierResponse modifySupplierResponse = suppliersApiInstance.ModifySupplier(firstCompanyId, firstSupplierId, modifySupplierRequest);\n\n            return(\"Supplier modificato correttamente\\n\" + modifySupplierResponse.Data.ToJson());\n        }\n        catch (Exception e)\n        {\n            Console.Write(e);\n            return e.ToString();\n        }\n    }\n}\n</code></pre> <p>}</p> <pre><code>\n\n```aspnet title=\"Quickstart.cshtml\"\n@page\n@model QuickstartModel\n@{ ViewData[\"Title\"] = \"OAuth QuickStart\"; }\n\n    @ViewData[\"Content\"]\n</code></pre> <p>It's also needed to edit the Pages/Shared/_Layout.cshtml, delete the already existing content and paste the following code:</p> <p>```html title=\"_Layout.cshtml\"</p> <pre><code>\n## :five:&amp;nbsp; Step Five: Test the sample\n\nNow you can start a web server running the following command in your shell:\n\n```console\ndotnet watch run\n</code></pre> <p>Now visit http://localhost:5000/ (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:5000/Quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/csharp-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>C# SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NuGet page: The main package page</li> </ul>","tags":["quickstarts","code example","c#","sdk"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/","title":"Excel Power Query Quickstart","text":"<p>In this guide, we'll explain how to use Power Query to load contents from our APIs into Microsoft Excel.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#open_book-list-example","title":":open_book:\u00a0 List Example","text":"<p>In this example, we will load our invoices list using the List Issued Documents method, but you can adapt this guide to using it with the API method you need.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-one-setup-the-data-source","title":"Step one: Setup the Data Source","text":"<p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>First, we must select the Import from Web functionality as shown below:</p> <p></p> <p>Then we need to define the URL that will be contacted by Power Query. The List Issued Documents method is accessible to the following URL:</p> <pre><code>https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\n</code></pre> <p>additionally, it requires to define some parameters as Query String (e.g. the \"?type=invoice\" part), but you can substitute it with the endpoint of the method you want. Please, make sure to replace the {company_id} placeholder with your company ID.</p> <p>Our APIs require authentication, so we also need to set the Authorization header as shown below. Remember to replace the \"YOURACCESS_TOKEN\" placeholder with your actual _Access Token; you can obtain a valid one following this procedure.</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-two-extract-the-data","title":"Step Two: Extract the data","text":"<p>If you inserted the connection parameters correctly, Excel should already have retrieved the method response from our APIs.</p> <p>Now, we have to extract the list of invoices from the API response:</p> <p></p> <p>and then convert the result into a Table like shown below:</p> <p> </p> <p>Once obtained the table, we must extract the records of the invoices using the Record Extractor:</p> <p></p> <p>then we must select the fields that we are interested in from the menu:</p> <p></p> <p>And finally we can export the records to your sheet:</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-three-enable-auto-update","title":"Step Three: Enable auto update","text":"<p>Using Power Query it is possible to activate periodic updates of the data, selecting the query -&gt; properties -&gt; check the 'update every x minutes' functionality as shown below.</p> <p></p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/excel-powerquery-quickstart/#step-four-what-about-pagination","title":"Step Four: What about pagination?","text":"<p>The List Issued Documents response is paginated, this means that the results will be split into different sets; each set will contain a certain number of records up to the maximum value as explained on the dedicated page. Until now we just fetched the first page from the API, and this means that to retrieve the whole result we need to manage pagination.</p> <p>Unluckily it is not trivial, so you have to open advanced the Power Query editor and paste in the following code</p> <pre><code>let\n    Source = Json.Document(\n        Web.Contents(\n            url,\n            [\n                Timeout = #duration(0, 0, 1, 0),\n                Headers = [Authorization = \"Bearer YOUR_ACCESS_TOKEN\"]\n            ]\n        )\n    ),\n    iterations = Source[last_page],\n    url = \"https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\" &amp; \"?\" &amp; \"type=invoice\",\n\n    FnGetOnePage =\n    (url) as record =&gt;\n    let\n        Source = Json.Document(\n            Web.Contents(\n                url,\n                [\n                    Timeout = #duration(0, 0, 1, 0),\n                    Headers = [Authorization = \"Bearer YOUR_ACCESS_TOKEN\"]\n                ]\n            )\n        ),\n        data = try Source[data] otherwise null,\n        next = try Source[next_page_url] otherwise null,\n        res = [Data = data, Next = next]\nin\nres,\nGeneratedList =\n    List.Generate(\n        () =&gt; [i = 0, res = FnGetOnePage(url)],\n        each[i] &lt; iterations and[res][Data] &lt;&gt; null,\n        each[i = [i] + 1, res = FnGetOnePage([res][Next])],\n        each[res][Data]),\n    #\"Table conversion\" = Table.FromList(GeneratedList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded list\" = Table.ExpandListColumn(#\"Table conversion\", \"Column1\"),\n    #\"Expanded Records\" = Table.ExpandRecordColumn(#\"Expanded list\", \"Column1\", {\n        \"id\",\n        \"type\",\n        \"numeration\",\n        \"subject\",\n        \"visible_subject\",\n        \"amount_net\",\n        \"amount_vat\",\n        \"amount_gross\",\n        \"date\",\n        \"number\",\n        \"next_due_date\",\n        \"url\",\n        \"entity\"\n    }, {\n        \"id\",\n        \"type\",\n        \"numeration\",\n        \"subject\",\n        \"visible_subject\",\n        \"amount_net\",\n        \"amount_vat\",\n        \"amount_gross\",\n        \"date\",\n        \"number\",\n        \"next_due_date\",\n        \"url\",\n        \"entity\"\n    }),\n    #\"Expanded Entity\" = Table.ExpandRecordColumn(#\"Expanded Records\", \"entity\", {\n        \"name\",\n        \"tax_code\",\n        \"vat_number\"\n    }, {\n        \"client.name\",\n        \"client.tax_code\",\n        \"client.vat_number\"\n    })\nin\n#\"Expanded Entity\"\n</code></pre> <p></p> <p>The code above loops all the pages of the response and aggregates the results; additionally, it extracts the entity field to show the client name, tax_code and vat_number. To use this code you mustreplace the placeholders 'YOUR_ACCESS_TOKEN' and {company_id} as explained previously.</p> <p>Please, notice that this will increment the number of API requests executed, so you must be sure to not hit the quota limits to avoid the related errors.</p>","tags":["quickstarts","code example","power query","excel"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/","title":"Go SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Go application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Go installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK.</p> <p>To install it:</p> <pre><code>go get github.com/fattureincloud/fattureincloud-go-sdk\n</code></pre>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.go and copy in the following code:</p> <p>```go title=\"oauth.go\" package main</p> <p>import (     \"encoding/json\"     \"fmt\"     \"io/ioutil\"     \"log\"     \"net/http\"</p> <pre><code>oauth \"github.com/fattureincloud/fattureincloud-go-sdk/v2/oauth2\"\n</code></pre> <p>)</p> <p>func getOAuthAccessToken(w http.ResponseWriter, r *http.Request) {     query := r.URL.Query()     auth := oauth.NewOAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:8000/oauth\")</p> <pre><code>if query.Get(\"code\") == \"\" {\n    http.Redirect(w, r, auth.GetAuthorizationUrl([]oauth.Scope{oauth.Scopes.ENTITY_SUPPLIERS_READ}, \"EXAMPLE_STATE\"), http.StatusFound)\n} else {\n    code := query.Get(\"code\")\n\n    token, err := auth.FetchToken(code)\n    if err != nil {\n        log.Println(\"Error on response.\\n[ERROR] -\", err)\n        http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n        return\n    }\n    jsonObj, _ := json.Marshal(token)\n    // saving the oAuth access token in the token.json file\n    err = ioutil.WriteFile(\"token.json\", jsonObj, 0644)\n\n    if err != nil {\n        log.Println(\"Error on writing the file.\\n[ERROR] -\", err)\n        http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n        return\n    }\n\n    fmt.Fprintf(w, \"Token succesfully retrived and stored in token.json\")\n\n}\n</code></pre> <p>}</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 15.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :four:&amp;nbsp; Step Four: Set up the sample\n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the Go SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate the files **main.go** and **quickstart.go** in your working directory and copy in the following code:\n\n\n```go title=\"main.go\"\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/oauth\", getOAuthAccessToken)\n    http.HandleFunc(\"/quickstart\", getFirstCompanySuppliers)\n\n    fmt.Printf(\"Starting server at port 8000\\n\")\n    if err := http.ListenAndServe(\":8000\", nil); err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre> <p>```go title=\"quickstart.go\" package main</p> <p>import (     \"context\"     \"encoding/json\"     \"fmt\"     \"net/http\"     \"os\"</p> <pre><code>fattureincloudapi \"github.com/fattureincloud/fattureincloud-go-sdk/v2/api\"\noauth \"github.com/fattureincloud/fattureincloud-go-sdk/v2/oauth2\"\n</code></pre> <p>)</p> <p>func getFirstCompanySuppliers(w http.ResponseWriter, r *http.Request) {     rawData, err := os.ReadFile(\"token.json\")     if err != nil {         fmt.Println(err)     }</p> <pre><code>tokenObj := oauth.OAuth2AuthorizationCodeTokenResponse{}\njson.Unmarshal(rawData, &amp;tokenObj)\naccessToken := tokenObj.AccessToken\n\n// Configure OAuth2 access token for authorization:\nauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, accessToken)\nconfiguration := fattureincloudapi.NewConfiguration()\napiClient := fattureincloudapi.NewAPIClient(configuration)\n// Retrieve the first company id\nuserCompaniesResponse, _, err := apiClient.UserAPI.ListUserCompanies(auth).Execute()\nif err != nil {\n    fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListUserCompanies``: %v\\n\", err)\n    fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n    return\n}\nfirstCompanyId := userCompaniesResponse.GetData().Companies[0].GetId()\n// Retrieve the list of the Suppliers\ncompanySuppliers, _, err := apiClient.SuppliersAPI.ListSuppliers(auth, firstCompanyId).Execute()\nif err != nil {\n    fmt.Fprintf(os.Stderr, \"Error when calling `UserAPI.ListSuppliers``: %v\\n\", err)\n    fmt.Fprintf(os.Stderr, \"Full HTTP response: %v\\n\", r)\n    http.Error(w, \"500 internal server error.\", http.StatusInternalServerError)\n    return\n}\njson.NewEncoder(w).Encode(companySuppliers)\n</code></pre> <p>}</p> <pre><code>\n\n:::warning Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:8000/oauth).\n\n:::\n\n## :five:&amp;nbsp; Step Five: Run the sample\n\nFrom the command line, run the following command:\n\n```console\ngo run .\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/go-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>Go SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Go pkg page: The main package page on GoPkg</li> </ul>","tags":["quickstarts","code example","go","sdk"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/","title":"Google Sheets Apps Script Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>In this guide, we'll explain how to use Apps Script to load and create resources with our APIs into Google Sheets.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#open_book-list-example","title":":open_book:\u00a0 List Example","text":"<p>In this example, we will load our invoices list using the List Issued Documents method, but you can adapt this guide to using it with the API method you need.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-one-create-the-apps-script-function","title":"Step one: Create the Apps Script function","text":"<p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>First, we must select the extensions -&gt; App Script to open the editor:</p> <p></p> <p>Then we need to create the listInvoice method and define the menu we'll use to trigger it:  <pre><code>// This function creates a menu tab to execute the listInvoices function\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu(\"TSE in Cloud API\")\n    .addItem(\"List invoices\", \"listInvoices\")\n    .addToUi();\n}\n</code></pre> <p> <pre><code>// This function loops between all the pages of the response and pushes the results on the sheet\nfunction listInvoices() {\n  var sheet = SpreadsheetApp.getActiveSheet();\n  sheet.clear();\n  sheet.appendRow([\n    \"id\",\n    \"type\",\n    \"numeration\",\n    \"subject\",\n    \"visible_subject\",\n    \"amount_net\",\n    \"amount_vat\",\n    \"date\",\n    \"next_due_date\",\n    \"url\",\n    \"client name\",\n    \"client tax_code\",\n    \"client vat_number\",\n  ]);\n  var url = \"https://api-v2.fattureincloud.it\";\n  var endpoint = \"/c/{company_id}/issued_documents\";\n  var headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer YOUR_ACCESS_TOKEN\",\n  };\n\n  var options = {\n    method: \"get\",\n    headers: headers,\n  };\n\n  var queryParams = [\"type=\" + \"invoice\"];\n  var pageKey = \"page\";\n  var pageNum = 1;\n  var nextPageUrl;\n  var data = {},\n    output = [];\n  do {\n    var currentUrl = url + endpoint + \"?\" + queryParams.join(\"&amp;\");\n    currentUrl += \"&amp;\" + pageKey + \"=\" + pageNum;\n\n    var response = UrlFetchApp.fetch(currentUrl, options);\n    data = JSON.parse(response.getContentText());\n    var invoices = data.data;\n    for (const index in invoices) {\n      sheet.appendRow([\n        invoices[index].id,\n        invoices[index].type,\n        invoices[index].numeration,\n        invoices[index].subject,\n        invoices[index].visible_subject,\n        invoices[index].amount_net,\n        invoices[index].amount_vat,\n        invoices[index].date,\n        invoices[index].next_due_date,\n        invoices[index].url,\n        invoices[index].entity.name,\n        invoices[index].entity.tax_code,\n        invoices[index].entity.vat_number,\n      ]);\n    }\n    pageNum++;\n    nextPageUrl = data.next_page_url;\n  } while (nextPageUrl);\n}\n</code></pre> <p> </p> <p>As you can see we are calling the List Issued Documents method, accessible to the following URL:</p> <pre><code>https://api-v2.fattureincloud.it/c/\\{company_id\\}/issued_documents\n</code></pre> <p>additionally, it requires defining some parameters as Query String (e.g. the \"?type=invoice\" part), but you can substitute it with the endpoint of the method you want. Please, make sure to replace the {company_id} placeholder with your company ID.</p> <p>Our APIs also require authentication, so we need to set the Authorization header. You just need to replace the \"YOURACCESS_TOKEN\" placeholder with your actual _Access Token; you can obtain a valid one following this procedure.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-two-try-it","title":"Step Two: Try it!","text":"<p>If you inserted the connection parameters correctly, you can now click on the list invoices button that just appeared in your sheet's menu and see the results:</p> <p></p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#open_book-create-example","title":":open_book:\u00a0 Create Example","text":"<p>In this example, we will create an invoice using the Create Issued Document method.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-one-edit-the-apps-script-functions","title":"Step one: Edit the Apps Script functions","text":"<p>If you followed the list example you can now come back to your editor to implement also the invoice creation.</p> <p>First of all, we need to create a simple form for the inputs, so create the Page.html file and paste in the following code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;base target=\"_top\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;center&gt;\n      &lt;input\n        type=\"text\"\n        id=\"clientName\"\n        placeholder=\"Client Name\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"clientVatNumber\"\n        placeholder=\"Client Vat Number\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"amountNet\"\n        placeholder=\"Amount Net\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;input\n        type=\"text\"\n        id=\"visibleSubject\"\n        placeholder=\"Subject\"\n        style=\"font-size:20px !important;\"\n      /&gt;\n      &lt;br /&gt;&lt;br /&gt;\n      &lt;button\n        onclick=\"google.script.run.createInvoice(document.getElementById('clientName').value, document.getElementById('clientVatNumber').value, document.getElementById('amountNet').value, document.getElementById('visibleSubject').value)\"\n        style=\"font-size:20px !important;\"\n      &gt;\n        Create\n      &lt;/button&gt;\n    &lt;/center&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>As you can see, we put only a few fields to exemplify the procedure; of course, you can add all the fields you need. The next step is to modify the menu and add some other functions (the showCreateInvoiceDialog will open the creation form, while the createInvoice will contact our APIs):</p> <p> <pre><code>// We edit this function to add the new Create invoice button\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu(\"TSE in Cloud API\")\n    .addItem(\"List invoices\", \"listInvoices\")\n    .addItem(\"Create invoice\", \"showCreateInvoiceDialog\")\n    .addToUi();\n}\n</code></pre> <p> <pre><code>// This function prompts the html page previously created\nfunction showCreateInvoiceDialog() {\n  var html = HtmlService.createHtmlOutputFromFile(\"Page\")\n    .setWidth(400)\n    .setHeight(300);\n  SpreadsheetApp.getUi().showModalDialog(html, \"Create Invoice\");\n}\n</code></pre> <p> <pre><code>// This function makes the actual API call to create the invoice\nfunction createInvoice(clientName, clientVatNumber, amountNet, subject) {\n    var url = \"https://api-v2.fattureincloud.it\";\n    var endpoint = \"/c/\\{company_id\\}/issued_documents\";\n    var headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer YOUR_ACCESS_TOKEN\"\n    };\n\n    var body = {\n        data: {\n            type: \"invoice\",\n            amount_net: amountNet,\n            visible_subject: subject,\n            entity: {\n                name: clientName,\n                vart_number: clientVatNumber\n            }\n        }\n    }\n    var options = {\n        \"method\": \"post\",\n        \"headers\": headers,\n        \"payload\": JSON.stringify(body)\n    };\n\n    try {\n        var response = UrlFetchApp.fetch(url + endpoint, options);\n        data = JSON.parse(response.getContentText());\n        SpreadsheetApp.getUi().alert(\"Invoice created succesfully with id: \" + data.data.id)\n\n    } catch (e) {\n        SpreadsheetApp.getUi().alert(e.message)\n    }\n</code></pre> <p> </p> <p>Remember to replace the placeholders as explained in the list example.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#step-two-try-it_1","title":"Step Two: Try it!","text":"<p>Nou can now click on the create invoice button that just appeared in your sheet's menu:</p> <p></p> <p>This will show you the HTML page we defined:</p> <p></p> <p>If you click on the \"Create\" button you'll trigger the invoice creation. You'll be able to see the results using the List Invoices menu one more time.</p>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/google-sheets-quickstart/#google-apps-script-documentation","title":"Google Apps Script Documentation","text":"<p>Here you can find some additional resources:</p> <ul> <li>Container-bound Scripts</li> <li>External APIs</li> <li>Custom Menus in Google Workspace</li> <li>Dialogs and Sidebars in Google Workspace Documents</li> <li>Class Ui</li> <li>HTML Service: Create and Serve HTML</li> <li>Libraries</li> </ul>","tags":["quickstarts","code example","apps script","google sheets"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/","title":"Java SDK Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Java application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#prerequisites","title":"Prerequisites ##","text":"<p>In this guide, we assume that these prerequisites are met: - Your JDK is configured correctly - A private app using the OAuth 2.0 Authorization Code Flow  - A TSE in Cloud account.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-one-add-the-dependencies","title":"Step One: Add the dependencies ##","text":"<p>In this Quickstart we are going to need some dependencies, OkHttpClient to make the API calls for the OAuth access token retrieval, JSON-java to parse the JSON, and our Java SDK, you can simply add them to your pom.xml or build.gradle file, as shown below:</p> <p>```xml title=\"pom.xml\"</p> <pre><code>\n\n```groovy title=\"build.gradle\"\nimplementation 'it.fattureincloud:fattureincloud-java-sdk:VERSION'\nimplementation 'com.squareup.okhttp3:okhttp:4.9.3'\nimplementation 'com.google.code.gson:gson:2.9.0'\nimplementation \"io.vavr:vavr:0.10.4\"\n</code></pre> <p>You can check the last version of our SDK on Maven Central.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval ##","text":"<p>First of all create a java project, create the file Application.java in your src/main/java/ directory, and copy in the following code:</p> <p>```java title=\"Application.java\" import com.google.gson.Gson; import com.sun.net.httpserver.HttpServer; import it.fattureincloud.sdk.auth.OAuth2AuthorizationCodeManager; import it.fattureincloud.sdk.auth.OAuth2AuthorizationCodeResponse; import it.fattureincloud.sdk.auth.Scope;</p> <p>import java.io.*; import java.net.InetSocketAddress; import java.util.Arrays; import java.util.List;</p> <p>class Application {</p> <pre><code>public static void main(String[] args) throws IOException {\n    int serverPort = 8000;\n    HttpServer server = HttpServer.create(new InetSocketAddress(serverPort), 0);\n    server.createContext(\"/oauth\", (exchange -&gt; {\n        OAuth2AuthorizationCodeManager oauth = new OAuth2AuthorizationCodeManager(\"CLIENT_ID\", \"CLIENT_SECRET\", \"http://localhost:8000/oauth\");\n        String redirectUrl = oauth.getAuthorizationUrl(scopes, \"EXAMPLE_STATE\");\n        String query = exchange.getRequestURI().getQuery();\n        if(query == null) query = \"\";\n        if(query.contains(\"code\")){\n            int start = query.indexOf(\"code=\") + 5;\n            int finish = query.indexOf(\"&amp;\");\n            String code = query.substring(start, finish);\n            Gson gson = new Gson();\n            OAuth2AuthorizationCodeResponse tokenObj = oauth.fetchToken(code).get();\n            String token = gson.toJson(tokenObj);\n\n            saveToken(token);\n            String respText = \"token salvato correttamente\";\n            exchange.sendResponseHeaders(200, respText.getBytes().length);\n            OutputStream output = exchange.getResponseBody();\n            output.write(respText.getBytes());\n            output.flush();\n            exchange.close();\n        }else{\n            exchange.getResponseHeaders().set(\"Location\", redirectUrl);\n            exchange.sendResponseHeaders(302, 0);\n            exchange.close();\n        }\n\n    }));\n    server.createContext(\"/quickstart\", (exchange -&gt; {\n        String token = retrieveToken();\n\n        //the following method is defined in the next step\n        String respText = Quickstart.getFirstCompanySuppliers(token);\n\n        exchange.sendResponseHeaders(200, respText.getBytes().length);\n        OutputStream output = exchange.getResponseBody();\n        output.write(respText.getBytes());\n        output.flush();\n        exchange.close();\n    }));\n    server.setExecutor(null);\n    server.start();\n}\n\npublic static void saveToken(String token) throws IOException {\n    BufferedWriter writer = new BufferedWriter(new FileWriter(\"token.json\"));\n    writer.write(token); //saving the oAuth access token in the token.json file\n\n    writer.close();\n}\n\npublic static String retrieveToken() throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(\"token.json\"));\n    String json = reader.readLine();\n    Gson gson = new Gson();\n    OAuth2AuthorizationCodeResponse obj = gson.fromJson(json, OAuth2AuthorizationCodeResponse.class);\n    String token = obj.getAccessToken();\n    return token;\n}\n</code></pre> <p>}</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 18.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :three:&amp;nbsp; Step Three: Set up the sample ## \n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the Java SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate a file called **Quickstart.java** in your working directory and copy in the following code:\n```java title=\"Quickstart.java\"\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.SuppliersApi;\nimport it.fattureincloud.sdk.api.UserApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListSuppliersResponse;\nimport it.fattureincloud.sdk.model.ListUserCompaniesResponse;\n\npublic class Quickstart {\n    public static String getFirstCompanySuppliers(String token) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n        defaultClient.setBasePath(\"https://api-v2.fattureincloud.it\");\n\n        // Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication(\"OAuth2AuthenticationCodeFlow\");\n        OAuth2AuthenticationCodeFlow.setAccessToken(token);\n\n        UserApi userApiInstance = new UserApi(defaultClient);\n        SuppliersApi suppliersApiInstance = new SuppliersApi(defaultClient);\n\n        try {\n            // Retrieve the first company id\n            ListUserCompaniesResponse userCompanies = userApiInstance.listUserCompanies();\n            int firstCompanyId = userCompanies.getData().getCompanies().get(0).getId();\n\n            // Retrieve the list of first 10 Suppliers for the selected company\n            Integer companyId = 12345; // Integer | The ID of the company.\n            Integer page = 1; // Integer | The page to retrieve.\n            Integer perPage = 10; // Integer | The size of the page.\n\n            ListSuppliersResponse result = suppliersApiInstance.listSuppliers(companyId, null, null, null, page, perPage, null);\n            return result.getData().toString();\n\n        } catch (ApiException e) {\n            System.err.println(\"Status code: \" + e.getCode());\n            System.err.println(\"Reason: \" + e.getResponseBody());\n            System.err.println(\"Response headers: \" + e.getResponseHeaders());\n            e.printStackTrace();\n            return e.getResponseBody();\n        }\n    }\n}\n</code></pre>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#step-four-run-the-sample","title":"Step Four: Run the sample ##","text":"<p>Now run your project and visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously.  Finally, you will see the success message, the access token will be stored in the token.json file ready to be used.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/java-sdk-quickstart/#what-now","title":"What now? ##","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources: * Java SDK GitHub Repository: the Readme file contains the full list of the available methods and models * API Reference: it contains the list of methods and models * OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models * SDK Javadoc: The standard Java documentation * Maven Central: The main package page</p>","tags":["quickstarts","code example","java","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/","title":"JavaScript SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Node Js application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Node.js installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to NPM.</p> <p>To install it using Npm:</p> <pre><code>npm install @fattureincloud/fattureincloud-js-sdk\n</code></pre>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.js copy in the following code:</p> <p>```js title=\"oauth.js\" const fs = require(\"fs\"); const fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\"); const oauth = new fattureInCloudSdk.OAuth2AuthorizationCodeManager(   \"CLIENT_ID\",   \"CLIENT_SECRET\",   \"http://localhost:8000/oauth\" );</p> <p>async function saveAccessToken(req, res) {   res.statusCode = 200;   res.setHeader(\"Content-Type\", \"text/plain\");</p> <p>let query = req.url.split(\"?\")[1];   let params = new URLSearchParams(query);</p> <p>if (params.get(\"code\") == null) {     res.writeHead(302, {       Location: oauth.getAuthorizationUrl(         [fattureInCloudSdk.Scope.ENTITY_SUPPLIERS_READ],         \"EXAMPLE_STATE\"       ),     });     res.end();   } else {     try {       let token = await oauth.fetchToken(params.get(\"code\"));</p> <pre><code>  fs.writeFileSync(\n    \"./token.json\",\n    JSON.stringify(token, null, 4),\n    (err) =&gt; {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    }\n  );\n  res.write(\"Token succesfully retrived and stored in token.json\");\n} catch (e) {\n  console.log(e);\n}\nres.end();\n</code></pre> <p>} }</p> <p>module.exports = {   saveAccessToken, };</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 3.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :three:&amp;nbsp; Step Three: Set up the sample\n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the JavaScript SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate the files **index.js** and **quickstart.js** in your working directory and copy in the following code:\n\n\n```js title=\"index.js\"\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst oauthPath = require(\"./oauth.js\"); //import the oauth methods\nconst quickstart = require(\"./quickstart.js\"); //import the quickstart\nconst hostname = \"127.0.0.1\"; //set your hostname\nconst port = 8000; //set your port\n\nconst server = http.createServer(async (req, res) =&gt; {\n  let pathname = url.parse(req.url).pathname;\n\n  //url routing\n  switch (pathname) {\n    case \"/oauth\": //oauth endpoint\n      res.end(oauthPath.getOAuthAccessToken(req, res));\n      break;\n    case \"/quickstart\": //quickstart endpoint\n      res.end(quickstart.getFirstCompanySuppliers());\n      break;\n    default:\n      res.end();\n      break;\n  }\n  res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <p>```js title=\"quickstart.js\" const fattureInCloudSdk = require(\"@fattureincloud/fattureincloud-js-sdk\"); const fs = require(\"fs\");</p> <p>async function getFirstCompanySuppliers() {   try {     let rawdata = fs.readFileSync(__dirname + \"/token.json\");</p> <pre><code>let json = JSON.parse(rawdata);\n\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications[\"OAuth2AuthenticationCodeFlow\"];\nOAuth2AuthenticationCodeFlow.accessToken = json[\"access_token\"];\n\n// Retrieve the first company id\nlet userApiInstance = new fattureInCloudSdk.UserApi();\nlet userCompaniesResponse = await userApiInstance.listUserCompanies();\nlet firstCompanyId = userCompaniesResponse.data.companies[0].id;\n\n// Retrieve the list of the Suppliers\nlet suppliersApiInstance = new fattureInCloudSdk.SuppliersApi();\nlet companySuppliers = await suppliersApiInstance.listSuppliers(\n  firstCompanyId\n);\n\nreturn JSON.stringify(companySuppliers.data);\n</code></pre> <p>} catch (e) {     return JSON.stringify(e);   } }</p> <p>module.exports = {   getFirstCompanySuppliers, };</p> <pre><code>\n\n:::warning Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:5000/Index).\n\n:::\n\n## :five:&amp;nbsp; Step Five: Run the sample\n\nFrom the command line, run the following command:\n\n```console\nnode index.js\n</code></pre> <p>Now visit http://localhost:8000/auth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/js-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>JavaScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["quickstarts","code example","javascript","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/","title":"PHP SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple PHP command-line application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>PHP 7.1 or greater</li> <li>The Composer dependency management tool</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to Packagist.</p> <p>To install it using Composer:</p> <pre><code>composer require fattureincloud/fattureincloud-php-sdk\n</code></pre>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.php and copy in the following code:</p> <p>```php title=\"oauth.php\"</p> getAuthorizationUrl([Scope::ENTITY_SUPPLIERS_READ], \"EXAMPLE_STATE\");   header('location: '.$url); } else {     $code = $_GET['code'];     $obj = $oauth-&gt;fetchToken($code);     if(!isset($obj-&gt;error)) {       $_SESSION['token'] = $obj-&gt;getAccessToken(); //saving the oAuth access token in a session variable       $_SESSION['refresh'] = $obj-&gt;getRefreshToken();     }      echo 'Token saved correctly in the session variable'; }  ?&gt;  <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 10.\n\n:::warning Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points to your just created **oauth.php** file.\n\n:::\n\n:::danger Keep your Client Secret safe!\n\nNever share your Client Secret with third-party actors, or publish it to your frontend! If you did, then we suggest to delete your TSE in Cloud app and to recreate it.\n\n:::\n\n## :three:&amp;nbsp; Step Three: Set up the sample\n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the PHP SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate a file called **quickstart.php** in your working directory and copy in the following code:\n\n```php title=\"quickstart.php\"\n&lt;?php\n\nuse FattureInCloud\\Api\\SuppliersApi;\nuse FattureInCloud\\Api\\UserApi;\nuse FattureInCloud\\Configuration;\nuse GuzzleHttp\\Client;\n\nrequire __DIR__ . '/vendor/autoload.php';\nsession_start();\n\n// Retrieve the access token from the session variable\n$accessToken = $_SESSION['token'];\n\n// Get the API config and construct the service object.\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()-&gt;setAccessToken($accessToken);\n\n$userApi = new FattureInCloud\\Api\\UserApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n$suppliersApi = new FattureInCloud\\Api\\SuppliersApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\ntry {\n    // Retrieve the first company id\n    $companies = $userApi-&gt;listUserCompanies();\n    $firstCompanyId = $companies-&gt;getData()-&gt;getCompanies()[0]-&gt;getId();\n\n    // Retrieve the list of first 10 Suppliers for the selected company\n    $suppliers = $suppliersApi-&gt;listSuppliers($firstCompanyId, null, null, null, 1, 10);\n    foreach ($suppliers-&gt;getData() as $supplier) {\n        $name = $supplier-&gt;getName();\n    }\n\n} catch (Exception $e) {\n    echo 'Exception when calling the API: ', $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#step-four-run-the-sample","title":"Step Four: Run the sample","text":"<p>Now start the webserver using the following command:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>and go to http://localhost:8000/oauth.php (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message, the access token will be stored in the session variable ready to be used.</p> <p>You can now visit http://localhost:8000/quickstart.php (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/php-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>PHP SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>Packagist page: The main package page on Packagist</li> </ul>","tags":["quickstarts","code example","php","sdk"]},{"location":"stepbystep/quickstarts/postman-collection/","title":"Postman Collection","text":"<p>To test our API without writing a single line of code, we used our OpenAPI Specification to generate a dedicated Postman Collection.</p> <p>Postman is an API Platform for building and using APIs. Postman Collections can describe all the methods exposed by an API, making it possible for the user to modify the different request parameters and perform actual calls towards the API, obtaining the HTTP response as a result.</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#install-postman","title":"Install Postman","text":"<p>To use our collection, we suggest downloading Postman on your device; it is available for Windows, Mac, and Linux.</p> <p>Next, sign up to Postman: don't worry, to use our collection the Free Plan is enough </p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#import-the-collection","title":"Import the Collection","text":"<p>Our Collection is generated automatically using our OpenAPI Specification, and can be downloaded from our GitHub Repository at the postman/fic-api.json position; it is updated every time a new version of the Specification is released, so you can just redownload it to keep in sync.</p> <p>Once you downloaded the JSON file of the collection, you can import it following this procedure.</p> <p>Now you're almost ready to interact with our API!</p> <p>:::info Not satisfied by our collection?</p> <p>If you prefer, you can instead use our OpenAPI Specification directly, importing the openapi.yaml file using this procedure. You just need to be sure to download also the files in the models folder, otherwise, the import will fail. Also, you need to select the right parameters to import the collection correctly.</p> <p>:::</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#authorization","title":"Authorization","text":"<p>Next, to be able to interact with our API you need to be authorized: see the Authentication page for further info.</p> <p>You have two main options to retrieve a valid token:</p> <ol> <li>Manual Authentication: since Postman is mainly used to test and discover our API behavior, this is a great use case for Manual Authentication. Just generate a new token with the required scopes and insert it in Postman!</li> <li>OAuth 2.0 Authorization Code: if you want to test the authentication step, you can try to retrieve the token and insert it in Postman.</li> </ol> <p>Once you retrieved a valid token, you can just insert it as a Bearer token following this procedure.</p> <p>If you want, you can also use Postman to retrieve your Access Token automatically from its interface. To set it up, click on the collection and select the Authorization tab, then compile the Configure New Token form.</p> <p> </p> <p>The parameters are:</p> <ol> <li>Auth URL: https://api-v2.fattureincloud.it/oauth/authorize</li> <li>Access Token URL: https://api-v2.fattureincloud.it/oauth/token</li> <li>Callback URL: The redirect URL declared for the OAuth2 Application</li> </ol> <p>All the other parameters can be found on the OAuth 2.0 Authorization Code Flow page.</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#test-our-apis","title":"Test our APIs!","text":"<p>You're finally ready to test our API using Postman. Select the method you want to try, compile the request parameters and click the Send button! Have fun!</p> <p>:::warning Retrieve your Company ID!</p> <p>Many of our methods are Company-scoped, which means they require to indicate the ID of the Company we're operating on. The good news is that you can use Postman to retrieve it! Check the Company-scoped Methods page for more info!</p> <p>:::</p>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/postman-collection/#additional-resources","title":"Additional resources","text":"<ul> <li>Postman API Platform</li> <li>Download Postman</li> </ul>","tags":["quickstarts","postman","code example"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/","title":"Python SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Python application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Python &gt;= 3.6 installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to PyPI.</p> <p>To install it using pip:</p> <pre><code>pip install fattureincloud-python-sdk\n</code></pre>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.py and copy in the following code:</p> <p>```py title=\"oauth.py\" import json from urllib.parse import urlparse from urllib.parse import parse_qs from fattureincloud_python_sdk.oauth2.oauth2 import OAuth2AuthorizationCodeManager from fattureincloud_python_sdk.oauth2.oauth2 import Scope</p> <p>class Oauth:     def get_oauth_access_token(self):         oauth = OAuth2AuthorizationCodeManager('CLIENT_ID', 'CLIENT_SECRET', 'http://localhost:8000/oauth')         query_components = parse_qs(urlparse(self.path).query)         if 'code' in query_components:             self.send_response(200)             self.send_header('Content-type','text/html')             self.end_headers()             code = query_components['code'][0]             token = oauth.fetch_token(code)             file = open('./token.json', 'w')             file.write(json.dumps({\"access_token\": token.access_token}))  #saving the oAuth access token in the token.json file             file.close()             self.wfile.write(bytes('Token saved succesfully in ./token.json', 'utf8'))         else:             url = oauth.get_authorization_url([Scope.ENTITY_SUPPLIERS_READ], 'EXAMPLE_STATE')             self.send_response(302)             self.send_header('Location', url)             self.end_headers()         return</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 9.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :four:&amp;nbsp; Step Four: Set up the sample\n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the Python SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate the files **index.py** and **quickstart.py** in your working directory and copy in the following code:\n\n\n```py title=\"index.py\"\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom oauth import Oauth #import the Oauth class\nfrom quickstart import Quickstart #import the Quickstart class\n\nclass testHTTPServer_RequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        #url routing\n        if self.path.startswith('/oauth'): #oauth endpoint\n            Oauth.get_oauth_access_token(self)\n        elif self.path == '/quickstart': #quickstart endpoint\n            Quickstart.get_first_company_suppliers(self)\n        return\n\ndef run():\n    print('Avvio del server...')\n    server_address = ('127.0.0.1', 8000) #set your hostname and port\n    httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)\n    print('Server in esecuzione...')\n    httpd.serve_forever()\nrun()\n</code></pre> <p>```py title=\"quickstart.py\" import fattureincloud_python_sdk from fattureincloud_python_sdk.api import user_api from fattureincloud_python_sdk.api import suppliers_api from fattureincloud_python_sdk.models.list_user_companies_response import ListUserCompaniesResponse import json import collections collections.Callable = collections.abc.Callable #needed if you are using python &gt; 3.10</p> <p>class Quickstart:     def get_first_company_suppliers(self):</p> <pre><code>    token_file = open(\"./token.json\")\n    json_file = json.load(token_file)\n    token_file.close()\n    configuration = fattureincloud_python_sdk.Configuration()\n    configuration.access_token = json_file[\"access_token\"]\n    with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n        # Retrieve the first company id\n        user_api_instance = user_api.UserApi(api_client)\n        user_companies_response = user_api_instance.list_user_companies()\n        first_company_id = user_companies_response.data.companies[0].id\n\n        # Retrieve the list of the Suppliers\n        suppliers_api_instance = suppliers_api.SuppliersApi(api_client)\n        company_suppliers = suppliers_api_instance.list_suppliers(first_company_id)\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(bytes(str(company_suppliers.data), \"utf8\"))\n    return\n</code></pre> <pre><code>\n\n:::warning Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points to the just defined /oauth endpoint (e.g. http://localhost:8000/oauth).\n\n:::\n\n## :five:&amp;nbsp; Step Five: Run the sample\n\nFrom the command line, run the following command:\n\n```console\npython3 index.py\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/python-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>Python SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>PyPI page: The main package page on PyPI</li> </ul>","tags":["quickstarts","code example","python","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/","title":"Ruby SDK Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Ruby application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#prerequisites","title":"Prerequisites ##","text":"<p>In this guide, we assume that these prerequisites are met: - Ruby installed - A private app using the OAuth 2.0 Authorization Code Flow  - A TSE in Cloud account.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK ##","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to RubyGems. </p> <p>To install it:</p> <pre><code>gem install fattureincloud_ruby_sdk\n</code></pre>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval ##","text":"<p>Create the file oauth.rb and copy in the following code:</p> <p>```rb title=\"oauth.rb\" require 'rubygems' require 'webrick' require 'json' require 'fattureincloud_ruby_sdk'</p> <p>class Oauth &lt; WEBrick::HTTPServlet::AbstractServlet   def do_GET(request, response)     oauth = FattureInCloud_Ruby_Sdk::OAuth2AuthorizationCodeManager.new('CLIENT_ID', 'CLIENT_SECRET', 'http://localhost:8000/oauth')     if !request.request_uri.query.nil?       url_obj = URI.decode_www_form(request.request_uri.query).to_h       if !url_obj['code'].nil?         token = oauth.fetch_token(url_obj['code'])         File.open('./token.json', 'w') do |file|           file.write({\"access_token\" =&gt; token.access_token}.to_json) # saving the oAuth access token in the token.json file         end         body = 'Token saved succesfully in ./token.json'       else         redirect(response, oauth)       end     else redirect(response, oauth)     end</p> <pre><code>response.status = 200\nresponse['Content-Type'] = 'text/html'\nresponse.body = body\n</code></pre> <p>end</p> <p>def redirect(response, oauth)     url = oauth.get_authorization_url([FattureInCloud_Ruby_Sdk::Scope::ENTITY_SUPPLIERS_READ], 'EXAMPLE_STATE')     response.set_redirect(WEBrick::HTTPStatus::TemporaryRedirect, url)   end end</p> <p>if $PROGRAM_NAME == FILE   server = WEBrick::HTTPServer.new(Port: 8000)   server.mount '/oauth', Oauth   trap 'INT' do server.shutdown end   server.start end</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 8.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :three:&amp;nbsp; Step Three: Set up the sample ## \n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the Ruby SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate the files **index.rb** and **quickstart.rb** in your working directory and copy in the following code:\n\n```rb title=\"index.rb\"\nrequire 'rubygems'\nrequire 'webrick'\n\nrequire './oauth' # importing the class created in the next tab\nrequire './quickstart' # importing the class created in the previous steps\n\nif $0 == __FILE__ then\n  server = WEBrick::HTTPServer.new(:Port =&gt; 8000)\n  server.mount \"/quickstart\", QuickStart # route that refers to the QuickStary class in the imported quickstart.rb file\n  server.mount \"/oauth\", Oauth  # route that refers to the Oauth class in the imported oauth.rb file\n  trap \"INT\" do server.shutdown end\n  server.start\nend\n</code></pre> <p>```rb title=\"quickstart.rb\" require 'fattureincloud_ruby_sdk'</p> <p>class QuickStart &lt; WEBrick::HTTPServlet::AbstractServlet</p> <p>def do_GET(request, response)</p> <pre><code># setup authorization\nFattureInCloud_Ruby_Sdk.configure do |config|\n# Configure OAuth2 access token for authorization: OAuth2AuthenticationCodeFlow\nconfig.access_token = retrieve_token_from_file()\nend\n\n# Retrieve the first company id\nuser_api_instance = FattureInCloud_Ruby_Sdk::UserApi.new\nuser_companies_response = user_api_instance.list_user_companies\nfirst_company_id = user_companies_response.data.companies[0].id\n\n# Retrieve the list of the Suppliers\nsuppliers_api_instance = FattureInCloud_Ruby_Sdk::SuppliersApi.new\ncompany_suppliers = suppliers_api_instance.list_suppliers(first_company_id)\nresponse.body = company_suppliers.to_s\n</code></pre> <p>end</p> <p>def retrieve_token_from_file()     obj = JSON.parse(File.read(\"./token.json\"))     return obj[\"access_token\"].to_s   end</p> <p>end</p> <pre><code>\n\n\n:::danger Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points to the just defined /oauth endpoint (e.g. http://localhost:8000/oauth).\n\n:::\n\n## :four:&amp;nbsp; Step Four: Run the sample ## \nFrom the command line, run the following command:\n```console\nruby index.rb\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously.  Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ruby-sdk-quickstart/#what-now","title":"What now? ##","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources: * Ruby SDK GitHub Repository: the Readme file contains the full list of the available methods and models * API Reference: it contains the list of methods and models * OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models * RubyDoc page: The package documentation * RubyGems page: The main package page on RubyGems</p>","tags":["quickstarts","code example","ruby","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/","title":"TypeScript SDK Quickstart","text":"<p>import Tabs from \"@theme/Tabs\"; import TabItem from \"@theme/TabItem\";</p> <p>Following the steps described on this page, you'll create a simple Node Js application that interacts with the TSE in Cloud API.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met:</p> <ul> <li>Node.js and ts-node installed</li> <li>A private app using the OAuth 2.0 Authorization Code Flow</li> <li>A TSE in Cloud account.</li> </ul>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-one-install-the-tse-in-cloud-sdk","title":"Step One: Install the TSE in Cloud SDK","text":"<p>In this quickstart, we'll use the TSE in Cloud SDK, published to NPM.</p> <p>To install it using Npm:</p> <pre><code>npm install @fattureincloud/fattureincloud-ts-sdk\n</code></pre>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#step-two-set-up-the-oauth-access-token-retrieval","title":"Step Two: Set up the OAuth access token retrieval","text":"<p>Create the file oauth.ts and copy in the following code:</p> <p>```ts title=\"oauth.ts\" import {   OAuth2AuthorizationCodeManager,   Scope, } from \"@fattureincloud/fattureincloud-ts-sdk\"; import fs from \"fs\"; import http from \"http\";</p> <p>export async function getOAuthAccessToken(   req: http.IncomingMessage,   res: http.ServerResponse ) {   res.statusCode = 200;   res.setHeader(\"Content-Type\", \"text/plain\");</p> <p>let query = !!req.url &amp;&amp; req.url.split(\"?\")[1];   let params = new URLSearchParams(query || \"\");</p> <p>let oauth = new OAuth2AuthorizationCodeManager(     \"CLIENT_ID\",     \"CLIENT_SECRET\",     \"http://localhost:8000/oauth\"   );</p> <p>if (params.get(\"code\") == null) {     res.writeHead(302, {       Location: oauth.getAuthorizationUrl(         [Scope.ENTITY_SUPPLIERS_READ],         \"EXAMPLE_STATE\"       ),     });     res.end();   } else {     let code = params.get(\"code\");</p> <pre><code>try {\n  let token = await oauth.fetchToken(code ?? \"\");\n  // saving the oAuth access token in the token.json file\n  fs.writeFileSync(\"./token.json\", JSON.stringify(token, null, 4));\n  res.write(\"Token succesfully retrived and stored in token.json\");\n} catch (e) {\n  console.log(e);\n}\nres.end();\n</code></pre> <p>} }</p> <pre><code>\nTo make this code work properly the only thing you need to set your client id, client secret and eventually the redirect uri at line 12.\n\n:::danger Store the Token safely!\n\nIn this QuickStart the access token and refresh token are stored in a file. This is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database.\nAlso, never share your Client Secret with third-party actors, or publish it to your frontend!\n\n:::\n\n## :four:&amp;nbsp; Step Four: Set up the sample\n\n:::tip Retrieve your Company ID!\n\nIn this example, we'll show how to retrieve your Company ID using the TypeScript SDK. If you plan to manage only one company, you can insert it directly into your code as a variable.\nCheck the [Company-scoped Methods](/basics/company-scoped-methods.mdx) page for more info.\n\n:::\n\nCreate the files **index.ts** and **quickstart.ts** in your working directory and copy in the following code:\n\n\n```ts title=\"index.ts\"\nimport * as http from \"http\";\nimport url from \"url\";\nimport { getOAuthAccessToken } from \"./oauth\";\nimport { getFirstCompanySuppliers } from \"./quickstart\";\n\nconst hostname = \"127.0.0.1\"; //set your hostname\nconst port = 8000; //set your port\n\nconst server = http.createServer(async (req, res) =&gt; {\n  var pathname = url.parse(req.url ?? \"\").pathname;\n\n  //url routing\n  switch (pathname) {\n    case \"/oauth\": //oauth endpoint\n      res.end(await getOAuthAccessToken(req, res));\n      break;\n    case \"/quickstart\": //quickstart endpoint\n      res.end(await getFirstCompanySuppliers());\n      break;\n    default:\n      res.end();\n      break;\n  }\n  res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <p>```ts title=\"quickstart.ts\" import {   Configuration,   ListUserCompaniesResponse,   SuppliersApi,   UserApi, } from \"@fattureincloud/fattureincloud-ts-sdk\"; import fs from \"fs\";</p> <p>export async function getFirstCompanySuppliers() {   try {     let rawdata = fs.readFileSync(\"./token.json\");     let json = JSON.parse(rawdata.toString());     // Configure OAuth2 access token for authorization:     const apiConfig = new Configuration({       accessToken: json[\"access_token\"],     });</p> <pre><code>// Retrieve the first company id\nvar userApiInstance = new UserApi(apiConfig);\nvar userCompaniesResponse: ListUserCompaniesResponse = await (\n  await userApiInstance.listUserCompanies()\n).data;\nvar firstCompanyId = userCompaniesResponse?.data?.companies?.[0]?.id;\n\nif (firstCompanyId) {\n  // Retrieve the list of the Suppliers\n  var suppliersApiInstance = new SuppliersApi(apiConfig);\n  var companySuppliers = await suppliersApiInstance.listSuppliers(\n    firstCompanyId\n  );\n\n  return JSON.stringify(companySuppliers.data);\n}\n</code></pre> <p>} catch (e) {     return JSON.stringify(e);   } }</p> <pre><code>\n\n:::warning Check the Redirect URL\n\nMake sure your FattureInCloud app redirect URL points at the just edited file (e.g. http://localhost:8000/oauth).\n\n:::\n\n## :five:&amp;nbsp; Step Five: Run the sample\n\nFrom the command line, run the following command:\n\n```console\nts-node index.ts\n</code></pre> <p>Now visit http://localhost:8000/oauth (or whatever your URL is), you will be redirected to the TSE in Cloud login page where you will be asked to grant some permissions, according to what scopes you specified previously. Finally, you will see the success message and the access token will be stored in the token.json file.</p> <p>You can now visit http://localhost:8000/quickstart (or whatever your URL is) to test the application.</p>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/ts-sdk-quickstart/#what-now","title":"What now?","text":"<p>In this example, we used a limited set of the available API methods to show how to use our SDK.</p> <p>If you want to access the full documentation of the available methods and models, you can check the following resources:</p> <ul> <li>TypeScript SDK GitHub Repository: the Readme file contains the full list of the available methods and models</li> <li>API Reference: it contains the list of methods and models</li> <li>OpenAPI Specification: Our OpenAPI Specification contains the full description of the available methods and models</li> <li>NPM page: The main package page on NPM</li> <li>YarnPkg page: The main package page on Yarn</li> </ul>","tags":["quickstarts","code example","typescript","sdk"]},{"location":"stepbystep/quickstarts/vanilla-code/","title":"Vanilla Code Examples","text":"<p>In this section of the Developer Hub, we provide a set of useful guides to use our SDKs to interact with the TSE in Cloud APIs. We strongly suggest using our SDKs whenever possible, but some use cases make it impossible to use them.</p> <p>For example, you could be in one of the following situations:</p> <ul> <li>We don't (currently) provide an SDK for your programming language</li> <li>The SDK for your language doesn't support your version (for example, you're using an obsolete version of PHP)</li> <li>You're having some version conflict while installing our SDK</li> </ul> <p>In these cases, it could be impossible to use one of our SDKs, or the effort required to use them could be unacceptable. On the other hand, some users could still decide to avoid our SDKs for various reasons, even if it would be technically possible to install them.</p> <p>Whatever the case, it is still possible to use our APIs by using Vanilla Code, by implementing our SDKs' behavior on your own.</p> <p>:::danger Follow this path at your own risk!</p> <p>We strongly suggest using our SDKs because:</p> <ul> <li>The SDKs abstract your code, making it possible to ignore the implementation details</li> <li>Our guides are mostly based on our SDKs, so it will be faster to develop a functioning integration</li> <li>Our SDKs provide models containing all the fields that represent the API resources</li> <li>Our SDKs code is tested and used by many other users</li> <li>We offer support for our SDKs, so if a bug is detected we can fix it with the next release</li> <li>We won't debug your custom code (even if you send us the code snippet)</li> </ul> <p>:::</p> <p>Since it is impossible to create vanilla code guides for every existing programming language, and since each language has a possibly huge set of similar libraries that could be used to implement the integration, we decided to not provide vanilla code examples. Instead, we decided to provide you with enough information to help you implement the code on your own.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#wanna-be-faster","title":"Wanna be faster?","text":"<p>If your environment is incompatible with our SDKs, but you would still like to use something similar, you could try to generate your own library thanks to our OpenAPI specification. It is the same procedure we use to create our SDKs, so you could give it a try too.</p> <p>For example, you could try to check if the OpenAPI Generator provides a generator compatible with your environment: the generator offers more languages than the ones we currently support, and some generator options could make the generated code compatible with your environment (targeting a language version or selecting a different library). Also, it is possible to find alternative code generators, or you can decide to use a self-generating library.</p> <p>If you don't want to include our SDKs because you just need a subset of our methods, you could also download and modify our OpenAPI file, removing all the parts that are unuseful for your use case; if you use this file as input for the generator, you'll obtain a smaller library than the official one.</p> <p>For additional information, you can check the resources linked to the OpenAPI specification page.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#can-i-modify-your-libraries","title":"Can I modify your libraries?","text":"<p>Sure! Our SDKs and our Prestashop module are released under MIT License, so feel free to modify them to meet your requirements. The code is freely available on GitHub, so feel free to customize it accordingly to your needs.</p> <p>:::info Do you want to help other customers?</p> <p>If you think that the modifications you developed could be useful for the rest of the Community, then we invite you to open a Pull Request on our GitHub repositories!</p> <p>Please, notice that to open a PR the first step is to create a public Fork and publish your modifications to a branch in your repo; we won't accept or review code passed through any other mode. See also: Contributing to projects</p> <p>:::</p> <p>:::warning Our SDKs are generated!</p> <p>Our SDKs are in large part generated!!! This means that your modifications could be overwritten while generating a new version, so we will most probably reject your PRs on the generated code. The OAuth and Filter helpers are not generated, so we could accept your PRs involving that part.</p> <p>If you want to propose an improvement to the generated code, you could try to modify the OpenAPI specification or the templates we use to generate the code. Please, notice that not all templates are added to our repository: we include only the ones that we must customize, the other templates are the standard ones provided by the generator. As an alternative, you can try to open an issue on the SDK repo and wait for our support.</p> <p>If you decide to do it on your own, you can check:</p> <ul> <li>OpenAPI specification</li> <li>OpenAPI Generator - Customization</li> </ul> <p>:::</p> <p>:::danger Can you support me with my modified library?</p> <p>If you're having a problem with a customized library, we can still try to support you to solve the issue, but first, you should publish a PR containing your modifications. We won't review code provided in any other way.</p> <p>If you publish a PR it will be easier for us to check the modifications you applied to our code, and we could additionally decide to adopt your changes into our library if the new features could be useful to the rest of the community.</p> <p>:::</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#man_facepalming-can-you-do-it-for-us","title":":man_facepalming:\u00a0 Can you do it for us?","text":"<p>We usually don't accept custom modification requests, but if you have an idea for a new functionality you can try to open a new discussion in our Community: if we think that the request could be useful also for other developers we might decide to develop it for you.</p> <p>If, instead, your request is useful only for your use case, or if you don't want to wait for our intervention, you can proceed and develop the modifies on your own.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#the-implementation-details","title":"The implementation details","text":"<p>If you prefer to implement the integration on your own (e.g. without a generator), you will still need a few libraries to make your life easier. In some cases, your language could provide them directly without external imports, while in other cases it is mandatory to select and install additional libraries.</p> <p>This is an indicative set of libraries that you could need:</p> <ul> <li>An HTTP Client</li> <li>A JSON marshaller/unmarshaller</li> <li>An OAuth2 client (optional)</li> </ul> <p>This set could change based on the libraries that you select: for example, the HTTP Client could require a JSON string as request, so you'll need to perform the JSON conversion on your own; in some other cases the JSON conversion is managed directly by the client, so you'll be able to avoid to install the JSON library. Also, the OAuth2 client will be unuseful if you decide to use the Manual Authentication, or you could decide to implement the OAuth2 process on your own using the HTTP client.</p> <p>The HTTP Client must be used to implement the REST Requests. The request will take advantage of the structure of HTTP Requests, in particular of the following parts:</p> <ul> <li>HTTP Method</li> <li>Request Target (the URL)</li> <li>HTTP Request Headers</li> <li>Querystring parameters</li> <li>Request Body</li> </ul> <p>The HTTP Response will contain the result of the request. The HTTP Response is structured as follows:</p> <ul> <li>Status Code</li> <li>Response Body</li> <li>HTTP Response Headers</li> </ul> <p>Below you can find the description of the various parts. You can check the actual values that must be used by checking the API Reference or by using the Postman Collection.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#haircut_man-http-method","title":":haircut_man:\u00a0 HTTP Method","text":"<p>Each HTTP request must contain an HTTP Method, that defines the kind of action that you want to perform. In the following table you can find the relationship between HTTP methods and actions:</p> HTTP Method Performed Action GET Read opetations (Get or List actions) POST Create operations PUT Modify operations DELETE Delete operations <p>The Get or List operations are distinguished by the structure of the URL (see below).</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#request-target-the-url","title":"Request Target (the URL)","text":"<p>The request target is an URL that identifies the resource on which the action should be performed. It could contain some Path Parameters, usually one of the following:</p> <ul> <li>Company ID</li> <li>The ID of the resource to manipulate</li> </ul> <p>You can usually distinguish between List and Get methods because the Get URLs additionally include the ID of the resource to retrieve.</p> <p>:::tip Retrieve your Company ID!</p> <p>The Company ID is mandatory if you want to use Company-scoped Methods. If you plan to manage only one company, you can insert it directly into your code as a string; if, instead, you will manage multiple companies (and you don't know them at compile time), you must retrieve their IDs programmatically. Check the Company-scoped Methods page for more info.</p> <p>:::</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#http-request-headers","title":"HTTP Request Headers","text":"<p>The Headers usually contain metadata that apply to the request.</p> <p>In particular, our APIs use the Authorization Header to include the Access Token. If this header is missing or it isn't in the correct format, the request will be immediately discarded. Since the OAuth2 procedure can be complicated for inexperienced programmers, we provided a dedicated vanilla code guide to show some additional examples.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#query-string-parameters","title":"Query string parameters","text":"<p>The Query string is used by our APIs to add the parameters required to use the additional functionalities of the Read operations (e.g. Get and List); it can usually be omitted if you don't need to use those functionalities. This string is used as a suffix to the URL, and it can be used to sort, paginate, customize or filter the response.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#request-body","title":"Request Body","text":"<p>The Request Body is used in Create and Modify requests to describe the new status of the resource after the action has been applied. Our APIs use solely JSON to represent the request, so you could need a JSON marshaller to create the body string.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#status-code","title":"Status Code","text":"<p>The Status Code is used to define if an operation was concluded with a success (2xx codes), with a client error (4xx codes), or with a server error (5xx codes).</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#response-body","title":"Response Body","text":"<p>The response body will contain the following:</p> <ul> <li>Get requests: it contains the current state of the selected resource</li> <li>List requests: it contains a set of resources with their current state</li> <li>Create request: it contains the state of the created resource, including also the ID of the resource generated by the server</li> <li>Modify Request: it contains the state of the modified resource</li> </ul> <p>Our APIs always return a JSON response, so it must be managed accordingly.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#http-response-headers","title":"HTTP Response Headers","text":"<p>The response headers are usually used to provide additional info, such as information related to limits and quotas.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/vanilla-code/#please-give-me-some-examples","title":"Please, give me some examples!","text":"<p>You can obtain some examples automatically, by using our OpenAPI file or Postman Collection.</p> <p>For example, if you download our Postman Collection you can automatically generate some useful vanilla code examples by following this guide: Generating Client Code.</p> <p>As an alternative, you can use a code snippet generator to generate vanilla code snippets automatically for a huge variety of languages. You can obtain the info required to launch the generation by using our OpenAPI specification as a source.</p> <p>Here you can find some snippet generators:</p> <ul> <li>OpenAPI Snippet</li> <li>OpenAPI Snippet CLI</li> <li>ReadmeIO/httpsnippet</li> <li>Kong/httpsnippet</li> </ul> <p>As a last chance, you can also check our SDK repositories to copy our code. The SDK internally uses the same procedure described above, so you could try to read the code and adapt it to your needs.</p>","tags":["quickstarts","code example","vanilla","snippet","example","generation","openapi","postman","rest","http"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/","title":"Windows Form Quickstart","text":"<p>import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';</p> <p>Following the steps described on this page, you'll create a simple Windows Form App integrated with TSE in Cloud.</p> <p>If you want to download the complete working example you can find it here.</p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#prerequisites","title":"Prerequisites","text":"<p>In this guide, we assume that these prerequisites are met: - .NET SDK installed - A TSE in Cloud account. - A private app using the Manual Authentication </p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#github-repo","title":"Github repo!","text":"<p>If you want to download the complete project we have it here, we strongly suggest that you clone this project to follow this guide.</p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-one-create-a-windows-form-app","title":"Step One: Create a Windows Form app","text":"<p>The first step is to create a Windows Form project in Visual Studio, in this tutorial we are making a simple app that does two things:</p> <ul> <li>lists all the clients</li> <li>creates a client</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-two-put-the-components-in-the-form","title":"Step Two: Put the components in the Form","text":"<p>This form is pretty simple: </p> <p></p> <p></p> <p>Components list:</p> <ul> <li>TabControl tabControl1: we have a TabControl with 2 tabs, one for the list clients and one for the create client</li> </ul> <p>inside the first tab we have:</p> <ul> <li>DataGridView dataGridView1: this shows all the clients linked to the company</li> <li>Button syncButton: it calls the method that populates the data grid</li> </ul> <p>inside the second tab we have:</p> <ul> <li>TextBox clientNameTextBox: input for the client name</li> <li>TextBox clientTaxCodeTextBox: input for the client tax code</li> <li>TextBox clientVatNumberTextBox: input for the client vat number</li> <li>TextBox clientEmailTextBox: input for the client email</li> <li>Button saveClient: it calls the method that creates the client</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#the-actual-code","title":"The actual code","text":"<p>:::tip Retrieve your Company ID!</p> <p>In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way. Check the Company-scoped Methods page for more info.</p> <p>:::</p> <p>The actual code behind the Form is very simple too:</p> <pre><code>using It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\nusing System;\nusing System.Windows.Forms;\n\nnamespace WinFormsQuickstart\n{\n    public partial class Form : System.Windows.Forms.Form\n    {\n        ClientsApi clientsApi;\n        int companyId = 12345;\n        public Form()\n        {\n            InitializeComponent();\n            Configuration config = new Configuration();\n            // IMPORTANT: the access token file must be saved in a secure environment\n            // like a db or the AppConfig\n            config.AccessToken = \"YOUR_ACCESS_TOKEN\";\n            clientsApi = new ClientsApi(config);\n        }\n\n        private void syncButton_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                dataGridView1.Rows.Clear();\n                dataGridView1.Columns.Clear();\n                dataGridView1.Refresh();\n                dataGridView1.Columns.Add(\"Id\", \"Id\");\n                dataGridView1.Columns.Add(\"Name\", \"Name\");\n                dataGridView1.Columns.Add(\"VatNumber\", \"Vat Number\");\n                dataGridView1.Columns.Add(\"TaxCode\", \"Tax Code\");\n                dataGridView1.Columns.Add(\"Country\", \"Country\");\n\n                retrieveAllClients();\n\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message);\n            }\n        }\n\n        private void retrieveAllClients(int page = 1)\n        {\n            var result = clientsApi.ListClientsWithHttpInfo(companyId, page: page);\n\n            result.Data.Data.ForEach(client =&gt;\n            {\n                dataGridView1.Rows.Add(\n                    new string[] \n                    { \n                        client.Id.ToString(), \n                        client.Name, \n                        client.VatNumber, \n                        client.TaxCode, \n                        client.Country \n                    }\n                );\n            });\n\n            if (result.Data.NextPageUrl != null) retrieveAllClients(++page);\n        }\n\n        private void saveClient_Click(object sender, EventArgs e)\n        {\n            var newClient = new CreateClientRequest(\n                data: new ModelClient(\n                    name: clientNameTextBox.Text,\n                    taxCode: clientTaxCodeTextBox.Text,\n                    vatNumber: clientVatNumberTextBox.Text,\n                    email: clientEmailTextBox.Text\n                )\n            );\n\n            try\n            {\n                var result = clientsApi.CreateClient(companyId, newClient);\n                MessageBox.Show(\"Client save succesfully with id: \" + result.Data.Id.ToString());\n                clientNameTextBox.Text = String.Empty;\n                clientTaxCodeTextBox.Text = String.Empty;\n                clientVatNumberTextBox.Text = String.Empty;\n                clientEmailTextBox.Text = String.Empty;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show(ex.Message);\n            }\n        }\n    }\n}\n</code></pre> <p>:::danger STORE YOUR TOKENS SAFELY!</p> <p>In this QuickStart, as you can see the access token is hard coded, this is only for educational purposes, the OAuth access token and refresh token are sensitive data and should be saved securely on your database or in the AppConfig. Also, never share your Client Secret with third-party actors, or publish it on your frontend!</p> <p>:::</p> <p>The main methods are two:</p> <ul> <li>syncButton_Click: retrieves all the clients looping thru the pages of the paginated response and shows them into the DataGrid</li> <li>saveClient_Click: creates the client with the params specified in the TexBoxes</li> </ul>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/windows-form-quickstart/#step-three-run-the-sample","title":"Step Three: Run the sample","text":"<p>Now your Form should work like a charm.</p> <p>Let's create a new client:</p> <p></p> <p>and now we are going to see it by syncing in the list clients tab:</p> <p></p>","tags":["quickstarts","code example","c#","sdk","windows form"]},{"location":"stepbystep/quickstarts/zapier-quickstart/","title":"Zapier Quickstart","text":"<p>In this guide, we'll explain how to use Zapier to integrate TSE in Cloud with thousands of other services.</p> <p>:::danger Open Beta The Zapier integration is published but is still in the beta phase, please contact us if you experience some kind of issue using it. :::</p> <p>:::info Do you feel lost? If you need help with the usage of the Zapier integration, feel free to open a new Discussion in our Community!</p> <p>If instead you are experiencing a malfunctioning or you think that you found a bug in our integration, please check the Support Page! :::</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#what-is-zapier","title":"What is Zapier?","text":"<p>Zapier is a platform made to create automated workflows without the need to write a single line of code, all you will see is an intuitive drag-and-drop editor, here you can find the home page of the TSE in Cloud Zapier integration.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#in-which-cases-is-it-useful","title":"In which cases is it useful?","text":"<p>Zapier is a no-code workflow builder, and its main objective is to make automation available to non-technical people. It can help you building a workflow rapidly, without having to learn a programming language to do it.</p> <p>If you are a developer you can still use Zapier to build simple workflows rapidly, without having to take care of tedious tasks such as authentication and implementation of the API methods.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#open_book-base-concepts","title":":open_book:\u00a0 Base concepts","text":"<p>A Zapier workflow is called a Zap. Each Zap consists of a trigger and one or more actions. When you turn on your Zap, it will run the action steps every time the trigger event occurs.</p> <p>A trigger is an event that starts a Zap. For example, if you want to update an Excel file each time an invoice gets created, the trigger is \u2018new invoice created\u2019.</p> <p>An action is an event a Zap performs after it is triggered. For example, if you want to update an Excel file each time an invoice gets created, the action is 'Edit Excel Sheet\u2019.</p> <p>Let's get more into the specific details of the TSE in Cloud Zapier Integration.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#triggers","title":"Triggers","text":"<p>If you try to set up a TSE in Cloud trigger you will see that 2 triggers are available:</p> <ul> <li>Raw Trigger: this trigger makes available to the following actions only the IDs of the interested resources</li> <li>Enriched Trigger: this trigger makes available to the following actions the complete resource with all the fields</li> </ul> <p>So if you need to set up a trigger that sends an email to the customer when an invoice gets created it is enough the raw trigger (as you need only the ID to use the Schedule Email method), but if you need to sync an Excel sheet when an invoice gets created then you will need the enriched trigger (as you need the complete invoice body).</p> <p>:::warning Watch the limits! Keep in mind that the enriched trigger makes a get request under the hood to retrieve the resource body, so it will erode your API limits. :::</p> <p>:::info How do triggers work? The TSE in Cloud's Zapier Triggers are based on our Webhooks functionality. When you use a trigger, it creates a new subscription and starts listening to the notifications generated when something occurs on the resources. If you want more detail or you are just curious, you can check the dedicated pages (but you don't need to read them to use our triggers!). :::</p> <p>Let's create a trigger then:</p> <ul> <li>create a new Zap</li> <li>choose the TSE in Cloud app</li> <li>choose the Enriched Trigger</li> <li>login with TSE in Cloud if you haven't already</li> <li>select the type of trigger you need and select your company, in this example, we are setting up a trigger when a client gets created:</li> </ul> <p></p> <p>Now you can test the trigger, this test will retrieve a client (or a different type of resource, depending on the selected trigger type) directly from your TSE in Cloud account so you can test the following actions with real data, keep in mind that if you don't have any resource of the needed type in your account you will get an error.</p> <p>:::info Trigger availability Not every type of trigger is currently available, you can check here to see if the notification type you need is currently active. :::</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#running_man-actions","title":":running_man:\u00a0 Actions","text":"<p>To understand what Zapier Actions can do for you, first, you must understand how our APIs work.</p> <p>The TSE in Cloud APIs provide a wide set of methods that let you interact with your account's resources giving you full control over them, by providing the following standard operations:</p> <ul> <li>Get Methods: to read the current status of the resource</li> <li>Create Methods: to create a new resource</li> <li>Modify Methods: to update an existing resource</li> <li>Delete Methods: to delete an existing resource</li> </ul> <p>You can check the list of all the methods provided by our APIs in our API Reference.</p> <p>Every Zapier Action implements one of our API methods, making that method available to be used in your Zaps.</p> <p>In the following simple example, we'll show you how to modify a client's name using the Modify Client action.</p> <ul> <li>choose the event you need from the list of available methods, in this case, the \"modifyClient\" event</li> <li>login with TSE in Cloud if you haven't already</li> <li>select your company from the dropdown menu</li> <li>fill in the client ID and the fields you want to edit (in this case only the name):</li> </ul> <p></p> <p>Now you can test the action and see if it works as expected.</p> <p>:::info How can I know how to use an action?</p> <p>Since the Zapier Actions are just an implementation of our API Methods, they provide the same fields and perform the same behavior that you would obtain by using our APIs directly. So we suggest you check our Guides that illustrate how to use our APIs to perform the most common use cases. You just need to map the fields used in the guide to the related ones provided by the Zapier Action.</p> <p>If you still have some doubts, you can check our Support Page and ask for help.</p> <p>:::</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#turn-on-the-zap","title":"Turn on the Zap","text":"<p>At this point we created a Zap that for each client created on TSE in Cloud edits the name by adding \"- new name\", you can turn it on with the button at the top of the page and test the Zap by creating a client on the TSE in Cloud web application to see if the name gets modified.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#have-fun","title":"Have fun!","text":"<p>Probably the newly created Zap won't be useful in a real environment, but with Zapier you can create lots of useful workflows, for example, you could use the Create Issued Document action to create an invoice when an order on your Shopify store gets created, or when you receive a payment in your Stripe account, the possibilities are endless as Zapier supports 6000+ services at the moment and it's always adding more.</p>","tags":["zapier","no code","shopify","stripe"]},{"location":"stepbystep/quickstarts/zapier-quickstart/#additional-resources","title":"Additional resources","text":"<ul> <li>Zapier Platform</li> <li>Zapier key concepts</li> <li>Zapier apps</li> </ul>","tags":["zapier","no code","shopify","stripe"]},{"location":"support/","title":"Support & Feature Request","text":"<p>Do you need help? Do you have a beautiful idea you want to share? Here you can discover how to contact us!</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#feature-request","title":"Feature Request","text":"<p>If you need a functionality that we are not providing at the moment, you can give us suggestions by creating a post on our GitHub Discussions Page, explaining what you want to see implemented in our APIs and why it is a great idea. Remember to select the Ideas category to help us identify it faster!</p> <p>Before creating a new feature request please make sure you check out our roadmap and the other feature requests to make sure you are not duplicating another request or asking for functionality we have already planned to implement.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#technical-questions","title":"Technical questions","text":"<p>Are you having problems starting to integrate our APIs? Do you have some doubts about how to implement your specific use case?</p> <p>If you're a TSE in Cloud first-timer and you just need the first push to start using our APIs, you can check our Step-by-step and Quickstarts sections, which are dedicated to the first steps you must do to interact with our APIs.</p> <p>If, instead, you already started implementing an integration but you are stuck trying to resolve a problem, some other developer likely faced the same situation before. This is why we decided to collect the most common questions in the FAQs section, to rapidly resolve the issues that you'll probably encounter.</p> <p>Some use cases proved to be more complicated than others, so we decided to help our Developers Community by creating some ad-hoc guides. In our Guides Section, we try to explain how to perform complex operations in detail; for example, we prepared a detailed Create an Invoice guide where we illustrate all the steps required to create your first Issued Document... The TSE in Cloud core functionality!</p> <p>If you reached this point but still can't find what you need, then you can still try to contact us.</p> <p>If you think to have encountered a bug, or if you have some more complex question that requires you to share sensitive data with us, then you can check the paragraphs below. Otherwise, if you just need General Guidance, then feel free to use our GitHub Discussions Page, where you can ask for help from the TSE in Cloud Team and the rest of the Community! Just remember to select the Q&amp;A category and explain your needs and the problems you're facing in detail: think of this page as the TSE in Cloud's Stack Overflow!  Also, before opening a new discussion we suggest you check the already existing ones (remember to check also the Closed Discussions!) to check if the answer you're searching for is already available!</p> <p>:::danger Important!</p> <p>NEVER put sensitive data or tokens on the public GitHub Discussions page!!! Otherwise, we'll be obligated to delete your question. If you want to give us more detail, you can either publish fake data or contact our Customer Support.</p> <p>:::</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#construction_worker_man-sdk-bugs-and-improvements","title":":construction_worker_man:\u00a0 SDK bugs and improvements","text":"<p>If you think you found a bug in our SDKs, or you would like to require an improvement on a specific SDK, please feel free to open an issue on the GitHub repo of the specific SDK.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/#api-bugs-problems-and-user-specific-questions","title":"API bugs, problems, and user-specific questions","text":"<p>If you think you need to share your actual data with us, or if you think that you found a bug in our APIs, then we ask you to contact our customer support at the bottom of this page. This is a private discussion page, not visible to other developers, and you'll get in contact directly with the TSE in Cloud Team. Please, remember that this procedure will usually require more time than the Discussions page, so use it only if you think you have to.</p>","tags":["community","feature request","support","questions","problem","issue","bugs"]},{"location":"support/faq/","title":"FAQs","text":"<p>import Faq from  '@site/src/components/Faq/Faq';</p> <p>No, currently our APIs don't support the upload of XML, you can use the{\" \"}     Create Issued Document     this guide   for a more detailed explanation.</p> <pre><code>To start working with our APIs in a development environment, you can just\nuse a Manual Token. We created a more extensive{\" \"}\n  guide to the authentication method selection\nto help you choose the one that you'll use when going live.\n\nThe Company ID is a really important parameter for the TSE in Cloud APIs\nbecause it enables the user to use{\" \"}\n  Company-scoped methods.\nTo retrieve your Client ID, you can use the{\" \"}\n  List User Companies \n{\" \"}\nso you can retrieve it once and store it if needed. To check if the ID is correct,\nyou can try to use the {\" \"}\n  Get Company Info\nmethod to see if the correct result is returned.\n\n\nThis is our most common use case, so we prepared a dedicated\n  guide\nto explain how to create an invoice step by step.\n\ncontain the details of the client or the supplier, depending on the kind of\ndocument.\nWhen the client is not inserted in the clients list, only some of the details\nare stored and thus shown in the resulting document. The only way to show the\n  Create Client{\" \"}\nalso insert all the client's details that must be shown in the document while\n  Create Issued Document\n\nThe TSE in Cloud software makes some calculations, that could differ\nfrom yours because of the applied rounding. We prepared a{\" \"}\n  guide\nto explain all the possible solutions to this issue.\n\nEvery account has a potentially huge number of entities and documents, so we\nresults; to safeguard our systems it is not possible to deactivate\npagination, so it is important to manage it properly.\n  guide\n\nTo avoid generating huge responses containing a lot of unnecessary data, we\ndefine which fields must be returned. If you want to know more, you should\ncheck this{\" \"}\n  guide\ndescribing the functionality in detail.\n\nYes, we have a special parameter to avoid sending the e-invoice to the SDI\nwhile performing all the checks, you can find more info{\" \"}\n  here.\n\nthe best way to start using our APIs, and in most cases is more than\nsufficient even in production. Check the{\" \"}\n  App Visibility Guide\nfor more information.\n\nNo, you just need an HTTP Client. This makes it possible to use our APIs\neven if your programming language isn't currently supported, or if the SDK\nfor your language doesn't support the version you're using.\nOf course, we strongly suggest using our SDKs when possible because they speed\nup your development process.\nIf you still don't think our SDKs are the best solutions for you, you can\ncheck the{\" \"}\n  Vanilla Code Quickstart\nto help you getting started with some code examples.\n\nIt refers to a single item.\nLet's suppose to have a 'Red Funnel' item.\nIf we create an invoice containing the Red Funnel with:\n\nTo create a ddt you have to use the{\" \"}\n  Create Issued Document method\n  create an issued document\n\nWe suggest creating a new TSE in Cloud account and company for your\ndevelopment team. Check the following link for more info:{\" \"}\n  Developer Account\n\n    A self invoice (autofattura) is a special type of issued document, there are 2 types of\n    them:{\" \"}\n    You will also need to set the ei_raw according to the type of autofattura\n    that you want to create, below you can find an example.\n    ```json\n    {\n        \"ei_raw\": {\n            \"FatturaElettronicaBody\": {\n                \"DatiGenerali\": {\n                    \"DatiGeneraliDocumento\": {\n                        \"TipoDocumento\": \"TD18\"\n                    }\n                }\n            },\n            \"FatturaElettronicaHeader\": {\n                \"CedentePrestatore\": {\n                    \"DatiAnagrafici\": {\n                        \"RegimeFiscale\": \"RF01\"\n                    }\n                }\n            }\n        }\n    }\n    ```\n</code></pre>","tags":["faqs","questions","help","support"]},{"location":"support/general-knowledge/","title":"General Knowledge","text":"<p>import DocCardList from '@theme/DocCardList'; import {useCurrentSidebarCategory} from '@docusaurus/theme-common';</p> <p>If you need to brush up your knowledge of the general concepts described in this documentation, we wrote some pages for you.</p>","tags":["general knowledge","beginner","concepts"]},{"location":"support/general-knowledge/oauth2/","title":"OAuth 2.0","text":"<p>OAuth 2.0 is the industry-standard protocol for authorization and it was developed to provide a universal way to secure communication between different services. The standard provides guidelines to build the authentication service but leaves many decisions to the implementers. Nevertheless, most of the web services that do implement OAuth 2.0 for their API come to many of the same decisions, and so most of the implementations look very similar.</p> <p>In this brief guide, we are going to illustrate the basic concepts of the standard, it should contain all you need to know about OAuth 2.0! \ud83d\ude01</p> <p>A detailed description of our implementations of the OAuth 2.0 flows is available here:</p> <ul> <li>OAuth 2.0 Authorization Code Flow</li> <li>OAuth 2.0 Device Code Flow</li> </ul> <p>:::info Do I need to read this?</p> <p>Despite this mini-guide being optional and not necessary to use our API, we recommend reading it as it clarifies many concepts of the protocol that you will encounter very often.</p> <p>:::</p> <p>In the following sections, you can find a concise description of the fundamentals of the OAuth 2.0 protocol that will help you to understand some concepts widely used in our documentation. If you want to further investigate the OAuth 2.0 standard, feel free to check out the Additional Resources section, where we collected a lot of useful resources that should help you to fulfill your thirst for learning! \ud83d\ude0c</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#whos-joining-the-party","title":"Who\u2019s joining the party?","text":"<p>Let\u2019s start by introducing the subjects that take part in the authentication process:</p> <p>First of all, we have the app that you developed, which we\u2019re going to name Client Application. It\u2019s the applicant who wants to access the user\u2019s data.</p> <p>This allows us to introduce the second subject, the End-User. He\u2019s the owner of the data you want to access, and we need his authorization to do so.</p> <p>The user\u2019s data in this case are stored in TSE in Cloud\u2019s server, which we\u2019re going to name Resource Server. To access this data we need a token, a string that acts as permission to ask the Resource Server to provide us the information we need.</p> <p>The token will be provided to us by the last subject, the Authorization Server. This can be a separate entity from the Resource Server, but in our implementation, they are technically the same. For the purpose of this guide though, we will assume that they are two separate entities.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#wait-a-minute-what-are-tokens","title":"Wait a minute, what are tokens?","text":"<p>Tokens are like keys, they allow the possessor to perform certain operations. There are two main types of tokens:</p> <ol> <li>The Access Token is the final token the Client Application will use to request data to the Resource Server. It expires, so it is required to request a new access token to continue using the APIs.</li> <li>When an Access Token expires, you don\u2019t need to redo the whole process again. The Refresh Token allows the Client Application to request a new Access Token directly to the Authorization Server. It can also expire, but its expiration time is usually much larger with respect to the Access Token.</li> </ol> <p>When also the Refresh Token expires, you need to re-execute the Authorization flow to obtain new tokens.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#oauth-20-flows-overview","title":"OAuth 2.0 flows overview","text":"<p>OAuth 2.0 specifies several Flows that can be used to retrieve those tokens. Each one of them is specialized for a different use case:</p> <ul> <li>Implicit Flow</li> <li>\u00a0 Authorization Code Flow</li> <li>Client Credential Flow</li> <li>Resource Owner Password Flow</li> <li>Assertion Flow</li> <li>\u00a0 Device Authorization Flow</li> </ul> <p>Currently, the TSE in Cloud API supports the Authorization Code Flow and Device Authorization Flow.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#authorization-code-flow","title":"Authorization Code Flow","text":"<p>The Authorization Code Flow is the most common of the OAuth 2.0 grant types. Like the other flows, it describes how the application can retrieve the token required to interact with the APIs.</p> <p>:::info Wanna get technical?</p> <p>Our implementation of this flow can be found here.</p> <p>:::</p> <p>At a high level, the flow can be divided into the following steps:</p> <ol> <li>The End-User wants to use the Client Application.</li> <li>The Client Application wants to access the user\u2019s data, so it contacts the Authorization Server to get permission.</li> <li>The Authorization Server asks the End-User whether to grant the requested permissions to the Client Application.</li> <li>If the End-User approves the request, the Authorization Server redirects him to the Client Application with an Authorization Code in the query string.</li> <li>The Client Application contacts the Authorization Server to exchange the Authorization Code with an Access Token. In addition to the Access Token, the Authorization Server will provide a Refresh Token.</li> <li>The Client Application uses the received tokens to access the user's data.</li> </ol> <p>As you can see, the Authorization Code flow introduces a new token called Authorization code. It is a short-living one-time use token generated by the Authorization Server, and its only purpose is to be exchanged for an Access Token.</p> <p>Since the Authorization Code Grant requires the exchange of the Authorization Code for the Access Token, it provides an additional layer of security not present in other grant types. The code exchange step ensures that an attacker isn\u2019t able to intercept the Access Token, given that the Access Token is always sent via a secure backchannel between the Client Application and the Authorization Server.</p> <p>The authorization step is performed directly by the End-User on a page provided by the Authorization Server, so the application needs to expose a Redirect Endpoint that will be used by the Authorization Server to send the Authorization code.</p>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#device-code-flow","title":"Device Code Flow","text":"<p>The Device Code Flow is an authorization process designed explicitly for browserless and input-constrained devices such as smart TVs, media consoles, picture frames, printers, or hardware video encoders. It can be also used for use cases where the Client cannot safely store a secret (making it impossible to use the Authorization Code Flow), such as CRM plugins or pure frontend applications.</p> <p>:::warning Wait a minute!</p> <p>To enable this flow for your application, you have to contact us! We would like to know why you want to use the Device Authorization flow before activating it.</p> <p>:::</p> <p>The Device Code Flow tries to overcome the restrictions that affect the Client Application by asking the End User to manually access a web page, where the authentication and authorization steps will be performed; this second device will usually be a PC or another device browser-provided, where the End User will be able to open the page and perform the requested operations easily.</p> <p>We can then split the Device Code Flow into two different paths, one for the device where the Client Application is running (named \"Device Flow\") and one for the secondary device (named \"Browser Flow\"); the two flows will be executed parallelly until the End-User authorization will be provided.</p> <p>The Device Flow is executed on the device where the Client App is running, e.g. the device with the restrictions mentioned above.</p> <p>The steps are the following:</p> <ol> <li>The End-User wants to use the Client Application.</li> <li>The Client Application wants to access the user\u2019s data, so it contacts the Authorization Server to get permission.</li> <li>The Authorization Server sends a verification URL and a code to the Client Application, which displays them to the End-User.</li> <li>The Client Application starts polling the Authorization Server for the authorization result. This process continues until the End-User approves the request.</li> <li>The first Client Application's check following the End-User approval will be successful, and the Authorization Server will provide the Access Token and Refresh Token to the user.</li> <li>The Client Application uses the received tokens to access the user's data.</li> </ol> <p>The Browser Flow will be executed manually by the user on a secondary device of his choice, and it can be placed between steps 3 and 5 of the Device Flow:</p> <ol> <li>The End User will open the verification page, writing the verification URL on a secondary device of his choice.</li> <li>The page will require the End User to insert the code and to give permissions to the Client Application to perform the operations on the API</li> </ol>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/oauth2/#additional-resources","title":"Additional Resources","text":"<ul> <li>What the Heck is OAuth?</li> <li>Which OAuth 2.0 Flow should I use</li> <li>Authorization Code Flow</li> <li>Authorization Code Grant</li> <li>Authorization Code Flow</li> <li>What is the OAuth 2.0 Authorization Code Grant Type?</li> <li>Specification</li> <li>Device Code Flow</li> <li>Device Authorization Grant</li> <li>Device Authorization Flow</li> <li>OAuth 2.0 Device Flow Grant</li> <li>Specification</li> <li>The Simplest Guide To OAuth 2.0</li> <li>Wikipedia</li> <li>OAuth 2.0 Simplified</li> </ul>","tags":["general knowledge","beginner","concepts","oauth"]},{"location":"support/general-knowledge/openapi-specification/","title":"OpenAPI Specification","text":"<p>The TSE in Cloud OpenAPI specification is a YAML document, respecting the OpenAPI Specification. It is a complete description of the TSE in Cloud API, where all the details about our API are described: it lists the methods and models, the available scopes, and the authentication methods. For its nature, it is a great source of information about our API, and it can be already useful as-it-is.</p> <p>:::info REST API &amp; OpenAPI</p> <p>To discover the relationship between OpenAPI and REST APIs, you can check this video.</p> <p>::: We use our OpenAPI specification for these purposes:  - As a documentation source  - To automatically populate the API reference section of this documentation  - To generate our SDKs </p>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/openapi-specification/#how-can-i-use-your-openapi-specification","title":"How can I use your OpenAPI Specification?","text":"<p>There are many OpenAPI tools available (here you can find a useful list).</p> <p>To create our SDKs we use the OpenAPI Generator, but you can use any of the other available generators. Just remember that if you'll use our same generator it will be easier for you to switch from your custom code to our SDK when your language will be officially supported.</p> <p>For some languages, it is also possible to find self-generating libraries that accept a YAML definition as input and automatically provide the methods to access the API (for example this one).</p>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/openapi-specification/#additional-resources","title":"Additional Resources","text":"<ul> <li>The OpenAPI initiative </li> <li>The latest version of the OpenAPI Specification</li> <li>OpenAPI Specification Repository</li> <li>OpenAPI on Wikipedia</li> <li>YAML </li> <li>OpenAPI.Tools</li> <li>OpenAPI Generator</li> </ul>","tags":["openapi","specification","generator","swagger","documentation","reference"]},{"location":"support/general-knowledge/principle-of-least-privilege/","title":"Principle of Least Privilege","text":"<p>The Principle of Least Privilege refers to an information security concept where only the minimum necessary rights should be assigned to a subject that requests access to a resource.</p> <p>Granting permissions to an access token beyond the scope of the necessary rights of an action can allow an attacker who manages to steal the token to obtain or change information in unwanted ways. Therefore, careful delegation of access rights can limit attackers to manipulate data.</p> <p>Our APIs adopt the scopes system, the application owner chooses which scopes are needed for the app to run properly and the users will be prompted to allow the requested permissions. Every resource has its own scope that could be either read-only or full write access, make sure to require the least amount of scopes possible for the correct functioning of your app, selecting as few permissions as possible.</p> <p>:::danger DO NOT REQUIRE ALL THE SCOPES We know it's easier to just require all the possible scopes in write access and not have to think about what's the lowest configuration of privileges that can be asked to the user, but we kindly ask you not to do that, in most of the cases in fact only 3-4 scopes are actually needed to use an application. :::</p>","tags":["general knowledge","privileges","beginner","concepts","scopes"]},{"location":"support/general-knowledge/rest-apis/","title":"REST APIs","text":"<p>An Application Programming Interface, or API, is a type of software interface, offering a service to other pieces of software. Developing a public API means making it possible for external systems to integrate the exposed services into their own, with advantages for both sides.</p> <p>REST stands for REpresentational State Transfer and is an architectural style; when the principles of REST are respected by a Web API then it can be called RESTful API.</p> <p>:::info Do you prefer a video?</p> <p>Here you can find an interesting video about REST APIs.</p> <p>:::</p> <p>REST consists of six guiding principles, you can find a description below.</p> <p>:::warning This is a theoretical description of REST</p> <p>The TSE in Cloud API loosely applies the principles described on this page.</p> <p>:::</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#uniform-interface","title":"Uniform Interface","text":"<p>A Uniform Interface helps simplify and decouple the system architecture.</p> <p>The following constraints make it possible to achieve a uniform REST interface:</p> <ul> <li>Identification of resources: practically, it means that URIs must be used to uniquely identify uniform resources (see below for further information). \"Uniform resources\" means that the resources interfaces must be standardized and decoupled from the server's implementation of the resource itself (for example using JSON for their representation, while the resource is stored in a database).</li> <li>Manipulation of resources through representation: HTTP verbs are used to create, update and delete resources. Also, if a client knows the representation of a resource it possesses all the information needed to manipulate the resource.</li> <li>Self-descriptive messaged: Each resource representation should carry enough information to describe how to process the message (for example, using Media-Type).</li> <li>Hypermedia as the engine of application state (HATEOAS): The client should be aware only of the initial URI for the REST application, and it should be able to discover all the other available resources using the URIs provided by the application itself. For example, a resource should contain links to correlated resources.</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#client-server","title":"Client-server","text":"<p>The client-server design pattern enforces the principle of separation of concerns: separating the user interface concerns from the data storage concerns. This principle improves the portability of the interface across multiple platforms and the scalability by simplifying the server components.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#stateless","title":"Stateless","text":"<p>The communication must be stateless: each request from the client must contain all of the information necessary to understand and complete the request, and the session is stored completely on the client.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#cacheable","title":"Cacheable","text":"<p>A response should implicitly or explicitly label itself as cacheable or non-cacheable. If a response is cacheable, the client has the right to reuse it later for equivalent requests.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#layered-system","title":"Layered System","text":"<p>An architecture can be composed of hierarchical layers by constraining component behavior. It means that each component cannot see beyond the immediate layer they are interacting with; also, it makes it possible to interact with a system using its standardized interfaces without knowing its actual implementation (for example it could be a legacy application).</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#code-on-demand-optional","title":"Code-on-demand (optional)","text":"<p>The client could extend its functionality by downloading code provided by the server in the form of applets or scripts. This makes it possible to reduce the client complexity: some features will not be implemented by the client itself but provided by the server, while the client will just have to execute the code. At the same time, this makes it possible for the server to delegate some of the processing efforts to the client.</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#resources","title":"Resources","text":"<p>Any information that we can name can be a resource. For example, a REST resource can be a document or image, a temporal service, a collection of other resources, or a non-virtual object (e.g., a person).</p> <p>The state of the resource, at any particular time, is known as the resource representation. It consists of:</p> <ul> <li>the data.</li> <li>the metadata describing the data.</li> <li>the hypermedia link that can help the client in transition to the next desired state.</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#interface-representation","title":"Interface representation","text":"<p>REST doesn't define an Interface Definition Language, but many have been proposed during the years. The Open API Specification (OAS) is the most used, but some others are available like API Blueprint or RAML.</p> <p>:::info We use OpenAPI!</p> <p>We described our API using an OpenAPI specification. For more information, check this page.</p> <p>:::</p>","tags":["general knowledge","beginner","concepts","rest"]},{"location":"support/general-knowledge/rest-apis/#additional-resources","title":"Additional Resources","text":"<ul> <li>What is REST</li> <li>REST on Wikipedia</li> <li>What is an application programming interface (API)?</li> <li>HTTP methods on REST APIs</li> <li>HTTP methods</li> <li>POST vs PUT</li> <li>OpenAPI</li> <li>API Blueprint</li> <li>RAML</li> </ul>","tags":["general knowledge","beginner","concepts","rest"]}]}